{"code": "# https://codeforces.com/contest/883/problem/K\n# WA\nimport heapq\nfrom heapq import heappush as push_\nfrom heapq import heappop  as pop_\n\nn  =  int(input())\np  =  [list(map(int, input().split())) for _ in range(n)] \nQ  =  []\nd  =  [s+g for s, g in p]\n\nfor i, [s, g] in enumerate(p):\n    push_(Q, (s+g, i))\n    \nflg = True\nwhile len(Q) > 0:\n    S, ind = pop_(Q)\n    \n    if S > d[ind]:\n        continue\n    \n    if ind > 0 and d[ind-1] > S+1:\n        if S+1 < p[ind-1][0]:\n            flg=False\n            break\n            \n        d[ind-1]  = S+1\n        push_(Q, (d[ind-1], ind-1))\n        \n    if ind < n-1 and d[ind+1] > S+1:\n        if S+1 < p[ind+1][0]:\n            flg=False\n            break\n            \n        d[ind+1]  = S+1\n        push_(Q, (d[ind+1], ind+1))    \n    \nif flg==False:\n    print(-1)\nelse:\n    print(sum([d[i]-p[i][0] for i in range(n)]))\n    print(' '.join([str(x) for x in d]))\n    \n#3\n#4 5\n#4 5\n#4 10       \n\n#4\n#1 100\n#100 1\n#1 100\n#100 1\n\n#3\n#1 1\n#100 100\n#1 1\n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "# Input:\ns = input()\nt = input()\n\n# Find the number of 0s and 1s in s.\nn0 = s.count('0')\nn1 = s.count('1')\n\n# Check if the number of 0s and 1s in s is not the same as in t.\nif n0 != t.count('0') or n1 != t.count('1'):\n    print('No solution')\n\n# Otherwise, find the longest common substring of s and t.\nelse:\n    # Initialize the longest common substring to an empty string.\n    lcs = ''\n\n    # Iterate through all possible substrings of s.\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            # Check if the current substring is a common substring of s and t.\n            if s[i:j] in t and len(s[i:j]) > len(lcs):\n                lcs = s[i:j]\n\n    # Check if the longest common substring is not found.\n    if lcs == '':\n        print('No solution')\n\n    # Otherwise, rearrange the schedule according to the longest common substring.\n    else:\n        schedule = ''\n\n        # Repeat the longest common substring until the number of 0s and 1s matches.\n        while n0 > 0 or n1 > 0:\n            for c in lcs:\n                schedule += c\n                if c == '0':\n                    n0 -= 1\n                else:\n                    n1 -= 1\n\n        print(schedule)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "def solve(m, n):\n    # Initialize the answer as a variable to store the expected maximum number of dots\n    answer = 0\n\n    # Iterate over the faces of the dice from 1 to m\n    for i in range(1, m + 1):\n        # Calculate the probability of getting the current face\n        probability = 1 / m\n\n        # Calculate the expected maximum number of dots after tossing the dice n times\n        expected_max = (i * (1 - (1 - probability) ** n))\n\n        # Add the expected maximum to the answer\n        answer += expected_max\n\n    return answer\n\n\n# Get the input from the user\nm, n = map(int, input().split())\n\n# Call the solve function and print the result\nprint(solve(m, n))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "#Input\nn = int(input())\na = list(map(int, input().split()))\n\n# Initialize the graph\ngraph = {}\nfor i in range(n):\n    graph[i] = []\n\n# Find the cycles\nfor i in range(n):\n    for j in range(i+1, n):\n        if (a[i] & a[j]) != 0:\n            graph[i].append(j)\n            graph[j].append(i)\n\n# Function to find the shortest cycle\ndef dfs(v, visited, length):\n    global shortest_cycle\n    visited[v] = True\n    for u in graph[v]:\n        if not visited[u]:\n            dfs(u, visited, length + 1)\n        else:\n            if length + 1 < shortest_cycle:\n                shortest_cycle = length + 1\n\n# Find the shortest cycle\nshortest_cycle = float('inf')\nfor i in range(n):\n    visited = [False] * n\n    dfs(i, visited, 0)\n\n# Output\nif shortest_cycle == float('inf'):\n    print(-1)\nelse:\n    print(shortest_cycle)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "# Input:\nA, B = map(int, input().split())\n\n# Output:\nprint(3, 3)\nprint('##.')\nprint('..#')\nprint('#.#')", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "f = lambda: list(map(int, input().split()))\nn = int(input())\na, b = f(), f()\n\nd = [[None] * 10001 for i in range(n)]\n\ndef g(i, s):\n    if s <= 0: return (0, s)\n    if i == n: return (1e7, 0)\n\n    if not d[i][s]:\n        x, y = g(i + 1, s - b[i])\n        d[i][s] = min(g(i + 1, s), (x + 1, y + b[i] - a[i]))\n    return d[i][s]\n\nx, y = g(0, sum(a))\nprint(x, y)", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "(n,m) = (int(i) for i in input().split())\ntbl = []\nfor i in range(n):\n\tcrstr = [int(j) for j in input().split()]\n\ttbl.append(crstr)\ntrue=0\n\n\ndef prt():\n\tfor xx in range(n):\n\t\tfor yy in range(m):\n\t\t\tprint(tbl[xx][yy], end='\t')\n\t\tprint()\n\tprint()\n\tprint()\n\n# prt()\ndef lines():\n\trows = []\n\tfor i in range(n):\n\t\twhile 1:\n\t\t\tmay = 1\n\t\t\tfor j in range(m):\n\t\t\t\tif tbl[i][j]==0:\n\t\t\t\t\tfor k in range(j):\n\t\t\t\t\t\ttbl[i][k]+=1\n\t\t\t\t\tmay = 0\n\t\t\t\t\tbreak\n\t\t\t\ttbl[i][j]-=1\n\t\t\tif not may: break\n\t\t\trows.append(i+1)\n\t\t# prt()\n\treturn rows\n\ndef cols():\n\tstolbs = []\n\tfor i in range(m):\n\t\twhile 1:\n\t\t\tmay = 1\n\t\t\tfor j in range(n):\n\t\t\t\tif tbl[j][i]==0:\n\t\t\t\t\tfor k in range(j):\n\t\t\t\t\t\ttbl[k][i]+=1\n\t\t\t\t\tmay = 0\n\t\t\t\t\tbreak\n\t\t\t\ttbl[j][i]-=1\n\t\t\tif not may: break\n\t\t\tstolbs.append(i+1)\n\t\t# prt()\n\treturn stolbs\n\nif m>n:\n\tl = lines()\n\tc = cols()\nelse:\n\tc = cols()\n\tl = lines()\n\nbr = 0\nfor i in range(n):\n\tfor j in range(m):\n\t\tif tbl[i][j]!=0:\n\t\t\tbr = 1\n\t\t\tbreak\n\tif br: break\nif br:\n\tprint(-1)\nelse:\n\tprint(len(l)+len(c))\n\tfor i in l:\n\t\tprint('row', i)\n\tfor i in c:\n\t\tprint('col', i)\n\n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "n,l,v1,v2,k=list(map(int,input().split()))\n\nn=(n+k-1)//k\n\na=(v2-v1)/(v1+v2)\n\nt=l/v2/(n-(n-1)*a)\n\nprint(n*t+(n-1)*a*t)\n\n\n\n# Made By Mostafa_Khaled\n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "s = input()\nans = 0\nfor i, c in enumerate(s):\n    if c == '1':\n        ans += 1 << (2 * len(s) - i - 2)\nprint(ans % (10 ** 9 + 7))", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "# Importing necessary libraries\nimport math\nimport sys\n\n# Function to find the greatest common divisor (gcd) of two numbers\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\n# Function to find the greatest common divisor (gcd) of a list of numbers\ndef gcd_list(numbers):\n    return reduce(gcd, numbers)\n\n# Function to find the maximum number of Pokemon that Bash can take\ndef maximum_pokemon(strengths):\n    # Initialize the maximum number of Pokemon\n    max_pokemon = 0\n\n    # Iterate through all possible subsets of Pokemon strengths\n    for i in range(len(strengths)):\n        for j in range(i + 1, len(strengths) + 1):\n            # Get the current subset of Pokemon strengths\n            current_subset = strengths[i:j]\n\n            # Check if the gcd of the current subset is 1\n            if gcd_list(current_subset) == 1:\n                # Update the maximum number of Pokemon if the current subset is larger\n                max_pokemon = max(max_pokemon, len(current_subset))\n\n    return max_pokemon\n\n# Read the input\nn = int(input())\nstrengths = list(map(int, input().split()))\n\n# Find and print the maximum number of Pokemon Bash can take\nmax_pokemon = maximum_pokemon(strengths)\nprint(max_pokemon)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "def solve(n, m):\n    # Calculate the number of digits required to display the hours and minutes\n    digits_hours = len(str(n - 1))\n    digits_minutes = len(str(m - 1))\n\n    # Create a list to store the possible combinations of digits for hours and minutes\n    combinations = []\n\n    # Iterate through all possible combinations of hours and minutes\n    for hour in range(n):\n        for minute in range(m):\n            # Convert the hours and minutes to base 7\n            base7_hour = str(int(str(hour), 7))\n            base7_minute = str(int(str(minute), 7))\n\n            # Pad the hours and minutes with zeroes to match the number of digits\n            base7_hour = base7_hour.zfill(digits_hours)\n            base7_minute = base7_minute.zfill(digits_minutes)\n\n            # Create a set of digits used in the current combination\n            combination = set(base7_hour + base7_minute)\n\n            # If the combination is unique, add it to the list\n            if combination not in combinations:\n                combinations.append(combination)\n\n    # Return the number of unique combinations\n    return len(combinations)\n\n# Read the input\nn, m = map(int, input().split())\n\n# Calculate and print the result\nresult = solve(n, m)\nprint(result)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "import sys\nimport collections as cc\ninput = sys.stdin.readline\nn,m=list(map(int,input().split()))\nar=[list(input().strip()) for i in range(n)]\nq=cc.deque()\nq.append([0,0])\nwhile q:\n    x,y=q.pop()\n    if x+1<n and ar[x+1][y]==\".\":\n        ar[x+1][y]=1\n        q.append([x+1,y])\n    if y+1<m and ar[x][y+1]==\".\":\n        ar[x][y+1]=1\n        q.append([x,y+1])\n \nq=cc.deque()\nq.append([n-1,m-1])\n#print(ar)\nwhile q:\n\tx,y=q.pop()\n\tif x-1>=0 and ar[x-1][y]==1:\n\t\tar[x-1][y]=0\n\t\tq.append([x-1,y])\n\tif y-1>=0 and ar[x][y-1]==1:\n\t\tar[x][y-1]=0\n\t\tq.append([x,y-1])\nif ar[n-1][m-1]!=1:\n\tprint(0)\nelse:\n\t#print(ar)\n\tans=[0]*(n+m+10)\n\tfor i in range(n):\n\t\tfor j in range(m):\n\t\t\tif ar[i][j]==0:\n\t\t\t\tans[i+j]+=1\n\tif 1 in ans:\n\t\tprint(1)\n\telse:\n\t\tprint(2)\n\n\n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "n = int(input())\ns = int(input())\n\ndef f(b, n):\n    val = 0\n    while n > 0:\n        val += n % b\n        n //= b\n    return val\n\nif s == n:\n    print(n+1)\n    return\nfor i in range(2, int(n**0.5) + 1):\n    if(f(i, n) == s):\n        print(i)\n        return\nans = 10**15\nfor i in range(1, int(n**0.5) + 1):\n    b = (n-s) // i + 1\n    if b < 2:\n        continue\n    if f(b, n) == s:\n        ans = min(ans, b)\n\nif ans == 10**15:\n    print(-1)\nelse:\n    print(ans)", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "# Get the input\nn = int(input())\narr = list(map(int, input().split()))\n\n# Initialize the sum of the elements\nsum_elements = 0\n\n# Calculate the sum of the elements\nfor element in arr:\n    sum_elements += element\n\n# Check if the sum is positive or negative\nif sum_elements > 0:\n    # If the sum is positive, the maximum sum is obtained by changing the sign of the first n elements\n    print(sum_elements - 2 * sum(arr[:n]))\nelse:\n    # If the sum is negative, the maximum sum is obtained by not changing the sign of any element\n    print(sum_elements)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "def solve(x1, y1, x2, y2):\n    dx = abs(x1 - x2)\n    dy = abs(y1 - y2)\n    return 2 * (dx + dy) - 1\n\n\nn = int(input())\n\nfor i in range(n):\n    x1, y1 = map(int, input().split())\n    x2, y2 = map(int, input().split())\n    print(solve(x1, y1, x2, y2))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "x0, y0, A, C, B, D = list(map(int, input().split()))\n\npts = [[x0, y0]]\nfor i in range(100):\n\tnx, ny = [pts[-1][0] * A + B, pts[-1][1] * C + D]\n\tpts.append([nx, ny])\n\tif max(nx, ny) > 10000000000000000 * 10000000000000000: break\n\n\nx, y, t = list(map(int, input().split()))\n# print (pts[0])\n# print (pts[1])\n# print (pts[2])\n# print (pts[3])\n_max = 0\nfor i in range(len(pts)):\n\tfor j in range(len(pts)):\n\t\tif abs(pts[i][0] - pts[j][0]) + abs(pts[i][1] - pts[j][1]) + abs(x - pts[i][0]) + abs(y - pts[i][1]) <= t:\n\t\t\t_max = max(_max, abs(i - j) + 1)\nprint(_max)\n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "# Python 3 code to solve the problem\n\n# Function to find the missing numbers in the multiplication table\ndef restore_multiplication_table(n, table):\n    # Initialize the array of missing numbers\n    a = [0] * n\n\n    # Restore the first row of the multiplication table\n    for j in range(1, n):\n        # Initialize the sum of all elements in the first row\n        sum_of_elements = 0\n\n        # Calculate the sum of all elements in the first row\n        for i in range(n):\n            sum_of_elements += table[i][j]\n\n        # Divide the sum by the number of elements in the first row\n        a[j] = sum_of_elements // n\n\n    # Restore the first column of the multiplication table\n    for i in range(1, n):\n        # Initialize the sum of all elements in the first column\n        sum_of_elements = 0\n\n        # Calculate the sum of all elements in the first column\n        for j in range(n):\n            sum_of_elements += table[i][j]\n\n        # Divide the sum by the number of elements in the first column\n        a[i] = sum_of_elements // n\n\n    return a\n\n# Driver Code\nif __name__ == '__main__':\n    # Take the input for the size of the table\n    n = int(input())\n\n    # Initialize the table\n    table = []\n\n    # Take the input for each row of the table\n    for i in range(n):\n        row = list(map(int, input().split()))\n        table.append(row)\n\n    # Find and print the missing numbers in the multiplication table\n    a = restore_multiplication_table(n, table)\n    print(*a)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "n = int(input())\n\na = list(map(int, input().split()))\n\nc = list(map(abs, a))\n\nif len(list(filter(lambda x: x < 0, a))) & 1 and n + 1 & 1:\n\n  print(sum(c) - 2 * min(c))\n\nelse:\n\n  print(sum(c))", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nstack = ['#']\nfor c in input():\n    if stack[-1] == c:\n        stack.pop()\n    else:\n        stack.append(c)\n\nstack.pop()\nprint(\"No\" if len(stack) else \"Yes\")\n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "# Input: n, a, d\n# Output: b, e\n\nn, a, d = map(int, input().split())\n\ndef fibonacci(n):\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibonacci(n - 1) + fibonacci(n - 2)\n\nfor b in range(2**64):\n    for e in range(2**64):\n        found = True\n        for i in range(n):\n            if str(a + i * d)[-18:] not in str(fibonacci(b + i * e))[-18:]:\n                found = False\n                break\n        if found:\n            print(b, e)\n            exit(0)\n\nprint(-1)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "a=[0,4,10,20,35,56,83,116,155,198,244]\nb=292\nn=int(input())\nif n<=10:\n\tprint(a[n])\nelse:\n\tprint(b+(n-11)*49)", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "from collections import deque\n\ndef solve(n):\n    # Initialize the graph\n    graph = {}\n    for i in range(-n, n+1):\n        for j in range(-n, n+1):\n            graph[(i, j)] = []\n\n    # Add edges between 4-connected points\n    for i in range(-n, n+1):\n        for j in range(-n, n+1):\n            for x, y in [(i-1, j), (i+1, j), (i, j-1), (i, j+1)]:\n                if -n <= x <= n and -n <= y <= n:\n                    graph[(i, j)].append((x, y))\n\n    # Initialize the visited set and queue\n    visited = set()\n    queue = deque()\n\n    # Add the origin to the queue\n    queue.append((0, 0))\n    visited.add((0, 0))\n\n    # Perform a Breadth-First Search (BFS) to find all the special points\n    while queue:\n        x, y = queue.popleft()\n        for neighbor in graph[(x, y)]:\n            if neighbor not in visited:\n                queue.append(neighbor)\n                visited.add(neighbor)\n\n    # Return the number of points to block\n    return len(graph) - len(visited)\n\n# Read the input\nn = int(input())\n\n# Call the solve function and print the result\nprint(solve(n))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "# input\nn, m = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\n# find the shortest path from every station to every other station\ndist = [[float('inf')] * n for _ in range(n)]\nfor i in range(n): dist[i][i] = 0\nfor i in range(m): dist[a[i] - 1][b[i] - 1] = 1\nfor k in range(n):\n    for i in range(n):\n        for j in range(n):\n            dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n\n# compute the minimum time needed for each station\nans = [0] * n\nfor i in range(n):\n    for j in range(n):\n        ans[i] = max(ans[i], dist[i][j])\n\n# output\nprint(*ans)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "# Define the function to get the maximum influence\ndef get_max_influence(spectators, n):\n    # Sort the spectators based on their influence in descending order\n    sorted_spectators = sorted(spectators, key=lambda x: x[1], reverse=True)\n    \n    # Initialize variables to track the maximum influence, number of supporters of Alice and Bob, and the current index\n    max_influence = 0\n    alice_count = 0\n    bob_count = 0\n    current_index = 0\n    \n    # Iterate through the sorted spectators\n    while alice_count < n / 2 or bob_count < n / 2:\n        # Get the current spectator\n        current_spectator = sorted_spectators[current_index]\n        \n        # Check if the current spectator supports Alice\n        if current_spectator[0] == \"11\" or current_spectator[0] == \"10\":\n            alice_count += 1\n        \n        # Check if the current spectator supports Bob\n        if current_spectator[0] == \"11\" or current_spectator[0] == \"01\":\n            bob_count += 1\n        \n        # Update the maximum influence\n        max_influence += current_spectator[1]\n        \n        # Increment the current index\n        current_index += 1\n    \n    # Return the maximum influence\n    return max_influence\n\n# Read the input\nn = int(input())\nspectators = []\nfor _ in range(n):\n    s, a = input().split()\n    a = int(a)\n    spectators.append((s, a))\n\n# Calculate the maximum influence\nmax_influence = get_max_influence(spectators, n)\n\n# Print the result\nprint(max_influence)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "from collections import deque\n\n\ndef check_bfs_order(n, edges, order):\n    # Create an adjacency list to store the edges.\n    graph = [[] for _ in range(n + 1)]\n\n    # Add the edges to the adjacency list.\n    for edge in edges:\n        graph[edge[0]].append(edge[1])\n        graph[edge[1]].append(edge[0])\n\n    # Initialize a queue and mark all nodes as unvisited.\n    queue = deque([1])\n    visited = [False] * (n + 1)\n\n    # Initialize an index to keep track of the order.\n    index = 0\n\n    # Perform the BFS traversal.\n    while queue:\n        # Extract the current vertex from the queue.\n        current = queue.popleft()\n\n        # Check if the current vertex matches the next element in the order.\n        if current != order[index]:\n            return False\n\n        # Increment the index.\n        index += 1\n\n        # Mark the current vertex as visited.\n        visited[current] = True\n\n        # Iterate through all neighbors of the current vertex.\n        for neighbor in graph[current]:\n            # If the neighbor is not visited, add it to the queue.\n            if not visited[neighbor]:\n                queue.append(neighbor)\n\n    # Check if all vertices have been visited.\n    if index != n:\n        return False\n\n    return True\n\n\n# Main function to run the program.\ndef main():\n    # Read the number of nodes in the tree.\n    n = int(input())\n\n    # Initialize the edges list.\n    edges = []\n\n    # Read the edges of the tree.\n    for _ in range(n - 1):\n        x, y = map(int, input().split())\n        edges.append([x, y])\n\n    # Read the BFS order.\n    order = list(map(int, input().split()))\n\n    # Check if the order is valid.\n    if check_bfs_order(n, edges", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "def solve(N, M, conditions):\n    mod = 1000000007\n    dp = [0] * (N + 1)\n    dp[0] = 1\n\n    for i in range(1, N + 1):\n        for l, r, x in conditions:\n            if i >= l and i <= r:\n                dp[i] = (dp[i] * x) % mod\n            elif i > r:\n                dp[i] = (dp[i] * 3) % mod\n\n    return dp[N]\n\nN, M = map(int, input().split())\nconditions = []\nfor i in range(M):\n    l, r, x = map(int, input().split())\n    conditions.append((l, r, x))\n\nans = solve(N, M, conditions)\nprint(ans)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "# Input\nn, l, v_1, v_2, k = map(int, input().split())\n\n# Calculate the minimum time required\nif k >= n:\n    time = l / v_2\nelse:\n    time = (n // k) * (l / v_2 + (k - 1) / v_1) + (n % k) / v_1\n\n# Output\nprint(time)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "a, b = map(int, input().split())\nif a == b == 0: print('Yes')\nelse:\n    ans = 'No'\n    t = input()\n    p, h = [0] * len(t), [0, 0]\n    d = {'L': (-1, 0), 'R': (1, 0), 'D': (-1, 1), 'U': (1, 1)}\n    for i, c in enumerate(t):\n        j, k = d[c]\n        h[k] += j\n        p[i] = (h[0], h[1])\n    if h[0] == h[1] == 0:\n        if (a, b) in p: ans = 'Yes'\n    elif h[0]:      \n        for x, y in p:\n            if (a - x) * h[1] == (b - y) * h[0] and (a - x) % h[0] == 0 and (a - x) * h[0] >= 0:\n                ans = 'Yes'\n                break\n    else:      \n        for x, y in p:\n            if a == x and (b - y) % h[1] == 0 and (b - y) * h[1] >= 0:\n                ans = 'Yes'\n                break\n    print(ans)", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "import math\n\n# Function to check if a number is a perfect square\ndef is_perfect_square(num):\n    if num < 0:\n        return False\n    return (int(math.sqrt(num))) ** 2 == num\n\n# Function to find the largest number in the array that is not a perfect square\ndef largest_not_perfect_square(arr):\n    largest_num = -1  # Initialize the largest number to -1\n    for num in arr:\n        if not is_perfect_square(num) and num > largest_num:\n            largest_num = num  # Update the largest number if a larger non-perfect square is found\n    return largest_num\n\n# Read the number of elements in the array\nn = int(input())\n# Read the array elements\narr = list(map(int, input().split()))\n\n# Call the function to find the largest number in the array that is not a perfect square\nlargest_num = largest_not_perfect_square(arr)\n\n# Print the result\nprint(largest_num)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "import sys\nfrom collections import deque\nn=int(input())\nvisited=[False for i in range(n+1)]\ndp=[0 for i in range(n+1)]\nl=[[] for i in range(n+1)]\nfor i in range(n-1):\n    a,b=list(map(int,input().split()))\n    l[a].append(b)\n    l[b].append(a)\nb=list(map(int,input().split()))\ns=[1]\nvisited[1]=True\nc=1\nc1=0\nwhile len(s)!=n :\n    aux=0\n    for i in l[s[c1]]:\n        if not visited[i]:\n            visited[i]=True\n            dp[i]=1\n            aux+=1\n    for i in range(c,c+aux):\n        if dp[b[i]]==1:\n            s.append(b[i])\n            dp[b[i]]=0\n        else:\n            print(\"No\")\n            return\n    c+=aux\n    c1+=1\nprint(\"Yes\")\n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "\nimport sys\n\nn = int(sys.stdin.readline().split()[0])\n\nclass Polynomial:\n    def __init__(self, coef):\n        first_nonzero = False\n        index = len(coef) - 1\n        while not first_nonzero:\n            if not coef[index] == 0:\n                first_nonzero = True\n            else:\n                if index == 0:\n                    first_nonzero = True\n                else:\n                    index -= 1\n        self.degree = index\n        self.coef = [coef[j] for j in range(index + 1)]\n    def multiply_by_x(self):\n        new_coef = [0]\n        for j in range(self.degree + 1):\n            new_coef.append(self.coef[j])\n        return Polynomial(new_coef)\n    def minus(self):\n        new_coef = [-self.coef[j] for j in range(self.degree + 1)]\n        return Polynomial(new_coef)\n    def add(self, other):\n        other_coef = other.coef\n        new_coef = [0 for j in range(max(self.degree, other.degree) + 1)]\n        m = min(self.degree, other.degree)\n        M = max(self.degree, other.degree)\n        if self.degree > other.degree:\n            bigger_poly = self\n        else:\n            bigger_poly = other\n        for j in range(m + 1):\n            new_coef[j] = self.coef[j] + other.coef[j]\n        for j in range(m + 1, M+1):\n            new_coef[j] = bigger_poly.coef[j]\n            \n        return Polynomial(new_coef) \n    def is_legal(self):\n        result = True\n        bools = [None for j in range(self.degree + 1)]\n        bools[self.degree] = self.coef[self.degree] == 1\n        for j in range(self.degree):\n            bools[j] = self.coef[j] == 0 or self.coef[j] == 1 or self.coef[j] == -1\n        for j in range(self.degree + 1):\n            result = result and bools[j]\n        return result\n    def print(self):\n        output = \"\"\n        for j in range(self.degree + 1):\n            output += str(self.coef[j]) + \" \"\n        print(output)\n            \n        \n\nf = []\n\nf.append(Polynomial([1]))\nf.append(Polynomial([0, 1]))\n\nfor j in range(2, 151):\n    xf = f[j-1].multiply_by_x()\n    t_1 = xf.add(f[j - 2])\n    t_2 = xf.add(f[j - 2].minus())\n    if t_1.is_legal():\n        f.append(t_1)\n    elif t_2.is_legal():\n        f.append(t_2)\n    #print(\":(\")\n\n\nprint(f[n].degree)\nf[n].print()\nprint(f[n-1].degree)\nf[n-1].print()\n\n#for j in range(len(f)):\n    #f[j].print()\n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "def find_supportable_stewards(n, strengths):\n    strengths.sort()\n    supportable_stewards = 0\n\n    for i in range(1, n-1):\n        if strengths[i-1] < strengths[i] < strengths[i+1]:\n            supportable_stewards += 1\n\n    return supportable_stewards\n\nn = int(input())\nstrengths = list(map(int, input().split()))\n\nprint(find_supportable_stewards(n, strengths))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "def triangle(a, b, c, l):\n    if l == 0:\n        return 1\n    if a + b <= c or b + c <= a or c + a <= b:\n        return 0\n    if a + b + c <= l:\n        return 2 ** 3\n    res = 0\n    if a <= l:\n        res += 2 ** 2\n    if b <= l:\n        res += 2 ** 2\n    if c <= l:\n        res += 2 ** 2\n    if a + b <= l:\n        res += 2 ** 1\n    if b + c <= l:\n        res += 2 ** 1\n    if a + c <= l:\n        res += 2 ** 1\n    return res\n\na, b, c, l = map(int, input().split())\nprint(triangle(a, b, c, l))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "import math\n\nw, h, a = list(map(int, input().strip().split()))\n\nif h >   w:\n    w, h = h, w\n\nif a > 90:\n    a = 90 - (a - 90)\n\na = math.radians(a)\n\nif a < 2 * math.atan2(h, w):\n    area = w * h\n\n    s = (w / 2) - (h / 2 * math.tan(a / 2))\n    bigger_area = 0.5 * s * s * math.tan(a)\n\n    s = (h / 2) - (w / 2 * math.tan(a / 2))\n    lower_area = 0.5 * s * s * math.tan(a)\n\n    print(area - 2 * bigger_area - 2 * lower_area)\nelse:\n    print(h * h / math.sin(a))\n\n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "# Function to check if a cell is valid or not\ndef is_valid(x, y, n, m):\n    return x >= 0 and x < n and y >= 0 and y < m\n\n# Function to perform DFS and mark the connected cells\ndef dfs(grid, x, y, n, m, visited):\n    visited[x][y] = True\n    # Recurse for all adjacent cells\n    for i in range(4):\n        new_x = x + dx[i]\n        new_y = y + dy[i]\n        if is_valid(new_x, new_y, n, m) and grid[new_x][new_y] == '.' and not visited[new_x][new_y]:\n            dfs(grid, new_x, new_y, n, m, visited)\n\n# Function to add walls to the maze\ndef add_walls(grid, n, m, k):\n    # Initialize the visited array\n    visited = [[False] * m for _ in range(n)]\n    # Directions array\n    dx = [-1, 1, 0, 0]\n    dy = [0, 0, -1, 1]\n    # Count the number of empty cells in the maze\n    empty_cells = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                empty_cells += 1\n\n    # Start DFS from the top-left corner\n    dfs(grid, 0, 0, n, m, visited)\n\n    # Count the number of connected cells\n    connected_cells = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.' and visited[i][j]:\n                connected_cells += 1\n\n    # If there are less connected cells than k, return -1\n    if k > connected_cells:\n        return -1\n\n    # Initialize the walls_added variable\n    walls_added = 0\n    # Start adding walls\n    for i in range(n):\n        for j in", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "n, T = map(int, input().split())\nt = list(map(int, input().split()))\n\nans = 0\np = 0\n\nfor i in range(n):\n    while p <= T and p < t[i]:\n        p += 1\n    if p > T:\n        break\n    if p == t[i]:\n        ans += 1\n        p += 1\n\nprint(ans)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "import sys\n\ndef sum_range(l, r):\n    if r < l: return 0\n    if l == 0: return sum[r]\n    return sum[r] - sum[l - 1]\n\nn, k = map(int, input().split())\n\ncards = input()\n\nsum = [0] * n\nsum[0] = 1 if cards[0] == '1' else 0\nfor i in range(1, n):\n    sum[i] += sum[i - 1]\n    if cards[i] == '1':\n        sum[i] += 1\n\nmin0 = min1 = n\nmax0 = max1 = -1\nfor i in range(0, n):\n    if cards[i] == '1':\n        min1 = min(min1, i)\n        max1 = i\n    else:\n        min0 = min(min0, i)\n        max0 = i\n        \ntoki = False\nqual = True\nfor i in range(0, n - k + 1):\n    if sum_range(0, i - 1) + sum_range(i + k, n - 1) + k == n:\n        toki = True\n    if sum_range(0, i - 1) + sum_range(i + k, n - 1) + 0 == 0:\n        toki = True\n        \n    prefix = sum_range(0, i - 1) == 0\n    suffix = sum_range(i + k, n - 1) == 0\n    if i > 0 and i + k < n and (prefix ^ suffix) == 0:\n        qual = False\n    if i - min0 > k or i - min1 > k or max0 - (i + k - 1) > k or max1 - (i + k - 1) > k:\n        qual = False\n\nif toki == True:\n    print('tokitsukaze')\nelif qual == True:\n    print('quailty')\nelse:\n    print('once again')", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "input()\nm=int(input())\nv=m\ntry:\n for a in map(int, input().split() + input().split()):\n   v*=a/(a-1)\n print(v-m)\nexcept ZeroDivisionError:\n print(-1)", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "# Function to calculate the number of distinct integers that can be represented using n roman digits exactly\ndef roman_digits(n):\n    # Base cases\n    if n == 1:\n        return 4\n    if n == 2:\n        return 10\n    \n    # Recursive case\n    return roman_digits(n-1) + roman_digits(n-2)\n\n# Main function\nif __name__ == '__main__':\n    # Read the input\n    n = int(input())\n    \n    # Call the function to calculate the number of distinct integers\n    result = roman_digits(n)\n    \n    # Print the result\n    print(result)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "def solve(N, k):\n    mod = 1000000007\n    ans = 0\n    for i in range(1, N + 1):\n        ans = (ans + pow(i, k, mod)) % mod\n    return ans\n\nN, k = map(int, input().split())\nprint(solve(N, k))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "n = int(input())\np = list(map(int, input().split()))\n\ndef get_deviation(p):\n    return sum(abs(p[i] - i) for i in range(n))\n\nmin_dev = get_deviation(p)\nmin_k = 0\n\nfor k in range(1, n):\n    p = p[-1:] + p[:-1]\n    dev = get_deviation(p)\n    if dev < min_dev:\n        min_dev = dev\n        min_k = k\n\nprint(min_dev, min_k)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "import math\n\ndef square_intersection(square1, square2):\n    # Define a point class to store the coordinates of the points\n    class Point:\n        def __init__(self, x, y):\n            self.x = x\n            self.y = y\n\n    # Define a function to check if two points are equal\n    def point_equal(point1, point2):\n        return point1.x == point2.x and point1.y == point2.y\n\n    # Define a function to check if a point lies on a line segment\n    def point_on_segment(point, line):\n        return (point.x - line[0].x) * (line[1].y - line[0].y) == (point.y - line[0].y) * (line[1].x - line[0].x) and (\n                    line[0].x - point.x) * (line[1].x - point.x) <= 0 and (line[0].y - point.y) * (line[1].y - point.y) <= 0\n\n    # Define a function to check if two line segments intersect\n    def segment_intersect(line1, line2):\n        # Find the four orientations needed for the general and special cases\n        o1 = orientation(line1[0], line1[1], line2[0])\n        o2 = orientation(line1[0], line1[1], line2[1])\n        o3 = orientation(line2[0], line2[1], line1[0])\n        o4 = orientation(line2[0], line2[1], line1[1])\n\n        # General case\n        if o1 != o2 and o3 != o4:\n            return True\n\n        # Special cases\n        # line1[0], line1[1] and line2[0] are colinear and line2[0] lies on segment line1\n        if o1 == 0 and point_on_segment(line2[0], line1):\n            return True\n\n        # line1[0], line1[1] and line2[1]", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "import math\n\n# Function to find the minimum positive value of x\ndef find_x(a, b):\n    # Check if a = b\n    if a == b:\n        # If so, return 1.0 as the minimum value of x\n        return 1.0\n    # Check if a > b\n    if a > b:\n        # If so, return -1 as there is no such x\n        return -1\n    # Find the minimum value of x\n    x = math.sqrt(2 * (b - a))\n    # Check if x is a positive integer\n    if x.is_integer() and x > 0:\n        # If so, return x\n        return x\n    # Otherwise, return -1\n    return -1\n\n# Read the input from stdin\na, b = map(int, input().split())\n# Find the minimum positive value of x\nresult = find_x(a, b)\n# Print the result\nprint(result)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "from math import factorial\nMOD = 10**9+7\n\nk = int(input())\nbink = list(map(int, bin(k)[2:]))\nN = len(bink)\n\n# dp[i][j][k] = first i bits, j bases,\n#   k = 1 if maxor matches k, 0 else\ndp = [[[0,0] for j in range(i+2)] for i in range(N+1)]\ndp[0][0][1] = 1\nfor i in range(1, N+1):\n    for j in range(i+1):\n        # k = 0 -> 0\n        dp[i][j][0]+= 2**j * dp[i-1][j][0] # distribute\n        if j: dp[i][j][0]+= dp[i-1][j-1][0] # new base\n        # k = 1 -> 0\n        odd = 2**(j-1) if j else 0\n        even = 2**j - odd\n        if bink[i-1] == 1:\n            dp[i][j][0]+= even * dp[i-1][j][1] # distribute even\n        # k = 1 -> 1\n        if bink[i-1] == 0:\n            dp[i][j][1]+= even * dp[i-1][j][1] # distribute even\n        else:\n            dp[i][j][1]+= odd * dp[i-1][j][1] # distribute odd\n            if j: dp[i][j][1]+= dp[i-1][j-1][1] # new base\nans = sum(map(sum, dp[-1]))\nprint(ans % MOD)", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "# This program checks whether a grid is symmetric or not.\n\n# Import necessary libraries\nimport sys\n\n# Function to check if the grid is symmetric or not\ndef is_symmetric(grid):\n    # Check if the grid is square shaped\n    if len(grid) != len(grid[0]):\n        return False\n    \n    # Iterate through the grid\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            # Check if the elements at (i, j) and (H - i - 1, W - j - 1) are equal\n            if grid[i][j] != grid[len(grid) - i - 1][len(grid[i]) - j - 1]:\n                return False\n    \n    # If all checks pass, return True\n    return True\n\n# Read input from stdin\nH, W = map(int, input().split())\ngrid = []\nfor _ in range(H):\n    grid.append(input())\n\n# Check if the grid is symmetric\nif is_symmetric(grid):\n    print(\"YES\")\nelse:\n    print(\"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "R=lambda :list(map(int,input().split()))\nn,m,k=R()\nF,T=[],[]\nans=int(1e12)\nfor i in range(m):\n    d,f,t,c=R()\n    if f:F.append((d,f,c))\n    else:T.append((-d,t,c))\nfor p in [F,T]:\n    cost=[ans]*(n+1)\n    s=n*ans\n    q=[]\n    p.sort()\n    for d,t,c in p:\n        #print(p)\n        if c<cost[t]:\n            #print(c,cost[t])\n            s+=c-cost[t]\n            #print(s)\n            cost[t]=c\n            if s<ans:\n                q.append((s,d))\n    p.clear()\n    #print(q)\n    p+=q\n    #print(p)\ns,t=ans,(0,0)\n#print(F,T)\nfor f in F:\n    while  f:\n        if f[1]+t[1]+k<0:s=min(s,f[0]+t[0])\n        elif T:\n            #print(T)\n            t=T.pop()\n            #print(T)\n           # print(t)\n            continue\n        #print(f)\n        f=0\n        #print(f)\nprint(s if s<ans else -1)\n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "s = input()\nt = input()\noverlap = t\ntt = ''\nfor i in range(len(t) - 1):\n    tt = tt + t[i]\n    if (t.endswith(tt)):\n        overlap = t[i + 1:]\nzro = s.count('0')\nmek = s.count('1')\nzro_tum = t.count('0')\nmek_tum = t.count('1')\nzro_toxum = overlap.count('0')\nmek_toxum = overlap.count('1')\n\nif (zro >= zro_tum and mek >= mek_tum):\n    print(t, end='')\n    zro -= zro_tum\n    mek -= mek_tum\nif zro_toxum:\n    k = zro//zro_toxum\nelse:\n    k = 10000000000\nif mek_toxum:\n    n = mek//mek_toxum\nelse:\n    n = 10000000000\nans = min(n, k)\nprint(overlap * ans, end='')\nzro -= zro_toxum * ans\nmek -= mek_toxum * ans\nprint('0' * zro + '1' * mek)", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "from math import gcd\n\nfrom math import factorial as f\n\nfrom math import ceil, floor, sqrt\nimport math\n\nimport bisect\nimport re\nimport heapq\n\nfrom copy import deepcopy\nimport itertools\nfrom itertools import permutations\n\nii = lambda: int(input())\nmi = lambda: list(map(int, input().split()))\nli = lambda: list(map(int, input().split()))\n\nyes = \"Yes\"\nno = \"No\"\n\n\ndef main():\n    a, b = mi()\n    print((100, 100))\n    ans = [[] for i in range(100)]\n    for i in range(50):\n        for j in range(100):\n            ans[i].append('#')\n    for i in range(50, 100):\n        for j in range(100):\n            ans[i].append('.')\n\n    for i in range(a - 1):\n        ans[2 * (i // 50)][2 * (i % 50)] = '.'\n    for i in range(b - 1):\n        ans[99 - 2 * (i // 50)][2 * (i % 50)] = '#'\n\n    for i in range(100):\n        print((''.join(ans[i])))\n\n\nmain()\n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "import math\n\n# Input the coordinates of the rescuers' headquarters and the distress signal's location\nx1, y1, x2, y2 = map(int, input().split())\n\n# Input the maximum speed of the dirigible relative to the air and the moment of time when the wind changes\nvmax, t = map(int, input().split())\n\n# Input the wind for the first t seconds and the wind that will blow at all the remaining time\nvx, vy, wx, wy = map(int, input().split())\n\n# Calculate the distance between the rescuers' headquarters and the distress signal's location\ndistance = math.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2)\n\n# Calculate the minimum time the rescuers need to get to the distress signal's location\ntime = distance / vmax\n\n# If the wind is blowing in the air, adjust the time accordingly\nif vx != 0 or vy != 0:\n    time = (distance + t * vmax * math.sqrt(vx ** 2 + vy ** 2)) / (vmax - math.sqrt(vx ** 2 + vy ** 2))\n\n# If the wind changes after t seconds, adjust the time accordingly", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "a, b, l, r = map(int, input().split())\n\n# Calculate the number of turns needed\nturns = (r - l + 1) // a\n\n# Initialize the segment\nsegment = \"\"\n\n# Simulate the game\nfor turn in range(turns):\n    # Append b letters to the segment\n    segment += \"\".join(chr(ord('a') + i) for i in range(b))\n    # Append a letters to the segment\n    segment += \"\".join(chr(ord('a') + i) for i in range(a))\n\n# Print the result\nprint(len(set(segment[l - 1:r])))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "n=int(input())\np=lambda a,b:print(a+1,b+1)\nb=[0,1]\nif n%4>1:\n\tprint(\"NO\")\nelse:\n\tprint(\"YES\")\n\tfor i in range(n%4,n,4):\n\t\tfor x in b:\n\t\t\ta=2*x\n\t\t\tfor j in range(i):p(j,i+a)\n\t\t\tp(i+a,i+a+1)\n\t\t\tfor j in range(i,0,-1):p(j-1,i+a+1)\n\t\t[p(i+y,i+(y^(3-x))) for x in b for y in b]\n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "n = int(input())\ns = input().split()\ns = [int(x) for x in s]\n\n# Check if there is at least one phone number that can be made\nif any(len(str(x)) == 11 and str(x).startswith('8') for x in s):\n    # Calculate the maximum number of phone numbers that can be made\n    max_phone_numbers = sum(1 for x in s if len(str(x)) == 11 and str(x).startswith('8'))\n    print(max_phone_numbers)\nelse:\n    print(0)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n, k = map(int, input().split())\n\ndef numSetBits(x):\n    return sum(int(x & (-1) & x) for x in range(1, int(x**0.5) + 1))\n\nans = 0\nfor i in range(1, n + 1):\n    if numSetBits(i) == k:\n        ans += 1\n\nprint(ans % (10**9 + 7))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "import sys\n\ndef solve():\n    n = int(sys.stdin.readline())\n    if n == 0:\n        print(\"NO\")\n        return\n\n    lines = []\n    for _ in range(n):\n        lines.append(list(map(int, sys.stdin.readline().strip().split(\" \"))))\n\n    # Check if the input is valid\n    valid = True\n    for line in lines:\n        if len(line) != 3 or any(abs(x) > 1e6 for x in line):\n            valid = False\n\n    # If input is valid, find a solution\n    if valid:\n        for i in range(n):\n            print(\" \".join(str(sorted(line[0:3])) + \"\\n\")\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\nsolve()", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n = int(input())\n\nroman_dict = {1: 1, 5: 5, 10: 10, 50: 50}\n\ndef count_roman_numeral(n):\n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        num_digits = len(str(i))\n        if num_digits == 1:\n            count += roman_dict[i]\n        elif num_digits == 2:\n            count += roman_dict[i] * 2\n    return count\n\nprint(count_roman_numeral(n))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "import math\nn, m, x, y, a, b = map(int, input().split())\nx_1 = math.floor((x - a * y) // b)\ny_1 = math.floor((y - a * x_1) // b)\nx_2 = x_1 + a - 1\ny_2 = y_1 + b - 1\nprint(x_1, y_1, x_2, y_2)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split().strip().split()))\n\n# Check if it is possible to reassemble the binary search tree\nif all(gcd(a[i], a[j]) > 1 for i in range(n) for j in range(i, n)):\n    print(\"Yes\")\nelse:\n    print(\"No\")", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "N = int(input())\na = list(map(int, input().split()))\n\n# Calculate the prefix sum of a\nps = []\ns = 0\nfor i in range(len(a)):\n    s += a[i]\n    ps.append(s)\n\n# Find the minimum operations to satisfy the condition\nm = min(ps[-1] - ps[0] + 1 for ps in ps)\n\n# Print the number of operations\nprint(m)\n\n# Print the numbers x and y for each operation\nfor i in range(m):\n    x = ps[i] - ps[0]\n    y = ps[i] - ps[0] + 1\n    print(x, y)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n = int(input())\n\npackets = n // 3\n\nif n % 3 == 0:\n    packets += 1\n\nprint(packets)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\n\na_sum = sum(a)\na_min = min(a)\nif a_sum - a_min < a_min:\n    print(-1)\nelse:\n    print((a_sum - a_min) // 2 + 1)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "import networkx as nx\n\nn = int(input())\nG = nx.Graph()\ng = nx.read_graph(n)\nfor i in range(n - 1):\n    x, y = map(int, input().split())\n    G.add_edge(x, y)\n\npairs = nx.matching(G)\nprint(len(pairs) % 10**9 + 7)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n = int(input())\ng = int(input())\n\ncost = 0\nfor i in range(n):\n    for j in range(n):\n        cost += (i + j) % (n + 1)\n\nprint(cost)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n = int(input())\nx = list(map(int, input().split()))\n\nx.sort()\npiles = 1\n\nfor i in range(len(x)):\n    x[i] -= piles\n\npiles += sum(x)\n\nprint(piles)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "a_00, a_01, a_10, a_11 = map(int, input().split())\n\nif a_00 + a_01 + a_10 + a_11 == 0:\n    print(\"Impossible\")\nelse:\n    s = \"\"\n    # Calculate the number of 0s and 1s in the string\n    a_0 = min(a_00, a_01)\n    a_1 = min(a_10, a_11)\n    a_00 -= a_0\n    a_01 -= a_0\n    a_10 -= a_1\n    a_11 -= a_1\n\n    # Construct the string\n    for i in range(a_0):\n        s += \"0\"\n    for i in range(a_1):\n        s += \"1\"\n\n    # Print the answer\n    print(s)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "import math\n\nw, h, alpha = map(int, input().split())\nalpha = float(alpha)\n\narea = w * h * math.sin(math.radians(alpha)) / 2\n\nprint(area)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "a, b, h, w, n = map(int, input().split())\nab = int(input())\na_list = list(map(int, input().split()))\n\nw_mul = h_mul = 0\nfor i in range(n):\n    a_mul = max(a_mul, a_list[i] * w)\n    h_mul = max(h_mul, a_list[i] * h)\n\nif ab <= w_mul and ab <= h_mul:\n    print(0)\nelif ab > w_mul or ab > h_mul:\n    print(-1)\nelse:\n    print(1)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "h, w = map(int, input().split())\n\na, b = map(int, input().split())\n\ng = [[0] * w for _ in range(h)]\n\nfor _ in range(a):\n    x, y = map(int, input().split())\n    g[x][y] = 1\n\nfor _ in range(b):\n    x, y = map(int, input().split())\n    g[x][y] = -1\n\n# Find connected components\ncomponents = {}\ndef dfs(x, y):\n    if g[x][y] != 1 or x not in components or y not in components:\n        return\n    components[x][y] = True\n    dfs(x-1, y)\n    dfs(x+1, y)\n    dfs(x, y-1)\n    dfs(x, y+1)\n\nfor r in range(h):\n    components[r] = {}\nfor c in range(w):\n    components[r][c] = False\n\nfor x in range(h):\n    for y in range(w):\n        if g[x][y] == 1 and components[x][y] is False:\n            dfs(x, y)\n\n# Print the grid\nprint(h, w)\nfor r in range(h):\n    s = \"\"\n    for c in range(w):\n        if g[r][c] == 1:\n            s += \".\"\n        else:\n            s += \"#\"\n    print(s)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "import numpy as np\n\nn, m = map(int, input().split())\nvolcano_loc = np.array([[int(x) for x in input().split()] for _ in range(m)])\n\nif not volcano_loc.size:\n    print(-1)\n\ngrid_size = np.sqrt(n)\ndistance = np.inf * np.ones((int(grid_size), int(grid_size)))\ndistance[0][0] = 0\n\ndirection = np.array([[1, 0], [0, 1]])\n\nfor r in range(grid_size):\n    for c in range(grid_size):\n        if distance[r][c] != np.inf and (r, c) not in volcano_loc.T:\n            for d in direction:\n                new_r, new_c = r + d[0], c + d[1]\n                if 0 <= new_r < grid_size and 0 <= new_c < grid_size and distance[new_r][new_c] == np.inf:\n                    distance[new_r][new_c] = distance[r][c] + 1\n\nmin_time = distance[grid_size - 1][grid_size - 1]\n\nif min_time != np.inf:\n    print(min_time)\nelse:\n    print(-1)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n, m = map(int, input().split())\nprint(min((n-1) * m, (n-1) // 3 + m // 3))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\n\nif sum(a) != n:\n    print(-1)\nelse:\n    t = min(a)\n    print(t)\n    for i in range(t):\n        r, c = map(int, input().split())\n        print(r, c)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n = int(input())\n\na = []\ns = []\nfor _ in range(n):\n    a_i, s_i = map(int, input().split())\n    a.append(a_i)\n    s.append(s_i)\n\nm = sum(a) // 2\n\nans = 0\nfor i in range(n):\n    if s[i] == \"11\" or (s[i] == \"10\" and a[i] > ans):\n        ans = max(ans, a[i] + a[i-1])\n\nif ans == 0:\n    print(0)\nelse:\n    print(ans)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "k, d, t = map(int, input().split())\n\n# Calculate the time spent cooking when the stove is on\ntime_on = t\n\n# Calculate the time spent cooking when the stove is off\ntime_off = 2 * t\n\n# Calculate the total time spent cooking\ntotal_time = time_on + time_off\n\n# Print the total time spent cooking\nprint(round(total_time, 1))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\n\ngcd_dict = {}\nfor i in a:\n    gcd = gcd_dict.get(i, 0)\n    if gcd:\n        gcd_dict[i] = gcd\n    else:\n        gcd_dict[i] = i\n\ngroups = []\nfor i in a:\n    gcd_i = gcd_dict[i]\n    if gcd_i == 1:\n        groups.append(i)\n\nif groups:\n    print(\"YES\")\n    print(*groups)\n    print(*[2] * len(groups))\nelse:\n    print(\"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n = int(input())\np = list(map(int, input().split()))\n\np.sort()\nmin_dev = float('inf')\nmin_id = -1\n\nfor i in range(n):\n    dev = sum(abs(x - i - 1) for x in p)\n    if dev < min_dev:\n        min_dev = dev\n        min_id = i\n\nprint(min_dev, min_id)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n = int(input())\n\n# Calculate the powers of each number from 1 to n\npowers = {x: set(x**i for i in range(1, int(n**0.5) + 1)) for x in range(1, n + 1)}\n\n# Vasya's move\nvasya_move = int(input())\n\n# Check if Vasya can win\nif vasya_move not in powers[vasya_move] and not powers[vasya_move].issuperset(powers[vasya_move]):\n    print(\"Vasya\")\nelse:\n    print(\"Petya\")", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\n\n# Calculate the minimum number of days of rest\nmin_rest = 0\nprev_activity = -1\nfor i in range(n):\n    if a[i] == 1 and prev_activity != 1:\n        min_rest += 1\n    elif a[i] == 2 and prev_activity != 2:\n        min_rest += 1\n    prev_activity = a[i]\n\nprint(min_rest)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n, m = map(int, input().split())\ng = [[int(input()) for _ in range(m)] for _ in range(n)]\n\n# Check if it is possible to beat the level\nif not sum(sum(g) for _ in range(n)) == sum(g):\n    print(-1)\nelse:\n    k = min(sum(g) - sum(sum(g) // n * m) for _ in range(n) + sum(g) // n * m))\n\n    print(k)\n\n    for _ in range(k):\n        r, c = map(int, input().split())\n        print(r, c)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\n\n# Find the largest number in the array that is not a perfect square\nlargest_non_perfect_square = max(a) - 1\n\n# Iterate over the array and check if the number is a perfect square\nfor num in a:\n    if num**2 <= largest_non_perfect_square:\n        largest_non_perfect_square = min(largest_non_perfect_square, num)\n\n# Print the largest number in the array that is not a perfect square\nprint(largest_non_perfect_square)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n = int(input())\ns = input().lower()\n\n# Count the occurrences of each color\ncolor_counts = {}\nfor i in s:\n    if i not in color_counts:\n        color_counts[i] = 0\n    color_counts[i] += 1\n\n# Check if it is possible to standardize all the puppies\nif min(color_counts.values()) >= 2:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n, T = map(int, input().split())\na = list(map(int, input().split()))\n\n# Calculate the prefix sum and find the maximum length of the non-decreasing sequence\nprefix_sum = []\nlength = 1\nfor i in range(n):\n    prefix_sum.append(a[i] - i)\n    for j in range(i):\n        if prefix_sum[i] - prefix_sum[j] >= 0:\n            length = max(length, 1 + 1)\n\nprint(length)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "N = int(input())\na = [[int(input()) for _ in range(N)] for _ in range(N)]\n\nmex = lambda x, y: 0 if x == y else 1 if x > y else 2\n\nzeros, ones, twos = 0, 0, 0\nfor i in range(N):\n    for j in range(N):\n        if a[i][j] == 0:\n            zeros += 1\n        elif a[i][j] == 1:\n            ones += 1\n        else:\n            twos += 1\n\nprint(zeros, ones, twos)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "import sys\nfrom collections import defaultdict\n\ndef solve():\n    N = int(sys.stdin.readline())\n    a = list(map(int, sys.stdin.readline().split()))\n\n    # Initialize a dictionary to count the number of occurrences of each value in a.\n    count = defaultdict(int)\n    for num in a:\n        count[num] += 1\n\n    # Initialize the result list with an empty list for each value in a.\n    result = [[] for _ in a]\n\n    # Sort the values in a in increasing order.\n    sorted_a = sorted(count.keys())\n\n    # Perform the operations.\n    for i in range(len(sorted_a) - 1):\n        # Find the smallest value in a that is greater than the current value.\n        j = i\n        while j < len(sorted_a) and sorted_a[j] <= sorted_a[i] + 1:\n            j += 1\n\n        # If there is no value greater than the current value, add the current value to itself.\n        if j == len(sorted_a):\n            result[sorted_a[i]].append((sorted_a[i], sorted_a[i]))\n            count[sorted_a[i]] += 1\n            count[sorted_a[i] + 1] -= 1\n            continue\n\n        # Add the current value to the smallest value greater than it.\n        result[sorted_a[i]].append((sorted_a[i], sorted_a[j]))\n        count[sorted_a[i]] += 1\n        count[sorted_a[j]] -= 1\n\n    # Print the result.\n    print(len(result))\n    for x, y in result:\n        print(x, y)\n\nif __name__ == \"__main__\":\n    solve()", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "def max\\_phone\\_numbers(n, digits):\n    # Count the number of '8's in the string\n    eight\\_count = digits.count('8')\n\n    # Return 0 if there are no '8's\n    if eight\\_count == 0:\n        return 0\n\n    # Calculate the number of phone numbers that can be made\n    #", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "def solve():\n    n, k, x = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    for _ in range(k):\n        for i in range(1, len(arr), 2):\n            arr[i] = arr[i] ^ x\n    print(max(arr), min(arr))\n\nsolve()", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "import sys\nfrom collections import defaultdict\n\ninput = sys.stdin.readline\n\ndef main():\n    n, a, b = map(int, input().split())\n    seq = list(range(1, n+1))\n    inc = [0] * n\n    dec = [0] * n\n    inc_len = dec_len = 1\n    inc_idx = dec_idx = 0\n\n    def dfs(i):\n        nonlocal inc_len, dec_len, inc_idx, dec_idx\n        if i == n:\n            if inc_len == a and dec_len == b:\n                print(*seq)\n                exit(0)\n            return\n\n        for j in range(i, n):\n            if inc[i-1] < inc[j] and dec[i-1] < dec[j]:\n                continue\n            seq[i], seq[j] = seq[j], seq[i]\n            inc[i] = inc[i-1] + 1 if inc[i-1] < inc[j] else inc[i]\n            dec[i] = dec[i-1] + 1 if dec[i-1] < dec[j] else dec[i]\n            if inc_len < inc[i]:\n                inc_len = inc[i]\n                inc_idx = i\n            if dec_len < dec[i]:\n                dec_len = dec[i]\n                dec_idx = i\n            dfs(i+1)\n            inc[i] = inc[dec_idx]\n            dec[i]", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "n = int(input())\nxi = list(map(int, input().split()))\n\n# Initialize the number of piles to 0\npiles = 0\n\n# Iterate over the boxes from right to left\nfor i in range(n - 1, -1, -1):\n    # If the current box can't support any more boxes, we need to start a new pile\n    if xi[i] == 0:\n        piles += 1\n    # Otherwise, we can add the current box to the top of the previous pile\n    # We just need to make sure that the previous pile has enough capacity\n    # To do this, we update the capacity of the previous pile to be the minimum of its current capacity and the strength of the current box\n    else:\n        xi[i - 1] = min(xi[i - 1], xi[i])\n\nprint(piles)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "import sys\ninput = sys.stdin.readline\n\ndef get_set_bits(x):\n    return bin(x).count(\"1\")\n\ndef get_special_numbers(n, k):\n    dp = [0] * (n + 1)\n    dp[1] = 1\n    for i in range(2, n + 1):\n        if i & 1:\n            dp[i] = dp[i - 1]\n        else:\n            dp[i] = dp[i // 2]\n        for j in range(1, i):\n            if get_set_bits(j) == k:\n                dp[i] = (dp[i] + dp[i - j]) % mod\n    return dp[n]\n\nmod = 1000000007\nn = int(input().strip(), 2)\nk = int(input().strip())\nprint(get_special_numbers(n, k))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "n = int(input())\np = list(map(int, input().split()))\n\n# Compute the deviation for the original permutation\ndeviation = sum(abs(pi - i) for i, pi in enumerate(p))\n\n# Try all possible shifts\nfor k in range(1, n):\n    # Compute the shifted permutation\n    q = [p[i % n] for i in range(k, n + k)] + p[:k]\n    \n    # Compute the deviation for the shifted permutation\n    new_deviation = sum(abs(qi - i) for i, qi in enumerate(q))\n    \n    # Update the minimum deviation and the shift if necessary\n    if new_deviation < deviation:\n        deviation = new_deviation\n        shift = k", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "n = int(input().strip())\na = list(map(int, input().strip().split()))\n\ncount = {}\nmin_len = float('inf')\nfor i in range(n):\n    for j in range(i, n):\n        cur_count = {}\n        for k in range(i, j+1):\n            if a[k] in cur_count:\n                break\n            cur_count[a[k]] = 1\n        else:\n            min_len = min(min_len, j-i+1)\n\nprint(min_len)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "import collections\n\ndef min\\_time(n, m, volcanoes):\nif (n, n) in volcanoes:\nreturn -1\n\nqueue = collections.deque([((1, 1), 0)])\nvisited = set([(1, 1)])\n\nwhile queue:\ncurrent, time = queue.popleft()\n\nif current == (n, n):\nreturn time\n\nfor dr, dc in [(0, 1), (1, 0)]:\nnext\\_row, next\\_col = current[0] + dr, current[1] + dc\nif 1 <= next\\_row <= n and 1 <= next\\_col <= n and \\\n(next\\_row, next\\_col) not in visited and \\\n(next_row, next\\_col) not in volcanoes:\nqueue.append(((next\\_row, next\\_col), time + 1))\nvisited.add((next\\_row, next\\_col))\n\nreturn -1\n\nn, m = map(int, input().split())\nvolcanoes = set()\nfor _ in range(m):\nx, y = map(int, input().split())\nvolcanoes.add((x, y))\n\nprint(min\\_time(n, m, volcanoes))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "import math\n\ndef solve(n):\n    # Place the initial knights in a 10x10 square\n    knights = [(i, j) for i in range(1, 11) for j in range(1, 11)]\n    while len(knights) > n:\n        knights.pop(math.floor(len(knights) / 2))\n    return knights\n\n# Read the input\nn = int(input())\n\n# Solve the problem\nknight_positions = solve(n)\n\n# Print the result\nfor knight in knight_positions:\n    print(*knight)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "def min_volume(n, k, a):\n    # Sort the concentrations in non-decreasing order\n    a.sort()\n    total\\_volume = 0\n    for i in range(k):\n        # Find the maximum volume of i-th Coke type that doesn't exceed n\n        volume = min(n - total\\_volume, a[i])\n        total\\_volume += volume\n        if total\\_volume == n:\n            return int(total\\_volume)\n    # If we couldn't reach the desired concentration, return -1\n    return -1\n\n# Read input\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\n# Call the function\nresult = min\\_volume(n, k, a)\n\n# Print output\nprint(result)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "def is_pow(x, y):\n    while y != 1:\n        if y % 2:\n            return False\n        y //= 2\n        if x == y:\n            return True\n        x *= x\n    return x == 1\n\ndef powers_game(n):\n    if n == 1:\n        return \"Vasya\"\n    for i in range(2, int(n ** 0.5) + 1):\n        if not is_pow(i, n) and not is_pow(n, i):\n            return \"Petya\" if i % 2 else \"Vasya\"\n    return \"Petya\"\n\nn = int(input())\nprint(powers_game(n))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "def find\\_leaders(n, m, messages):\npossible\\_leaders = set()\ncurrent\\_participants = set()\n\nfor message in messages:\naction, user\\_id = message\n\nif action == '+':\ncurrent\\_participants.add(user\\_id)\npossible\\_leaders.update(current\\_participants)\nelse:\ncurrent\\_participants.remove(user\\_id)\n\nreturn possible\\_leaders\n\nn, m = map(int, input().split())\nmessages = [input().split() for \\_ in range(m)]\n\npossible\\_leaders = find\\_leaders(n, m, messages)\n\nif possible\\_leaders:\nprint(len(possible\\_leaders))\nprint(*sorted(possible\\_leaders))\nelse:\nprint(0)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "import sys\ninput = sys.stdin.readline\n\nmod = 1000000007\nfac = [1] * 501\nfac_inv = [1] * 501\nfac[0] = fac_inv[0] = 1\ninv2 = pow(2, mod - 2, mod)\nfor i in range(1, 501):\n    fac[i] = (fac[i - 1] * i) % mod\n    fac_inv[i] = pow(fac[i], mod - 2, mod)\n\ndef C(n, k):\n    if k > n or k < 0:\n        return 0\n    return (fac[n] * fac_inv[k] * fac_inv[n - k]) % mod\n\ndef solve(n, a):\n    if n == 1:\n        return 1\n    cnt = [0] * (10**9 + 1)\n    for x in a:\n        cnt[x] += 1\n    ans = 0\n    for x in cnt:\n        if x == 0:\n            continue\n        y = (pow(x, n, mod) - 1) * inv2 % mod\n        ans = (ans + y * C(n - 1, x - 1)) % mod\n    return ans\n\nn = int(input())\na = list(map(int, input().split()))\nprint(solve(n, a))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "import sys\n\ndef is\\_valid\\_triangle(a, b, c):\na, b, c = sorted((a, b, c))\nreturn a + b > c\n\ndef count\\_ways(a, b, c, l):\nways = 0\nfor x in range(l + 1):\nfor y in range(l + 1 - x):\nz = l - x - y\nif z < 0:\ncontinue\nif is\\_valid\\_triangle(a + x, b + y, c + z):\nways += 1\nreturn ways\n\nif **name** == '**main**':\ninput\\_str = sys.stdin.readline().strip()\na, b, c, l = map(int, input\\_str.split())\nresult = count\\_ways(a, b, c, l)\nprint(result)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "def mex(x, y):\n    return (x + 1) % 3 if y == 2 else (x + 2) % 3\n\nN = int(input())\narr = []\nfor i in range(N):\n    arr.append(list(map(int, input().split())))\n\ncount = [[0, 0, 0] for _ in range(N)]\ncount[0][arr[0][0]] += 1\n\nfor i in range(1, N):\n    count[i][arr[i][0]] += 1\n    for j in range(1, N):\n        arr[i][j] = mex(arr[i-1][j], arr[i][j-1])\n        count[i][arr[i][j]] += 1\n\nprint(*map(sum, count))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "import math\n\ndef min_number_of_packets(n):\n    # Calculate the smallest integer greater than or equal to log base 2 of n\n    num_packets = math.ceil(math.log2(n))\n\n    # Return the smallest integer that is a power of 2 which is greater than or equal to n\n    return int(2 ** num_packets)\n\n# Read the input number\nn = int(input())\n\n# Print the minimum number of packets\nprint(min_number_of_packets(n))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "def solve(n, q, operations):\n    # Initialize the table to store the number of ways to reach each string\n    dp = [0] * (n + 1)\n    dp[0] = 1\n\n    # Iterate over each possible length of the starting string\n    for i in range(1, n + 1):\n        # Iterate over each possible operation\n        for a, b in operations:\n            # If the first two characters of the current string match the operation\n            if i >= 2 and a[0] == s[i - 2] and a[1] == s[i - 1]:\n                # Add the number of ways to reach the previous string using this operation\n                dp[i] += dp[i - 2]\n\n    # Return the number of ways to reach the string \"a\"\n    return dp[n]\n\nn, q = map(int, input().split())\noperations = []\nfor _ in range(q):\n    a, b = input().split()\n    operations.append((a, b))\n\ns = \"a\" * n\nprint(solve(n, q, operations))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "def find\\_common\\_number(n, pairs1, m, pairs2):\npossible\\_pairs = set()\nfor a, b in pairs1:\nfor c, d in pairs2:\nif a == c or a == d or b == c or b == d:\npossible\\_pairs.add((a, b))\npossible\\_pairs.add((c, d))\n\nif len(possible\\_pairs) == 1:\nreturn list(possible\\_pairs.pop())[0]\n\nfor a, b in pairs1:\nif possible\\_pairs.intersection({(a, i) for i in range(1, 10)})\\\n& possible\\_pairs.intersection({(j, b) for j in range(1, 10)}):\nreturn 0\n\nreturn -1\n\n# Test cases\nprint(find\\_common\\_number(2, [(1, 2), (3, 4)], 2, [(1, 5), (3, 4)])) # 1\nprint(find\\_common\\_number(2, [(1, 2), (3, 4)], 2, [(1, 5), (6, 4)])) # 0\nprint(find\\_common\\_number(2, [(1, 2), (4, 5)], 3, [(1, 2), (1, 3), (2, 3)])) # -1", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "def min\\_hints(cards):\nn = len(cards)\n\n# Count the number of occurrences of each color and value\ncolor\\_counts = [0]*5\nvalue\\_counts = [0]*5\nfor card in cards:\ncolor\\_counts[ord(card[0])-ord('A')] += 1\nvalue\\_counts[int(card[1])-1] += 1\n\n# Calculate the minimum number of hints\ncolor\\_hints = sum(1 for c in color\\_counts if c > 1)\nvalue\\_hints = sum(1 for v in value\\_counts if v > 1)\nreturn color\\_hints + value\\_hints\n\n# Test the function\nprint(min\\_hints(list(\"G3 G3\".split()))) # 0\nprint(min\\_hints(list(\"G4 R4 R3 B3\".split()))) # 2\nprint(min\\_hints(list(\"B1 Y1 W1 G1 R1\".split()))) # 4", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "def pow_mod(x, y, mod):\n    res = 1\n    while y > 0:\n        if y % 2:\n            res = (res * x) % mod\n            y -= 1\n        x = (x * x) % mod\n        y //= 2\n    return res % mod\n\ndef solve():\n    n, a, b, k = map(int, input().split())\n    s = input()\n    seq = [1, -1] if s[0] == '-' else [1, 1]\n    for i in range(1, k):\n        if s[i] == '+':\n            seq.append(seq[-1] * a)\n        else:\n            seq.append(seq[-1] * a * -1)\n    for i in range(k, n + 1):\n        seq.append(seq[i % k])\n    ans = 0\n    for i in range(n + 1):\n        ans = (ans + seq[i] * pow_mod(a, n - i, 1000000000 + 9) * pow_mod(b, i, 1000000000 + 9)) % (1000000000 + 9)\n    print(ans)\n\nsolve()", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "import math\n\ndef is\\_perfect\\_square(n):\nif n < 0:\nreturn False\nroot = math.isqrt(n)\nreturn root*root == n\n\nn = int(input())\na = list(map(int, input().split()))\n\nmax\\_not\\_perfect\\_square = max(a)\nfor num in a:\nif not is\\_perfect\\_square(num) and num > max\\_not\\_perfect\\_square:\nmax\\_not\\_perfect\\_square = num\n\nprint(max\\_not\\_perfect\\_square)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "def min_remaining_rubles(n, d, e):\n    # Initialize the minimum remaining rubles as the initial sum\n    min_remaining = n\n\n    # Check all possible combinations of dollar and euro bills\n    for d_bill in [1, 2, 5, 10, 20, 50, 100]:\n        for e_bill in [5, 10, 20, 50, 100, 200]:\n            # Calculate the remaining rubles after buying one set of bills\n            remaining = n - min(d * d_bill, e * e_bill)\n\n            # Update the minimum remaining rubles if necessary\n            min_remaining = min(min_remaining, remaining)\n\n    # Return the minimum remaining rubles\n    return min_remaining\n\n# Read the input values\nn = int(input())\nd = int(input())\ne = int(input())\n\n# Print the minimum number of rubles Andrew can have\nprint(min_remaining_rubles(n, d, e))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "import sys\n\ndef get_max_prefix_count(n, k, s, t):\n    # Calculate the number of prefixes of the string s\n    prefix_s = set()\n    cur_s = ''\n    for i in range(n):\n        cur_s += 'a'\n        prefix_s.add(cur_s)\n    # Calculate the number of prefixes of the string t\n    prefix_t = set()\n    cur_t = ''\n    for i in range(n):\n        cur_t += 'b'\n        prefix_t.add(cur_t)\n    # Find the maximum value of c\n    c = min(len(prefix_s), k)\n    for i in range(1, n+1):\n        # Add the number of prefixes of length i of the string t\n        c += min(len(prefix_t), k - c)\n        # If the number of remaining strings is not enough to reach the current length, break\n        if k - c < n - i:\n            break\n    return c\n\nif __name__ == '__main__':\n    input_n, input_k = map(int, input().strip().split())\n    input_s = input().strip()\n    input_t = input().strip()\n    print(get_max_prefix_count(input_n, input_k, input_s, input_t))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "import math\n\ndef find_sub_rectangle(n, m, x, y, a, b):\n    # Adjust a and b to make b the divisor\n    a, b = a * b, abs(b)\n\n    # Calculate the possible values of x_1 and y_1\n    x1_vals = [(x // a) * a for x in range(0, x + 1, a)]\n    y1_vals = [(y // b) * b for y in range(0, y + 1, b)]\n\n    # Initialize the best solution and the smallest distance\n    best_x1, best_y1, best_dist = -1, -1, math.inf\n\n    # Iterate through possible values of x_1 and y_1\n    for x1 in x1_vals:\n        for y1 in y1_vals:\n            # Calculate x_2 and y_2\n            x2 = x1 + a\n            y2 = y1 + b\n\n            # Check if the sub-rectangle is valid\n            if 0 <= x1 <= x2 <= n and 0 <= y1 <= y2 <= m:\n                # Calculate the Euclidean distance\n                dist = math.sqrt((x - (x1 + x2) / 2) ** 2 + (y - (y1 + y2) / 2) ** 2)\n\n                # Update the best solution if needed\n                if dist < best_dist:\n                    best_x1, best_y1, best_dist = x1, y1, dist\n\n    # Return the best sub-rectangle\n    return best_x1, best_y1, best_x1 + a, best_y1 + b\n\n# Test cases\nprint(find_sub_rectangle(9, 9, 5, 5, 2, 1))\nprint(find_sub_rectangle(100, 100, 52, 50, 46, 56))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "def min_rest_days(n, a):\n    rest_days = 0\n    prev_activity = -1\n\n    for i in range(n):\n        # If neither gym is open nor contest is carried out, Vasya can rest\n        if a[i] == 0:\n            rest_days += 1\n            prev_activity = -1\n            continue\n\n        # If gym is open and contest is carried out, Vasya can choose either\n        if a[i] == 3:\n            if prev_activity != 3:\n                rest_days += 1\n                prev_activity = 3\n            else:\n                prev_activity = 0\n\n        # If gym is open but no contest, Vasya must do sport\n        elif a[i] == 2:\n            prev_activity = 2\n\n        # If contest is carried out but no gym, Vasya must write the contest\n        elif a[i] == 1:\n            if prev_activity != 1:\n                rest_days += 1\n                prev_activity = 1\n            else:\n                prev_activity = 0\n\n    return rest_days\n\nn = int(input())\na = list(map(int, input().split()))\n\nprint(min_rest_days(n, a))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "def count\\_apples(n, p):\napples = [0]*n\nfor i in range(1, n):\napples[p[i]-1] += 1\napples[0] = 1\nfor i in range(1, n):\nif apples[i] > 0 and apples[p[i]-1] > 0:\napples[p[i]-1] -= 1\nreturn sum(apples)\n\nn = int(input())\np = list(map(int, input().split()))\nprint(count\\_apples(n, p))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "def min_moves(n, m, grid):\n    # Initialize result list with -1 to indicate error\n    result = [-1]\n\n    # Calculate the desired sum for each row and column\n    row_sums = [sum(row) for row in grid]\n    col_sums = [sum(col) for col in zip(*grid)]\n    row_desired = [(r * n - sum(row_sums)) // n for r in set(row_sums)]\n    col_desired = [(c * m - sum(col_sums)) // m for c in set(col_sums)]\n\n    # Initialize moves list\n    moves = []\n\n    # Perform moves for each row\n    for r, des in zip(row_desired, row_sums):\n        diff = des - r\n        if diff > 0:\n            moves.append((\"row\", diff, r))\n        elif diff < 0:\n            moves.append((\"row\", -diff, r))\n\n    # Perform moves for each column\n    for c, des in zip(col_desired, col_sums):\n        diff = des - c\n        if diff > 0:\n            moves.append((\"col\", diff, c))\n        elif diff < 0:\n            moves.append((\"col\", -diff, c))\n\n    # If there are no moves to be made, return 0\n    if not moves:\n        result[0] = 0\n\n    # Otherwise, sort moves by absolute difference and then by type\n    else:\n        moves.sort(key=lambda x: (abs(x[1]), x[0]))\n        result.extend([\"{} {}\".format(x[0], x[2]) for x in moves])\n\n    # Return the result\n    return result\n\n# Test cases\nprint(min_moves(3", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "import math\n\ndef min_time_to_build_houses():\n    n = int(input().strip())\n    heights = list(map(int, input().strip().split()))\n\n    min_times = []\n    for k in range(1, math.ceil(n/2) + 1):\n        min_time = 0\n        left, right = 0, 0\n        while right < n - 1:\n            if heights[right] < heights[right + 1]:\n                right += 1\n            elif left < right and heights[left] < heights[right + 1]:\n                heights[left], heights[right + 1] = heights[right + 1], heights[left]\n                min_time += 1\n                right += 1\n            else:\n                left += 1\n                right += 1\n        if heights[0] > heights[1]:\n            heights[0], heights[1] = heights[1], heights[0]\n            min_time += 1\n        if k > 1 and heights[-1] > heights[-2]:\n            heights[-1], heights[-2] = heights[-2], heights[-1]\n            min_time += 1\n        min_times.append(min_time)\n\n    print(' '.join(map(str, min_times)))\n\nmin_time_to_build_houses()", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "import sys\ninput = sys.stdin.readline\n\nMOD = 10**9 + 7\nN = int(input())\nedges = [list(map(int, input().split())) for _ in range(N - 1)]\n\n# Initialize the depth of each node\ndepth = [0]*N\ndepth[0] = -1\ndfs = lambda cur, prev, dep: [depth[i] := dep for i in g[cur] if i != prev]\ndfs(0, -1, 0)\n\n# Initialize the parent of each node\npar = [0]*N\npar[0] = -1\ng = [[] for _ in range(N)]\nfor a, b in edges:\n    g[a-1].append(b-1)\n    g[b-1].append(a-1)\n    par[b-1] = a-1\n    par[a-1] = b-1\n\n# Initialize the binary lifting array\nup = [0]*18\nfor i in range(N):\n    up[i] = [0]*(18)\n    for j in range(i+1):\n        up[i][j] = par[i] if j == 0 else up[par[i]][j-1]\n\n# Calculate the number of ways to divide the vertices into pairs\ndp = [[0]*(N+1) for _ in range(N+1)]\ndp[0][0] = 1\nfor i in range(N):\n    for j in range(N, i, -1):\n        for k in range(j, i, -1):\n            dp[j][i] += dp[j-k][i-k] * pow(2, k-1, MOD)\n            dp[j][i] %= MOD\n\n        for k in range(1, 18):\n            if (1<<k) & j:\n                dp[j][i] += dp[j-(1<<k)][i]", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "import random\n\ndef is_valid(grid, h, w, num_white_components, num_black_components):\n    white_components = count_components(grid, h, w, 1)\n    black_components = count_components(grid, h, w, 0)\n    return white_components == num_white_components and black_components == num_black_components\n\ndef count_components(grid, h, w, color):\n    visited = [[False] * w for _ in range(h)]\n    num_components = 0\n\n    for i in range(h):\n        for j in range(w):\n            if not visited[i][j] and grid[i][j] == color:\n                num_components += 1\n                dfs(grid, i, j, h, w, visited, color)\n\n    return num_components\n\ndef dfs(grid, i, j, h, w, visited, color):\n    if i < 0 or i >= h or j < 0 or j >= w or visited[i][j] or grid[i][j] != color:\n        return\n\n    visited[i][j] = True\n    dfs(grid, i + 1, j, h, w, visited, color)\n    dfs(grid, i - 1, j, h, w, visited, color)\n    dfs(grid, i, j + 1, h, w, visited, color)\n    dfs(grid, i, j - 1, h, w, visited, color)\n\ndef generate_grid(h, w, num_white_components, num_black_components):\n    grid = [[random.randint(0, 1) for _ in range(w)] for _ in range(h)]\n\n    while not is_valid(grid, h, w, num_white_components, num_black_components):\n        grid = [[random.randint(0, 1) for _ in range(w)] for _ in range(h)]\n\n    for i in range(h):\n        for j in range(w):\n            if grid[i][", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
