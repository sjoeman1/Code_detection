{"code": "def min_moves(n, k):\n    # Base cases\n    if n == 2:\n        return 6\n    if k == 1 or k == n:\n        return 2 * n - 3\n    return 2 * n - 4\n\n\n# Input\nn, k = map(int, input().split())\n\n# Output\nprint(min_moves(n, k))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "# Input\nn, L = map(int, input().split())\n\n# Input for Kefa\nkefa = list(map(int, input().split()))\n\n# Input for Sasha\nsasha = list(map(int, input().split()))\n\n# Check if Kefa's and Sasha's tracks coincide\nflag = False\n\n# Loop through all possible starting points for Kefa and Sasha\nfor i in range(n):\n    # Check if the tracks coincide when Kefa starts from i and Sasha starts from 0\n    if kefa[i:] + kefa[:i] == sasha:\n        flag = True\n        break\n\n# Print the output\nif flag:\n    print(\"YES\")\nelse:\n    print(\"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "# Input\ns = input()\n\n# Empty strings t and u\nt = \"\"\nu = \"\"\n\n# Loop through the characters of s\nfor c in s:\n    # Append the character to t\n    t += c\n    # Check if t is lexicographically greater than u\n    if t > u:\n        # Swap t and u\n        t, u = u, t\n\n# Print the result\nprint(u)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "3\n\nimport math\nimport sys\n\n\nDEBUG = False\n\n\ndef inp():\n    return sys.stdin.readline().rstrip()\n\n\ndef dprint(*value, sep=' ', end='\\n'):\n    if DEBUG:\n        print(*value, sep=sep, end=end)\n\n\ndef solve(X):\n    nops = 0\n    ns = []\n\n    while True:\n        s = '{:b}'.format(X)\n        ls = len(s)\n        zerop = s.find('0')\n        if X == 0 or zerop == -1:\n            break\n\n        n = ls - zerop\n        ns.append(n)\n        nops += 1\n        X ^= (1 << n) - 1\n\n        s = '{:b}'.format(X)\n        zerop = s.find('0')\n        if X == 0 or zerop == -1:\n            break\n\n        X += 1\n        nops += 1\n\n    return nops, ns\n\n\ndef main():\n    X = int(inp())\n    nops, ns = solve(X)\n    print(nops)\n    if ns:\n        print(*ns)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef solve(t, w, b):\n    g = gcd(w, b)\n    t //= g\n    w //= g\n    b //= g\n    if w > b:\n        w, b = b, w\n    return (t - (t // b) * b) // w\n\nt, w, b = map(int, input().split())\np = solve(t, w, b)\nq = t - p\nprint(p, '/', q, sep='')", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "def main():\n    s = input()\n    n = len(s)\n    t = int(str(int(s[0]) + 1) + '0' * (n - 1))\n\n    print(t - int(s))\n\nmain()\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "# Input\nm, d = map(int, input().split())\n\n# Months with 30 days\nmonths_30 = [4, 6, 9, 11]\n\n# Months with 31 days\nmonths_31 = [1, 3, 5, 7, 8, 10, 12]\n\n# Initialize number of columns\ncols = 0\n\n# Check if it's a leap year\nif m == 2:\n    # Leap year\n    cols = 6\nelse:\n    # Not leap year\n    if m in months_30:\n        # Month with 30 days\n        cols = 6\n    elif m in months_31:\n        # Month with 31 days\n        cols = 5\n    else:\n        # Month with 28 days\n        cols = 5\n\n# Subtract the starting day\ncols -= d - 1\n\n# Output\nprint(cols)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "#!/usr/bin/env python3\n\n# Inputs\nn = int(input())  # Number of pieces\np = int(input())  # Wanted parity\ncolors = list(map(int, input().split()))  # Colors of the pieces\n\n# Calculate the number of valid paths of alternating colors\ndp = [[0] * 2 for _ in range(n + 1)]\ndp[0][0] = 1\n\nfor i in range(1, n + 1):\n    dp[i][0] = dp[i - 1][0] + dp[i - 1][1]\n    dp[i][1] = dp[i - 1][0] + dp[i - 1][1] * (i - 1)\n\n# Calculate the number of ways to color the pieces\nways = 1\nfor i in range(1, n + 1):\n    if colors[i - 1] == -1:\n        ways *= 2\n\n# Calculate the result\nresult = dp[n][p] * ways\n\n# Print the result modulo 10^9 + 7\nprint(result % (10 ** 9 + 7))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "def check(a1, b1, a2, b2, a3, b3):\n    if a2 + a3 <= a1 and b2 <= b1 and b3 <= b1:\n        return True\n\n    if b2 + b3 <= b1 and a2 <= a1 and a3 <= a1:\n        return True\n\n    return False\n\n\ndef __starting_point():\n    a1, b1 = map(int, input().split())\n    a2, b2 = map(int, input().split())\n    a3, b3 = map(int, input().split())\n\n    if check(a1, b1, a2, b2, a3, b3) or check(a1, b1, b2, a2, a3, b3) or check(a1, b1, a2, b2, b3, a3) or check(a1, b1, b2, a2, b3, a3):\n        print('YES')\n    else:\n        print('NO')\n__starting_point()", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "n = int(input())\nticket = input()\n\ndef is_lucky_ticket(ticket):\n    for i in range(1, len(ticket)):\n        sum1 = sum(map(int, ticket[:i]))\n        sum2 = sum(map(int, ticket[i:]))\n        if sum1 == sum2:\n            return True\n    return False\n\nif is_lucky_ticket(ticket):\n    print(\"YES\")\nelse:\n    print(\"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "k = 1\nans = 0\na, b = list(map(int, input().split()))\nfor i in range(60):\n    k <<= 1\n    d = 1\n    for j in range(i):\n        if a <= (k - (d << j) - 1) <= b:\n            ans += 1\nprint(ans)\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "d, k, a, b, t = map(int, input().split())\n\n# Initialize time and distance\ntime = 0\ndistance = 0\n\n# Travel until the destination is reached\nwhile distance < d:\n    # Drive on car until it breaks\n    time += min(k, d - distance) * a\n    distance += min(k, d - distance)\n    # If the destination is not reached yet\n    if distance < d:\n        # Repair the car\n        time += t\n        # Walk until the car can be driven again\n        time += (k - (d - distance)) * b\n        distance += k - (d - distance)\n\nprint(time)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "from itertools import groupby\n\nn = int(input())\n\nnums = [int(i) for i in input().split()]\ncopy = list(nums)\n\npos = input()\n\n\npos = [\"\".join(g) for k, g in groupby(pos) if k != '#']\n\n#print(pos)\n\ncur_pos = 0\n\nfor i in pos:\n    if i[0] == '1':\n        nums[cur_pos:cur_pos + len(i) + 1] = sorted(nums[cur_pos:cur_pos + len(i) + 1])\n    cur_pos += len(i)\n\nif sorted(copy) == nums:\n    print(\"YES\")\nelse:\n    print(\"NO\")", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "# Inputs\nn, k = map(int, input().split())\ns = input()\n\n# Initialize a dictionary to store the count of each color\ncolors = {}\n\n# Iterate through the string and count the colors\nfor c in s:\n    if c not in colors:\n        colors[c] = 1\n    else:\n        colors[c] += 1\n\n# Check if there is a color with count greater than the number of friends\nif any(count > k for count in colors.values()):\n    print(\"NO\")\nelse:\n    print(\"YES\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "# Get the input values\na = int(input(\"Enter the number of lemons: \"))\nb = int(input(\"Enter the number of apples: \"))\nc = int(input(\"Enter the number of pears: \"))\n\n# Find the maximum number of pears that can be used\nmax_pairs = min(b // 2, c // 4)\n\n# Check if it's possible to use any fruits\nif max_pairs == 0:\n    print(\"0\")\nelse:\n    # Calculate the maximum total number of fruits\n    max_total = max_pairs * 7\n    print(max_total)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "n = int(input())\na = [int(x) for x in input().split()]\nc1, c2 = -1, -1\nfor i in range(n):\n    if a[i] == 1:\n        c1 = i\n    if a[i] == n:\n        c2 = i\n\nprint(max(abs(c1 - c2), c1, c2, n - 1 - c1, n - 1 - c2))\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "f = lambda: map(int, input().split())\na, b = f()\nc, d = f()\n\n\ndef g(p, k):\n    s = 1\n    while k % p ** s == 0: s += 1\n    return s - 1\n\n\na3, b3, c3, d3 = g(3, a), g(3, b), g(3, c), g(3, d)\na2, b2, c2, d2 = g(2, a), g(2, b), g(2, c), g(2, d)\n\nab3, cd3 = a3 + b3, c3 + d3\nab2, cd2 = a2 + b2, c2 + d2\n\nab = a * b * pow(2, cd2) * pow(3, cd3)\ncd = c * d * pow(2, ab2) * pow(3, ab3)\nif ab != cd:\n    print(-1)\n    return\n\nk, s2, s3 = 1e9, 0, 0\n\nfor t3 in range(min(ab3, cd3) + 1):\n    k3 = ab3 + cd3 - 2 * t3\n    for t2 in range(min(ab2 + ab3, cd2 + cd3) - t3 + 1):\n        k2 = k3 + ab2 + cd2 - 2 * t2\n\n        if k2 + k3 < k:\n            k = k2 + k3\n            s2, s3 = t2, t3\n\nt3 = ab3 - s3\nwhile t3 and a % 3 == 0:\n    a = 2 * a // 3\n    t3 -= 1\nwhile t3 and b % 3 == 0:\n    b = 2 * b // 3\n    t3 -= 1\nt2 = ab3 - s3 + ab2 - s2\nwhile t2 and a % 2 == 0:\n    a = a // 2\n    t2 -= 1\nwhile t2 and b % 2 == 0:\n    b = b // 2\n    t2 -= 1\nt3 = cd3 - s3\nwhile t3 and c % 3 == 0:\n    c = 2 * c // 3\n    t3 -= 1\nwhile t3 and d % 3 == 0:\n    d = 2 * d // 3\n    t3 -= 1\nt2 = cd3 - s3 + cd2 - s2\nwhile t2 and c % 2 == 0:\n    c = c // 2\n    t2 -= 1\nwhile t2 and d % 2 == 0:\n    d = d // 2\n    t2 -= 1\n\nprint(k)\nprint(a, b)\nprint(c, d)", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "def works(X,N,M,K):\n    #in each row, how many numbers are < X\n    res = 0\n    n = 1\n    div = X/M\n    while n < div:\n        res += M\n        n += 1\n    while n < N+1:\n        res += (X-1)//n\n        n += 1\n    return res\n\ndef solve():\n    N, M, K = [int(s) for s in input().split()]\n    left = 1\n    right = K+1\n    #we want the smallest smallest such that there are AT LEAST K-1 smaller numbers\n    while right - left > 1:\n        middle = (left+right)//2\n        if works(middle,N,M,K) < K:\n            left = middle\n        else:\n            right = middle\n    #if there are exactly K-1 elements less than right, then this is our answer\n    return left\n\n#for _ in range(getInt()):    \nprint(solve())", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "b,d,s=list(map(int,input().split()))\na1,a2,a3,a4=0,0,0,0\n\n\nif max(b,s,d)==b:\n    if d<b-1 and s!=max(b,s,d):\n        a1+=b-1-d\n    if d<b-1 and s==max(b,s,d):\n        a1+=b-d\n    if s<b-1:\n        a1+=b-1-s\nelif max(b,s,d)==d:\n    a1+=d-b\n    if s<d-1:\n        a1+=d-1-s\nelif max(b,s,d)==s:\n    a1+=s-d\n    a1+=s-b\n    \nb1,d1,s1=d,s,b\nif max(b1,s1,d1)==b1:\n    if d1<b1-1 and s1!=max(b1,s1,d1):\n        a2+=b1-1-d1\n    if d1<b1-1 and s1==max(b1,s1,d1):\n        a2+=b1-d1\n    if s1<b1-1:\n        a2+=b1-1-s1\nelif max(b1,s1,d1)==d1:\n    a2+=d1-b1\n    if s1<d1-1:\n        a2+=d1-1-s1\nelif max(b1,s1,d1)==s1:\n    a2+=s1-d1\n    a2+=s1-b1\n    \nb,d,s=s,b,d\nif max(b,s,d)==b:\n    if d<b-1 and s!=max(b,s,d):\n        a3+=b-1-d\n    if d<b-1 and s==max(b,s,d):\n        a3+=b-d\n    if s<b-1:\n        a3+=b-1-s\nelif max(b,s,d)==d:\n    a3+=d-b\n    if s<d-1:\n        a3+=d-1-s\nelif max(b,s,d)==s:\n    a3+=s-d\n    a3+=s-b\nprint(min(a1,a2,a3))\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "# Function to calculate the number of minutes they will be able to spend together\ndef number_of_minutes(l1, r1, l2, r2, k):\n    # Check if Filya's visit overlaps with Sonya's sleep time\n    if l2 > r1 or r2 < l1:\n        return 0\n    \n    # Check if Sonya prinks during their visit\n    if k >= l1 and k <= r1 and k >= l2 and k <= r2:\n        return 0\n    \n    # Calculate the overlapping time\n    overlap_start = max(l1, l2)\n    overlap_end = min(r1, r2)\n    overlap_time = overlap_end - overlap_start + 1\n    \n    # Remove the prink time if it falls within the overlapping time\n    if k >= overlap_start and k <= overlap_end:\n        overlap_time -= 1\n    \n    return overlap_time\n\n# Read the input\nl1, r1, l2, r2, k = map(int, input().split())\n\n# Calculate the number of minutes they will be able to spend together\nminutes = number_of_minutes(l1, r1, l2, r2, k)\n\n# Print the result\nprint(minutes)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "def longest_segment(trophies):\n    # Initially, the number of golden trophies is 0\n    golden = 0\n    # Initialize the start and end indices of the segment\n    start, end = 0, 0\n    # Initialize the maximum length of the segment\n    max_len = 0\n    # Iterate over the trophies\n    for i, trophy in enumerate(trophies):\n        if trophy == 'G':\n            # If the current trophy is golden, increase the number of golden trophies in the segment\n            golden += 1\n            # Update the end index of the segment\n            end = i\n            # Update the maximum length of the segment\n            max_len = max(max_len, end - start + 1)\n        else:\n            # If the current trophy is silver, reset the segment\n            start = i + 1\n            end = i + 1\n            golden = 0\n    return max_len\n\ndef solve(n, trophies):\n    # Get the maximum length of the segment before swapping\n    max_len = longest_segment(trophies)\n    # Initialize the maximum length after swapping\n    max_len_swap = 0\n    # Iterate over the trophies\n    for i in range(n - 1):\n        # Swap the current trophy with the next one\n        trophies[i], trophies[i + 1] = trophies[i + 1], trophies[i]\n        # Calculate the maximum length of the segment after the swap\n        max_len_swap = max(max_len_swap, longest_segment(trophies))\n        # Reverse the swap to restore the original arrangement\n        trophies[i], trophies[i + 1] = trophies[i + 1], trophies[i]\n    # Return the maximum length of the segment after swapping\n    return max(max_len, max_len_swap)\n\n# Read the input\nn = int(input())\ntrophies = list(input().strip())\n# Print the maximum possible beauty of the arrangement\nprint(solve(n, trophies))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "import sys\nn,k = [int(x) for x in input().split()]\na = list(reversed([int(x)-1 for x in input().split()]))\ns = []\nb = []\ngoal = 0\n\nused = [False]*(n)\nfor node in a:\n    used[node]=True\n\nsearch_from = -1\nbig = n-1 \nres = []\nwhile goal!=n:\n    while a:\n        res.append(a[-1])\n        s.append(a.pop())\n        search_from = s[-1]-1\n        if (len(s)>1 and s[-1]>s[-2]):\n            print(-1)\n            return\n        while s and s[-1]==goal:\n            goal += 1\n            s.pop()\n            if s:\n                search_from = s[-1]-1\n    if goal==n:\n        break\n    if len(s)==0:\n        while big>=0 and used[big]:\n            big-=1\n        if big==-1:\n            print(-1)\n            return\n        used[big]=True\n        a.append(big)\n    else:\n        while search_from>=0 and used[search_from]:\n            search_from-=1\n        if search_from==-1:\n            print(-1)\n            return\n        used[search_from]=True\n        a.append(search_from)\n        \nprint(*[x+1 for x in res])\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "def calculate_additional_marks(n, k, marks):\n    current_average = sum(marks) / n\n    if current_average >= k:\n        return 0\n\n    additional_marks_needed = k * n - sum(marks)\n    return additional_marks_needed\n\n\nif __name__ == \"__main__\":\n    n, k = map(int, input().split())\n    marks = list(map(int, input().split()))\n\n    additional_marks = calculate_additional_marks(n, k, marks)\n    print(additional_marks)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "from functools import reduce\n\ndef solve():\n    sum_ = a[:]\n    for i in range(1, n):\n        sum_[i] += sum_[i - 1]\n    if (sum_[n - 1] % 2):  return False\n    half = int(sum_[n - 1] / 2)\n    st = set([0])\n    for i in range(n):\n        if sum_[i] >= half and sum_[i] - half in st:\n            return True\n        st.add(a[i])\n\n    sum_ = a[:]\n    for i in range(n - 2, -1, -1):\n        sum_[i] += sum_[i + 1]\n    st = set([0])\n    for i in range(n - 1, -1, -1):\n        if sum_[i] >= half and sum_[i] - half in st:\n            return True\n        st.add(a[i])\n    return False\n\nwhile True:\n    try:\n        n = int(input())\n    except:\n        break\n    a = [int(x) for x in input().split(' ')]\n    print('YES' if solve() else \"NO\")\n    \n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "s = ''\n\nfor i in range(1,100000000):\n        s += str(i)\n        if len(s) >= 11000:\n                break\n\nprint(s[int(input())-1])", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "mi = lambda: [int(i) for i in input().split()]\nc1, c2, c3, c4 = int(input()), int(input()), int(input()), int(input())\n\nif c1 != c4:\n    print(0)\n    return\n\nif c3 != 0 and c1 == 0:\n    print(0)\n    return\n\nprint(1)\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "n=int(input())\ns=[c=='1' for c in input()]\nm=len(s)\nz=[[0,0]]\nfor c in s:\n ind = z[-1][c]\n z[-1][c] = len(z)\n z.append(z[ind][:])\nassert(len(z) == m+1)\nz[m][0] = z[m][1] = m # make it sticky\n\n# how many things match directly\ndp = [0 for _ in range(m+1)]\ndp[0] = 1\nfor i in range(n):\n ndp = [0 for _ in range(m+1)]\n for i in range(m+1):\n  ndp[z[i][0]] += dp[i]\n  ndp[z[i][1]] += dp[i]\n dp = ndp\nres = dp[m]\n\nfor k in range(1, m):\n s0 = 0\n for c in s[-k:]:\n  s0 = z[s0][c]\n dp = [0 for _ in range(m+1)]\n dp[s0] = 1\n for i in range(n - k):\n  ndp = [0 for _ in range(m+1)]\n  for i in range(m+1):\n   ndp[z[i][0]] += dp[i]\n   ndp[z[i][1]] += dp[i]\n  dp = ndp\n for s1 in range(m): # skip m\n  v = dp[s1]\n  for c in s[-k:]:\n   if s1 == m: v = 0\n   s1 = z[s1][c]\n  if s1 == m: res += v\nprint(res)", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "def get_result(x, y):\n    if x == y:\n        return 0\n    if x < y:\n        return -1\n    if x % y == 0:\n        return x // y - 1\n    if x % 2 == 0:\n        return get_result(x // 2, y) + 1\n    return -1\n\n\ndef main():\n    x, y = map(int, input().split())\n    result = get_result(x, y)\n    if result == -1:\n        print(-1)\n    else:\n        print(result)\n\n\nif __name__ == \"__main__\":\n    main()", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "def min_stones(n, s):\n    stones = 0\n    min_stones = 0\n\n    for operation in s:\n        if operation == '-':\n            stones -= 1\n        else:\n            stones += 1\n\n        min_stones = min(min_stones, stones)\n\n    return min_stones\n\n\nif __name__ == '__main__':\n    n = int(input())\n    s = input()\n\n    result = min_stones(n, s)\n\n    print(result)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Thu Jan 21 14:59:34 2016\n\n@author: kebl4230\n\"\"\"\nstart = [int(entry) for entry in input().split()]\nend = [int(entry) for entry in input().split()]\nx_dist = abs(start[0] - end[0])\ny_dist = abs(start[1] - end[1])\nresult = x_dist + y_dist - min(x_dist,y_dist) * (1 if (x_dist > 0 and y_dist > 0) else 0)\nprint(result)", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "def lucky_ticket(ticket):\n    s = sum(map(int, ticket[:3]))\n    e = sum(map(int, ticket[3:]))\n    if s == e:\n        return 0\n    return abs(s - e)\n\n\ndef main():\n    ticket = input(\"Enter the ticket: \")\n    result = lucky_ticket(ticket)\n    print(\"Minimum number of digits to replace:\", result)\n\n\nif __name__ == \"__main__\":\n    main()", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "def same_finger_movements(n, num):\n    keypad = [\n        ['1', '2', '3'],\n        ['4', '5', '6'],\n        ['7', '8', '9'],\n        ['*', '0', '#']\n    ]\n    finger_movements = []\n    for i in range(1, n):\n        current_digit = num[i]\n        previous_digit = num[i-1]\n        current_position = (-1, -1)\n        previous_position = (-1, -1)\n        for j in range(len(keypad)):\n            for k in range(len(keypad[j])):\n                if current_digit == keypad[j][k]:\n                    current_position = (j, k)\n                if previous_digit == keypad[j][k]:\n                    previous_position = (j, k)\n        if current_position == (-1, -1) or previous_position == (-1, -1):\n            continue\n        finger_movements.append((current_position[0] - previous_position[0], current_position[1] - previous_position[1]))\n    for movement in finger_movements:\n        if movement not in finger_movements[1:]:\n            return 'NO'\n    return 'YES'\n\n\nif __name__ == '__main__':\n    n = int(input())\n    num = input()\n    print(same_finger_movements(n, num))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "def solve(n, x, a):\n    if x < 0:\n        a.sort()\n    else:\n        a.sort(reverse=True)\n    beauty = 0\n    for i in range(n):\n        beauty += a[i] * x\n    return beauty\n\nn, x = map(int, input().split())\na = list(map(int, input().split()))\n\nanswer = solve(n, x, a)\nprint(answer)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "t, f = map(int, input().split())\ns = [f] * 3\ncount = 0\nwhile sum(s) < 3*t:\n\ts.sort()\n\ts[0] = min(t, s[1]+s[2] - 1)\n\tcount += 1\nprint(count)", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "# Python3 code\nn, m = map(int, input().split())\n\nwhile True:\n    if n == 0 or m == 0:\n        break\n    elif n >= 2 * m:\n        n -= 2 * m\n    elif m >= 2 * n:\n        m -= 2 * n\n    else:\n        break\n\nprint(n, m)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "# Function to find the minimum difference between angles of sectors\ndef min_difference(a):\n    n = len(a)\n    # Initialize the minimum difference as the maximum possible value\n    min_diff = 360\n    # Sort the angles in ascending order\n    a.sort()\n    # Traverse the array from the first element to the last\n    for i in range(n):\n        # Calculate the difference between the angles of two sectors\n        diff = abs(a[i] - a[n-1-i])\n        # Update the minimum difference if a smaller value is found\n        if diff < min_diff:\n            min_diff = diff\n    # If the array contains 180 degrees, then the minimum difference is 0\n    if 180 in a:\n        min_diff = 0\n    # Return the minimum difference\n    return min_diff\n\n# Main function\nif __name__ == \"__main__\":\n    n = int(input())\n    a = list(map(int, input().split()))\n    result = min_difference(a)\n    print(result)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "def calculate_days(c, v_0, v_1, a, l):\n    # Initialize variables\n    current_page = 0\n    days_needed = 0\n    daily_read = v_0\n\n    # Check if Mister B can finish the book on the first day\n    if c <= v_0:\n        return 1\n\n    # Calculate the number of days needed\n    while current_page < c:\n        # Increment the days needed\n        days_needed += 1\n\n        # Calculate the number of pages to read\n        if daily_read + a <= v_1:\n            daily_read += a\n        else:\n            daily_read = v_1\n        read_pages = daily_read - l\n\n        # Update the current page\n        current_page += read_pages\n\n    return days_needed\n\n# Read the input\nc, v_0, v_1, a, l = map(int, input().split())\n\n# Calculate and print the number of days needed\ndays_needed = calculate_days(c, v_0, v_1, a, l)\nprint(days_needed)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "import math\n\n# Function to calculate the power of a number\ndef power(base, exponent):\n    result = math.pow(base, exponent)\n    return result\n\n# Function to calculate the max power and the corresponding expression\ndef max_power_expression(x, y, z):\n    # Calculate the powers\n    a_1 = power(x, power(y, z))\n    a_2 = power(x, power(z, y))\n    a_3 = power(power(x, y), z)\n    a_4 = power(power(x, z), y)\n    a_5 = power(y, power(x, z))\n    a_6 = power(y, power(z, x))\n    a_7 = power(power(y, x), z)\n    a_8 = power(power(y, z), x)\n    a_9 = power(z, power(x, y))\n    a_10 = power(z, power(y, x))\n    a_11 = power(power(z, x), y)\n    a_12 = power(power(z, y), x)\n\n    # Create a list of the powers\n    powers = [a_1, a_2, a_3, a_4, a_5, a_6, a_7, a_8, a_9, a_10, a_11, a_12]\n\n    # Find the maximum power and the corresponding index\n    max_power = max(powers)\n    max_index = powers.index(max_power)\n\n    # Determine the corresponding expression\n    if max_index == 0:\n        expression = 'x^y^z'\n    elif max_index == 1:\n        expression = 'x^z^y'\n    elif max_index == 2:\n        expression = '(x^y)^z'\n    elif max_index == 3:\n        expression = '(x^z)^y'\n    elif max_index == 4:\n        expression = 'y^x^z'\n    elif max_index ==", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "n, k = list(map(int, input().split()))\n\nans = \"Yes\"\nfor i in range(2, k + 1):\n    if n % i != i - 1:\n        ans = \"No\"\n        break\n    elif 1e6 < i:\n        break\nprint(ans)\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "from math import factorial\n\ndef mod_inverse(a, m):\n    b = m\n    x0, x1 = 0, 1\n    if m == 1:\n        return 0\n    while a > 1:\n        q = a // m\n        a, m = m, a % m\n        x0, x1 = x1 - q * x0, x0\n    if x1 < 0:\n        x1 += b\n    return x1\n\ndef binomial(n, k, p):\n    if k < 0 or k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    num = den = 1\n    for i in range(1, k + 1):\n        num = (num * (n - i + 1)) % p\n        den = (den * i) % p\n    return (num * mod_inverse(den, p)) % p\n\nn = int(input())\n\nli = []\nri = []\n\nfor i in range(n):\n    l, r = map(int, input().split())\n    li.append(l)\n    ri.append(r)\n\nnumerator = 1\ndenominator = 1\n\nfor i in range(n):\n    numerator = (numerator * binomial(n - i, li[i], 998244353)) % 998244353", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "n = int(input())\ns = input()\np,q = input().split()\nif p[0] == '-':\n    x = -1*int(p[1:])\nelse:\n    x = int(p)\nif q[0] == '-':\n    y = -1*int(q[1:])\nelse:\n    y = int(q)\ncur = [0,0]\nif(abs(x)+abs(y) > n):\n    print(-1)\nelif((x+y)%2 != n%2):\n    print(-1)\nelse:\n    end = n\n    for i in range(n):\n        if s[i] == \"R\":\n            cur[0] += 1\n        if s[i] == \"L\":\n            cur[0] -= 1\n        if s[i] == \"U\":\n            cur[1] += 1\n        if s[i] == \"D\":\n            cur[1] -= 1\n        if(abs(x-cur[0])+abs(y-cur[1]) >= n-i):\n            end = i\n            break\n    if end == n:\n        print(0)\n    else:\n        m = [0]*(end+1)\n        start = n\n        for i in range(end,-1,-1):\n            if s[i] == \"R\":\n                cur[0] -= 1\n            if s[i] == \"L\":\n                cur[0] += 1\n            if s[i] == \"U\":\n                cur[1] -= 1\n            if s[i] == \"D\":\n                cur[1] += 1\n            while(abs(x-cur[0])+abs(y-cur[1]) <= start-i):\n                start -= 1\n                if s[start] == \"R\":\n                    x -= 1\n                if s[start] == \"L\":\n                    x += 1\n                if s[start] == \"U\":\n                    y -= 1\n                if s[start] == \"D\":\n                    y += 1\n            m[i] = start-i+1\n        minn = n\n        for i in m:\n            minn = min(minn,i)\n        print(minn)\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "def right(m, n, a):\n    b = True\n    n2 = a // 2 - a // 6\n    n3 = a // 3 - a // 6\n    n6 = a // 6\n    if n2+n6<n or n3+n6<m or n2+n3+n6<n+m:\n        b = False\n    return b\n    \n\nn, m  = list(map(int, input().split()))\nans = n+m\nwhile not right(m, n, ans):\n        ans += 1\nprint(ans)\n\t\t\t    \n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "n, a, b = map(int, input().split())\n\nwhile a + b < n:\n    a, b = max(a-1, 1), b+1\n\nprint(max(a, b) // n)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "n, k = [int(s) for s in input().split()]\nk = min(n // 2, k)\n\n\nprint((2 * n - 2 * k - 1) * k)\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "# This function takes as input the number of days, the number of days chosen for sell-out,\n# and the number of products and clients on each day.\ndef solve(n, f, products, clients):\n    # We sort the days based on the number of products on sale on each day.\n    days = sorted(zip(products, clients), key=lambda x: x[0])\n    # We calculate the total number of products sold on each day.\n    sold = [products[i] - max(0, clients[i] - products[i]) for i in range(n)]\n    # We calculate the number of products sold on each day if the sell-out is held.\n    sold_sellout = [2 * products[i] - max(0, clients[i] - 2 * products[i]) for i in range(n)]\n    # We calculate the total number of products sold if the sell-out is held.\n    sold_sellout_total = sum(sold_sellout)\n    # We calculate the total number of products sold without the sell-out.\n    sold_total = sum(sold)\n    # We initialize the answer to the total number of products sold without the sell-out.\n    ans = sold_total\n    # We iterate over the days.\n    for i in range(n):\n        # We calculate the total number of products sold with the sell-out on the current day.\n        sold_sellout_total_new = sold_sellout_total + sold[i] - sold_sellout[i]\n        # We update the answer if the new total is larger.\n        ans = max(ans, sold_sellout_total_new)\n    # We return the answer.\n    return ans\n\n# This function reads the input from the user.\ndef main():\n    # We read the number of days and the number of days chosen for sell-out.\n    n, f = map(int, input().split())\n    # We initialize the lists for the number of products and clients on each day.\n    products = []\n    clients = []\n    # We read the input for each day.\n    for _ in range", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "n, k = map(int, input().split())\n\nl = list(map(int, input().split()))\n\nl = sorted(l, reverse=True)\ns = 0\nfor _ in range(n):\n    if l[0] <= 0:\n        break\n    if l[0] <= 2:\n        l[0] -= min(l[0],2)\n        s += 1\n    l[0] -= min(l[0],4)\n    l = sorted(l, reverse=True)\nfor _ in range(n):\n    if l[0] <= 0:\n        break\n    l[0] -= min(l[0],2)\n    l = sorted(l, reverse=True)\nfor _ in range(n):\n    if l[0] <= 0:\n        break\n    l[0] -= min(l[0],2)\n    l = sorted(l, reverse=True)\nfor _ in range(s):\n    if l[0] <= 0:\n        break\n    l[0] -= min(l[0],1)\n    l = sorted(l, reverse=True)\n\n\nif l[0] <= 0:\n    print(\"YES\")\nelse:\n    print(\"NO\")", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "# Input:\n# The first and only line of input contains an integer s (0 \u2264 s \u2264 99), Tavas's score.\n\n# Output:\n# In the first and only line of output, print a single string consisting only from English lowercase letters and hyphens ('-'). Do not use spaces.\n\n# Example:\n# Input: 6\n# Output: six\n\n# Input: 99\n# Output: ninety-nine\n\n# Input: 20\n# Output: twenty\n\n# Note:\n# You can find all you need to know about English numerals in http://en.wikipedia.org/wiki/English_numerals\n\ndef num_to_word(num):\n    # Define a dictionary with number to word mappings\n    d = {\n        0: 'zero', 1: 'one', 2: 'two', 3: 'three', 4: 'four', 5: 'five',\n        6: 'six', 7: 'seven', 8: 'eight', 9: 'nine', 10: 'ten',\n        11: 'eleven', 12: 'twelve', 13: 'thirteen', 14: 'fourteen', 15: 'fifteen',\n        16: 'sixteen', 17: 'seventeen', 18: 'eighteen', 19: 'nineteen',\n        20: 'twenty', 30: 'thirty', 40: 'forty', 50: 'fifty', 60: 'sixty',\n        70: 'seventy', 80: 'eighty', 90: 'ninety'\n    }\n\n    if 0 <= num <= 20:\n        return d[num]\n    elif 20 < num < 100:\n        if num % 10 == 0:\n            return d[num]\n        else:\n            return d[num // 10 * 10] + '-' + d[num % 10]\n\n\n# Get the input", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "n = int(input())\narr = list(map(int, input().split()))\n\nmin_index = []\nfor i in range(n):\n    if arr[i] == min(arr):\n        min_index.append(i)\n\nmin_distance = n\nfor i in range(len(min_index)-1):\n    if min_index[i+1] - min_index[i] < min_distance:\n        min_distance = min_index[i+1] - min_index[i]\n\nprint(min_distance)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "from heapq import *\n\ndef solve(x, n, d, h):\n    if x == 0:\n        return 0\n    if n == 0:\n        return -1\n\n    hpq = []\n    for i in range(n):\n        heappush(hpq, (-d[i], -h[i]))\n\n    cnt = 0\n    while x > 0:\n        cnt += 1\n        d_i, h_i = heappop(hpq)\n        x -= -d_i\n        if x > 0:\n            x += -h_i\n\n    return cnt\n\nt = int(input())\nfor _ in range(t):\n    n, x = map(int, input().split())\n    d = []\n    h = []\n    for i in range(n):\n        di, hi = map(int, input().split())\n        d.append(di)\n        h.append(hi)\n\n    print(solve(x, n, d, h))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "n, m, r = map(int, input().split())\ns = list(map(int, input().split()))\nb = list(map(int, input().split()))\ns.sort()\nb.sort()\nshares = 0\nfor i in range(n):\n    if s[i] <= r:\n        r -= s[i]\n        shares += 1\n    else:\n        break\nr = 0\nfor i in range(m):\n    if b[i] <= shares:\n        r += b[i]\n        shares -= b[i]\n    else:\n        break\nprint(r)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "3\n\ns = input()\nseat = s[-1]\nn = int(s[:-1])\n\nt = 1 + 16 * ((n - 1) // 4)\n\nn = (1 - (n % 4) % 2)\nt += n * 7\n\na = ['f', 'e', 'd', 'a', 'b', 'c']\nt += a.index(seat)\n\nprint(t)\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "def find_message(s, k):\n    if k > len(s):\n        return \"Impossible\"\n    \n    message = \"\"\n    i = 0\n    while i < len(s) and len(message) < k:\n        if s[i] != '?' and s[i] != '*':\n            message += s[i]\n            i += 1\n        elif s[i] == '?':\n            if i + 1 < len(s) and s[i + 1] == '*':\n                message += s[i + 2] * 2\n                i += 3\n            else:\n                i += 2\n        else:\n            message += s[i + 1]\n            i += 2\n    \n    if len(message) == k:\n        return message\n    else:\n        return \"Impossible\"", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "def gsd(a,b):\n    if b == 0:\n        return a\n    return gsd(b, a % b)\nn, k = list(map(int, input().split()))\nprint(n * (10 ** k // gsd(n, 10**k)))\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "\nn, a, b = list(map(int, input().strip().split()))\n\n\nif a + b < n:\n    print(0)\nelse:\n    x = 2\n    while True:\n        if a // x + b // x >= n and a // x >= 1 and b // x >= 1:\n            x += 1\n        else:\n            print(x - 1)\n            break\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "import sys\ninput_data = sys.stdin.read().strip().split()\nx = int(input_data[0])\nt = 0\nn = 0\noperations = []\n\n# Calculate the number of operations needed to reach the perfect longcat number\nwhile x != 2**n - 1:\n    if n % 2 == 0:\n        x += 1\n    else:\n        operations.append(n)\n        n += 1\n        x ^= 2**n - 1\n\n# Print the number of operations and the operation numbers\nprint(len(operations))\nfor i in operations:\n    print(i)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "a, b, c = map(int, input().split())\n\ns = a\nwhile s <= 1e9:\n    s += c\n    if s == b:\n        print(\"YES\")\n    else:\n        print(\"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "c, v_0, v_1, a, l = map(int, input().split())\n\nv_total = v_0\ndays = 1\n\nwhile v_total < c:\n    v_total += a\n    days += 1\n\nprint(days)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n, k = map(int, input().split())\n\npaths = []\nfor x in range(1, n + 1):\n    path = []\n    for y in range(x):\n        if y % 2 == 0:\n            path.append(y // 2)\n    paths.append(path)\n\ny_max = 0\nfor y in range(1, n + 1):\n    count = 0\n    for path in paths:\n        if y in path:\n            count += 1\n    if count >= k:\n        y_max = max(y_max, y)\n\nprint(y_max)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "3\nn = int(input())\na = list(map(int, input().split()))\n\n# Check if all possible values of x and y contradict with the information about your path\nif not (all((a[i] == a[i - 1] + y(i - 1) for i in range(1, n)) and all((a[i] == a[i] + 1) or (a[i] == a[i] - 1) for i in range(n))):\n    print(\"NO\")\nelse:\n    print(\"YES\")\n    x, y = solve(a)\n    print(x)\n    print(y)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n, m, d = map(int, input().split())\n\nx, y, x2, y2 = [int(input().split()) for _ in range(d)]\n\ncnt_l, cnt_r, cnt_t, cnt_b = map(int, input().split())\n\n# Create a dictionary to store the information about each sofa\nsofa_dict = {}\n\nfor i in range(1, d + 1):\n    sofa_dict[i] = {\"x\": 0, \"y\": 0, \"left\": 0, \"right\": 0, \"top\": 0, \"bottom\": 0}\n\nfor i in range(d):\n    x, y, x2, y2 = map(int, input().split())\n    sofa_dict[x] = {\"x\": x, \"y\": y, \"left\": x2, \"right\": x2, \"top\": y2, \"bottom\": y2}\n\n# Calculate the number of sofas that meet the given conditions\ncnt = 0\nfor i in range(1, d + 1):\n    if sofa_dict[i][\"left\"] - sofa_dict[i][\"x\"] == cnt_l and sofa_dict[i][\"right\"] - sofa_dict[i][\"x\"] == cnt_r and sofa_dict[i][\"top\"] - sofa_dict[i][\"y\"] == cnt_t and sofa_dict[i][\"bottom\"] - sofa_dict[i][\"y\"] == cnt_b:\n        cnt += 1\n\n# Print the number of the sofa that meets the given conditions\nif cnt == 1:\n    print(i)\nelse:\n    print(-1)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n, m = map(int, input().split())\n\n# Read the pixels\npixels = []\nfor _ in range(n):\n    pixels.append(input().strip().split())\n\n# Check if the required frame exists\nfound = False\nfor d in range(1, int(n) + 1):\n    for x in range(m):\n        for y in range(n):\n            # Check if the pixel is white and not on the border of the frame\n            if pixels[y][x] == 'w' and (x == 0 or pixels[y][0] == '.' or pixels[y][x] == '.' or pixels[0][x] == '.'):\n                # Check if the frame is optimal\n                frame_size = d * d\n                frame_pixels = set(pixels[y][x] for y in range(y - d + 1, y + d) for x in range(x - d + 1, x + d))\n                if frame_size == frame_pixels and not found:\n                    found = True\n                    print(\"\".join([\"+\" if pixels[y][x] == 'w' else '.' for y in range(n) for x in range(m)]))\n\nif not found:\n    print(-1)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "3\nn, k = map(int, input().split())\n\nremainders = set()\nfor i in range(1, k + 1):\n    remainders.add(n % i)\n\nif len(remainders) == k:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "s = input().strip()\ns_len = len(s)\nt = \"\"\nu = \"\"\n\nfor i in range(s_len):\n    if s[0] == s[i]:\n        t += s[i]\n        s = s[1:]\n    elif s[i] == s[s_len-1]:\n        u += s[i]\n        s = s[0:s_len-1]\n\nprint(u)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n, a, x, b, y = map(int, input().split())\n\n# Calculate the number of minutes it takes for each train to reach their finish station\nmin_a = (x - a) + 1\nmin_b = (y - b) + 1\n\n# If the minimum number of minutes is the same, it means that Daniel and Vlad will be at the same station at the same time\nif min_a == min_b:\n    print(\"YES\")\nelse:\n    print(\"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "s = input().strip()\n\n# Define password complexity requirements\nrequirements = (len(s) >= 5) and (bool(any(char.isupper() for char in s)) or False) and (bool(any(char.islower() for char in s)) or False) and (bool(any(char.isdigit() for char in s)) or False)\n\n# Print the result\nif requirements:\n    print(\"Correct\")\nelse:\n    print(\"Too weak\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "m, x = map(int, input().split())\n\nprint(m - 1)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n, m, k = map(int, input().split())\n\n# Calculate the number of moves to the center\nmoves = 2 * n + m - 2\n\n# Subtract k from the number of moves\nmoves -= k\n\n# Calculate the row and column of the cell where Lara will be\nrow = 1 + moves // n\ncolumn = 1 + moves % n\n\n# Print the cell number\nprint(row, column)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n, b = map(int, input().split())\n\n# Calculate the factorial of n and find the number of trailing zeros\nfact_n = 1\nnum_zeros = 0\nfor i in range(1, n + 1):\n    fact_n *= i\n    while fact_n % b == 0:\n        num_zeros += 1\n        fact_n //= b\n\n# Print the number of trailing zeros\nprint(num_zeros)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "def solve(l, s, r, p):\n    # Check if the pedestrian light is green and the light of the lane that can get to or from that same part is also green.\n    return (p == 1) and (l == 1 or s == 1 or r == 1)\n\n\nn = int(input())\nfor _ in range(n):\n    l, s, r, p = map(int, input().split())\n    print(\"YES\" if solve(l, s, r, p) else \"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "x, k = map(int, input().split())\n\n# Calculate the number of dresses in the end of the year\nnum_ dresses = x * 2 ** (k - 1)\n\n# Subtract the dress eaten by the wardrobe\nnum_ dresses_remaining = num_ dresses - num_ dresses // 2\n\n# Find the expected number of dresses\nexpected_num_ dresses = num_ dresses_remaining // 2\n\n# Print the result\nprint(expected_num_ dresses)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "import math\n\n# Read input\ny_1, y_2, y_w, x_b, y_b, r = map(int, input().split())\n\n# Calculate the distance between the ball and the wall\ndistance = math.sqrt((x_b - 0)**2 + (y_b - y_w)**2)\n\n# If the ball is not close enough to the wall, it's impossible to score\nif distance > r:\n    print(-1)\n\n# Calculate the angle of incidence and reflection\ntheta = math.atan((y_b - y_w) / x_b)\n\n# Calculate the distance from the wall to the goalpost\ndistance_to_goal = math.sqrt((x_b - 0)**2 + (y_b - y_2)**2)\n\n# If the ball is not close enough to the goalpost, it's impossible to score\nif distance_to_goal > r:\n    print(-1)\n\n# Calculate the abscissa of the point of aiming\nx_w = x_b - 2 * r * math.sin(theta)\n\n# Print the abscissa of the point of aiming\nprint(round(x_w, 8))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\n\na.sort()\n\n# Find the minimum cost and the value of t that minimizes the cost\nmin_cost = float('inf')\nfor t in range(1, int(a[0]) + 1):\n    cost = 0\n    for i in range(n):\n        cost += abs(a[i] - t)\n    if cost < min_cost:\n        min_cost = cost\n        t_opt = t\n\nprint(t_opt, min_cost)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n = int(input())\n\ncost = 0\npairs = 0\nfor i in range(1, n+1):\n    cost += i\n    num_nine = cost // 9\n    pairs += num_nine\n\nprint(pairs)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n, m = map(int, input().split())\ngrid = []\nfor _ in range(n):\n    grid.append(list(input().strip().split()))\n\nis_possible = False\nbomb_pos = None\nfor r in range(n):\n    for c in range(m):\n        if grid[r][c] == \"*\":\n            if not bomb_pos:\n                bomb_pos = (r, c)\n            else:\n                is_possible = False\n\nif is_possible:\n    print(\"YES\")\n    print(bomb_pos)\nelse:\n    print(\"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "a, b, c, x, y, z = map(int, input().split())\n\n# Calculate the minimum grapes needed for each person\nmin_grapes = x, y, z\n\n# Check if there are enough grapes to fulfill everyone's desire\nif a >= min_grapes[0] and b >= min_grapes[1] and c >= min_grapes[2]:\n  print(\"YES\")\nelse:\n  print(\"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n = int(input())\nk1 = int(input())\nk1_cards = list(map(int, input().split()))\nk2 = int(input())\nk2_cards = list(map(int, input().split()))\n\n# Calculate the number of fights\nnum_fights = k1 + k2 - 1\n\n# Check if the game will end\nif sum(k1_cards) != sum(k2_cards):\n  # Game won't end\n  print(-1)\nelse:\n  # Calculate the winner\n  winner = 2 if sum(k1_cards) - sum(k2_cards) > 0 else 1\n\n  # Print the number of fights and the winner\n  print(num_fights, winner)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\n\ncumulative_sum = 0\nfor i in range(len(a)):\n    cumulative_sum += a[i]\n\nfor i in range(1, n + 1):\n    if cumulative_sum[i - 1] >= sum / 2:\n        print(i)\n        exit()\n\nprint(-1)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n, a, b = map(int, input().split())\n\nif n < a or n < b:\n    print(\"NO\")\nelse:\n    print(\"YES\")\n    x, y = divmod(n, a)\n    print(x, y)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "T = int(input())\n\nfor _ in range(T):\n    n, x = map(int, input().split())\n    s = input()\n\n    cnt0 = s.count(\"0\")\n    cnt1 = s.count(\"1\")\n\n    balance = cnt0 - cnt1\n\n    if balance == x:\n        print(min(len(s) // n, x))\n    else:\n        print(-1)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "import numpy as np\n\nn, k = map(int, input().split())\n\nif k > n * n:\n    print(-1)\nelse:\n    a = np.zeros((n, n))\n    a[np.arange(k), np.arange(k)] = 1\n\n    print(a)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\n\nis_unimodal = True\n\n# Increasing block\nincreasing_block = False\nfor i in range(n):\n    if i > 0 and a[i] < a[i-1]:\n        increasing_block = False\n\n# Constant block\nconstant_block = False\nfor i in range(n):\n    if i > 0 and a[i] == a[i-1]:\n        constant_block = True\n\n# Decreasing block\ndecreasing_block = False\nfor i in range(n-1, -1, -1):\n    if i < n-1 and a[i] > a[i+1]:\n        decreasing_block = False\n\nif increasing_block or constant_block or decreasing_block:\n    print(\"YES\")\nelse:\n    print(\"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "import sys\n\ndef is_regular(s):\n    # Check if the string is balanced\n    if s.count(\"(\") == s.count(\")\") and s.count(\")\") >= s.count(\"(\"):\n        return True\n    else:\n        return False\n\ncnt_1, cnt_2, cnt_3, cnt_4 = map(int, sys.stdin.read().splitlines())\n\nif is_regular(\"(\" * cnt_1 + \")\" * cnt_2 + \"(\" * cnt_3 + \"))\" * cnt_4):\n    print(1)\nelse:\n    print(0)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "W = int(input())\n\ncnt = list(map(int, input().split()))\n\n# Calculate the maximum possible weight of a good subset\nmax_weight = 0\nfor i in range(1, 9):\n    max_weight = max(max_weight, i * cnt[i])\n\n# Print the maximum possible weight\nprint(max_weight)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "l, r, a = map(int, input().split())\n\n# calculate the maximum number of players for each hand\nleft_players = l + a // 2\nright_players = r + a // 2\n\n# find the maximum team size\nteam_size = min(left_players, right_players)\n\n# print the team size\nprint(team_size)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "import math\n\ndef numTrees(n):\n    def dfs(h, n):\n        if h >= n:\n            return 0\n\n        # Calculate the number of perfect balanced striped trees for a given height and number of nodes\n        return dfs(h + 1, n) + 2 * dfs(h, n - 1)\n\n    return int((dfs(0, n) - 1) % 998244353)\n\n\nprint(numTrees(4))\nprint(numTrees(3))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "from fractions import Fraction\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef get_fraction(t, w, b):\n    l = lcm(w, b)\n    num = min(t - l // w, t - l // b) + 1\n    den = t\n    if num == 0:\n        return str(0)\n    g = gcd(num, den)\n    return str(Fraction(num // g, den // g))\n\nt, w, b = map(int, input().split())\nprint(get_fraction(t, w, b))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def find\\_sequence(n, k):\nif n == 0 and k == 0:\nreturn \"Yes\", []\nif n > 0 and k == 1:\nreturn \"Yes\", [int(math.log2(n))]\nif (n & (n - 1)) != 0 or k == 0 or k > n or (n & (1 << k)) == 0:\nreturn \"No\", []\nres = [0] * k\ni = k - 1\nwhile n != 0:\nres[i] = int(math.log2(n))\nn -= 1 << res[i]\ni -= 1\nreturn \"Yes\", res[::-1]\n\nn, k = map(int, input().split())\nans, res = find\\_sequence(n, k)\nprint(ans)\nif ans == \"Yes\":\nprint(*res)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "n = int(input())\nx, y = 0, 0 # current position\nfor _ in range(n):\n    t, d = map(str, input().split())\n    t = int(t)\n    if d == 'South':\n        if y == 0:\n            print('NO')\n            exit()\n        y -= t\n    elif d == 'North':\n        if y == 20000:\n            print('NO')\n            exit()\n        y += t\n    elif d == 'East':\n        x += t\n    elif d == 'West':\n        x -= t\nif x != 0 or y != 0:\n    print('NO')\nelse:\n    print('YES')", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef solve(a1, b1, a2, b2, l, r):\n    # Calculate the greatest common divisor\n    g = gcd(a1, a2)\n    a1 //= g", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef count_good_pairs(l, r, x, y):\n    count = 0\n    for a in range(l, r+1):\n        for b in range(l, r+1):\n            if gcd(a, b) == x and lcm(a, b) == y:\n                count += 1\n    return count\n\nl, r, x, y = map(int, input().split())\nprint(count_good_pairs(l, r, x, y))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def find_matrix_size(n, a):\n    # Initialize the maximum and minimum possible values of x and y\n    x_max, x_min, y_max, y_min = 1, 1, n, 1\n\n    for i in range(1, n):\n        # Calculate the difference between two adjacent elements\n        diff = a[i] - a[i - 1]\n        \n        # Update the minimum and maximum possible values of x and y\n        x_min = max(x_min, 1 + (diff - 1) // n)\n        x_max = min(x_max, 1 + (diff - 1) % n)\n        y_min = max(y_min, 1 + (diff - 1) % n)\n        y_max = min(y_max, 1 + (diff - 1) // n)\n\n        # If x_max is less than x_min or y_max is less than y_min,\n        # then there is no possible matrix size that satisfies the condition\n        if x_max < x_min or y_max < y_min:\n            return \"NO\"\n\n    # If x_min and x_max are equal and y_min and y_max are equal,\n    # then there is a unique matrix size that satisfies the condition\n    if x_min == x_max and y_min == y_max:\n        return \"YES\\n{} {}\".format(x_min, y_min)\n\n    # If x_min and x_max are equal, then there are multiple possible matrix sizes\n    # that satisfies the condition\n    if x_min == x_max:\n        return \"YES\\n{} {}\".format(x_min, y_min if y_min <= y_max else y_max)\n\n    # If y_min and y_max are equal, then there are multiple possible matrix sizes\n    # that satisfies the condition\n    if y_min == y_max:\n        return \"YES\\n{} {}\".format(x_min if x_min <= x_max else x_max, y_min)\n\n    #", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def is\\_possible(n):\nif n & 1:\nreturn False\ni = 1\nwhile True:\nk = (i * (i - 1)) // 2\nif k > n:\nbreak\nif k == n:\nprint(i)\ni += 1\nif i > n:\nreturn\nprint(-1)\n\nn = int(input())\nis\\_possible(n)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def max\\_expected\\_fishes(n, m, r, k):\nn, m, r, k = map(int, [n, m, r, k])\n\n# Calculate the total number of possible positions to place the scoop-net\ntotal\\_positions = (n - r + 1) * (m - r + 1)\n\n# Create a list to store the number of positions the scoop-net can be placed\n# such that the cell is inside the scoop-net\ncell\\_positions = [(r - 1)**2 for _ in range(n*m)]\n\n# Place the fishes in the k cells with the highest number of positions\n# the scoop-net can be placed such that the cell is inside the scoop-net\nfishes = [cell\\_positions.pop(max\\_index) for _ in range(k)]\n\n# Calculate the maximum possible expected number of caught fishes\nmax\\_expected = sum(fishes) / total\\_positions\n\n# Return the maximum possible expected number of caught fishes\nreturn max\\_expected\n\n# Test the function\nprint(max\\_expected\\_fishes(3, 3, 2, 3)) # 2.0000000000\nprint(max\\_expected\\_fishes(12", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "n, x = map(int, input().split())\na = list(map(int, input().split()))\n\ncurrent_max = max_so_far = sum(a)\n\nfor i in range(n):\n    # We keep track of the maximum sum subarray ending at index i\n    current_max = max(a[i], current_max + a[i])\n    # We update the maximum sum of the whole array if needed\n    max_so_far = max(max_so_far, current_max)\n\n# If x is negative, we want to minimize the sum of the subarray\n# by multiplying it by x. We can do this by checking if the\n# maximum sum subarray is negative and if so, multiplying it by x.\nif x < 0:\n    max_so_far = max(max_so_far, sum(a) + x * max(0, current_max))\n\nprint(max_so_far)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef find_solutions(a, b, x, y):\n    lcm = a * b // gcd(a, b)\n    max_width = a if a % x == 0 else (a // x + 1) * x\n    max_height = b if b % y == 0 else (b // y + 1) * y\n    count = 0\n    for w in range(x, max_width + 1, x):\n        h = (w * y) // x\n        if h <= b and h >= y and h % y == 0:\n            count += 1\n    return count\n\na, b, x, y = map(int, input().split())\nprint(find_solutions(a, b, x, y))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "import math\n\ndef min_traps(m, x):\n    if math.gcd(m, x) != 1:\n        return -1\n    else:\n        return (m - 1) // x + 1\n\n# Test cases\nprint(min_traps(4, 3)) # 3\nprint(min_traps(5, 2)) # 2", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def solve():\n    n, t = map(int, input().split())\n    dp = [0] * (n + 1)  # dp[i] is the number of full glasses at level i\n    dp[1] = 1\n    for _ in range(t):\n        for i in range(n, 0, -1):  # iterate from bottom to top\n            dp[i - 1] += dp[i] // (i + 1)  # pour champagne from level i to level i - 1\n            dp[i] %= i + 1  # update remaining champagne at level i\n    print(sum(dp))\n\n\nif __name__ == '__main__':\n    solve()", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def lara_position(n, m, k):\n    # Lara starts at position (1, 1)\n    x, y = 1, 1\n    # She moves n-1 steps down and then m-1 steps to the right\n    steps_down = (n - 1) // 2\n    steps_right = m - 1\n    # We count how many steps Lara has made so far\n    steps = 0\n    while steps + 1 < k + 1:\n        # If Lara has not reached the bottom row yet\n        if x < n and steps < steps_down:\n            # She moves down\n            x += 1\n            steps += 1\n        # If Lara has reached the bottom row and has not moved to the right end of it yet\n        elif x == n and steps < steps_down + steps_right:\n            # She moves right\n            y += 1\n            steps += 1\n        # If Lara has moved to the right end of the bottom row\n        elif x == n and steps == steps_down + steps_right:\n            # She moves up\n            x -= 1\n            y -= 1\n            steps_right -= 1\n            steps += 1\n        # If Lara has moved to the left end of some row\n        elif y == 1 and x > 1 and steps < k:\n            # She moves up\n            x -= 1\n            y += 1\n            steps += 1\n    return x, y\n\n# Test the function\nprint(lara_position(4, 3, 0))  # (1, 1)\nprint(lara_position(4, 3, 11))  # (1, 2)\nprint(lara_position(4, 3, 7))   # (3, 2)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "n, k = map(int, input().split())\nmarks = list(map(int, input().split()))\n\ncurrent\\_sum = sum(marks)\ncurrent\\_avg = current\\_sum / n\nadditional\\_marks = (k - current\\_avg) * n\nadditional\\_marks = math.ceil(additional\\_marks)\n\nprint(additional\\_marks)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def min\\_days\\_to\\_read\\_book(c, v0, v1, a, l):\nif v0 + (c - v0) // a > v1:\nreturn -1\n\ndays = 1\ncurrent\\_page = v0\nwhile current\\_page < c:\ndays += 1\nif current\\_page + a > c:\n\ta = c - current\\_page\nif current\\_page + a > v1:\n\ta = v1 - current\\_page\ncurrent\\_page += a\ncurrent\\_page -= l\nif current\\_page < 0:\n\tcurrent\\_page = 0\nreturn days\n\n# Test cases\nprint(min\\_days\\_to\\_read\\_book(5, 5, 10, 5, 4)) # 1\nprint(min\\_days\\_to\\_read\\_book(12, 4, 12, 4, 1)) # 3\nprint(min\\_days\\_to\\_read\\_book(15, 1, 100, 0, 0)) # 15", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def solve():\n    n, t = map(int, input().split())\n    dp = [0] * (n + 1)  # dp[i] is the number of full glasses at level i\n    dp[1] = 1\n    for _ in range(t):\n        for i in range(n, 0, -1):  # iterate from bottom to top\n            dp[i - 1] += dp[i] // (i + 1)  # pour champagne from level i to level i - 1\n            dp[i] %= i + 1  # update remaining champagne at level i\n    print(sum(dp))\n\n\nif __name__ == '__main__':\n    solve()", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "n = int(input())\na = int(input())\nb = int(input())\n\nfor x in range(n//a + 1):\n    y = (n - x*a) // b\n    if x*a + y*b == n:\n        print(\"YES\")\n        print(x, y)\n        break\nelse:\n    print(\"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "n = int(input())\narr = list(map(int, input().split()))\n\ncounts = [0]*1003 + [0] + [0]*1003\nfor num in arr:\n    counts[num+1003] += 1\n\nmax_pos = 0\nfor d in range(1, 1003):\n    cur_pos = sum(counts[d::d])\n    if cur_pos > max_pos:\n        max_pos = cur_pos\n\nif max_pos >= n//2:\n    print(max(d for d in range(1, 1003) if sum(counts[d::d]) >= n//2))\nelse:\n    print(0)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def min\\_time(n, m, k, a, b):\nn, m, k = map(int, (n, m, k))\na, b = map(int, (a, b))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "import math\n\ndef power(x, y, p):\n    res = 1\n    x = x % p\n    while (y > 0):\n        if (y & 1):\n            res = (res * x) % p\n        y = y >> 1\n        x = (x * x) % p\n    return res\n\ndef invmod(a, b):\n    b0 = b", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def kth_digit():\n    num = 1\n    digit_count = {1: 1}\n    while True:\n        for i in str(num):\n            if i not in digit_count:\n                digit_count[i] = 0\n            digit_count[i] += 1\n            if len(digit_count) >= k:\n                print(digit_count[i] // (len(str(num)) // 9))\n                return\n        num += 1\n\nkth_digit()", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "n, m, d = map(int, input().split())\nsofas = []\nfor _ in range(d):\n    x1, y1, x2, y2 = map(int, input().split())\n    sofas.append((x1, y1, x2, y2))\ncnt = list(map(int, input().split()))\n\nfor i, sofa in enumerate(sofas):\n    x1, y1, x2, y2 = sofa\n    if (x1 - 1) * (y1 - 1) == cnt[0] and \\\n       (n - x2) * (y1 - 1) == cnt[1] and \\\n       (x1 - 1) * (m - y2) == cnt[2] and \\\n       (n - x2) * (m - y2) == cnt[3]:\n        print(i + 1)\n        break\nelse:\n    print(-1)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def countTrailingZeros(n, b):\n    # Calculate the number of trailing zeros in n! in base b\n    count = 0\n    while n > 0:\n        n, temp = divmod(n, b)\n        count += temp // 5\n    return count\n\n# Read input numbers\nn, b = map(int, input().split())\n\n# Print the result\nprint(countTrailingZeros(n, b))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "n, k = map(int, input().split())\n\n# Find the position of the rightmost digit that should be kept\nkeep_pos = -1\nwhile keep_pos >= -k and n % 5 != 0:\n    keep_pos -= 1\n    n //= 10\n\n# Calculate the number of digits to remove\nto_remove = len(str(n)) + keep_pos\n\n# Print the result\nprint(max(0, to_remove))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "import sys\n\ndef is\\_stack\\_sortable(p):\nn = len(p)\na = [0] * n\ns = []\n\nfor i in range(n):\na[i] = p[i]\n\nwhile a and s:\nwhile a:\ntop = a.pop(0)\ns.append(top)\n\nwhile s:\ntop = s.pop()\nif a and a[0] > top:\nprint(\"Not stack sortable\")\nreturn False\nb.append(top)\na.pop(0)\n\nreturn b == sorted(b)\n\ndef restore\\_permutation(n, k, p):\n# Create a list of remaining elements\nremaining = [x for x in range(1, n+1)]\nfor i in range(k):\nremaining.remove(p[i])\n\n# Sort the remaining elements in non-increasing order\nremaining.sort(reverse=True)\n\n# Check if the remaining elements are stack sortable\nfor i in range(2, len(remaining) + 1):\nif not is\\_stack\\_sortable(remaining[:i] + [0] * (n - i) + p[:k]):\nreturn -1\n\n# Return the lexicographically maximal permutation\nreturn remaining + p[:k]\n\nif __name__ == \"__main__\":\nn, k = map(int, input().strip().split())\np = list(map(int, input().strip().split()))\n\nif k == n:\nprint(\" \".join(map(str, p)))\nsys.exit(0)\n\npermutation = restore\\_permutation(n, k, p)\n\nif permutation == -1:\nprint(-1)\nelse:\nprint(\" \".join(map(str, permutation)))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "n, m = map(int, input().split())\na = [list(map(int, input().split())) for _ in range(n)]\n\n# Initialize matrix B as all zeros\nb = [[0]*m for _ in range(n)]\n\n# Initialize the number of operations as -1, indicating that it is currently impossible to make matrices A and B equal\nk = -1\n\n# Check if it is possible to make matrices A and B equal\nfor i in range(n):\n    for j in range(m):\n        if a[i][j] == 1 and b[i][j] == 0:\n            # If the current element of matrix A is 1 and the corresponding element of matrix B is 0, then we need to perform operations to make them equal\n            if i+1 < n and j+1 < m and a[i+1][j] == 1 and a[i][j+1] == 1 and a[i+1][j+1] == 1 and b[i+1][j] == 0 and b[i][j+1] == 0 and b[i+1][j+1] == 0:\n                # If the 2x2 submatrix around the current element can be made equal to the submatrix of matrix A, then perform the operations\n                b[i][j] = 1\n                b[i][j+1] = 1\n                b[i+1][j] = 1\n                b[i+1][j+1] = 1\n                k = n*m - sum(sum(b, []))\n                break\n            else:\n                # If it is not possible to make the submatrix equal to the submatrix of matrix A, then it is impossible to make matrices A and B equal\n                k = -1\n                break\n        elif a[i][j] == 0 and b[i][j] == 1:\n            # If the current element of matrix A is 0 and the corresponding element of matrix B is 1, then it is impossible to make matrices A and B equal\n            k = -1\n            break\n    if k", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "import math\n\ndef solution():\n    x = int(input())\n    prime_factors = prime\\_factors(x)\n    a = 1\n    b = 1\n    for prime in prime\\_factors:\n        if prime\\_factors[prime] % 2 == 1:\n            a *= prime\n        b *= prime ** (prime\\_factors[prime] // 2)\n    print(a, b)\n\ndef prime\\_factors(n):\n    prime\\_factors = {}\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            if i not in prime\\_factors:\n                prime\\_factors[i] = 1\n            else:\n                prime\\_factors[i] += 1\n    if n > 1:\n        if n not in prime\\_factors:\n            prime\\_factors[n] = 1\n        else:\n            prime\\_factors[n] += 1\n    return prime\\_factors\n\nsolution()", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "import math\n\ndef can_prepare(n, m, k, x, s, a, b, c, d, time):\n    mana = s\n    potions = 0\n\n    # check spells of the first type\n    for i in range(m):\n        if mana >= b[i] and a[i] <= time:\n            mana -= b[i]\n            time = a[i]\n\n    # check spells of the second type\n    for i in range(k):\n        if mana >= d[i] and potions + c[i] >= n:\n            mana -= d[i]\n            potions += c[i]\n            if potions >= n:\n                break\n\n    # check remaining time\n    if potions < n:\n        time_needed = math.ceil((n - potions) / (x / time)) * (x / time)\n    else:\n        time_needed = 0\n\n    return time + time_needed <= time, time_needed\n\ndef solution(n, m, k, x, s, a, b, c, d):\n    left, right = 1, x\n    while left < right:\n        time = (left + right) // 2\n        if can_prepare(n, m, k, x, s, a, b, c, d, time)[0]:\n            right = time\n        else:\n            left = time + 1\n    return left\n\n# example 1\nn, m, k = 20, 3, 2\nx, s = 10, 99\na = [2, 4, 3]\nb = [20, 10, 40]\nc = [4, 15]\nd = [10, 80]\nprint(solution(n, m, k, x, s, a, b, c, d))  # 20\n\n# example 2\nn, m, k = 20, 3,", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "n, m = map(int, input().split())\n\nif m == 0:\n    print(2 * n)\nelif n == 0:\n    print(3 * m)\nelse:\n    # Start by building the tallest tower with two-block pieces\n    height = 2 * n\n\n    # Try to add one three-block piece on top\n    height += 3\n\n    # If the height is not a multiple of 3, add enough two-block pieces to make it one\n    if height % 3 != 0:\n        height += 3 - height % 3\n\n    print(height)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "n, k = map(int, input().split())\nstones = [0] * n\nmoves = 0\n\n# Move to the first manhole if Nastya is not already there\nif k != 1:\n    for _ in range(k - 1):\n        stones[0] += 1\n        moves += 1\n\n# Move to the last manhole and pick the coin\nfor _ in range(n - k + 1):\n    while stones[n - 1] != 0:\n        stones[n - 2] += 1\n        stones[n - 1] -= 1\n        moves += 1\n\n    stones[n - 1] += 1\n    moves += 1\n    stones[0] -= 1\n    moves += 1\n\n# Move back to the first manhole and pick the coin\nfor _ in range(k - 1):\n    while stones[0] != 0:\n        stones[1] += 1\n        stones[0] -= 1\n        moves += 1\n\n    stones[0] += 1\n    moves += 1\n\nprint(moves)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "x1, y1 = map(int, input().split())\nx2, y2 = map(int, input().split())\nprint(abs(x2 - x1) + abs(y2 - y1))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def min_rotations(x):\n    # Calculate the absolute value of x and floor divide by 90\n    num_rotations = abs(x) // 90\n    # If x is positive, return the number of rotations\n    if x > 0:\n        return num_rotations\n    # If x is negative, subtract the number of rotations from 4\n    # and return the result modulo 4 to handle cases where\n    # the absolute value of x is a multiple of 360\n    else:\n        return (4 - num_rotations) % 4\n\n# Test cases\nprint(min_rotations(60))  # Output: 1\nprint(min_rotations(-60)) # Output: 3", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "MOD = 10**9 + 7\n\ndef solve(n, T, songs):\n    dp = [[[0] * 4 for _ in range(T+1)] for _ in range(n)]\n    for g in range(1, 4):\n        dp[0][0][g] = 1\n\n    for i, (t, g) in enumerate(songs):\n        for j in range(1, T+1):\n            for k in range(1, 4):\n                if g == k:\n                    dp[i+1][j][k] = dp[i][j][k]\n                else:\n                    dp[i+1][j][k] = (dp[i+1][j][k] + dp[i][j-t][k] + dp[i][j-t][g]) % MOD\n\n    return sum(dp[n-1][T][g] for g in range(1, 4)) % MOD\n\nif __name__ == \"__main__\":\n    n, T = map(int, input().split())\n    songs = [tuple(", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def will\\_write(b\\_1, q, l, bad\\_numbers):\nnumbers = set()\ni = 1\nn = b\\_1\nwhile True:\nif n in numbers or n in bad\\_numbers:\ni += 1\nn = b\\_1 \\* q**i\ncontinue\nnumbers.add(n)\nif abs(n) > l:\nreturn len(numbers) if len(numbers) < float('inf') else 'inf'\ni += 1\n\nb\\_1, q, l, m = map(int, input().split())\nbad\\_numbers = set(map(int, input().split()))\n\nresult = will\\_write(b\\_1, q, l, bad\\_numbers)\nprint(result)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "MOD = 10**9 + 7\n\ndef solve(n, T, songs):\n    dp = [[[0] * 4 for _ in range(T+1)] for _ in range(n)]\n    for g in range(1, 4):\n        dp[0][0][g] = 1\n\n    for i, (t, g) in enumerate(songs):\n        for j in range(1, T+1):\n            for k in range(1, 4):\n                if g == k:\n                    dp[i+1][j][k] = dp[i][j][k]\n                else:\n                    dp[i+1][j][k] = (dp[i+1][j][k] + dp[i][j-t][k] + dp[i][j-t][g]) % MOD\n\n    return sum(dp[n-1][T][g] for g in range(1, 4)) % MOD\n\nif __name__ == \"__main__\":\n    n, T = map(int, input().split())\n    songs = [tuple(", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def k_rounding(n, k):\n    if k == 0:\n        return n\n    else:\n        factor = 10 ** k\n        while n % 10 ** (k - 1) != 0:\n            n += 1\n        return n * factor\n\n# Read input\nn, k = map(int, input().split())\n\n# Perform k-rounding\nresult = k_rounding(n, k)\n\n# Print output\nprint(result)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\n\ntotal\\_problems = sum(a)\nhalf\\_way = total\\_problems // 2\ncurrent\\_problems = 0\n\nfor i in range(n):\n\tcurrent\\_problems += a[i]\n\tif current\\_problems >= half\\_way:\n\t\tprint(i+1)\n\t\tbreak", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "n, f = map(int, input().split())\nproducts\\_sold = 0\ndays = []\n\nfor _ in range(n):\n    k, l = map(int, input().split())\n    days.append((k, l))\n\ndays.sort(key=lambda x: x[0] - x[1], reverse=True)\n\nfor i in range(f):\n    k, l = days[i]\n    products\\_sold += k * 2\n\nfor i in range(f, n):\n    k, l = days[i]\n    if k < l:\n        continue\n    products\\_sold += k\n\nprint(products\\_sold)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def check\\_sequence(a, b, c):\nif b == a:\nreturn \"YES\"\nelse:\n\ti = 1\n\twhile True:\n\t\tif a + i * c == b:\n\t\t\treturn \"YES\"\n\t\telif a + i * c < b:\n\t\t\ti += 1\n\t\telse:\n\t\t\treturn \"NO\"\n\n# Test cases\nprint(check\\_sequence(1, 7, 3)) # YES\nprint(check\\_sequence(10, 10, 0)) # YES\nprint(check\\_sequence(1, -4, 5)) # NO\nprint(check\\_sequence(0, 60, 50)) # NO", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def is_vowel(c):\n    return c in 'aeiou'\n\ndef find_typo_blocks(word):\n    typos = []\n    current_typo = []\n    current_char = None\n    for char in word:\n        if is_vowel(char):\n            if current_typo:\n                typos.append(current_typo)\n                current_typo = []\n            current_char = char\n        else:\n            if current_char is None or char == current_char:\n                current_char = char\n            else:\n                current_typo.append(char)\n                if len(current_typo) >= 3:\n                    typos.append(current_typo)\n                    current_typo = []\n    if current_typo:\n        typos.append(current_typo)\n    return typos\n\ndef insert_spaces(word):\n    typos = find_typo_blocks(word)\n    result = []\n    current_word = []\n    for char in word:\n        current_word.append(char)\n        if find_typo_blocks( ''.join(current_word) ):\n            result.append(''.join(current_word[:-1]))\n            result.append(' ')\n            current_word = [char]\n    result.append(''.join(current_word))\n    return ''.join(result)\n\nword = input()\nprint(insert_spaces(word))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def is\\_valid\\_accordion(accordion):\n\treturn len(accordion) >= 3 and accordion[0] == '[' and accordion[-1] == ']' and accordion.count(':') == 2\n\ndef max\\_accordion\\_length(s):", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def can_transform(a, b, c, x, y, z):\n    # If the target numbers are already reached, return True\n    if x <= a and y <= b and z <= c:\n        return True\n    # If there are no spheres of a certain color, it's impossible to reach the target\n    if a == 0 and x > 0 or b == 0 and y > 0 or c == 0 and z > 0:\n        return False\n    # Try all possible transformations\n    if a >= 2 and can_transform(a-2, b, c, x, y, z):\n        return True\n    if b >= 2 and can_transform(a, b-2, c, x, y, z):\n        return True\n    if c >= 2 and can_transform(a, b, c-2, x, y, z):\n        return True\n    if a >= 1 and b >= 1 and can_transform(a-1, b-1, c+1, x, y, z):\n        return True\n    if a >= 1 and c >= 1 and can_transform(a-1, b, c-1, x, y, z+1):\n        return True\n    if b >= 1 and c >= 1 and can_transform(a, b-1, c-1, x, y, z+1):\n        return True\n    # If no transformation is possible, return False\n    return False\n\n# Read the input\na, b, c = map(int, input().split())\nx, y, z = map(int, input().split())\n# Print the result\nprint(\"Yes\" if can_transform(a, b, c, x, y, z) else \"No\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "n, m = map(int, input().split())\na = []\nfor _ in range(n):\n    a.append(list(input()))\n\n# try all possible sizes of the square\nfor k in range(min(n, m)):\n    # check if there is a square of size k\n    for i in range(n - k + 1):\n        for j in range(m - k + 1):\n            if a[i][j] == 'B' and all([a[x][y] == 'B' for x in range(i, i + k) for y in range(j, j + k)]):\n                # if there is, print the number of cells to be painted and exit\n                print(n * m - (k ** 2))\n                exit()\n\n# if no square is found, print -1\nprint(-1)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "import sys\nfrom collections import defaultdict\n\ndef check\\_tracks(n, L, kefa, sasha):\nkefa\\_map = defaultdict(int)\nsasha\\_map = defaultdict(int)\n\nfor i in range(n):\nkefa\\_map[kefa[i]] += 1\nsasha\\_map[sasha[i]] += 1\n\nif kefa\\_map != sasha\\_map:\nreturn \"NO\"\n\nmin\\_dist = min(kefa)\nfor i in range(n):\nkefa[i] -= min\\_dist\nsasha[i] -= min\\_dist\n\nif max(kefa) < L - max(sasha):\nreturn \"NO\"\n\nkefa\\_map = defaultdict(int)\nsasha\\_map = defaultdict(int)\n\nfor i in range(n):\nkefa\\_map[kefa[i]] += 1\nsasha\\_map[sasha[i]] += 1\n\nif kefa\\_map != sasha\\_map:\nreturn \"NO\"\n\nreturn \"YES\"\n\nif __name__ == \"__main__\":\ninput = sys.stdin.readline\nn, L = map(int, input().strip().split())\nkefa = list(map(int, input().strip().split()))\nsasha = list(map(int, input().strip().split()))\n\nprint(check\\_tracks(n, L, kefa, sasha))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "n = int(input())\nangles = list(map(int, input().split()))\nangles.sort()\n\ndiff = angles[-1] - angles[0]\nfor i in range(1, n, 2):\n    diff = min(diff, 360 - (angles[-1] - angles[i]))\n    diff = min(diff, angles[i] - angles[0])\n\nprint(diff)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def is\\_unlucky(x, y, n):\nfor a in range(1 + int(n**0.5)):\nfor b in range(1 + int(n**0.5)):\nif a*a + b*b == n:\nreturn True\nreturn False\n\ndef golden\\_age(x, y, l, r):\nn = l\nwhile is\\_unlucky(x, y, n):\nn += 1\nif n > r:\nreturn 0\n\nres = 0\nwhile n <= r:\nres += 1\nn += 1\nwhile n <= r and not is\\_unlucky(x, y, n):\nn += 1\nreturn res\n\nx, y, l, r = map(int, input().split())\nprint(golden\\_age(x, y, l, r))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "import sys\nimport heapq\n\ndef solve():\n    n = int(input().strip())\n    k, s, kt = input().strip(), input().strip(), input().strip()\n    k = [0] + [ord(c) for c in k]\n    s = [0] + [ord(c) for c in s]\n    kt = [0] + [ord(c) for c in kt]\n\n    dp_k = [0] * (n + 1)\n    dp_s = [0] * (n + 1)\n    dp_kt = [0] * (n + 1)\n\n    for i in range(1, n + 1):\n        dp_k[i] = max(dp_k[i - 1], dp_k[i - 1] + 1)\n        for j in range(1, i):\n            if k[i] != k[j]:\n                dp_k[i] = max(dp_k[i], dp_k[j] + 1)\n\n    for i in range(1, n + 1):\n        dp_s[i] = max(dp_s[i - 1], dp_s[i - 1] + 1)\n        for j in range(1, i):\n            if s[i] != s[j]:\n                dp_s[i] = max(dp_s[i], dp_s[j] + 1)\n\n    for i in range(1, n + 1):\n        dp_kt[i] = max(dp_kt[i - 1], dp_kt[i - 1] + 1)\n        for j in range(1, i):\n            if kt[i] != kt[j]:\n                dp_kt[i] = max(dp_kt[i], dp_kt[j] + 1)\n\n    heap = [(-", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "import sys\ninput = sys.stdin.readline\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef solve(n, k, s, a):\n    dp = [[0] * (s+1) for _ in range(n+1)]\n    dp[0][0] = 1\n    for i in range(1, n+1):\n        for j in range(s+1):\n            dp[i][j] = dp[i-1][j]\n            if j >= a[i-1]:\n                dp[i][j] += dp[i-1][j-a[i-1]]\n                if k > 0:\n                    dp[i][j] += dp[i-1][j-a[i-1]*2]\n                    k -= 1\n    return dp[n][s]\n\nif __name__ == \"__main__\":\n    n, k, s = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(solve(n, k, s, a))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "import sys\nfrom fractions import Fraction\n\ndef lcm(a, b):\n    return abs(a*b) // math.gcd(a,b)\n\ndef bad_luck_island(r, s, p):\n    total = lcm(r, lcm(s, p))\n    r, s, p = total//r, total//s, total//p\n    rs = r*s\n    rp = r*p\n    sp = s*p\n    rsp = r*s*p\n    ans = [Fraction(rsp, total), Fraction(rs*p, total), Fraction(r*sp, total)]\n    return [float(x) for x in ans]\n\nif __name__ == \"__main__\":\n    r, s, p = map(int, sys.stdin.readline().strip().split())\n    print(\" \".join(map(str, bad_luck_island(r, s, p))))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def convert\\_to\\_base\\_n(num, base):\nn = \"\"\nwhile num:\ndigit = int(num % base)\nnum //= base\nn += str(digit)\nreturn n[::-1]\n\ndef find\\_min\\_decimal(base, k):\nk = str(k)\nlength = len(k)\npower = 1\nfor i in range(length):\npower *= base\nresult = 0\nfor i in range(length):\nresult += int(k[i]) \\* power\npower //= base\nreturn result\n\nbase = int(input())\nk = int(input())\nprint(find\\_min\\_decimal(base, k))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "n = int(input().strip())\na = list(map(int, input().strip().split()))\n\nleft_min = a[0]\nleft_min_index = 0\n\nmin_distance = float('inf')\n\nfor i in range(1, n):\n    if a[i] < left_min:\n        left_min = a[i]\n        left_min_index = i\n    elif a[i] - left_min < min_distance:\n        min_distance = a[i] - left_min\n\nprint(min_distance)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def solve():\n    n, a, b = map(int, input().split())\n    table = [0] * (a + b)\n    denied = 0\n    for t in map(int, input().split()):\n        if t == 1:\n            if a > 0:\n                table[0] -= 1\n                a += 1\n            elif b > 0 and table[1] > 0:\n                table[1] -= 1\n                b -= 1\n            elif b > 0 and table[1] == 0:\n                denied += 1\n                b -= 1\n                table[1] = 2\n            else:\n                denied += 1\n        else:\n            if b > 0 and table[1] == 1:\n                table[1] = 2\n                b -= 1\n            elif b > 0 and table[1] > 1:\n                table[1] -= 2\n                b -= 1\n            elif a > 0 and b > 0:\n                table[0] -= 1\n                a -= 1\n                table[1] += 1\n                b -= 1\n            else:\n                denied += 2\n    print(denied)\n\n\nsolve()", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def find_next_states(state):\n    next_states = []\n    for i in range(3):\n        next_row = [state[0][i], state[0][(i+1)%3], state[1][i], state[1][(i+1)%3]]\n        next_states.append((''.join(next_row), i))\n    return next_states\n\ndef solve(state1, state2):\n    states1, states2 = {state1}, {state2}\n    while True:\n        new_states1 = set()\n        for state, direction in states1:\n            next_states = find_next_states(state)\n            for next_state, next_direction in next_states:\n                if next_state in states2:\n                    return True, direction, next_direction\n                new_states1.add((next_state, (direction + 2 + next_direction) % 4))\n        if not new_states1:\n            break\n        states1 = new_states1\n\n    return False, -1, -1\n\ndef main():\n    state1 = [list(input().strip()) for _ in range(2)]\n    state2 = [list(input().strip()) for _ in range(2)]\n\n    result, direction1, direction2 = solve(tuple([''.join(row) for row in state1]), tuple([''.join(row) for row in state2]))\n\n    if result:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "import sys\nfrom collections import defaultdict\n\ndef get_period(s):\n    for i in range(1, len(s)//2 + 1):\n        if s[:i] * (len(s) // i) == s:\n            return i\n    return len(s)\n\ndef solve(n, s):\n    if n == 1:\n        return 2 if s == '0' or s == '1' else 0\n\n    t = s * (n // len(s)) + s[:n % len(s)]\n    period = get_period(t)\n    count = (n // period) * (len(s) // period)\n\n    # if the period of t is not a factor of the length of s,\n    # then there are some shifts of t that will not contain s as a substring\n    if len(s) % period != 0:\n        # calculate the number of shifts that do not contain s\n        # by subtracting the number of shifts that do contain s\n        #", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def is_possible(n, a):\n    if n == 1:\n        return a[0] == 0\n\n    for i in range(1, n):\n        if a[i] == 0 and is_possible(i, a[:i]):\n            return True\n\n    return False\n\ndef build_expression(n, a):\n    if n == 1:\n        return str(a[0])\n\n    for i in range(1, n):\n        if a[i] == 0 and is_possible(i, a[:i]):\n            return '(' + build_expression(i, a[:i]) + '->' + build_expression(n-i, a[i:]) + ')'\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    if is_possible(n, a):\n        print(\"YES\")\n        print(build_expression(n, a))\n    else:\n        print(\"NO\")\n\nmain()", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def max\\_good\\_subset\\_weight():\n    W = int(input())\n    weights = list(map(int, input().split()))\n    n = len(weights)\n\n    # Initialize the dp array with all values set to 0\n    dp = [[0 for _ in range(W + 1)] for _ in range(n + 1)]\n\n    # The base case: when there are no items\n    for w in range(W + 1):\n        dp[0][w] = 0\n\n    # Fill in the dp array\n    for i in range(1, n + 1):\n        for w in range(W + 1):\n            if w >= weights[i - 1]:\n                dp[i][w] = max(dp[i - 1][w], dp[i - 1][w - weights[i - 1]] + weights[i - 1])\n            else:\n                dp[i][w] = dp[i - 1][w]\n\n    # The answer is the value in the bottom-right corner of the dp array\n    return dp[n][W]\n\nprint(max\\_good\\_subset\\_weight())", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def is\\_palindrome(s):\ns = s.lower()\nreturn s == s[::-1]\n\ndef longest\\_non\\_palindrome\\_substring(s):\nmax\\_length = 0\nstart\\_index = 0\nfor i in range(len(s)):\nfor j in range(i, len(s)):\nif not is\\_palindrome(s[i:j+1]) and (j - i + 1) > max\\_length:\nmax\\_length = j - i + 1\nstart\\_index = i\nreturn s[start\\_index:start\\_index + max\\_length]\n\ns = input()\nresult = longest\\_non\\_palindrome\\_substring(s)\nif result:\nprint(len(result))\nelse:\nprint(0)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "A, B, C, N = map(int, input().split())", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def solve(n, k):\n    if k > n * (n + 1) // 2 or k % 2 != 0:\n        return -1\n\n    matrix = [[0] * n for _ in range(n)]\n    for i in range(n):\n        matrix[i][i] = 1\n        k -= 1\n        if k == 0:\n            break\n\n    for i in range(n - 1, -1, -1):\n        for j in range(n - 1, i, -1):\n            if k > 0:\n                matrix[i][j] = 1\n                k -= 1\n\n    return matrix\n\nn, k = map(int, input().split())\nmatrix = solve(n, k)\nfor row in matrix:\n    print(*row)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "import math\n\ndef solution():\n    x = int(input())\n    prime_factors = prime\\_factors(x)\n    a = 1\n    b = 1\n    for prime in prime\\_factors:\n        if prime\\_factors[prime] % 2 == 1:\n            a *= prime\n        b *= prime ** (prime\\_factors[prime] // 2)\n    print(a, b)\n\ndef prime\\_factors(n):\n    prime\\_factors = {}\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            if i not in prime\\_factors:\n                prime\\_factors[i] = 1\n            else:\n                prime\\_factors[i] += 1\n    if n > 1:\n        if n not in prime\\_factors:\n            prime\\_factors[n] = 1\n        else:\n            prime\\_factors[n] += 1\n    return prime\\_factors\n\nsolution()", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def expected\\_dresses(x, k):\nx\\_mod = 1000000007\npower = 1\nfor i in range(k):\npower = (power \\* 2) % x\\_mod\nif i != k - 1:\nexpected = (power + expected\\_dresses(x, k - 1)) // 2\nexpected = expected % x\\_mod\nreturn expected if x == 1 else (power + expected\\_dresses(x - 1, k)) % x\\_mod\n\nx, k = map(int, input().split())\nprint(expected\\_dresses(x, k))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
