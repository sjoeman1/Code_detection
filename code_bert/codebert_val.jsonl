{"code": "def lcm(a, b):\n    return (a*b)//gcd(a,b)\n\nn = int(input())\n\nresult = 1\nfor i in range(1, n+1):\n    result = lcm(result, i)\n\nprint(result)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "n, k = map(int, input().split())\na = input()\nd = a[0:k]\nc = int(d)\nb=d*(n//k)\nprint(n)\nb+=d[0:n%k]\nif(b>=a):\n    print(b)\nelse:\n    c+=1\n    d=str(c)\n    b=d*(n//k)\n    b+=d[0:n%k]\n    print(b)", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "# Input the size of the permutation\nn = int(input())\n\n# Check if the permutation size is odd or even\nif n % 2 == 0:\n    print(\"NO\")\nelse:\n    print(\"YES\")\n    # For odd permutation size, print the swaps in reverse order\n    for i in range(n-1, 0, -1):\n        print(i, i-1)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "mod = int(1e9 + 7)\nn, m = map(int, input().split())\nf = [ [0 for i in range(60)] for j in range(60) ]\ng = [ [0 for i in range(60)] for j in range(60) ]\ns = [ [0 for i in range(60)] for j in range(60) ]\ninv = [ 1 ]\nf[0][0] = s[0][0] = 1\n\ndef pow(x, exp) :\n    res = 1\n    for i in range(0, 31) :\n        if exp & 1 : res = res * x % mod\n        exp >>= 1\n        if exp == 0 : break\n        x = x * x % mod\n    return res\n\nfor i in range(1, n + 1) :\n    inv.append( pow(i, mod - 2) )\n\nfor node in range(1, n + 1) :\n    for cut in range(1, n + 1) :\n        tmp = 0\n        for ln in range(node) :\n            for lc in range(cut - 1, n + 1) :\n                if f[ln][lc] == 0 : continue\n                if lc == cut - 1 :\n                    tmp = ( tmp + f[ln][lc] * s[node - ln - 1][cut - 1] ) % mod\n                else :\n                    tmp = ( tmp + f[ln][lc] * f[node - ln - 1][cut - 1] ) % mod\n        cnt = 1\n        if tmp != 0 :\n            cn, cc = 0, 0\n            for i in range(1, n + 1) :\n                cn += node\n                cc += cut\n                cnt = cnt * (tmp + i - 1) % mod * inv[i] % mod\n                if cn > n or cc > n : break\n                for j in range(n - cn, -1, -1) :\n                    for k in range(n - cc, -1, -1) :\n                        if f[j][k] == 0 : continue\n                        g[j + cn][k + cc] += f[j][k] * cnt\n                        g[j + cn][k + cc] %= mod\n            for i in range(n + 1) :\n                for j in range(n + 1) :\n                    f[i][j] = (f[i][j] + g[i][j]) % mod\n                    g[i][j] = 0\n            \n    for cut in range(n, -1, -1) :\n        s[node][cut] = ( s[node][cut + 1] + f[node][cut] ) % mod\nprint(f[n][m - 1])", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "__author__ = '$'\nimport sys\n\n\ndef GCD (x, y):\n    return x if y == 0 else GCD(y, x % y)\ntry:\n    while True:\n        n = int(input())\n        val = list(map(int, input().split(\" \")))\n        res = val[0]\n        for i in range(n-1):\n            res = GCD(res, val[i+1])\n        ans = True\n        for i in range(n):\n            tmp = val[i] // res\n            while tmp != 1:\n                if tmp % 2 == 0:\n                    tmp //= 2\n                elif tmp % 3 == 0:\n                    tmp //= 3\n                else:\n                    ans = False\n                    break\n            if not ans:\n                break\n        print(\"Yes\" if ans else \"No\")\nexcept EOFError:\n    pass", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "from operator import neg\nn = int(input())\na = [tuple(map(int, input().split())) for i in range(n)]\n\ndef check(max_h):\n    k = n // 2\n    b = []\n    for w, h in a:\n        if h > max_h:\n            if k <= 0 or w > max_h:\n                return 1 << 60\n            b.append((h, w))\n            k -= 1\n        else:\n            b.append((w, h))\n    b.sort(key=lambda t: t[1] - t[0])\n    r = 0\n    for w, h in b:\n        if k > 0 and w <= max_h and h < w:\n            r += h\n            k -= 1\n        else:\n            r += w\n    return r * max_h\n\nprint(min(check(h) for h in range(1, 1001)))\n    \n        \n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "import sys\ninput = sys.stdin.readline\n\nN=int(input())\nmod=10**9+7\n\nAA=input().strip()\nAB=input().strip()\nBA=input().strip()\nBB=input().strip()\n\nif (AA,AB,BA,BB) in {('A', 'A', 'A', 'A'),('A', 'A', 'A', 'B'),('A', 'A', 'B', 'A'),('A', 'A', 'B', 'B'),('A', 'B', 'A', 'B'),('A', 'B', 'B', 'B'),('B', 'B', 'A', 'B'),('B', 'B', 'B', 'B')}:    \n    print((1))\n\nelif (AA,AB,BA,BB) in {('A', 'B', 'A', 'A'),('B', 'A', 'B', 'A'),('B', 'A', 'B', 'B'),('B', 'B', 'A', 'A')}:\n    ANS=[0,0,1,1,2]\n    for i in range(1000):\n        ANS.append(ANS[-1]*2%mod)\n    print((ANS[N]))\n    \nelif (AA,AB,BA,BB) in {('A', 'B', 'B', 'A'),('B', 'A', 'A', 'A'),('B', 'A', 'A', 'B'),('B', 'B', 'B', 'A')}:\n    ANS=[0,0,1,1,2,3,5]\n    for i in range(1000):\n        ANS.append((ANS[-1]+ANS[-2])%mod)\n\n    print((ANS[N]))\n\n    \n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "# Function to find the minimal number of piles\ndef find_min_piles(boxes):\n    # Create an empty list to store the strength of each box\n    strengths = []\n\n    # Iterate through the boxes and add their strengths to the list\n    for box in boxes:\n        strengths.append(box[1])\n\n    # Sort the list in ascending order\n    strengths.sort()\n\n    # Initialize the number of piles to 0\n    num_piles = 0\n\n    # Iterate through the strengths list\n    for i in range(len(strengths)):\n        # Check if the strength is greater than or equal to the number of piles\n        if strengths[i] >= num_piles:\n            # If so, increment the number of piles\n            num_piles += 1\n\n    # Return the number of piles\n    return num_piles\n\n# Main function\nif __name__ == \"__main__\":\n    # Read the number of boxes from the input\n    n = int(input())\n\n    # Read the strengths of the boxes from the input\n    boxes = list(map(int, input().split()))\n\n    # Find the minimal number of piles\n    min_piles = find_min_piles(boxes)\n\n    # Print the result\n    print(min_piles)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "from collections import defaultdict\ndef count(x):\n    c=0\n    while x > 0:\n        c+=1\n        x &= (x-1)\n    return c\n\nn,m=list(map(int,input().split()))\ng=defaultdict(list)\nfor _ in range(m):\n    u, v = list(map(int,input().split()))\n    u-=1;v-=1\n    g[u].append(v)\n    g[v].append(u)\n\nmask1=0;mask2=0;MAX=(1<<n)-1\na=[0]*(1 << n)\ndp=[MAX]*(1 << n)\nif m == (n*(n-1))//2:\n    print(0)\n    return\nfor i,j in list(g.items()):\n    mask1  = (1 << i);mask2=0;mask2 |= mask1\n    for k in j:\n        mask2 |= (1 << k)\n        \n    dp[mask2]=mask1\n    a[mask1]=mask2\n    \nfor i in range(0,(1 << n)-1):\n    if dp[i] != MAX:\n        #print('HEllo')\n        temp = dp[i] ^ i \n        for j in range(n):\n            if temp & (1 << j) != 0:\n                nmask = i | a[(1 << j)]\n                dp[nmask]=dp[i] | (1 << j) if count(dp[i] | (1 << j)) < count(dp[nmask]) else dp[nmask]\n                \nans = []\nfor i in range(n):\n    if dp[-1] & (1 << i) != 0:\n        ans.append(i+1)\nprint(len(ans))\nprint(*ans)\n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "# Read the input from the standard input\nN, X = map(int, input().split())\nA = [int(input(), 2) for _ in range(N)]\n\n# Create a set to store the integers that can be written on the board\nintegers = set(A)\n\n# Perform a loop to update the integers set\nfor _ in range(1000):\n    new_integers = set()\n    for x in integers:\n        # Double each integer\n        new_integers.add(x << 1)\n        for y in integers:\n            # Take XOR of each pair of integers\n            new_integers.add(x ^ y)\n    # Update the integers set with the new integers\n    integers |= new_integers\n\n# Count the number of integers not exceeding X in the integers set\ncount = sum(1 for x in integers if x <= X)\n\n# Print the final count modulo 998244353\nprint(count % 998244353)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "a,b=map(int,input().split())\no=0\nwhile(a and b):\n\to=o+max(a,b)//min(a,b)\n\tif(a>b):a=a%b\n\telse:b=b%a\nprint(o)", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "# Python 3 code to solve the above problem\n\n# Function to calculate the maximum damage that can be done to Jiro\ndef calculateDamage(n, m, Jiro, Ciel):\n    # Sort the cards of Jiro and Ciel\n    Jiro.sort()\n    Ciel.sort()\n    damage = 0\n\n    # Iterate through the cards of Jiro\n    for i in range(n):\n        # If the card is of type ATK, then\n        # the Ciel's card with maximum strength\n        # can be used to attack\n        if Jiro[i][0] == \"ATK\":\n            if Ciel:\n                damage += max(Ciel[-1] - Jiro[i][1], 0)\n                Ciel.pop()\n            else:\n                damage += Jiro[i][1]\n        # If the card is of type DEF, then\n        # the Ciel's card with maximum strength\n        # can be used to attack\n        else:\n            if Ciel and Ciel[-1] > Jiro[i][1]:\n                damage += 0\n                Ciel.pop()\n    return damage\n\n# Driver code\nif __name__ == \"__main__\":\n    n, m = map(int, input().split())\n    Jiro = []\n\n    # Input the cards of Jiro\n    for i in range(n):\n        Jiro.append(list(map(int, input().split())))\n\n    Ciel = []\n\n    # Input the cards of Ciel\n    for i in range(m):\n        Ciel.append(int(input()))\n\n    print(calculateDamage(n, m, Jiro, Ciel))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "#in the name of god\n#Mr_Rubick\na,b,c,l=list(map(int, input().split()))\ncnt=(l+3)*(l+2)*(l+1)//3\nfor i in (a,b,c):\n    s=2*i-a-b-c\n    for x in range(max(0,-s),l+1):\n        m = min(s+x,l-x)\n        cnt-=(m+1)*(m+2)\nprint(cnt//2)\n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "def solve(n, q, operations):\n    # Create a dictionary to store the possible operations\n    operations_dict = {}\n    for a, b in operations:\n        if a not in operations_dict:\n            operations_dict[a] = []\n        operations_dict[a].append(b)\n\n    # Create a list to store the number of ways to reach each length\n    # from the previous length\n    ways = [0] * (n + 1)\n    ways[0] = 1\n\n    # Iterate through each length\n    for i in range(1, n + 1):\n        # Iterate through each possible operation\n        for a, b in operations:\n            # Check if the operation can be applied to the current length\n            if i >= len(a):\n                # Update the number of ways to reach the next length\n                ways[i - len(a) + len(b)] += ways[i]\n\n    # Return the number of ways to reach the desired length\n    return ways[n - 1]\n\n\nif __name__ == \"__main__\":\n    # Read the input from the user\n    n, q = map(int, input().split())\n    operations = []\n    for _ in range(q):\n        a, b = input().split()\n        operations.append((a, b))\n\n    # Solve the problem\n    result = solve(n, q, operations)\n\n    # Print the result\n    print(result)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "n, k = map(int, input().split())\nm = 0x3b9aca07\nr = 0\np = pow(2, n, m)\na = [1] + [0] * k\nfor i in range(k):\n    for j in range(i, -1, -1):\n        a[j + 1] += a[j]\n        a[j] = a[j] * j % m\nfor i in range(k + 1):\n    r += p * a[i]\n    p = p * 500000004 * (n - i) % m\nprint(r % m)", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "import sys\nn=int(input())\na=[]\n\nfor x in input().split():\n    if(int(x)!=int(0)):\n        a.append(int(x))\n\nif(len(a)>500):\n    print(3)\n    return\n\nn=len(a)\n\n#print(n)\n\ng=[]\nfor i in range(n):\n   g.append([])\n\nfor i in range(n):\n    for j in range(n):\n        g[i].append(1000000000)\n\nfor i in range(n):\n    for j in range(n):\n        if(i!=j and (a[i]&a[j])!=0):\n            g[i][j]=1\n\n\nans=int(10000000000)\n\ndis=[]\nfor i in range(n):\n    dis.append([])\n\nfor i in range(n):\n    for j in range(n):\n        dis[i].append(g[i][j])\n\nfor  k in range(n):\n    for i in range(k):\n        for j in range(i+1,k):\n            ans=min(ans,dis[i][j]+g[i][k]+g[k][j])\n    for i in range(n):\n        for j in range(n):\n            dis[i][j]=min(dis[i][j],dis[i][k]+dis[k][j])\n\n\n\nif(ans>1000):\n    print(-1)\nelse:\n    print(ans)\n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "# Input the instruction sequence\ns = input(\"Enter the instruction sequence: \")\n\n# Input the x and y coordinates\nx, y = map(int, input(\"Enter the x and y coordinates: \").split())\n\n# Initialize the robot's position and orientation\nrobot_x = 0\nrobot_y = 0\norientation = 0 # 0 for facing right, 1 for facing up, 2 for facing left, 3 for facing down\n\n# Iterate through the instruction sequence\nfor instruction in s:\n    if instruction == 'F':\n        # Move the robot forward\n        if orientation == 0:\n            robot_x += 1\n        elif orientation == 1:\n            robot_y += 1\n        elif orientation == 2:\n            robot_x -= 1\n        else:\n            robot_y -= 1\n    else:\n        # Turn the robot\n        orientation = (orientation + 1) % 4\n\n# Check if the robot's position matches the target coordinates\nif robot_x == x and robot_y == y:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "from sys import stdin\nfrom math import gcd\nn=int(stdin.readline())\na=[int(x) for x in stdin.readline().split()]\nc = []\nld=[]\nrd=[]\n\n\ndef check(l, r, e):\n    if r == l: return c[l][e] > 0\n    if e < l and ld[l][r-l] != 0:\n        return ld[l][r-l] == 1\n    elif e > r and rd[l][r-l] != 0:\n        return rd[l][r-l] == 1\n    for i in range(l, r+1):\n        if c[i][e]>0:\n            if i==l or check(l, i-1, i):\n                if i==r or check(i+1, r, i):\n                    if e < l:\n                        ld[l][r-l] = 1\n                    else:\n                        rd[l][r-l] = 1\n                    return True\n    if e < l:\n        ld[l][r - l] = -1\n    else:\n        rd[l][r - l] = -1\n    return False\n\n\nfor i in range(n):\n    c.append([0]*n)\n    ld.append([0]*n)\n    rd.append([0] * n)\nfor i in range(n):\n    for j in range(i+1,n):\n        if gcd(a[i],a[j]) > 1:\n            c[i][j] = c[j][i] = 1\nans=False\nfor i in range(n):\n    if i == 0 or check(0, i - 1, i):\n        if i == n-1 or check(i + 1, n-1, i):\n            ans = True\n            break\nif ans:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n\n\n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "def obfuscation(S):\n    n = len(S)\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    char_map = {}\n    index = 0\n    for i in range(n):\n        if S[i] not in char_map:\n            char_map[S[i]] = alphabet[index]\n            index += 1\n    result = \"\"\n    for i in range(n):\n        result += char_map[S[i]]\n    if len(set(result)) == len(set(S)):\n        return \"YES\"\n    else:\n        return \"NO\"\n\nS = input()\nprint(obfuscation(S))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "__author__ = 'Alexander'\nimport sys\nformat = int(sys.stdin.readline().strip())\ntimeH, timeM = list(map(int,sys.stdin.readline().split(':')))\n# print(format)\n# print(timeH)\n# print(timeM)\nif format == 12:\n    if timeH > 12 or timeH == 0:\n        if timeH == 0: timeH = 1\n        elif timeH%10 == 0: timeH = 10\n        else: timeH %= 10\n    if timeM > 59:\n        timeM %= 10\nelse:\n    if timeH > 23:\n        timeH %= 10\n    if timeM > 59:\n        timeM %= 10\nsys.stdout.write(\"%02d:%02d\" % (timeH, timeM))\n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "# Input\nq = int(input())\n\n# Function to generate the f(i) strings\ndef generate_strings(i):\n    if i == 0:\n        return \"What are you doing at the end of the world? Are you busy? Will you save us?\"\n    else:\n        return \"What are you doing while sending \" + '\"' + generate_strings(i-1) + '\"' + \"? Are you busy? Will you send \" + '\"' + generate_strings(i-1) + '\"' + \"?\"\n\n# Function to find the kth character of f(n)\ndef find_kth_char(n, k):\n    f_n = generate_strings(n)\n    if k > len(f_n):\n        return '.'\n    else:\n        return f_n[k-1]\n\n# Process queries\nfor _ in range(q):\n    n, k = map(int, input().split())\n    print(find_kth_char(n, k), end=\"\")\n\nprint()", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "# Input\nformat = int(input())\ntime = input()\n\n# Extract hours and minutes\nhours = int(time[:2])\nminutes = int(time[3:])\n\n# Check if the clock is in 12-hour or 24-hour format\nif format == 12:\n    if hours > 12 or minutes > 59:\n        # Convert to 12-hour format\n        hours %= 12\n        minutes %= 60\n        if minutes < 10:\n            minutes = '0' + str(minutes)\n        time = str(hours) + ':' + str(minutes)\n    print(time)\nelse:\n    if hours > 23 or minutes > 59:\n        # Convert to 24-hour format\n        hours %= 24\n        minutes %= 60\n        if minutes < 10:\n            minutes = '0' + str(minutes)\n        time = str(hours) + ':' + str(minutes)\n    print(time)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "def rp():\n    cs = list(map(int, input().split(' ')))\n    cs = list(zip(cs[0::2], cs[1::2]))\n    return cs\n\ndef dist(p1, p2):\n    return len(set(p1).union(set(p2))) - 2\n\ninput()\n\nps = [rp(), rp()]\n\ntheyCan = True\nmyPos = set()\n\nfor ps1, ps2 in [ps, ps[::-1]]:\n    for p1 in ps1:\n        pos = set()\n\n        for p2 in ps2:\n            if dist(p1, p2) == 1:\n                pos = pos.union( set(p1).intersection(set(p2)) )\n        \n        if len(pos) >= 2:\n            theyCan = False\n        myPos = myPos.union(pos)\n\nprint(next(iter(myPos)) if len(myPos)==1 else 0 if theyCan else -1)\n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "def get_bounds(points):\n    if len(points) == 1:\n        return points[:]\n    points.sort()\n    bounds = [points[0], points[1]]\n    for xi, yi in points[2:]:\n        while len(bounds) > 1 and not is_convex(bounds, xi, yi):\n            del bounds[-1]\n        bounds.append((xi, yi))\n    return bounds\n\n\ndef is_convex(bounds, x2, y2):\n    x1, y1 = bounds[-1]\n    x0, y0 = bounds[-2]\n    return (x1 - x0) * (y2 - y1) < (y1 - y0) * (x2 - x1)\n\n\n\ndef read_data():\n    n, p, q = map(int, input().split())\n    ABs = []\n    for i in range(n):\n        a, b = map(int, input().split())\n        ABs.append((a, b))\n    return n, p, q, ABs\n\ndef solve(n, p, q, ABs):\n    '''\n    min sum(ds)\n    s.t. sum(ds[i] * As[i]) >= p and sum(ds[i] * Bs[i]) >= q\n    '''\n    bounds = get_bounds(ABs)\n    a0, b0 = bounds[0]\n    if len(bounds) == 1:\n        return max(p/a0, q/b0)\n    record = float('Inf')\n    for a1, b1 in bounds[1:]:\n        steps = min(max(p/a0, q/b0), max(p/a1, q/b1))\n        den = a0 * b1 - b0 * a1\n        if den != 0:\n            r0 = (b1 * p - a1 * q)/den\n            r1 = - (b0 * p - a0 * q)/den\n            if r0 > 0 and r1 > 0:\n                steps = min(steps, r0 + r1)\n        a0 = a1\n        b0 = b1\n        record = min(record, steps)\n    return record\n\nn, p, q, ABs = read_data()\nprint(solve(n, p, q, ABs))", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "# Input the number of cards with digits\nn = int(input())\n\n# Input the string of n digits\ns = input()\n\n# Initialize the count of phone numbers that can be made\ncount = 0\n\n# Initialize the index to start from\nindex = 0\n\n# Iterate until there are at least 11 digits left\nwhile index + 11 <= n:\n    # Check if the current substring is a valid phone number\n    if s[index] == '8' and all(char in '0123456789' for char in s[index+1:index+11]):\n        # Increment the count if it is a valid phone number\n        count += 1\n        # Increment the index by 11\n        index += 11\n    else:\n        # Increment the index by 1\n        index += 1\n\n# Output the maximum number of phone numbers that can be made\nprint(count)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "import sys\nimport math\nf=sys.stdin\n\ndef prime_factors(n):\n    factors = []\n    d=2\n    while n>1:\n        while n%d==0:\n            factors.append(d)\n            n/=d\n        d=d+1\n        if d*d>n:\n            if n>1:\n            \tfactors.append(n)\n            break\n    return factors[0]\n\nn=int(f.readline().rstrip('\\r\\n'))\ninp=[]\ngcd=0\nfor i in range(n):\n\ta,b=map(int,f.readline().rstrip('\\r\\n').split())\n\tc=a*b\n\tgcd=math.gcd(gcd,c)\nif gcd>1:\n\tif gcd<=10000000000:\n\t\tsys.stdout.write(str(prime_factors(gcd))+\"\\n\")\n\telse:\n\t\tif (math.gcd(gcd,a)>1):\n\t\t\tsys.stdout.write(str(math.gcd(a,gcd))+\"\\n\")\n\t\telse:\n\t\t\tsys.stdout.write(str(math.gcd(b,gcd))+'\\n')\nelse:\n\tsys.stdout.write(\"-1\\n\")", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "from math import *\nfrom fractions import Fraction\nimport sys\n\ndef prob(a):\n    n = len(a)\n    b = [0]*(n+1)\n    b[0] = 1\n    for p in a:\n        for j in range(n,-1,-1):\n            b[j] *= (1-p)\n            if j > 0:\n                b[j] += b[j-1] * p\n    best = 0\n    for i in range(n+1):\n        best = max(best, b[i])\n    return best\n\n\nn = int(input())\na = [Fraction(x) for x in input().split()]\n\nprint(prob(a))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "MOD = 998244353\nN = int(input())\nif N == 1:\n  print((1 * pow(2, MOD - 2, MOD)))\n  return\nif N == 2:\n  print((1))\n  print((1))\n  return\n\nans = pow(2, N - 2, MOD) * N % MOD\nq = pow(pow(2, N, MOD), MOD - 2, MOD)\nfor i in range(1, N):\n  if i == 1:\n    ans += 1\n  else:\n    ans = (ans + i * pow(2, i - 2, MOD) % MOD) % MOD \nfor i in range(1, N):\n  if i == N - 1:\n    ans += N - 1\n  else:\n    ans = (ans + i * pow(2, N - 2 - i, MOD) % MOD) % MOD\n\nt = ans * q % MOD\nL = [t, t]\nfor i in range(2, (N + 1) // 2):\n  ans = (ans + (i * 2 - 1) * pow(2, (i - 1) * 2 - 1, MOD) % MOD) % MOD\n  L.append(ans * q % MOD)\n\nfor i in L:\n  print(i)\nL.reverse()\nif N % 2 == 0:\n  t = 0\nelse:\n  t = 1\nfor i in L[t:]:\n  print(i)\n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "def is_mirror(s):\n    if len(s) % 2 != 0:\n        return False\n    mirror_map = {\n        \"A\": \"A\",\n        \"B\": \"B\",\n        \"C\": \"C\",\n        \"D\": \"D\",\n        \"E\": \"E\",\n        \"F\": \"F\",\n        \"G\": \"G\",\n        \"H\": \"H\",\n        \"I\": \"I\",\n        \"J\": \"J\",\n        \"K\": \"K\",\n        \"L\": \"L\",\n        \"M\": \"M\",\n        \"N\": \"N\",\n        \"O\": \"O\",\n        \"P\": \"P\",\n        \"Q\": \"Q\",\n        \"R\": \"R\",\n        \"S\": \"S\",\n        \"T\": \"T\",\n        \"U\": \"U\",\n        \"V\": \"V\",\n        \"W\": \"W\",\n        \"X\": \"X\",\n        \"Y\": \"Y\",\n        \"Z\": \"Z\"\n    }\n\n    n = len(s)\n    for i in range(n // 2):\n        if s[i] not in mirror_map or s[n - i - 1] != mirror_map[s[i]]:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    s = input()\n    if is_mirror(s):\n        print(\"YES\")\n    else:\n        print(\"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "def solve(s):\n    a, b, c = s.count('a'), s.count('b'), s.count('c')\n    return 'YES' if a == b or b == c or c == a or c == a == b else 'NO'\n\ns = input()\nprint(solve(s))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "read_line = lambda: [int(i) for i in input().split()]\n\nn, m, k = read_line()\na = [read_line() for i in range(n)]\nif n < m:\n    n, m, a = m, n, list(zip(*a))\n\nxs = []\nfor y in a:\n    x = 0\n    for b in y:\n        x = 2 * x + b\n    xs.append(x)\n\ndef work(y):\n    tot = 0\n    for x in xs:\n        c = bin(x ^ y).count('1')\n        tot += min(c, m - c)\n    return tot\n\nans = min(list(map(work, xs if m > k else list(range(1<<m)))))\n\nprint(ans if ans <= k else -1)\n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "n,a = list(map(int,input().split()))\n\nar = []\nj = 1\n\nwhile n!=0:\n q = n%a\n n //= a\n n = -1*n\n #j += 1\n ar.append(q)\n\nprint(len(ar))\nfor i in range(len(ar)):\n print(ar[i])\n\n\n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "n, k = map(int, input().split())\nknown = [0] * n\nfor _ in range(n):\n    for i, x in enumerate(input().split()):\n        if x == '1':\n            known[i] += 1\n\nproblemset = []\nfor i, count in enumerate(known):\n    if count <= k / 2:\n        problemset.append(i + 1)\n\nif len(problemset) == 0:\n    print(\"NO\")\nelse:\n    print(\"YES\")\n    print(len(problemset))\n    print(' '.join(map(str, problemset)))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "def get_clock_angle(hour, minute):\n    hour_angle = (hour * 30) + (minute / 2)\n    minute_angle = (minute * 6)\n    return abs(hour_angle - minute_angle)\n\ndef can_prepare_contest(h, m, s, t1, t2):\n    t1_angle = get_clock_angle(t1, 0)\n    t2_angle = get_clock_angle(t2, 0)\n\n    if t1_angle == t2_angle:\n        return \"YES\"\n\n    if t1_angle < t2_angle:\n        if t2_angle - t1_angle <= 180:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n    if t2_angle < t1_angle:\n        if t1_angle - t2_angle <= 180:\n            return \"YES\"\n        else:\n            return \"NO\"\n\nif __name__ == \"__main__\":\n    h, m, s, t1, t2 = map(int, input().split())\n    print(can_prepare_contest(h, m, s, t1, t2))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "from fractions import gcd\n\nn, m, x, y, a, b = list(map(int, input().split()))\ng = gcd(a, b)\na, b = a // g, b // g\nk = min(n // a, m // b)\na, b = k * a, k * b\n\nx1, x2 = x - (a - a // 2), x + a // 2\ny1, y2 = y - (b - b // 2), y + b // 2\nd = max(0, 0 - x1)\nx1, x2 = x1 + d, x2 + d\nd = max(0, x2 - n)\nx1, x2 = x1 - d, x2 - d\nd = max(0, 0 - y1)\ny1, y2 = y1 + d, y2 + d\nd = max(0, y2 - m)\ny1, y2 = y1 - d, y2 - d\nprint((\" \".join(map(str, [x1, y1, x2, y2]))));\n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "def f(n):\n    # function to calculate number of digits in base 10\n    count = 0\n    while (n != 0):\n        count += 1\n        n //= 10\n    return count\n\n\ndef countPairs(S):\n    # function to count number of pairs\n    res = 0\n    for l in range(1, 10**8 + 1):\n        r = l\n        sum = 0\n        while (sum < S):\n            sum += f(r)\n            r += 1\n        if (sum == S):\n            res += r - l\n    return res\n\n\nif __name__ == '__main__':\n    # input S from user\n    S = int(input())\n    # calculate answer and print it\n    answer = countPairs(S) % (10**9 + 7)\n    print(answer)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "import random\n\nmod=998244353\nN,X=input().split()\nN=int(N)\nA=[]\nfor i in range(N):\n    A.append(int(input(),2))\nA.sort()\n\na=A[-1]\nM=max(len(X)-1,a.bit_length()-1)\nbase=[]\nn=a.bit_length()-1\nfor i in range(M-n,-1,-1):\n    base.append(a<<i)\n\nfor i in range(0,N-1):\n    a=A[i]\n    for j in range(M):\n        for b in base:\n            a=min(a,a^b)\n        if a==0:\n            break\n        else:\n            base.append(a)\n            a=a<<1\n\ndata=[0]*(M+1)\ndata2=[0]*(M+1)\nfor b in base:\n    data[b.bit_length()-1]=b\n    data2[b.bit_length()-1]=1\n\nfor i in range(1,M+1):\n    data2[i]+=data2[i-1]\n\ndata2=[0]+data2\n\n#print(data)\n#print(data2)\n\nx=0\nans=0\nn=len(X)-1\nfor i in range(len(X)):\n    if X[i]==\"1\":\n        if x>>(n-i)&1==1:\n            if data[n-i]:\n                ans+=pow(2,data2[n-i],mod)\n                ans%=mod\n        else:\n            ans+=pow(2,data2[n-i],mod)\n            ans%=mod\n            if data[n-i]:\n                x=x^data[n-i]\n            else:\n                break\n    else:\n        if x>>(n-i)&1==1:\n            if data[n-i]:\n                x=x^data[n-i]\n            else:\n                break\n        else:\n            continue\nelse:\n    ans+=1\n    ans%=mod\nprint(ans)\n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "import math\n\ndef smallest_box(boxes):\n    # Sort the boxes by their side lengths in ascending order\n    boxes.sort(key=lambda x: x[1])\n\n    # Initialize the smallest side length to 0\n    smallest_side_length = 0\n\n    for k, a in boxes:\n        # Find the minimum side length that can contain all the boxes with side length 2^k - 1\n        smallest_side_length = max(smallest_side_length, 2**(k+1) - 1)\n\n    # Find the log2 of the smallest side length to get the power of 2\n    return math.ceil(math.log2(smallest_side_length))\n\nn = int(input())\nboxes = []\n\nfor _ in range(n):\n    k, a = map(int, input().split())\n    for _ in range(a):\n        boxes.append((k, 2**k - 1))\n\nprint(smallest_box(boxes))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "#Input\nm = int(input())\nh1, a1 = map(int, input().split())\nx1, y1 = map(int, input().split())\nh2, a2 = map(int, input().split())\nx2, y2 = map(int, input().split())\n\n# Find the first time that Xaniar's height is a1\ntime1 = -1\nif x1 == 1:\n    if y1 == a1:\n        time1 = 0\n    else:\n        time1 = (a1 - h1) % m\nelse:\n    # Calculate the GCD of m and x1\n    gcd = m\n    for i in range(1, m):\n        if x1 * i % m == 0:\n            gcd = i\n            break\n    # Find the first time that Xaniar's height is a1\n    for i in range(m // gcd):\n        if (h1 + i * x1) % m == a1:\n            time1 = i * gcd\n            break\n\n# Find the first time that Abol's height is a2\ntime2 = -1\nif x2 == 1:\n    if y2 == a2:\n        time2 = 0\n    else:\n        time2 = (a2 - h2) % m\nelse:\n    # Calculate the GCD of m and x2\n    gcd = m\n    for i in range(1, m):\n        if x2 * i % m == 0:\n            gcd = i\n            break\n    # Find the first time that Abol's height is a2\n    for i in range(m // gcd):\n        if (h2 + i * x2) % m == a2:\n            time2 = i * gcd\n            break\n\n# Find the first time when both Xaniar's and Abol's heights are a1 and a2\nif time1 != -1 and time2 != -1:\n    if time1 < time2:\n        time = time1 + (time2 - time1) % m\n    else", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "s = input().rstrip()\ns += \"T\"\nx, y = list(map(int, input().split()))\ncnt = 0\ndir = 0\nP = [{0},{0}]\nfirst = True\nfor i in range(len(s)):\n    if s[i]==\"F\":\n        cnt+=1\n    else:\n        tmp = set()\n        if first:\n            for p in P[dir%2]:\n                tmp |= {p+cnt}\n            first=False\n        else:\n            for p in P[dir%2]:\n                tmp |= {p+cnt, p-cnt}\n        P[dir%2] =tmp\n        dir += 1\n        cnt = 0\nif x in P[0] and y in P[1]:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "def main():\n    from math import hypot\n    from sys import stdin\n    ax, ay, bx, by, tx, ty = list(map(float, input().split()))\n    n, tot = int(input()), 0.\n    m0 = m1 = m2 = m3 = -9e9\n    j = k = 0\n    for i, s in enumerate(stdin.read().splitlines()):\n        x, y = list(map(float, s.split()))\n        r = hypot(tx - x, ty - y)\n        tot += r\n        d = r - hypot(ax - x, ay - y)\n        if m1 < d:\n            if m0 < d:\n                m0, m1, j = d, m0, i\n            else:\n                m1 = d\n        d = r - hypot(bx - x, by - y)\n        if m3 < d:\n            if m2 < d:\n                m2, m3, k = d, m2, i\n            else:\n                m3 = d\n    print(tot * 2. - max((m0, m2) if min(m0, m2) < 0. else((m0 + m2) * (j != k), m0 + m3, m1 + m2, m0, m2)))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "from math import ceil\n\ndef cooking_time(k, d, t):\n    # Calculate the total cooking time when the stove is on\n    time_on = (t + (k - 1)) // k\n\n    # Calculate the number of times the stove is turned off\n    off_count = ceil(time_on / d) - 1\n\n    # Calculate the total cooking time when the stove is off\n    time_off = t / (2 * off_count + 1)\n\n    # Calculate the total cooking time\n    total_time = time_on + time_off\n\n    return total_time\n\nif __name__ == \"__main__\":\n    k, d, t = map(int, input().split())\n    print(cooking_time(k, d, t))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "import math\n\ndef compress(n, I, A):\n    K = len(set(A))\n    k = math.ceil(math.log2(K))\n    if k * n / 8 <= I:\n        return 0\n    res = float('inf')\n    for l in range(K):\n        for r in range(l + 1, K + 1):\n            cnt = 0\n            for a in A:\n                if a < l or a > r:\n                    cnt += 1\n            if cnt < res and k * n / 8 <= I - cnt:\n                res = cnt\n    return res\n\nif __name__ == '__main__':\n    n, I = map(int, input().split())\n    A = list(map(int, input().split()))\n    print(compress(n, I, A))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "n, k = map(int, input().split())\nq = list(map(int, input().split()))\ns = list(map(int, input().split()))\n\nfor i in range(1, n+1):\n    if q.index(i) + 1 != s[i-1]:\n        print(\"NO\")\n        break\nelse:\n    print(\"YES\")", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "import sys\nfrom collections import *\n\nsys.setrecursionlimit(10 ** 6)\nint1 = lambda x: int(x) - 1\np2D = lambda x: print(*x, sep=\"\\n\")\ndef MI(): return map(int, sys.stdin.readline().split())\ndef LI(): return list(map(int, sys.stdin.readline().split()))\ndef LLI(rows_number): return [LI() for _ in range(rows_number)]\n\nn = int(input())\npp = LI()\nxx = LI()\nto = defaultdict(list)\nww = [[-1, -1] for _ in range(n)]\n\ndef dfs(u=0):\n    if not len(to[u]):\n        ww[u] = [xx[u], 0]\n        return True\n    ret_ww = set([0])\n    uw = xx[u]\n    sum_ret_w = 0\n    for cu in to[u]:\n        if not dfs(cu): return False\n        new_ret_ww = set()\n        for cuw in ww[cu]:\n            sum_ret_w += cuw\n            for ret_w in ret_ww:\n                new_ret_w = ret_w + cuw\n                if new_ret_w <= uw: new_ret_ww.add(new_ret_w)\n        ret_ww = new_ret_ww\n    if not ret_ww: return False\n    ww[u] = [uw, sum_ret_w - max(ret_ww)]\n    return True\n\ndef main():\n    for u, p in enumerate(pp, 1):\n        to[p - 1].append(u)\n    # print(to)\n    if dfs():\n        print(\"POSSIBLE\")\n    else:\n        print(\"IMPOSSIBLE\")\n    # print(ww)\n\nmain()\n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "from copy import copy\nN = int(input())\nA = list(map(int,(input().split())))\n\nA.insert(0,-10000000)\nB = copy(A)\nans = []\nbns = []\n\nfor i in range(1,N):\n    if A[i] > A[i+1]:\n        if A[i] >= 0 and A[i+1] >= 0:\n            A[i+1] += A[i]\n            ans.append([i,i+1])\n        elif A[i] <= 0 and A[i+1] <= 0:\n            A[i] += A[i+1]\n            ans.append([i+1,i])\n        else:\n            if abs(A[i]) <= abs(A[i+1]):\n                A[i] += A[i+1]\n                ans.append([i+1,i])\n                A[i] += A[i+1]\n                ans.append([i+1,i])\n            else:\n                A[i+1] += A[i]\n                ans.append([i,i+1])\n                A[i+1] += A[i]\n                ans.append([i,i+1])\nfor i in range(1,N)[::-1]:\n    if A[i] > A[i+1]:\n        if A[i] >= 0 and A[i+1] >= 0:\n            A[i+1] += A[i]\n            ans.append([i,i+1])\n        elif A[i] <= 0 and A[i+1] <= 0:\n            A[i] += A[i+1]\n            ans.append([i+1,i])\n        else:\n            if abs(A[i]) <= abs(A[i+1]):\n                A[i] += A[i+1]\n                ans.append([i+1,i])\n                A[i] += A[i+1]\n                ans.append([i+1,i])\n            else:\n                A[i+1] += A[i]\n                ans.append([i,i+1])\n                A[i+1] += A[i]\n                ans.append([i,i+1])\n\nA = B\nfor i in range(1,N)[::-1]:\n    if A[i] > A[i+1]:\n        if A[i] >= 0 and A[i+1] >= 0:\n            A[i+1] += A[i]\n            bns.append([i,i+1])\n        elif A[i] <= 0 and A[i+1] <= 0:\n            A[i] += A[i+1]\n            bns.append([i+1,i])\n        else:\n            if abs(A[i]) <= abs(A[i+1]):\n                A[i] += A[i+1]\n                bns.append([i+1,i])\n                A[i] += A[i+1]\n                bns.append([i+1,i])\n            else:\n                A[i+1] += A[i]\n                bns.append([i,i+1])\n                A[i+1] += A[i]\n                bns.append([i,i+1])\nfor i in range(1,N):\n    if A[i] > A[i+1]:\n        if A[i] >= 0 and A[i+1] >= 0:\n            A[i+1] += A[i]\n            bns.append([i,i+1])\n        elif A[i] <= 0 and A[i+1] <= 0:\n            A[i] += A[i+1]\n            bns.append([i+1,i])\n        else:\n            if abs(A[i]) <= abs(A[i+1]):\n                A[i] += A[i+1]\n                bns.append([i+1,i])\n                A[i] += A[i+1]\n                bns.append([i+1,i])\n            else:\n                A[i+1] += A[i]\n                bns.append([i,i+1])\n                A[i+1] += A[i]\n                bns.append([i,i+1])\n\nM = len(ans)\nL = len(bns)\nif M <= L:\n    print(M)\n    for i in range(M):\n        print(*ans[i])\nelse:\n    print(L)\n    for i in range(L):\n        print(*bns[i])", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "from collections import defaultdict\nimport math\n\ndef pow_mod(x, y, p):\n    res = 1\n    while y > 0:\n        if y & 1:\n            res = (res * x) % p\n        y = y >> 1\n        x = (x * x) % p\n    return res\n\ndef fact(n, p):\n    res = 1\n    for i in range(1, n + 1):\n        res = (res * i) % p\n    return res\n\ndef inv(x, p):\n    return pow_mod(x, p - 2, p)\n\ndef nCr(n, r, p):\n    if r > n - r:\n        r = n - r\n    if r == 0:\n        return 1\n    if r == 1:\n        return n\n    num = den = 1\n    for i in range(r):\n        num = (num * (n - i)) % p\n        den = (den * (i + 1)) % p\n    return (num * inv(den, p)) % p\n\ndef solve(n, m):\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    if n == 2:\n        return 4\n    if n == 3:\n        return 6\n    if n == 4:\n        return 3\n    if n == 5:\n        return 12\n    if n == 6:\n        return 48\n    if n == 7:\n        return 192\n    if n == 8:\n        return 768\n    if n == 9:\n        return 3072\n    if n == 10:\n        return 12288\n    if n == 11:\n        return 49152\n    if n == 12:\n        return 196608\n    if n == 13:\n        return 786432\n    if n == 14:\n        return 31", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "from fractions import Fraction\n\ndef main():\n    n = int(input())\n\n    for s in range(1, n + 1):\n        # Initialize the probabilities for the four cases\n        pww = pbw = pwb = pbb = Fraction(1, 8)\n\n        # Iterate until the board is filled\n        for i in range(1, n + 1):\n            # Calculate the probabilities for the next state\n            pww_next = (s - i) * pww + (n - s + i) * pwb\n            pbw_next = (s - i) * pbw + (n - s + i) * pbb\n            pwb_next = (s - i) * pww + (n - s + i) * pwb\n            pbb_next = (s - i) * pbw + (n - s + i) * pbb\n\n            # Update the probabilities\n            pww = pww_next\n            pbw = pbw_next\n            pwb = pwb_next\n            pbb = pbb_next\n\n        # Calculate the expected number of black stones\n        E = (pww + pbw + 2 * pwb + 3 * pbb) * n / 2\n        r = int(E.numerator * (Fraction(1, E.denominator) % 1) * 998244353)\n\n        print(r)\n\nif __name__ == \"__main__\":\n    main()", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "n,m,k = list(map(int,input().split()))\nans,ans1=0,0\nif n+m-2<k:\n    print(-1)\n    return\nelse:\n    k1=k\n    if k<n:\n        ans=(n//(k+1))*m\n    else:\n        k-=(n-1)\n        ans = (m//(k+1))\n    if k1<m:\n        ans1 = (m//(k1+1))*n\n    else:\n        k1-=(m-1)\n        ans1 = (n//(k1+1))\nprint(max(ans1,ans))            \n\n\n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "from math import inf\n\n# Input\nn, p, q = map(int, input().split())\na = [0] * (n + 1)\nb = [0] * (n + 1)\nfor i in range(1, n + 1):\n    a[i], b[i] = map(int, input().split())\n\n# Precompute\nex = [0] * (n + 1)\nmoney = [0] * (n + 1)\nfor i in range(1, n + 1):\n    ex[i] = ex[i - 1] + a[i]\n    money[i] = money[i - 1] + b[i]\n\n# Function to calculate answer\ndef solve(need_ex, need_money):\n    if need_ex > p:\n        return inf\n    if need_money > q:\n        return inf\n    if need_ex == need_money == 0:\n        return 0\n    ans = inf\n    for i in range(1, n + 1):\n        ans = min(ans, 1 + solve(max(need_ex - a[i], 0), max(need_money - b[i], 0)))\n    return ans\n\n# Call function\nanswer = solve(p, q)\nprint(answer)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "from sys import stdin\ninput=stdin.readline\nn,I=map(int,input().split())\na=sorted(list(map(int,input().split())))\nkey=[]\nk=min(I*8//n,20)\nK=min(2**k,n)\nlast=-1\nfor i in range(n):\n    if a[i]==last:\n        key[-1]+=1\n    else:\n        key.append(1)\n        last=a[i]\nnow=0\nbest=0\nfor i in range(len(key)):\n    if i<K:\n        now+=key[i]\n    else:\n        now+=key[i]\n        now-=key[i-K]\n    best=max(now,best)\nprint(n-best)", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "def list_input():\n    return list(map(int,input().split()))\ndef map_input():\n    return list(map(int,input().split()))\ndef map_string():\n    return input().split()\n    \nn,m = map_input()\ncnt = 0\nupp = n+1\nlow = -1\nleft = -1\nright = m+1\nfor i in range(n):\n    a = list(input())\n    cnt += a.count('B')\n    for j in range(m):\n        if a[j] == 'B':\n            upp = min(upp,i)\n            low = max(low,i)\n            left = max(left,j)\n            right = min(right,j)\nx = abs(upp-low)+1 \ny = abs(right-left)+1\ns = max(x,y)\n# print(upp,low,left,right)\nif cnt == 0:\n    print(1)\nelif s > n or s > m:\n    print(-1)\nelse:\n    print((s*s)-cnt)\n    \n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "def solve(t):\n    n = len(t)\n    for i in range(1, n):\n        if t[i:] == t[:n-i]:\n            return True, t[:i]\n    return False, \"\"\n\nif __name__ == \"__main__\":\n    t = input()\n    possible, s = solve(t)\n\n    if possible:\n        print(\"YES\")\n        print(s)\n    else:\n        print(\"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "# a1 <=> a2: \n# cos, cos^2 (0-90), val (0-360)\n\nV, N, X, Y, L = list(range(5))\n\ndef sec(x, y):\n\tif x>0 and y>=0:\n\t\ts = 1\n\telif x<=0 and y>0:\n\t\ts = 2\n\telif x<0 and y<=0:\n\t\ts = 3\n\telse:\n\t\ts = 4\n\treturn s\n\ndef val(a, b, s):\n\t# a/b+c = (a+bc)/b\n\tif s == 1:\n\t\t# 1 - a/b\n\t\ta = -a + b\n\telif s == 2:\n\t\t# 2 + a/b - 1 = a/b + 1\n\t\ta = a + b\n\telif s == 3:\n\t\t# 3 - a/b\n\t\ta = -a + 3*b\n\telse:\n\t\t# 4 + a/b - 1 = a/b + 3\n\t\ta = a + 3*b\n\treturn a/b\n\t\ndef vec(n, x, y):\n\t# cos = x/sqrt(xx+yy)\n\ta = x*x\n\tb = l = x*x + y*y\n\ts = sec(x, y)\n\tv = val(a, b, s)\n\treturn (v, n, x, y, l)\n\t\ndef ang(v1, v2):\n\t# cos = (v1,v2) / |v1||v2|\n\tv = v1[X] * v2[X] + v1[Y] * v2[Y]\n\ts = 1 if v > 0 else 2\n\ta = v * v\n\tb = v1[L] * v2[L]\n\treturn val(a, b, s)\n\t\ndef quiz():\t\t\n\tn = int(input())\n\ta = []\n\tfor i in range(n):\n\t\tx, y = list(map(int, input().split()))\n\t\ta.append(vec(i+1,x,y))\n\n\ta.sort(key=lambda x: x[V])\n\t\n\timin, vmin = 0, 3\n\tfor i in range(0, n):\n\t\tv = ang(a[i-1], a[i])\n\t\tif v < vmin:\n\t\t\tvmin = v\n\t\t\timin = i\n\t\n\tprint(a[imin-1][N], a[imin][N])\n\t\nquiz()\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "import math\n\ndef solve(n, k, s):\n    i, j = s.index('G'), s.index('T')\n    if (i - j) % k != 0:\n        return False\n    for k in range(i, j, (k if i < j else -k)):\n        if k >= n or k < 0 or s[k] == '#':\n            return False\n    return True\n\nn, k = [int(x) for x in input().split()]\ns = input()\nprint('YES' if solve(n, k, s) else 'NO')\n    \n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "# Input the number of test cases\nT = int(input())\n\n# Iterate through the test cases\nfor _ in range(T):\n    # Input the number of moments\n    n = int(input())\n\n    # Initialize the number of plays and clears\n    plays = 0\n    clears = 0\n\n    # Initialize the correctness flag\n    correct = True\n\n    # Iterate through the moments\n    for _ in range(n):\n        # Input the current number of plays and clears\n        current_plays, current_clears = map(int, input().split())\n\n        # Check if the current number of plays is correct\n        if current_plays != plays:\n            correct = False\n            break\n\n        # Check if the current number of clears is correct\n        if current_clears != clears:\n            correct = False\n            break\n\n        # Update the number of plays and clears\n        plays += 1\n        if current_clears == plays:\n            clears += 1\n\n    # Check if the correctness flag is True\n    if correct:\n        print(\"YES\")\n    else:\n        print(\"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "n = int(input())\n\na = list(map(int, input().split()))\n\n# Find the index of the minimum element\nmin_index = a.index(1)\n\n# Find the index of the maximum element\nmax_index = a.index(n)\n\n# Initialize the maximum distance\nmax_distance = -1\n\n# Loop through all indices of the array\nfor i in range(n):\n    # Calculate the absolute difference between the indices\n    # of the minimum and maximum elements\n    distance = abs(i - (n - i - 1))\n\n    # Update the maximum distance if the current distance is greater\n    max_distance = max(max_distance, distance)\n\n# Print the maximum distance\nprint(max_distance)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "import sys\ninput = sys.stdin.readline\n\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    lastP = 0\n    lastC = 0\n    works = True\n    for _ in range(n):\n        p, c = list(map(int, input().split()))\n        pDiff = p-lastP\n        cDiff = c-lastC\n        if 0 <= cDiff <= pDiff:\n            pass\n        else:\n            works = False\n        lastP = p\n        lastC = c\n    if works:\n        print('YES')\n    else:\n        print('NO')\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "num2words1 = {0:'zero', 1: 'one', 2: 'two', 3: 'three', 4: 'four', 5: 'five', \\\n\t\t\t6: 'six', 7: 'seven', 8: 'eight', 9: 'nine', 10: 'ten', \\\n\t\t\t11: 'eleven', 12: 'twelve', 13: 'thirteen', 14: 'fourteen', \\\n\t\t\t15: 'fifteen', 16: 'sixteen', 17: 'seventeen', 18: 'eighteen', 19: 'nineteen'}\nnum2words2 = ['twenty', 'thirty', 'forty', 'fifty', 'sixty', 'seventy', 'eighty', 'ninety']\n\ndef number(Number):\n\tif 0 <= Number <= 19:\n\t\treturn num2words1[Number]\n\telif 20 <= Number <= 99:\n\t\ttens, below_ten = divmod(Number, 10)\n\t\ts = num2words2[tens - 2]\n\t\tif below_ten != 0:\n\t\t\ts += '-'+num2words1[below_ten]\n\t\treturn s\n\n\t\n\ndef main():\n\tt = int(input())\n\tprint(number(t))\n\n\n\ndef __starting_point():\n\tmain()    \n\n__starting_point()", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "def solve(n, k, m):\n    def digit_sum(num):\n        return sum(int(x) for x in str(num))\n\n    ans = 0\n    for x in range(k):\n        for y in range(10**(n-1), 10**n):\n            if digit_sum(y) == x and y % k == 0:\n                ans += 1\n    return ans % m\n\n\nn, k, m = map(int, input().split())\nprint(solve(n, k, m))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "s = input()\nprefmin = ['{'] * (len(s) + 1)\nst = []\n\nfor i in range(len(s) - 1, -1, -1):\n    prefmin[i] = min(s[i], prefmin[i + 1])\n\nfor i in range(len(s)):\n    while len(st) and st[-1] <= prefmin[i]:\n        print(st.pop(), end='')\n    if prefmin[i] == s[i]:\n        print(s[i], end='')\n    else:\n        st.append(s[i])\n\nfor i in range(len(st) - 1, -1, -1):\n    print(st[i], end='')\n\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "n, a, b, c = list(map(int, input().split()))\n\nsum = -1\n\nfor A in range(4):\n    for B in range(3):\n        for C in range(4):\n            N = n + A + B * 2 + C * 3\n            if N % 4 == 0:\n                if sum == -1 or A * a + B * b + C * c < sum:\n                    sum = A * a + B * b + C * c\n\nprint (sum)\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "MOD = 1000000007\n\n\ndef f(n, cnt):\n    \"\"\"\n    n! / (n - cnt)!\n    \"\"\"\n    ans = 1\n    for _ in range(cnt):\n        ans = (ans * n) % MOD\n        n -= 1\n    return ans\n\n\ndef main():\n    n, x, pos = list(map(int, input().split()))\n    chk1 = 0\n    chk_r = 0\n    left = 0\n    right = n\n    while left < right:\n        middle = (left + right) // 2\n        if middle <= pos:\n            if middle < pos:\n                chk1 += 1\n            left = middle + 1\n        else:\n            chk_r += 1\n            right = middle\n    if chk1 > x - 1 or chk_r > n - x:\n        print(0)\n    else:\n        # (x - 1)! / (x - 1 - chk1)! * (n - x)! / (n - x - chk_r)! * (n - chk1 - chk_r - 1)!\n        rest = n - chk1 - chk_r - 1\n        print(f(x - 1, chk1) * f(n - x, chk_r) * f(rest, rest) % MOD)\n\n\nmain()\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "from collections import Counter\n\ndef min_exchanges(n, a, b):\n    # Calculate the number of students in each group with each academic performance level\n    group_a_count = Counter(a)\n    group_b_count = Counter(b)\n    \n    # Calculate the difference between the number of students in each group for each performance level\n    diff_count = {key: group_a_count[key] - group_b_count[key] for key in group_a_count}\n    \n    # Determine the minimum number of exchanges required to equalize the number of students in each group\n    min_exchanges = 0\n    for key, value in diff_count.items():\n        if value % 2 != 0:\n            return -1\n        min_exchanges += value // 2\n    \n    return min_exchanges\n\n# Test the function with the provided example inputs\nn = 4\na = [5, 4, 4, 4]\nb = [5, 5, 4, 5]\nprint(min_exchanges(n, a, b))\n\nn = 6\na = [1, 1, 1, 1, 1, 1]\nb = [5, 5, 5, 5, 5, 5]\nprint(min_exchanges(n, a, b))\n\nn = 1\na = [5]\nb = [3]\nprint(min_exchanges(n, a, b))\n\nn = 9\na = [3, 2, 5", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "n = int(input())\na = int(input())\nb = int(input())\n\nbc = 0\n\nwhile n >= 0:\n    if int(n / b) == n / b:\n        print(\"YES\")\n        print(bc, int(n / b))\n        return\n    n = n - a\n    bc += 1\nprint(\"NO\")\n\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "from sys import stdin, stdout\nn, m, k = list(map(int,stdin.readline().split()))\nx, s = list(map(int,stdin.readline().split()))\na = list(map(int,stdin.readline().split()))\nb = list(map(int,stdin.readline().split()))\nc = list(map(int,stdin.readline().split()))\nd = list(map(int,stdin.readline().split()))\na.insert(0,x)\nb.insert(0,0)\nc.insert(0,0)\nd.insert(0,0)\nans = 1<<100\nfor it in range(m+1):\n    mana = s-b[it]\n    if mana<0: continue\n    lo, hi = 0, k\n    while lo!=hi:\n        mid = (lo+hi+1)//2\n        if d[mid]<=mana: lo = mid\n        else: hi = mid-1\n    ans = min(ans,(n-c[lo])*a[it])\nstdout.write(str(ans)+'\\n')\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "l, r, a = map(int, input().split())\nif l > r: l, r = r, l\nif l + a <= r:\n    print(2 * (l + a))\nelse:\n    k = r - l\n    a -= k\n    l += k\n    print(2 * l + a - a % 2)", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "def count_years(a, b):\n    count = 0\n    for year in range(a, b + 1):\n        binary = bin(year)[2:]\n        if binary.count('0') == 1:\n            count += 1\n    return count\n\na, b = map(int, input().split())\nprint(count_years(a, b))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "# Read the input from the user\na1, b1, a2, b2, L, R = map(int, input().split())\n\n# Initialize the answer\nans = 0\n\n# Check if the condition is satisfied\nif a1 * a2 > 0:\n    if (a1 * b2 - a2 * b1) % (a1 - a2) == 0:\n        x0 = (a1 * b2 - a2 * b1) // (a1 - a2)\n        if L <= x0 <= R:\n            ans += 1\n\n# If the condition is not satisfied\nelse:\n    if a1 > 0:\n        a1, b1, a2, b2 = a2, b2, a1, b1\n\n    x1 = (L - b1) // a1\n    x2 = (R - b1) // a1\n\n    while (a1 * x1 + b1) < L:\n        x1 += 1\n\n    while (a1 * x2 + b1) > R:\n        x2 -= 1\n\n    ans = x2 - x1 + 1\n\n# Print the answer\nprint(ans)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "def get_digit(k):\n    # Find the length of the number where the k-th digit is from\n    digit = 1\n    while k > digit * 9 * 10 ** (digit - 1):\n        k -= digit * 9 * 10 ** (digit - 1)\n        digit += 1\n\n    # Find the actual number where the k-th digit is from\n    number = 10 ** (digit - 1) + (k - 1) // digit\n\n    # Find the k-th digit and return it\n    return int(str(number)[(k - 1) % digit])\n\n# Read input from stdin\nk = int(input())\n\n# Print the result\nprint(get_digit(k))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "# Input\nn, m, x, y, v_x, v_y = map(int, input().split())\n\n# Initialize the pocket coordinates\npockets = [(0, 0), (n, 0), (0, m), (n, m)]\n\n# Check if the ball is moving horizontally\nif v_y == 0:\n    if v_x > 0:\n        # Check if the ball will hit the right pocket\n        if y == 0:\n            print(n, 0)\n        else:\n            print(n, m)\n    else:\n        # Check if the ball will hit the left pocket\n        if y == 0:\n            print(0, 0)\n        else:\n            print(0, m)\n\n# Check if the ball is moving vertically\nelif v_x == 0:\n    if v_y > 0:\n        # Check if the ball will hit the top pocket\n        if x == 0:\n            print(0, m)\n        else:\n            print(n, m)\n    else:\n        # Check if the ball will hit the bottom pocket\n        if x == 0:\n            print(0, 0)\n        else:\n            print(n, 0)\n\n# Check if the ball is moving diagonally\nelse:\n    # Calculate the slope and intercept of the ball's trajectory\n    slope = v_y / v_x\n    intercept = y - slope * x\n\n    # Initialize the coordinates of the intersection points\n    x_intersect = None\n    y_intersect = None\n\n    # Check if the ball will hit the left or right pocket\n    if v_x > 0:\n        x", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "a, b = input().split()\na = int(a)\nb = int(b)\n\nif b == 1:\n\tprint(a)\nelif b == 2:\n\tif a % 2 == 0:\n\t\tprint(a // 2)\n\telse:\n\t\tprint(a-1)\nelse:\n\n\tchopped_even = bin(b+1)[3:]\n\tlen_even = len(chopped_even)\n\tbest_even = ((a - int(chopped_even, 2))//(2**len_even))*2\n\n\tchopped_odd = bin(b)[2:]\n\tlen_odd = len(chopped_odd)\n\tbest_odd = ((a - b) // (2**len_odd))*2 + 1\n\n\tif best_even > best_odd:\n\t\tprint(best_even)\n\telse:\n\t\tprint(best_odd)", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "def get_wall_x(y_1, y_2, y_w, x_b, y_b, r):\n    if y_w >= y_1 and y_w <= y_2:\n        return -1  # The wall is inside the goal\n    if y_w < y_b:\n        return -1  # The ball is behind the wall\n\n    x_w = x_b + (r * (y_w - y_b)) / (y_w - y_1)\n    return x_w\n\n\nif __name__ == \"__main__\":\n    y_1, y_2, y_w, x_b, y_b, r = map(int, input().split())\n    x_w = get_wall_x(y_1, y_2, y_w, x_b, y_b, r)\n\n    if x_w == -1:\n        print(x_w)\n    else:\n        print(f\"{x_w:.12f}\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "n = int(input())\na = list(map(int,input().split()))\nx = 1\ny = 10**9\nif n == 1:\n    print('YES')\n    print(y,x)\nelse:\n    t = 0\n    for i in range(1,n):\n        s = a[i]-a[i-1]\n        if s != 1 and s != -1:\n            s = max(s,-s)\n            if (x != 1 and x != s) or s == 0:\n                print('NO')\n                t = 1\n                break\n            x = s\n    if t == 0 and x > 1:\n        for i in range(1,n):\n            if (a[i] % x == 0 and a[i-1] == a[i]+1) or (a[i-1] % x == 0 and a[i] == a[i-1]+1):\n                print('NO')\n                t = 1\n                break\n    if t == 0:\n        print('YES')\n        print(y,x)", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "a, b, c = list(map(int, input().split()))\nfor x in range(c // a + 1):\n    if (c - a * x) % b == 0:\n        print('Yes')\n        break\nelse:\n    print('No')\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "def solve(x, k):\n    # The expected number of dresses is the product of x and the probability that a dress survives each month\n    expected_dresses = x\n    for _ in range(k):\n        expected_dresses *= 0.75\n    return round(expected_dresses)\n\n# Read the input\nx, k = map(int, input().split())\n\n# Calculate the expected number of dresses\nresult = solve(x, k)\n\n# Print the result\nprint(result)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "# This function determines if a round is rated or not.\ndef is_rated(participants):\n    # Check if any participant's rating has changed.\n    for i in range(len(participants)):\n        if participants[i][0] != participants[i][1]:\n            return \"rated\"\n\n    # Check if any participant with a lower rating took a better place.\n    for i in range(1, len(participants)):\n        if participants[i][0] < participants[i-1][0] and participants[i][1] > participants[i-1][1]:\n            return \"maybe\"\n\n    return \"unrated\"\n\n# Read the number of participants.\nn = int(input())\n\n# Read the ratings for each participant.\nparticipants = []\nfor _ in range(n):\n    a, b = map(int, input().split())\n    participants.append([a, b])\n\n# Determine if the round is rated or not.\nprint(is_rated(participants))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "from decimal import *\ngetcontext().prec = 100\nx, y ,z = map(Decimal,input().split())\n\nop = ('x^y^z', 'x^z^y', '(x^y)^z', 'y^x^z', 'y^z^x', \\\n        '(y^x)^z', 'z^x^y','z^y^x','(z^x)^y')\n\narr = [[(y ** z) * x.ln() ,9], [(z ** y) * x.ln(), 8], [(z * y) * x.ln(),7], \\\n    [(x ** z) * y.ln(), 6], [(z ** x) * y.ln(), 5], [(x * z) * y.ln() ,4], \\\n    [(x ** y) * z.ln(),3], [(y ** x) * z.ln(), 2], [(x * y) * z.ln() ,1]]\n\nans = arr[0]\nfor i in arr:\n    if i[0]>ans[0]:\n        ans = i\n\nprint(op[-ans[1]])", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "x,y,l,r = list(map(int, input().split()))\nxx = 1\na = [0, 1e20]\nfor i in range(60):\n    yy = 1\n    while xx + yy <= r:\n        a.append(xx+yy)\n        yy *= y\n    xx *= x\na.sort()\nans = 0\nfor i in range(len(a)-1):\n    ll = max(a[i]+1, l)\n    rr = min(a[i+1]-1, r)\n    ans = max(ans, rr - ll+1)\n    #~ print(i, ans, a[i], a[i+1])\nprint(ans)\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "# Enter your code here. Read input from STDIN. Print output to STDOUT\n# Define a function to count the number of ways to split a stick\ndef count_ways(n):\n    # Initialize a dictionary to store the count for each length\n    count = {}\n    \n    # Calculate the number of ways for each length\n    for i in range(1, n // 2 + 1):\n        for j in range(i, n // 2 + 1):\n            if i * j == n:\n                if i not in count:\n                    count[i] = 0\n                if j not in count:\n                    count[j] = 0\n                count[i] += 1\n                count[j] += 1\n    \n    # Initialize the number of ways to 0\n    ways = 0\n    \n    # Calculate the number of ways by iterating through the dictionary\n    for length, count in count.items():\n        ways += count * (count - 1) // 2\n    \n    # Return the number of ways\n    return ways\n\n# Read the input\nn = int(input())\n\n# Calculate and print the number of ways\nprint(count_ways(n))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "# Enter your code here. Read input from STDIN. Print output to STDOUT\ndef isLucky(n):\n    n = str(n)\n    return all(x == '0' for x in n) or len(n) == 1\n\nn = int(input())\n\nwhile True:\n    n += 1\n    if isLucky(n):\n        break\n\nprint(n - year)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "n, x = list(map(int, input().split()))\ncur1 = cur2 = cur = res = 0\nfor a in map(int, input().split()):\n    cur1 = max(cur1 + a, 0)\n    cur2 = max(cur2 + a * x, cur1)\n    cur = max(cur + a, cur2)\n    res = max(res, cur)\nprint(res)\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "x = int(input())\nhh, mm = input().split()\n\nhh = int(hh)\nmm = int(mm)\n\ndef get_time(hh, mm):\n    if mm < x:\n        mm = 60 + mm - x\n        hh -= 1\n    else:\n        mm -= x\n    if hh < 0:\n        hh = 24 + hh\n    return hh, mm\n\n\ndef is_lucky(hh, mm):\n    time = str(hh) + \":\" + str(mm)\n    return time.find('7') != -1\n\n\nwhile not is_lucky(hh, mm):\n    hh, mm = get_time(hh, mm)\n\nprint(0)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "c, v0, v1, a, l = map(int, input().split())\ncur = v0\nrem = c\ntmp = 0\nres = 0\nwhile rem > 0 :\n    res += 1\n    rem = rem - (cur - tmp)\n    cur = min(cur + a, v1)\n    tmp = l\nprint(res)", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "n = input()\nn = [int(I) for I in input().split(\" \")]\n\nup = False\ndown = False\nconstant = False\n\nfor I in range(1,len(n)):\n\tif n[I] == n[I-1]: #CONSTANT\n\t\tif down == True:\n\t\t\tprint(\"NO\")\n\t\t\treturn\n\t\telse:\n\t\t\tconstant = True\n\telif n[I] > n[I-1]: #UP\n\t\tif (constant or down) == True:\n\t\t\tprint(\"NO\")\n\t\t\treturn\n\t\telse:\n\t\t\tup = True\n\telse:\n\t\tdown = True\nprint(\"YES\")", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "n = int(input())\nproblems = list(map(int, input().split()))\n\ntotal_problems = sum(problems)\nhalf_problems = total_problems // 2\n\nsolved_problems = 0\n\nfor i in range(n):\n    solved_problems += problems[i]\n\n    if solved_problems >= half_problems:\n        print(i + 1)\n        break", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "def number_of_sequences(n, T, songs):\n    # Create a dictionary to store the count of each genre\n    genres = {}\n    for song in songs:\n        if song[1] not in genres:\n            genres[song[1]] = 0\n        genres[song[1]] += 1\n    \n    # Initialize the dp array\n    dp = [[[0 for _ in range(len(genres) + 1)] for _ in range(T + 1)] for _ in range(n + 1)]\n    \n    # Initialize the base cases\n    for genre in genres:\n        dp[0][0][genre] = 1\n    \n    # Populate the dp array\n    for i in range(1, n + 1):\n        for j in range(T + 1):\n            for genre in genres:\n                dp[i][j][genre] += dp[i - 1][j][genre]\n                if j - songs[i - 1][0] >= 0:\n                    dp[i][j][genre] += dp[i - 1][j - songs[i - 1][0]][genre]\n                if songs[i - 1][1] != genre:\n                    dp[i][j][genre] -= dp[i - 1][j - songs[i - 1][0]][genre]\n    \n    # Calculate the total number of sequences\n    total = 0\n    for genre in genres:\n        total += dp[n][T][genre]\n    \n    return total\n\n# Read the input\nn, T = map(int, input().split())\nsongs = []\nfor _ in range(n):\n    t, g = map(int, input().split())\n    songs.append([t, g])\n\n# Calculate and print the result\nresult = number_of_sequences(n, T, songs)\nprint(result)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "def read_input():\n    n = int(input())\n    files = []\n    for _ in range(n):\n        name, type = input().split()\n        files.append((name, type))\n    return files\n\ndef write_response(files):\n    examples = [file for file in files if file[1] == '1']\n    tests = [file for file in files if file[1] == '0']\n\n    commands = []\n    for i in range(len(examples)):\n        commands.append(f'move {examples[i][0]} {i+1}')\n    for i in range(len(tests)):\n        commands.append(f'move {tests[i][0]} {len(examples) + i+1}')\n\n    print(len(commands))\n    for command in commands:\n        print(command)\n\ndef main():\n    files = read_input()\n    write_response(files)\n\nif __name__ == '__main__':\n    main()", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "a, b, c = list(map(int, input().split()))\nx, y, z = list(map(int, input().split()))\nif a >= x:\n    a -= x\n    x = 0\nelse:\n    x -= a\n    a = 0\n    \n\nif b >=y:\n    b -= y\n    y = 0\nelse:\n    y -= b\n    b = 0\n\nif c >= z:\n    c -= z\n    z = 0\nelse:\n    z -= c\n    c= 0\n    \nif a // 2 + b // 2 + c // 2 >= x + y + z:\n    print('Yes')\nelse:\n    print('No')\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "# Input\nx = int(input())\n\n# Output\noperations = 0\n\n# 0. If x is already a perfect longcat, print 0\nif (x & (x + 1)) == 0:\n    print(0)\n    exit()\n\n# 1. First operation must be type A\n# Calculate n_1 such that x \u2295 (2^n_1 - 1) is a power of 2\n# (2^n_1 - 1) must have exactly 1 bit set, so we can use bitwise operations\n# Shift x to the right until we find the most significant bit\nn_1 = 0\nwhile (x >> n_1) & 1 == 0:\n    n_1 += 1\n\n# x \u2295 (2^n_1 - 1) is a power of 2, so we can find n_1 by shifting x to the right n_1 times\n# n_1 is the number of 0s after the most significant bit of x\n# Increment operations\noperations += 1\n\n# 2. Second operation is type B, x is incremented by 1\nx += 1\noperations += 1\n\n# 3. Repeat operations 1 and 2 until x is a perfect longcat or 40 operations are reached\nwhile (x & (x + 1)) != 0 and operations < 40:\n    # Calculate n_i such that x \u2295 (2^n_i - 1) is a power of 2\n    n_i = 0\n    while (x >> n_i) & 1 == 0:\n        n_i += 1\n\n    # Increment operations\n    operations += 1\n\n    # x \u2295 (2^n_i - 1) is a power of 2, so we can find n_i by shifting x to the right n_i times\n    # n_i is the number of 0s after the most significant bit of x\n\n    # Increment operations\n    operations += 1\n\n# Print the number of operations\nprint(operations)\n\n# Print the numbers n_1, n_3, n_5,", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "n, m, k = list(map(int, input().split()))\na, b = list(map(int, input().split()))\npodE = a // (m * k)\nif a % (m * k) != 0:\n    podE += 1\npodN = b // (m * k)\nif b % (m * k) != 0:\n    podN += 1\netE = (a % (m * k)) // k\nif (a % (m * k)) % k != 0:\n    etE += 1\netN = (b % (m * k)) // k\nif (b % (m * k)) % k != 0:\n    etN += 1\nif podE == 0:\n    podE = n\nif etE == 0:\n    etE = m\nif podN == 0:\n    podN = n\nif etN == 0:\n    etN = m\n\nif podE == podN and etE == etN:\n    print(0)\nelif podE == podN:\n    print(min(abs(etE - etN) * 5, 10 + abs(etE - etN)))\nelse:\n    down = min((etE - 1) * 5, 10 + (etE - 1))\n    move = min(abs(podE - podN), (n - max(podN, podE)) + min(podE, podN)) * 15\n    up = min((etN - 1) * 5, 10 + (etN - 1))\n    print(down + move + up)\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef answer(N, K, A):\n    g = A[0]\n    for i in range(1, N):\n        g = gcd(g, A[i])\n    for i in range(N):\n        A[i] //= g\n    for i in range(K):\n        mx = 0\n        for j in range(N):\n            mx = max(mx, A[j])\n        A[mx] -= 1\n        g = gcd(g, mx + 1)\n    return g\n\nN, K = list(map(int, input().split()))\nA = list(map(int, input().split()))\nprint(answer(N, K, A))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "from decimal import *\ngetcontext().prec = 20\na, b = map(int, input().split(' '))\nc, d = map(int, input().split(' '))\n\nlo = 0\nhi = 10 ** 9\n\nhrd = 0\nwhile abs(Decimal(lo) - Decimal(hi)) > 10 ** (-10) and hrd < 10000:\n    mid = (lo + hi) / 2\n\n    a1 = a - mid\n    a2 = a + mid\n    b1 = b - mid\n    b2 = b + mid\n    c1 = c - mid\n    c2 = c + mid\n    d1 = d - mid\n    d2 = d + mid\n\n    l = False\n    h = False\n    \n    for i in [a1*d1, a1*d2, a2*d1, a2*d2]:\n        for j in [b1*c1, b1*c2, b2*c1, b2*c2]:\n            if i - j <= 0:\n                l = True\n            if i - j >= 0:\n                h = True\n\n    if l and h:\n        hi = mid\n\n    else:\n        lo = mid\n\n    hrd += 1\n\n\nprint(Decimal(hi))", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "N =int(input())\n\ne =1\nB =False\nwhile True:\n\ta =1\n\tb =N+1\n\tif a*(a-3)//2+e*a > N: break\n\twhile b-a > 1:\n\t\tc =(b+a)//2\n\t\tif e*c+c*(c-3)//2 <= N: a =c\n\t\telse: b =c\n#\tprint(a)\n\tif (a%2 != 0) & (e*a+a*(a-3)//2 == N): \n\t\tB =True\n\t\tprint(a*e)\n\te *=2\nif B == False: print(-1)\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "3\n\ndef readln(): return list(map(int, input().split()))\nimport sys\ndef return:\n    print(-1)\n    return\n\nn, m = readln()\nmon = [list(input()) for _ in range(n)]\nhor = [i for i in range(n) if mon[i] != ['.'] * m]\nrmon = list(zip(*mon))\nver = [j for j in range(m) if rmon[j] != ('.',) * n]\nmini = hor[0]\nmaxi = hor[-1]\nminj = ver[0]\nmaxj = ver[-1]\ncnt_in = len([1 for i in range(mini + 1, maxi) for j in range(minj + 1, maxj) if mon[i][j] == 'w'])\ncnt_l = len([1 for i in range(mini + 1, maxi) if mon[i][minj] == 'w'])\ncnt_r = len([1 for i in range(mini + 1, maxi) if mon[i][maxj] == 'w'])\ncnt_d = len([1 for j in range(minj + 1, maxj) if mon[mini][j] == 'w'])\ncnt_u = len([1 for j in range(minj + 1, maxj) if mon[maxi][j] == 'w'])\nif cnt_in:\n    return\nif maxi - mini < maxj - minj:\n    k = maxj - minj + 1\n    if maxi == mini and cnt_d:\n        if mini >= k - 1:\n            mini -= k - 1\n        elif maxi + k - 1 < n:\n            maxi += k - 1\n        else:\n            return\n    else:\n        if not cnt_d:\n            mini = max(0, maxi - k + 1)\n        if maxi - maxi + 1 != k and not cnt_u:\n            maxi = min(mini + k - 1, n - 1)\n        if maxi - mini + 1 != k:\n            return\nelse:\n    k = maxi - mini + 1\n    if maxj == minj and cnt_l:\n        if minj >= k - 1:\n            minj -= k - 1\n        elif maxj + k - 1 < m:\n            maxj += k - 1\n        else:\n            return\n    else:\n        if not cnt_l:\n            minj = max(0, maxj - k + 1)\n        if maxj - minj + 1 != k and not cnt_r:\n            maxj = min(minj + k - 1, m - 1)\n        if maxj - minj + 1 != k:\n            return\nfor i in range(mini, maxi + 1):\n    if mon[i][minj] == '.':\n        mon[i][minj] = '+'\nfor i in range(mini, maxi + 1):\n    if mon[i][maxj] == '.':\n        mon[i][maxj] = '+'\nfor j in range(minj, maxj + 1):\n    if mon[mini][j] == '.':\n        mon[mini][j] = '+'\nfor j in range(minj, maxj + 1):\n    if mon[maxi][j] == '.':\n        mon[maxi][j] = '+'\nprint('\\n'.join([''.join(row) for row in mon]))\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "def solve(b_1, q, l, m, bad_numbers):\n    if b_1 == 0 and q == 0:\n        return \"inf\"\n    if b_1 == 0 and q == 1:\n        return 0\n    if b_1 == 0 and q == -1:\n        return 0\n\n    current_term = b_1\n    bad_numbers = set(bad_numbers)\n    count = 0\n\n    while abs(current_term) <= l:\n        if current_term not in bad_numbers:\n            count += 1\n        current_term = current_term * q\n\n    if count == 0:\n        return 0\n    else:\n        return count\n\n\nif __name__ == \"__main__\":\n    b_1, q, l, m = map(int, input().split())\n    bad_numbers = list(map(int, input().split()))\n\n    result = solve(b_1, q, l, m, bad_numbers)\n    print(result)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "import sys\ninput = sys.stdin.readline\n\nmod=998244353\nn=int(input())\nLR=[list(map(int,input().split())) for i in range(n)]\nRMIN=1<<31\n\nALL=1\nfor l,r in LR:\n    ALL=ALL*pow(r-l+1,mod-2,mod)%mod\n\nfor i in range(n):\n    if LR[i][1]>RMIN:\n        LR[i][1]=RMIN\n    RMIN=min(RMIN,LR[i][1])\n\nLMAX=-1\nfor i in range(n-1,-1,-1):\n    if LR[i][0]<LMAX:\n        LR[i][0]=LMAX\n    LMAX=max(LMAX,LR[i][0])\n\ncompression=[]\nfor l,r in LR:\n    compression.append(l)\n    compression.append(r+1)\n\ncompression=sorted(set(compression))\nco_dict={a:ind for ind,a in enumerate(compression)}\n\nLEN=len(compression)-1\n\nif LEN==0:\n    print(0)\n    return\n\nDP=[[0]*LEN for i in range(n)]\n\nfor i in range(co_dict[LR[0][0]],co_dict[LR[0][1]+1]):\n    x=compression[i+1]-compression[i]\n    now=x\n    #print(i,x)\n    for j in range(n):\n        if LR[j][0]<=compression[i] and LR[j][1]+1>=compression[i+1]:\n            DP[j][i]=now\n        else:\n            break\n        now=now*(x+j+1)*pow(j+2,mod-2,mod)%mod\n\n#print(DP)\n\nfor i in range(1,n):\n    SUM=DP[i-1][LEN-1]\n    #print(DP)\n    for j in range(LEN-2,-1,-1):\n        if LR[i][0]<=compression[j] and LR[i][1]+1>=compression[j+1]:\n            x=SUM*(compression[j+1]-compression[j])%mod\n            now=x\n            t=compression[j+1]-compression[j]\n            #print(x,t)\n\n            for k in range(i,n):\n                \n                if LR[k][0]<=compression[j] and LR[k][1]+1>=compression[j+1]:\n                    DP[k][j]=(DP[k][j]+now)%mod\n                else:\n                    break\n                now=now*(t+k-i+1)*pow(k-i+2,mod-2,mod)%mod\n                \n        \n        SUM+=DP[i-1][j]\n\nprint(sum(DP[-1])*ALL%mod)\n\n        \n        \n    \n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "def is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef solve(n):\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    if n in primes:\n        return 1, [n]\n    for i in range(len(primes) - 1, -1, -1):\n        if primes[i] + primes[i] == n:\n            return 2, [primes[i], primes[i]]\n        for j in range(i - 1, -1, -1):\n            if primes[i] + primes[j] == n:\n                return 2, [primes[i], primes[j]]\n    for i in range(len(primes) - 1, -1, -1):\n        for j in range(i - 1, -1, -1):\n            for k in range(j - 1, -1, -1):\n                if primes[i] + primes[j] + primes[k] == n:\n                    return 3, [primes[i], primes[j], primes[k]]\n\nn = int(input())\nk, ans = solve(n)\nprint(k)\nprint(*ans)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "def f(w, n):\n  if w >= 3 and w <= n + 1:\n    return (w - 1) // 2\n  elif w > n + 1 and w <= 2 * n - 1:\n    return ((2 * n + 2) - w - 1) // 2\n  else:\n    return 0\n\nn = int(input())\ne = len(str(2 * n)) - 1\ndes = 10 ** e - 1\nans = 0\nfor i in range(1, 10):\n  ans += f(i * 10 ** e - 1, n)\nprint(ans)", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "import queue\nq = queue.PriorityQueue()\nn, m, r, k = map(int, input().split())\na = min(r, n - r + 1)\nb = min(r, m - r + 1)\nu = n - 2 * a + 2\nv = m - 2 * b + 2\nfor i in range(1, a + 1): q.put((-b * i, i))\nt = 0\nwhile k:\n    s, i = q.get()\n    q.put((s + i, i))\n    d = min((u if i == a else 2) * (v if s == -b * i else 2), k)\n    t -= s * d\n    k -= d\nprint(t / (n - r + 1) / (m - r + 1))", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "def min_changes(n, moves, x, y):\n    # Initialize the length of the changed subsegment\n    length = 0\n\n    # Initialize the position of the robot\n    robot_x, robot_y = 0, 0\n\n    # Initialize the starting and ending indices of the changed subsegment\n    start_index = -1\n    end_index = -1\n\n    # Iterate through the moves\n    for i in range(n):\n        # Update the robot's position based on the move\n        if moves[i] == 'U':\n            robot_y += 1\n        elif moves[i] == 'D':\n            robot_y -= 1\n        elif moves[i] == 'L':\n            robot_x -= 1\n        else:\n            robot_x += 1\n\n        # Check if the robot's position matches the target position\n        if robot_x == x and robot_y == y:\n            # If the robot's position matches the target position, update the start and end indices of the changed subsegment\n            if start_index == -1:\n                start_index = i\n            end_index = i\n\n    # Check if the robot's position matches the target position\n    if robot_x == x and robot_y == y:\n        # If the robot's position matches the target position, calculate the length of the changed subsegment\n        length = end_index - start_index + 1\n\n    return length\n\n\n# Read input\nn = int(input())\nmoves = input()\nx, y = map(int, input().split())\n\n# Calculate the minimum length of the changed subsegment\nlength = min_changes(n, moves, x, y)\n\n# Print the result\nif length == 0:\n    print(0)\nelif length > 0:\n    print(length)\nelse:\n    print(-1)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "# Function to check if two rectangles overlap\ndef check_overlap(rect1, rect2):\n    if (rect1[0] < rect2[0] + rect2[2] and\n        rect1[0] + rect1[2] > rect2[0] and\n        rect1[1] < rect2[1] + rect2[3] and\n        rect1[1] + rect1[3] > rect2[1]):\n        return True\n    else:\n        return False\n\n# Function to check if the paintings can be placed on the board\ndef check_paintings(a1, b1, a2, b2, a3, b3):\n    # Check if the board is large enough to hold both paintings\n    if a1 * b1 < (a2 * b2) + (a3 * b3):\n        return \"NO\"\n\n    # Check if the paintings overlap\n    rect1 = [0, 0, a2, b2]\n    rect2 = [0, 0, a3, b3]\n\n    if check_overlap(rect1, rect2):\n        return \"NO\"\n\n    # Check if the paintings can be placed on the board\n    if a1 >= max(a2, a3) and b1 >= max(b2, b3):\n        return \"YES\"\n    elif b1 >= max(a2, a3) and a1 >= max(b2, b3):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n# Main function\nif __name__ == \"__main__\":\n    # Read the input\n    a1, b1 = map(int, input().split())\n    a2, b2 = map(int, input().split())\n    a3, b3 = map(int, input().split())\n\n    # Check if the paintings can be placed on the board\n    result = check_paintings(a1, b1, a2, b2, a3, b3)\n\n    # Print the result\n    print(result)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "l, r, x, y = list(map(int, input().split()))\ndef gcd(a, b):\n\twhile b != 0:\n\t\ta, b = b, a % b\n\treturn a\ndivisor = [1, y]\ni = 2\ncount = 0\nwhile i * i <= y:\n\tif y % i == 0:\n\t\tdivisor.append(i)\n\t\tif i * i != y:\n\t\t\tdivisor.append(y // i)\n\ti += 1\t\t\nfor j in divisor:\n\tif j >= l and j <= r and j % x == 0:\n\t\ta = (x * y) // j\n\t\tif a >= l and a <= r and gcd(a, j) == x:\n\t\t\tcount += 1\nprint(count)\t\t\n\n\n\t\t\t\n\n\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "def main():\n    n, k = list(map(int, input().split()))\n    l = [['0'] * n for _ in range(n)]\n    for y, row in enumerate(l):\n        if not k:\n            break\n        k -= 1\n        row[y] = '1'\n        for x in range(y + 1, n):\n            if k < 2:\n                break\n            k -= 2\n            l[x][y] = row[x] = '1'\n    if k:\n        print(-1)\n    else:\n        for row in l:\n            print(' '.join(row))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "import sys\nfrom fractions import Fraction\nfrom itertools import combinations\n\ndef choose(n, k):\n    if k > n:\n        return 0\n    if k == 0:\n        return 1\n    if k == 1:\n        return n\n    if k == n:\n        return 1\n    return Fraction(n, k) * choose(n - 1, k - 1)\n\ndef solve(n, k, arr):\n    if n == 1:\n        return 0 if k == 0 else 1\n    if n == 2:\n        return Fraction(1, 2) ** k if k == 0 else 1 - Fraction(1, 2) ** k\n    if n == 3:\n        return Fraction(1, 3) ** k if k == 0 else 1 - Fraction(1, 3) ** k\n    if k == 0:\n        return 1\n    if k == 1:\n        return 0\n    if k == 2:\n        return Fraction(1, 2) ** k if arr[0] == arr[-1] else 1 - Fraction(1, 2) ** k\n    if k == 3:\n        if arr[0] == arr[-1]:\n            return Fraction(1, 3) ** k if arr[1] == arr[-2] else 1 - Fraction(1, 3) ** k\n        else:\n            return Fraction(1, 3) ** k if arr[0] == arr[-2] and arr[1] == arr[-1] else 1 - Fraction(1, 3) ** k\n    if n == 4:\n        if k == 4:\n            return Fraction(1, 4) ** k if arr[0] == arr[-1] and arr[1] == arr[-2] else 1 - Fraction(1, 4) ** k\n    if n == 5:\n        if k == 4:\n            return Fraction(1, 5) ** k if arr[0] == arr[-1] and arr[1] == arr", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "# The following code solves the problem:\n\ndef solve_problem(sequence):\n    n = len(sequence)\n    longest_length = 0\n    longest_sequence = \"\"\n\n    for i in range(n):\n        current_length = 0\n        current_sequence = \"\"\n        sequence_copy = sequence.copy()\n\n        while len(sequence_copy) > 0:\n            leftmost_element = sequence_copy[0]\n            rightmost_element = sequence_copy[-1]\n\n            if i == 0:\n                current_length += 1\n                current_sequence += \"L\"\n                sequence_copy.pop(0)\n            elif i == 1:\n                current_length += 1\n                current_sequence += \"R\"\n                sequence_copy.pop()\n            else:\n                if leftmost_element > rightmost_element:\n                    current_length += 1\n                    current_sequence += \"L\"\n                    sequence_copy.pop(0)\n                else:\n                    current_length += 1\n                    current_sequence += \"R\"\n                    sequence_copy.pop()\n\n        if current_length > longest_length:\n            longest_length = current_length\n            longest_sequence = current_sequence\n\n    return longest_length, longest_sequence\n\n\n# Example usage:\nsequence = [2, 1, 5, 4, 3]\nlongest_length, longest_sequence = solve_problem(sequence)\nprint(f\"Longest length: {longest_length}\")\nprint(f\"Longest sequence: {longest_sequence}\")", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "n=int(input())\nit=list(map(int,input().split()))\nkk=set(it)\nif len(kk)>3:\n    print(-1)\nif len(kk)==1:\n    print(0)\nif len(kk)==2:\n    kk=list(kk)\n    kk.sort()\n    if (kk[0]-kk[1])%2==0:\n        print((kk[1]-kk[0])//2)\n    else:\n        print(kk[1]-kk[0])\nif len(kk)==3:\n    kk=list(kk)\n    kk.sort()\n    if kk[0]-kk[1]==kk[1]-kk[2]:\n        print(kk[1]-kk[0])\n    else:\n        print(-1)\n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "from collections import defaultdict\n\n\ndef solve(n, segments):\n    \"\"\"\n    Find the maximum possible length of the intersection of n - 1 segments\n    after removing one segment.\n\n    Args:\n        n: the number of segments\n        segments: a list of tuples representing the segments\n\n    Returns:\n        the maximum possible length of the intersection of n - 1 segments\n    \"\"\"\n    # Create a dictionary to store the number of times a point is visited\n    points = defaultdict(int)\n\n    # Add the endpoints of each segment to the dictionary\n    for segment in segments:\n        points[segment[0]] += 1\n        points[segment[1] + 1] -= 1\n\n    # Sort the points by their position\n    points = sorted(points.items())\n\n    # Calculate the prefix sum of the number of visits\n    for i in range(1, len(points)):\n        points[i][1] += points[i - 1][1]\n\n    # Initialize the maximum intersection length and current number of segments\n    max_length = 0\n    current_segments = 0\n\n    # Iterate over the points\n    for position, count in points:\n        current_segments += count\n\n        # If we are currently within an intersection, update the maximum length\n        if current_segments > 1:\n            max_length = max(max_length, position - points[i - 1][0])\n\n    return max_length\n\n\nif __name__ == \"__main__\":\n    # Read the input data\n    n = int(input())\n    segments = []\n    for _ in range(n):\n        segments.append(tuple(map(int, input().split())))\n\n    # Calculate and print the maximum possible length\n    print(solve(n, segments))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "n, m = map(int ,input().split())\na = list(map(int,input().split()))\n\n\nans = 0\nlim = sum(a)/(4 * m)\nfor i in a :\n    if i >= lim :\n        ans += 1\n\nif ans >= m :\n    print('Yes')\nelse :\n    print('No')", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "import math\na,b = [int(x) for x in input().split()]\n\narea = a+b\nt = int(math.sqrt(area))\nsa = int(math.sqrt(a))\nsb = int(math.sqrt(b))\n\nD = []\nDA = []\nDB = []\nfor i in range(1,t+1):\n    if area % i == 0:\n        if i*i != area:\n            D.append(i)\n            D.append(area//i)\n        else:\n            D.append(i)\n\nfor i in range(1,sa+1):\n    if a % i == 0:\n        if i*i != a:\n            DA.append(i)\n            DA.append(a//i)\n        else:\n            DA.append(i)\n            \nfor i in range(1,sb+1):\n    if b % i == 0:\n        if i*i != b:\n            DB.append(i)\n            DB.append(b//i)\n        else:\n            DB.append(i)\nDA.sort()\nDB.sort()\nD.sort()\n\nstart = ((len(D)+1)//2)-1\ndiv = len(D)\n\ndef closestdiv(t,D):\n    low = 0\n    high = len(D)-1\n    while high - low > 1:\n        guess = (high+low)//2\n        if D[guess] > t:\n            high = guess\n        else:\n            low = guess\n    if D[high] <= t:\n        return high\n    else:\n        return low\n    \nwhile start > -1:\n    t = D[start]\n    s = D[-start-1]\n    if DA[-closestdiv(t,DA)-1] <= s:\n        print(2*t+2*s)\n        break\n    elif DB[-closestdiv(t,DB)-1] <= s:\n        print(2*t+2*s)\n        break\n    start -= 1", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "n=int(input())\na=list(map(int,input().split()))\n\nc=[0]*1001\n\nfor i in range (len(a)):\n\tc[a[i]]+=1\n\nsym=0\nsin=0\n\nfor i in range (1001):\n\tsym+=(c[i]//4)\n\tif(c[i]%2==1):\n\t\tsin+=1\n\nif(n%2==0 and sym==((n*n)//4)):\n\tmat= [([0]*(n//2)) for i in range (n//2)]\n\tar=[]\n\tfor i in range (1001):\n\t\twhile(c[i]>=4):\n\t\t\tar.append(i)\n\t\t\tc[i]-=4\n\t\n\tk=0\n\tfor i in range (n//2):\n\t\tfor j in range (n//2):\n\t\t\tmat[i][j]=ar[k]\n\t\t\tk+=1\n\n\tnewm=[([0]*n) for i in range (n)]\n\tfor i in range (n//2):\n\t\tfor j in range (n//2):\n\t\t\tnewm[i][j]=mat[i][j]\n\t\t\tnewm[n-i-1][j]=mat[i][j]\n\t\t\tnewm[n-i-1][n-j-1]=mat[i][j]\n\t\t\tnewm[i][n-j-1]=mat[i][j]\n\n\tprint(\"YES\")\n\tfor i in range (n):\n\t\tfor j in range (n):\n\t\t\tprint(newm[i][j],end=\" \")\n\t\tprint()\n\n\t\nelif(n%2==1 and (((sym>=(((n//2) *(n//2)) ) ) and (sin==1)))):\n\tmat= [([0]*(n//2)) for i in range (n//2)]\n\tar=[]\n\tfor i in range (1001):\n\t\twhile(c[i]>=4):\n\t\t\tar.append(i)\n\t\t\tc[i]-=4\n\t\n\tk=0\n\tfor i in range (n//2):\n\t\tfor j in range (n//2):\n\t\t\tmat[i][j]=ar[k]\n\t\t\tar.pop(k)\n\n\tnewm=[([0]*n) for i in range (n)]\n\tfor i in range (n//2):\n\t\tfor j in range (n//2):\n\t\t\tnewm[i][j]=mat[i][j]\n\t\t\tnewm[n-i-1][j]=mat[i][j]\n\t\t\tnewm[n-i-1][n-j-1]=mat[i][j]\n\t\t\tnewm[i][n-j-1]=mat[i][j]\n\n\tna=len(ar)\n\tar2=[]\n\tfor i in range (na):\n\t\tar2.append(ar[i])\n\t\tar2.append(ar[i])\n\n\tfor i in range (1001):\n\t\twhile(c[i]>=2):\n\t\t\tar2.append(i)\n\t\t\tc[i]-=2\n\n\t#print(ar)\n\tfor i in range (n//2):\n\t\tnewm[n//2 ][i]=ar2[0]\n\t\tnewm[n//2 ][n-i-1]=ar2[0]\n\t\tar2.pop(0)\n\t\tnewm[i][n//2 ]=ar2[0]\n\t\tnewm[n-i-1][n//2 ]=ar2[0]\n\t\tar2.pop(0)\n\n\tfor i in range (1001):\n\t\tif(c[i]==1):\n\t\t\tnewm[n//2][n//2]=i\n\t\n\tprint(\"YES\")\n\tfor i in range (n):\n\t\tfor j in range (n):\n\t\t\tprint(newm[i][j],end=\" \")\n\t\tprint()\n\nelse:\n\tprint(\"NO\")\n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "N,X = map(int,input().split())\nL = [int(i) for i in input().split()]\nD = [0]\n\nfor i in range(N):\n    a = D[i]+L[i]\n    if(a <= X):\n        D.append(a)\n    else:\n        break\n\nprint(len(D))", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "for _ in range(int(input())):\n    n, k = list(map(int, input().split()))\n    i = 1\n    ans = n\n    while i * i <= n:\n        if n % i == 0:\n            if i <= k:\n                ans = min(ans, n // i)\n            if n // i <= k:\n                ans = min(ans, i)\n        i += 1\n    print(ans)\n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "def parse_arr():\n    return list(map(int, input().split(' ')))\n\nn = int(input())\n\nfor _ in range(n):\n    line = input().strip()\n\n    line = sorted(line)\n\n    start = line[0]\n    done = False\n    for a in line:\n        if a == start:\n            start = chr(ord(start) + 1)\n        \n        else:\n            print('No')\n            done = True\n            break\n\n    if not done:\n        print('Yes')", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "def is_diverse(s):\n    if len(s) == 1:\n        return True\n    for i in range(len(s) - 1):\n        if ord(s[i]) + 1 != ord(s[i + 1]):\n            return False\n    return True\n\ndef process_strings(strings):\n    for s in strings:\n        if is_diverse(s):\n            print(\"Yes\")\n        else:\n            print(\"No\")\n\nn = int(input())\nstrings = []\nfor _ in range(n):\n    strings.append(input())\n\nprocess_strings(strings)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "def solve(s):\n    s1 = [' *', '* ', '* ', '**', '**', '* ', '**', '**', '* ', ' *']\n    s2 = ['**', '  ', '* ', '  ', ' *', ' *', '* ', '**', '**', '* ']\n    x, y = '', ''\n    for ch in s:\n        x += s1[ord(ch) - ord('0')]\n        y += s2[ord(ch) - ord('0')]\n    return x == x[::-1] and y == y[::-1]\nprint('Yes' if solve(input()) else 'No')\n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\nf1 = s1 = f2 = s2 = 0\nfor i in range(len(a)):\n    if i % 2 == 0:\n        f2 += a[i]\n    else:\n        s2 += a[i]\nres = 0\nz = (n - 1) % 2\nfor i in range(len(a)):\n    if i % 2 == 0:\n        f2 -= a[i]\n        if f2 + s1 == s2 + f1:\n            res += 1\n        f1 += a[i]\n    else:\n        s2 -= a[i]\n        if f2 + s1 == s2 + f1:\n            res += 1\n        s1 += a[i]\nprint(res)", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "from fractions import gcd\nfrom functools import reduce\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\nn = int(input())\nt = [int(input()) for _ in range(n)]\n\nresult = reduce(lcm, t)\nprint(result)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "n = int(input())\nweights = list(map(int, input().split()))\n\nweights.sort()\n\nteam_size = 1\n\ni = 0\nj = n - 1\n\nwhile i < j:\n    if weights[j] - weights[i] > 1:\n        j -= 1\n    else:\n        team_size += 1\n        j -= 1\n        i += 1\n\nprint(team_size)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "A, B, X = list(map(int, input().split()))\n# A, B, X = 10, 7, 100\n\n\ndef digit(x):\n    strx = str(x)\n    return len(strx)\n\n\ndef calc_value(x):\n    return A * x + B * digit(x)\n\n\ndef binary_search(num_max):\n    if num_max <= 0:\n        return 0\n\n    left = 0\n    right = num_max\n    while left <= right:\n        mid = (left + right) // 2\n        mid_value = calc_value(mid)\n        if mid_value == X:\n            return mid\n        elif mid_value < X:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return left-1\n\n\n# data = list(range(0, X//A+1))\nstore = 10**9\n\nif X >= calc_value(store):\n    ans = store\nelse:\n    ans = binary_search(X//A)\n    ans = min(10**9, ans)\n\nprint(ans)\n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "N, K = map(int, input().split())\nheights = list(map(int, input().split()))\n\ncount = 0\nfor height in heights:\n    if height >= K:\n        count += 1\n\nprint(count)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "_ = input().split()\nn = int(_[0])\nk = int(_[1])\ndef lower(k,i):\n    return k*i + int(k*(k-1)/2)\ndef _max(k,i):\n    return i*(pow(2,k)-1)\nif n < lower(k,1):\n    print(\"NO\")\nelse:\n    i = int((n - int(k*(k-1)/2)) / k) - 1\n    # i = 1\n    while lower(k,i) <= n:\n        i = i + 1\n    i = i - 1\n    if _max(k,i) < n:\n        print(\"NO\")\n    else:\n        answer = [_ + i for _ in range(k)]\n        adder = n - lower(k,i)\n        for _ in range(adder):\n            answer[-_-1] = answer[-_-1] + 1\n        if k > 2 and answer[0] == 1 and answer[1] == 3:\n            answer[1] = answer[1] - 1\n            answer[-1] = answer[-1] + 1\n\n        answer = [str(_) for _ in answer]\n        print(\"YES\")\n        print(\" \".join(answer))", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "a = int(input())\nresult = (2**a) - 1\nprint(result)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "from collections import defaultdict\nimport sys\nsys.setrecursionlimit(1000000)\n\nn, m, s = list(map(int, input().split()))\ns = s - 1\n\n\ndef read_graph():\n    g = defaultdict(list)\n    for _ in range(m):\n        (u, v) = [int(x) - 1 for x in input().split()]\n        if v != s:\n            g[u].append(v)\n    return g\n\n\nG = read_graph()\nvis = defaultdict(lambda: False)\ntopo = []\n\n\ndef dfs(u):\n    # print(u)\n    for v in G[u]:\n        if not vis[v]:\n            vis[v] = True\n            dfs(v)\n    topo.append(u)\n\n\nfor i in range(n):\n    if not vis[i]:\n        vis[i] = True\n        dfs(i)\n\nvis.clear()\nvis[s] = True\ndfs(s)\nans = 0\nfor i in topo[::-1]:\n    if not vis[i]:\n        vis[i] = True\n        ans += 1\n        dfs(i)\n\nprint(ans)\n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "i,p,l,j=input,print,len,int\nn,m,q=j(i()),0,[]\nf=q.append\nfor a in map(j,i().split()):\n if q:\n  if a==q[-1]:q.pop()\n  elif a>q[-1]:f(a);break\n  else:f(a)\n else:f(a)\n m=max(m,a)\nif l(q)==0 or l(q)==1 and q[0]==m:p('YES')\nelse:p('NO')", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "# Read input\nn, m = map(int, input().split())\nvotes = list(map(int, input().split()))\n\n# Calculate the minimum votes needed for an item to be popular\ntotal_votes = sum(votes)\nmin_votes = total_votes // (4 * m)\n\n# Check if there are M items with at least min_votes votes\npopular_items = [vote >= min_votes for vote in votes]\nif sum(popular_items) >= m:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "import sys\n\n# Function to convert an integer to a Brainfuck code that outputs it\ndef convert_int_to_bf(num):\n    # Initialize the Brainfuck code\n    bf_code = \"\"\n    # Loop through the digits of the integer\n    for digit in str(num):\n        # Add the required number of + signs to increase the cell value by the digit\n        bf_code += \"+\" * int(digit)\n        # Append a . to output the cell value\n        bf_code += \".\"\n    return bf_code\n\n# Function to generate the Brainfuck code for the expression\ndef generate_bf_code(expression):\n    # Split the expression into operands and operators\n    operands = expression.split(\"+\")\n    # Initialize the Brainfuck code\n    bf_code = \"\"\n    # Loop through the operands\n    for operand in operands:\n        # Convert the operand to Brainfuck code\n        bf_code += convert_int_to_bf(operand)\n        # Append a > to move to the next cell\n        bf_code += \">\"\n    # Append a < to move back to the first cell\n    bf_code += \"<\"\n    # Loop through the operands\n    for operand in operands:\n        # Append a [<->-] to subtract the current cell value from the result cell\n        bf_code += \"[<->-]\"\n        # Append a < to move back to the previous cell\n        bf_code += \"<\"\n    # Append a +++++++++++++++++++++++++++++++++++++++++++++++++. to output the result\n    bf_code += \"++++++++++++++++++++++++++++++++++++++++++++++++.\"\n    return bf_code\n\n# Read the input expression from stdin\nexpression = sys.stdin.readline().strip()\n# Generate the Brainfuck code for the expression\nbf_code = generate_bf_code(expression)\n# Print the Brainfuck code\nprint(bf_code)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "from math import pi\n\ndef calculate_area(r):\n    return pi * r**2\n\ndef solve_question(r):\n    area_circle_r = calculate_area(r)\n    area_circle_1 = calculate_area(1)\n    return int(area_circle_r / area_circle_1)\n\nif __name__ == \"__main__\":\n    r = int(input())\n    answer = solve_question(r)\n    print(answer)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "def solve(n, a):\n    even_sum = 0\n    odd_sum = 0\n    count = 0\n    for i in range(n):\n        if i % 2 == 0:\n            even_sum += a[i]\n        else:\n            odd_sum += a[i]\n    for j in range(n - 1):\n        if j % 2 == 0:\n            even_sum -= a[j]\n            odd_sum += a[j]\n        else:\n            odd_sum -= a[j]\n            even_sum += a[j]\n        if even_sum == odd_sum:\n            count += 1\n    return count\n\nif __name__ == \"__main__\":\n    n = int(input())\n    a = list(map(int, input().split()))\n    result = solve(n, a)\n    print(result)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "n = int(input())\na_l = list(map(int, input().split()))\nm = 1\nfor a in a_l:\n    m *= a\nans = 0\nfor a in a_l:\n    ans += (m-1)%a \nprint(ans)", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "import sys\ninput = sys.stdin.readline\nn=int(input())\nA=[int(i) for i in input().split()]\nA.sort()\nans=1\ncur=max(1,A[0]-1)\nfor i in range(1,n):\n  a=A[i]\n  if a<cur:\n    continue\n  elif a==cur:\n    ans+=1\n    cur+=1\n  elif a>cur+1:\n    ans+=1\n    cur=a-1\n  else:\n    ans+=1\n    cur=a\nprint(ans)\n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "n, w = map(int, input().split())\na = list(map(int, input().split()))\nmx, mn, bal = 0, 0, 0\nfor aa in a:\n\tbal += aa\n\tmx, mn = max(mx, bal), min(mn, bal)\nleft, right = - mn, w - mx\nif right < 0 or left > right:\n\tprint(0)\nelse:\n\tprint(right - left + 1)", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "s = input()\n\nif s[0] == 'A' and s[2] == 'C' and s[-2] == 'C' and s.count('C') == 1:\n    for i in range(3, len(s) - 2):\n        if s[i] in 'ABC':\n            print('WA')\n            break\n    else:\n        print('AC')\nelse:\n    print('WA')", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "def count_sequences(n):\n    # Initialize the dp array\n    dp = [[0] * 10 for _ in range(n + 1)]\n\n    # Initialize the base cases\n    for i in range(10):\n        dp[1][i] = 1\n\n    # Dynamic programming\n    for length in range(2, n + 1):\n        for digit in range(10):\n            # If the digit is not 0 or 9, then the count is the sum of the counts of all digits in the previous length\n            if digit != 0 and digit != 9:\n                dp[length][digit] = sum(dp[length - 1])\n            # If the digit is 0, then the count is the sum of the counts of all digits except 0 in the previous length\n            elif digit == 0:\n                dp[length][digit] = sum(dp[length - 1][1:])\n            # If the digit is 9, then the count is the sum of the counts of all digits except 9 in the previous length\n            else:\n                dp[length][digit] = sum(dp[length - 1][:9])\n\n    # Sum up the counts for all digits in the final length\n    result = sum(dp[n]) % (10**9 + 7)\n    return result\n\nif __name__ == \"__main__\":\n    # Read the input from stdin\n    n = int(input())\n    # Calculate the result\n    result = count_sequences(n)\n    # Print the result\n    print(result)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "#\n# abc104 b\n#\nimport sys\nfrom io import StringIO\nimport unittest\n\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdout, stdin = sys.stdout, sys.stdin\n        sys.stdout, sys.stdin = StringIO(), StringIO(input)\n        resolve()\n        sys.stdout.seek(0)\n        out = sys.stdout.read()[:-1]\n        sys.stdout, sys.stdin = stdout, stdin\n        self.assertEqual(out, output)\n\n    def test_\u5165\u529b\u4f8b_1(self):\n        input = \"\"\"AtCoder\"\"\"\n        output = \"\"\"AC\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_2(self):\n        input = \"\"\"ACoder\"\"\"\n        output = \"\"\"WA\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_3(self):\n        input = \"\"\"AcycliC\"\"\"\n        output = \"\"\"WA\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_4(self):\n        input = \"\"\"AtCoCo\"\"\"\n        output = \"\"\"WA\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_5(self):\n        input = \"\"\"Atcoder\"\"\"\n        output = \"\"\"WA\"\"\"\n        self.assertIO(input, output)\n\n\ndef resolve():\n    S = input()\n\n    l = len(S)\n    ans = \"AC\"\n    cf = False\n    for i in range(l):\n        if i == 0:\n            if S[i] != \"A\":\n                ans = \"WA\"\n                break\n        elif i == 1 or i == l-1:\n            if S[i] == \"C\" or S[i].isupper():\n                ans = \"WA\"\n                break\n        else:\n            if S[i] == \"C\":\n                if cf == True:\n                    ans = \"WA\"\n                    break\n                else:\n                    cf = True\n            elif S[i].isupper():\n                ans = \"WA\"\n                break\n    else:\n        if cf == False:\n            ans = \"WA\"\n\n    print(ans)\n\n\ndef __starting_point():\n    # unittest.main()\n    resolve()\n\n__starting_point()", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "s = [ord(c) - 48 for c in input()]\nr, t, f = 0, 0, 1\nfor x in s:\n    if x < 0:\n        r += f * t\n        f = -4 - x\n        t = 0\n    t = t * 10 + x\nprint(r + f * t)\n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "IN = input\nrint = lambda: int(IN())\nrmint = lambda: list(map(int, IN().split()))\nrlist = lambda: list(rmint())\n\nn, b, a = rmint()\ny = a\nx = b\nd = 0\n\n\ndef ex():\n    print(d)\n    return\n\n\nfor s in rlist():\n    if s:\n        if x and y < a:\n            y += 1\n            x -= 1\n        else:\n            if y:\n                y -= 1\n            else:\n                if x:\n                    x -= 1\n                else:\n                    ex()\n    else:\n        if y:\n            y -= 1\n        else:\n            if x:\n                x -= 1\n            else:\n                ex()\n    d += 1\n\nprint(d)\n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "def min_watering(n, h):\n    h = [0] + h\n    ans = 0\n    l, r = 0, 0\n    for i in range(1, n + 1):\n        if h[i] > h[r]:\n            r = i\n        if i == n or h[i] <= h[i + 1]:\n            ans += max(0, h[r] - h[l])\n            h[l:r + 1] = [h[r]] * (r - l + 1)\n            l = i\n            r = i\n    return ans\n\n\ndef main():\n    n = int(input())\n    h = list(map(int, input().split()))\n    print(min_watering(n, h))\n\n\nif __name__ == '__main__':\n    main()", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "S = input()\nb = 1\nB = 0\nfor i in S:\n  if i != str(b):\n    B += 1\n  b = 1 - b\nl = len(S)\nprint(min(B, l - B))", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "def climb_stairs(N, M, a):\n    dp = [0] * (N + 1)\n    dp[0] = 1\n    for i in range(1, N + 1):\n        if i - 1 in a:\n            dp[i] = dp[i - 2]\n        elif i - 2 in a:\n            dp[i] = dp[i - 1]\n        else:\n            dp[i] = (dp[i - 1] + dp[i - 2]) % 1000000007\n    return dp[N]\n\n\ndef main():\n    N, M = map(int, input().split())\n    a = [int(input()) for _ in range(M)]\n    print(climb_stairs(N, M, a))\n\n\nif __name__ == '__main__':\n    main()", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "def superhero_fights_monster(H, n, d):\n    if all(x < 0 for x in d):\n        return -1\n    k = 0\n    while H > 0:\n        for i in range(n):\n            H += d[i]\n            k += 1\n            if H <= 0:\n                return k\n    return -1\n\n\nH, n = map(int, input().split())\nd = list(map(int, input().split()))\nprint(superhero_fights_monster(H, n, d))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "def get_maximum_reposted_sum(n, k, x, beauty_values):\n    # Initialize the dynamic programming table\n    dp = [[0] * (n + 1) for _ in range(x + 1)]\n    \n    # Loop through all possible x values\n    for i in range(1, x + 1):\n        # Loop through all possible k values\n        for j in range(1, n + 1):\n            # Handle the case where k is greater than the current index\n            if j < k:\n                dp[i][j] = -1\n            # Handle the case where k is equal to the current index\n            elif j == k:\n                dp[i][j] = max(dp[i][j - 1], beauty_values[j - 1])\n            # Handle the case where k is less than the current index\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i - 1][j - k] + beauty_values[j - 1])\n    \n    # Return the maximum reposted sum\n    return dp[x][n]\n\n# Read input from stdin\nn, k, x = map(int, input().split())\nbeauty_values = list(map(int, input().split()))\n\n# Get the maximum reposted sum\nmax_reposted_sum = get_maximum_reposted_sum(n, k, x, beauty_values)\n\n# Print the result\nif max_reposted_sum == -1:\n    print(\"-1\")\nelse:\n    print(max_reposted_sum)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "N,M,X,Y = map(int,input().split())\nxx = list(map(int, input().split()))\nyy = list(map(int, input().split()))\n\nxx.sort()\nyy.sort()\n\n\nfor Z in range(X+1,Y):\n    if Z > xx[-1] and yy[0] >= Z:\n        print('No War')\n        return\n\nprint('War')", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "def getMaxDivisibleBy3(s):\n    n = len(s)\n    dp = [[0, 0] for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        dp[i][0] = dp[i - 1][0]\n        dp[i][1] = dp[i - 1][1] + int(s[i - 1])\n\n        if dp[i][1] >= 3:\n            dp[i][1] %= 3\n\n    ans = 0\n\n    for i in range(1, n + 1):\n        if dp[i][0] == dp[i][1]:\n            ans += 1\n\n    return ans\n\n\nif __name__ == '__main__':\n    s = input()\n    print(getMaxDivisibleBy3(s))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "from collections import defaultdict\n\nn = int(input())\n\nf = list(map(int, input().split()))\n\ngraph = defaultdict(list)\n\nfor i in range(n):\n    if f[i] != 0:\n        graph[f[i]].append(i)\n\nfor i in range(1, n+1):\n    if len(graph[i]) == 0:\n        graph[i].append(i)\n\nwhile True:\n    is_change = False\n    for i in range(1, n+1):\n        if len(graph[i]) == 1:\n            for j in range(1, n+1):\n                if i in graph[j] and len(graph[j]) > 1:\n                    graph[j].remove(i)\n                    is_change = True\n    if not is_change:\n        break\n\nfor i in range(1, n+1):\n    if len(graph[i]) == 1:\n        graph[i].append(i)\n\nfor i in range(n):\n    if f[i] == 0:\n        f[i] = graph[i+1][0]\n\nprint(*f)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "n, k = list(map(int,input().split()))\ns = input()\ni = 1\nwhile i < len(s) and s[i:] != s[:n-i]:\n    i += 1\nt = s[:i]*k + s[i:]\nprint(t)\n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "# Input\nn, m, k = map(int, input().split())\n\ngraph = [[] for _ in range(n + 1)]\n\nfor _ in range(m):\n    a, b = map(int, input().split())\n    graph[a].append(b)\n    graph[b].append(a)\n\n# DFS\ndef dfs(v, parent):\n    global dp\n    dp[v][0] = 1\n    for to in graph[v]:\n        if to != parent:\n            dfs(to, v)\n            for i in range(n - 1, 0, -1):\n                dp[v][i] += dp[to][i - 1]\n\ndp = [[0] * (n - 1) for _ in range(n + 1)]\ndfs(1, -1)\n\n# Finding the answer\nans = []\nfor i in range(1, n):\n    s = \"\"\n    for j in range(1, m + 1):\n        if dp[i][j] == dp[n][j - 1]:\n            s += \"1\"\n        else:\n            s += \"0\"\n    ans.append(s)\n\n# Output\nprint(len(set(ans)))\nfor s in set(ans):\n    print(s)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "n, k = map(int, input().split())\ns = input()\n\nif n < k:\n    print(-1)\n    exit()\n\ndp = [[float('inf')] * n for _ in range(k)]\n\nfor i in range(n):\n    dp[0][i] = n - (i + 1)\n\nfor i in range(1, k):\n    for j in range(i, n):\n        for l in range(j, -1, -1):\n            dp[i][j] = min(dp[i][j], dp[i - 1][l] + n - (j - l))\n\nprint(dp[k - 1][n - 1])", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "a, b = map(int, input().split())\n\n# We need to make sure that a and b are positive integers\nif a < 0 or b < 0:\n    raise ValueError(\"Both a and b must be positive integers.\")\n\n# The sum of a and b must be even\nif (a + b) % 2 == 1:\n    raise ValueError(\"The sum of a and b must be even.\")\n\n# Find the largest square that fits within the rectangle\nmax_square_size = min(a, b)\n\n# Calculate the perimeter of the largest square\nperimeter = 4 * max_square_size\n\n# Subtract the remaining tiles from a and b\na -= max_square_size\nb -= max_square_size\n\n# Calculate the perimeter of the remaining rectangle\nperimeter += 2 * (a + b)\n\n# Print the final perimeter\nprint(perimeter)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "from collections import defaultdict\nN, M = map(int,input().rstrip().split())\nd = defaultdict(lambda: 0)\nfor _ in range(N):\n    A, B = map(int,input().rstrip().split())\n    d[A] += B\nans=0\nfor k in sorted(d.keys()):\n    if d[k]<=M:\n        ans += k*d[k]\n    else:\n        ans += k*M\n    M -= d[k]\n    if M<=0:break\nprint(ans)", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "n = int(input())\ns = input()\na = list(s.split())\neq = [[0 for i in range(n)] for j in range(n)]\ndp = [[0 for i in range(n)] for j in range(n)]\nfor i in range(n):\n    eq[i][i] = 1\n    for j in range(0, i):\n        if a[i] == a[j]:\n            eq[i][j] += 1\n            eq[j][i] += 1\nfor i in range(n - 1, -1, -1):\n    for j in range(n - 1, -1, -1):\n        if eq[i][j] == 1:\n            if i < n - 1 and j < n - 1:\n                dp[i][j] = dp[i + 1][j + 1] + 1\n            else:\n                dp[i][j] = 1\nallsum = n - 1\nfor k in a:\n    allsum += len(k)\nans = allsum\nfor i in range(n):\n    sx = 0\n    j = 0\n    while i + j < n:\n        sx += len(a[i + j])\n        cnt = 1\n        pos = i + j + 1\n        while pos < n:\n            if dp[i][pos] > j:\n                cnt += 1\n                pos += j\n            pos += 1\n        cur = allsum - sx*cnt + (j + 1)*cnt - j*cnt\n        if cnt > 1 and ans > cur:\n            ans = cur\n        j += 1\nprint(ans)", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "a = list(map(int,input().split()))\nb = a[0]//a[1]\nif a[1] % 2 != 0:\n  print((b**3))\nelse:\n  if a[0]%a[1] >= a[1]//2:\n    print((b**3 + (b+1)**3))\n  else:\n    print((2*b**3))\n  \n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "def is_palindrome(s):\n    if s == s[::-1]:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nif __name__ == \"__main__\":\n    s = input()\n    result = is_palindrome(s)\n    print(result)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "\"\"\"\nuseful stuff \nx= list(map(int,input().split()))\nx =[int (e) for e in input().split()]\n\nswap x,y=y,x\nsubstring a[x:y] mean x to y-1\n\nprint list\nprint(*list)\nprint(' '.join(map(str,listname)))\n\nstart from 1 to n\nfor i in range(1,n+1)\n\nDon't froget dumb stuff like:\nif: \nfor:\nwhile: \nand tab\ndef doesn't require data type\n\"\"\"\nz= []\na = []\nfor i in range (200010):\n    a.append([])\nn,k = [int (e) for e in input().split()]\nb = [int (e) for e in input().split()]\nfor x in b:\n    c=x\n    ct=0\n    a[x].append(0)\n    while(c!=0):\n        c>>=1\n        ct+=1\n        a[c].append(ct)\nans=10000000000\nfor i in range(200000):\n    if(len(a[i])<k):\n        continue\n    a[i].sort()\n    s=0\n    for j in range(k):\n        s+=a[i][j]\n    ans=min(ans,s)\nprint(ans)\n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "def count_monotonic_renumerations(a):\n    n = len(a)\n    cnt = [1] * n\n    for i in range(1, n):\n        if a[i] == a[i - 1]:\n            cnt[i] = cnt[i - 1]\n        else:\n            cnt[i] = cnt[i - 1] * 2\n    return (cnt[n - 1] % 998244353)\n\n\nn = int(input())\na = list(map(int, input().split()))\nprint(count_monotonic_renumerations(a))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "# Enter your code here. Read input from STDIN. Print output to STDOUT\nn = int(input())\nsticks = list(map(int, input().split()))\n\ncount = 0\n\nfor i in range(n):\n    for j in range(i+1, n):\n        for k in range(j+1, n):\n            if sticks[i] != sticks[j] and sticks[i] != sticks[k] and sticks[j] != sticks[k]:\n                if sticks[i] + sticks[j] > sticks[k] and sticks[i] + sticks[k] > sticks[j] and sticks[j] + sticks[k] > sticks[i]:\n                    count += 1\n\nprint(count)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "n, p, s = map(int, input().split())\n\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\na.sort()\nb.sort()\n\ntotal_strength = 0\nprogramming_team = []\nsports_team = []\n\nfor i in range(n):\n    if a[i] + b[i] > total_strength:\n        total_strength = a[i] + b[i]\n        programming_team.append(i + 1)\n        sports_team.append(i + 1)\n\nprint(total_strength)\nprint(*programming_team)\nprint(*sports_team)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "S = int(input())\n\ndef f(n):\n    return len(str(n).split())\n\npairs = 0\nfor l in range(1, int(S**0.5) + 1):\n    r = int((S - f(l)) // f(l) * l)\n    pairs += r - l + 1\n\nprint(pairs % 10**9 + 7)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "import math\n\na, b = map(int, input().split())\n\nif b <= 2:\n    print(-1)\nelse:\n    x = math.ceil((b - 1) / 2)\n    print(x)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n, k, m, a = map(int, input().split())\ng = list(map(int, input().split()))\n\n# Calculate the number of votes for each candidate\nvotes = {}\nfor i in range(a):\n    votes[g[i]] += 1\n\n# Sort candidates by number of votes, then time of last vote\ncandidates = sorted(votes.keys(), key=lambda candidate: (-votes[candidate], candidate))\n\n# Determine the outcome for each candidate\noutcomes = []\nfor i in range(n):\n    if votes[candidates[i]] >= k:\n        outcomes.append(1)\n    elif votes[candidates[i]] == k - 1:\n        outcomes.append(2)\n    else:\n        outcomes.append(3)\n\n# Print the outcomes\nprint(*outcomes)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n = int(input())\np = list(map(int, input().split().strip().split()))\n\np.sort()\ng = 0\nfor i in range(n):\n    if p[i] != 0 and p[i-1] != 0 and p[i] != p[i-1]:\n        g += 1\n\nprint(g)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "import sys\n\nt = [[0] * 3 for _ in range(3)]\nn = int(sys.stdin.readline())\n\nfor i in range(n):\n    t[0][i] = int(sys.stdin.readline())\n\nc = 2 ** n - 1\nprint(c)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "s = input().strip()\nt = input().strip()\n\ndef hammingDistance(a, b):\n    distance = 0\n    for i in range(len(a)):\n        if a[i] != b[i]:\n            distance += 1\n    return distance\n\n# Find the maximum number of occurrences of t in s\nmax_occurrences = max(hammingDistance(s, t) for t in permutations(s))\n\n# Print the schedule with the maximum number of occurrences\nprint(\"\".join([\"1\" if i == max_occurrences else \"0\" for i in range(len(s))]))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n, m = map(int, input().split())\n\na = []\n\nfor _ in range(n):\n    a.append(list(map(int, input().split())))\n\nans = \"YES\" if all(sorted(a[i]) == list(range(1, m + 1)) for i in range(n)) else \"NO\"\n\nprint(ans)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n, k, q = map(int, input().split())\na = list(map(int, input().split()))\n\na.sort()\n\nx = 0\ny = float('inf')\nfor i in range(k-1):\n    x = max(x, a[i])\n    y = min(y, a[i])\n\nprint(x-y)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n = int(input())\np = list(map(int, input().split()))\n\np.sort()\n\nactions = 0\nfor i in range(n):\n    if p[i] != i+1:\n        actions += abs(p[i] - i - 1)\n\nprint(actions)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n, m = map(int, input().split())\ng = [list(map(int, input().split())) for _ in range(m)]\n\n# Create a dictionary to store the graph\ngraph = {i: set() for i in range(n)}\nfor u, v in g:\n    graph[u].add(v)\n\n# Check if the graph can be created from a string\ns = ''.join(['a' if v == 1 else 'b' if v == 2 else 'c' for v in graph])\nif s and graph[i] == set(graph[i] for i in s):\n    print('Yes')\n    print(s)\nelse:\n    print('No')", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n = int(input())\n\nif n == 0:\n    print(-1)\n\ns, g = [], []\nfor _ in range(n):\n    s.append(int(input()))\n    g.append(int(input()))\n\ntotal_width = 0\nfor i in range(n):\n    x = int(input())\n    s[i] += x\n    g[i] -= x\n    total_width += x\n\nif all(abs(s[i] - s[i-1]) <= 1 for i in range(1, n)):\n    print(total_width)\n    print(*s)\nelse:\n    print(-1)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "N = int(input())\n\n# Read the balls' colors and numbers\nc = []\na = []\nfor _ in range(N):\n    c.append(input().strip()[0])\n    a.append(int(input().strip()))\n\n# Calculate the minimum operations\noperations = 0\nfor i in range(N-1):\n    for j in range(i+1, N):\n        if c[i] == \"W\" and c[j] == \"W\" and a[i] > a[j]:\n            operations += 1\n        elif c[i] == \"B\" and c[j] == \"B\" and a[i] > a[j]:\n            operations += 1\n\n# Print the minimum operations\nprint(operations)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    s = input().strip()\n\n    # Calculate the number of returnable rooms\n    returnable_rooms = 0\n    for i in range(n):\n        # If the belt is clockwise, the room is returnable if the snake is not in the first room\n        if s[i] == '>':\n            if i == 0 and s[n-1] != '-':\n                returnable_rooms += 1\n        # If the belt is anticlockwise, the room is returnable if the snake is not in the last room\n        elif s[i] == '<':\n            if i == n-1 and s[0] != '-':\n                returnable_rooms += 1\n        # If the belt is off, the room is returnable if the snake is not in the first or last room\n        elif s[i] == '-':\n            if i != 0 and i != n-1:\n                returnable_rooms += 1\n\n    print(returnable_rooms)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "3\nimport math\n\nN, M = map(int, input().split())\n\nl, r, x = []\nfor _ in range(M):\n    l.append(int(input().split()[0]))\n    r.append(int(input().split()[1]))\n    x.append(int(input().split()[2]))\n\nmod = 10**9 + 7\n\nans = 1\nfor i in range(M):\n    ans *= x[i]\n    ans %= mod\n\nprint(ans)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "import sys\n\nformat = int(sys.stdin.readline())\ntime_str = sys.stdin.readline().strip().split(\":\")\nhours = int(time_str[0])\nminutes = int(time_str[1])\n\n# Calculate the minimum number of digits to change\nmin_changes = min(abs(hours - hours_target), abs(minutes - minutes_target)) + abs(minutes_target - minutes)\n\n# Update the time with the minimum changes\ntime_str_new = str(hours_target) + \":\" + str(minutes_target)\n\n# Print the corrected time\nprint(time_str_new)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\n\n# Calculate the distinct elements of the array\ndistinct_elements = len(set(a))\n\n# If all elements are distinct, no subsegment needs to be removed\nif distinct_elements == len(a):\n    print(0)\n\n# Calculate the minimum size of the subsegment to remove\nelse:\n    # Calculate the minimum subsegment size\n    min_subsegment_size = min([i for i in range(1, len(a)) if a[i] == a[i-1] else i])\n\n    # Print the minimum subsegment size\n    print(min_subsegment_size)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "p, k = map(int, input().split())\n\n# Calculate the number of distinct functions\nnum_functions = 0\nfor a in range(1, int((p-1)**k) + 1):\n    is_valid = True\n    for b in range(k):\n        if f(a, b) != k * f(a // p, b) % p:\n            is_valid = False\n    if is_valid:\n        num_functions += 1\n\nprint(num_functions % (10**9 + 7))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n = int(input())\np = list(map(int, input().split()))\n\ns = 0\nfor i in range(1, n):\n    s += p[i] - i\n\nprint(s)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "h, m, s, t_1, t_2 = map(int, input().split())\n\n# Calculate the time difference\ntime_diff = t_2 - t_1\n\n# If the time difference is greater than the number of hours, it's not possible to prepare the contest on time\nif time_diff > h:\n    print(\"NO\")\nelse:\n    print(\"YES\")", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\n\n# Find the maximum possible value of the final element\nmax_final_element = max(a)\n\n# Find the number of operations that are performed\noperations = 0\ncurrent_size = len(a)\n\n# Iterate over the operations until the length of the sequence is 1\nwhile current_size > 1:\n    # Choose the element to delete\n    x = a[0] if a[0] == a[len(a) - 1] else a[1]\n\n    # Replace the element with the sum of the two adjacent elements\n    a[0] = a[1] + a[2] if a[0] == a[len(a) - 1] else a[0] = a[2]\n\n    # Delete the element and its two adjacent elements\n    operations += 1\n    current_size -= 2\n\n# Print the maximum possible value of the final element\nprint(max_final_element)\n\n# Print the number of operations that are performed\nprint(operations)\n\n# Print the elements that are deleted in each operation\nfor i in range(operations):\n    print(a[i])", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n, k = map(int, input().split())\nc = list(map(int, input().split()))\n\nc.sort()\nmod = c[0]\n\nif k in c:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n, a, d = map(int, input().split())\n\nif not (1 <= n <= 10**6 and 1 <= a, d <= 10**6 and a + (n - 1) * d <= 10**6):\n    print(-1)\n\nelse:\n    for b in range(1, int(n**0.5) + 1):\n        e = int((a + b) // d)\n        f = 0\n        while f < n and str(a + f * d).rjust(18) in str(F_b + e * F_b):\n            f += 1\n        if f == n:\n            print(b, e)\n            exit()\n\n    print(-1)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "x, y = map(int, input().split())\n\nif x + y < 2:\n    print(\"Impossible\")\nelse:\n    print(str(x//y) + str(y) + str(x%y) + \"A\" * x//y + \"B\" * x%y)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\n\na.sort()\n\ns = 0\nfor i in range(n):\n    if a[i] - a[0] > 0 and a[i] - a[n-1] < 0:\n        s += 1\n\nprint(s)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "import random\n\nm, n = map(int, input().split())\n\n# Probability of each face appearing\np = [1 / m] * m\n\n# Number of dots on each face\nnum_dots = range(1, m + 1)\n\n# Calculate the expected number of dots\nexpectation = sum(num_dots * p) * n\n\n# Print the expected maximum number of dots\nprint(round(expectation, 6))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "3\nn = int(input())\n\na = []\nm = []\nfor _ in range(n):\n    a.append(list(map(int, input().split())))\n\nfor i in range(n):\n    m.append(sum(a[i][::-1]) - sum(a[i][1:]))\n\nprint(*m)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n, m = map(int, input().split())\ny1 = list(map(int, input().split()))\ny2 = list(map(int, input().split()))\n\n# Calculate the maximum number of destroyed spaceships\ndestroyed = max(sum(1 for y in y1 if y in y2) for y in range(min(y1) - 1, max(y2) + 1))\n\nprint(destroyed)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n = int(input())\ncrush = list(map(int, input().split()))\n\npossible = False\nt = 1\nwhile not possible:\n    for i in range(n):\n        if crush[i] == i and crush[crush[i]] == i:\n            for j in range(i, n):\n                if crush[j] == i and crush[crush[j]] == j:\n                    t += 1\n                    possible = True\n    if not possible:\n        t = -1\n\nprint(t)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "3\ndef longestCommonSubsequence(s1, s2, virus):\n    # Create a dictionary to store the longest common subsequence length\n    longest_common_subsequence_length = {}\n\n    # Calculate the length of the longest common subsequence between s_1 and s_2\n    longest_common_subsequence_length[s1, s2] = 0\n\n    # Iterate over the length of s_1\n    for i in range(len(s1) + 1):\n        # Iterate over the length of s_2\n        for j in range(len(s2) + 1):\n            # If the length of the longest common subsequence is greater than the length of the longest common subsequence stored in the dictionary,\n            # update the length of the longest common subsequence stored in the dictionary\n            if longest_common_subsequence_length[s1[:i], s2[:j]] > longest_common_subsequence_length[s1, s2]:\n                longest_common_subsequence_length[s1, s2] = longest_common_subsequence_length[s1[:i], s2[:j]] + 1\n\n    # If the length of the longest common subsequence is greater than 0, return the longest common subsequence\n    if longest_common_subsequence_length[s1, s2] > 0:\n        return ''.join(set(longest_common_subsequence(s1, s2, virus).intersection(set(s1) & set(s2)))\n    else:\n        return 0\n\n\n# Read the input\ns1 = input().strip()\ns2 = input().strip()\nvirus = input().strip()\n\n# Find the longest common subsequence of s_1 and s_2 without virus as a substring\nlongest_common_subsequence = longestCommonSubsequence(s1, s2, virus)\n\n# Print the longest common subsequence\nprint(longest_common_subsequence)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n, s = map(int, input().split())\n\n# Number of rows and seat number\nr = n\ns_seat = s - 1\n\n# Number of seconds to serve passengers in each row\ntime_per_row = 6\n\n# Number of rows served before Vasya's row\nnum_rows_served = 0\n\n# Number of seconds Vasya has to wait\nwaiting_time = 0\n\n# Iterate over the rows to find the number of rows served before Vasya's row\nwhile num_rows_served < r:\n    num_rows_served += 2\n    waiting_time += time_per_row\n\n# Add the time to serve passengers in Vasya's row\nwaiting_time += s_seat\n\n# Print the waiting time\nprint(waiting_time)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n = int(input())\ns = input().strip()\n\n stones = 0\nfor i in range(n):\n    if s[i] == '-':\n        stones -= 1\n    else:\n        stones += 1\n\nprint(stones)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n, k = map(int, input().split())\na = list(map(int, input().split()))\n\na.sort()\n\nx = 0\ny = 0\nans = 0\n\nfor i in range(n):\n    if a[i] % k == 0 and x + 1 <= i:\n        x += 1\n    if a[i] % k == 0 and y + 1 <= i:\n        y += 1\n\nprint(x + y)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n, f = map(int, input().split())\n\nk, l = []\nfor _ in range(n):\n    k.append(int(input().split()[0]))\n    l.append(int(input().split()[1]))\n\nk_s = 0\nfor i in range(n):\n    if l[i] > 0:\n        k_s += k[i]\n\ns_o = 0\nfor i in range(f):\n    s_o += 2 * k[i]\n\nprint(max(s_o, k_s))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n, p = map(int, input().split())\nc = list(map(int, input().split()))\n\n# Calculate the number of valid paths for a given parity\ndef valid_paths(n, p, c):\n    dp = [-1] * (n + 1)\n    dp[0] = 1\n    for i in range(1, n + 1):\n        dp[i] = dp[i - 1] * 2\n        if c[i - 1] != -1 and c[i - 1] != c[i]:\n            dp[i] += dp[i - 1]\n    return dp[n]\n\n# Calculate the answer\nans = valid_paths(n, p, c)\n\n# Print the answer\nprint(ans % (10**9 + 7))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "a, b = map(int, input().split())\nc, d = map(int, input().split())\n\ndet = a*d - b*c\nif det == 0:\n  print(0)\nelse:\n  print(abs(min(abs(a-c), abs(b-d)) / abs(det))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "l, r, x, y = map(int, input().split())\n\ngcd_lcm = lambda a, b: (a * b) // GCD(a, b)\n\npairs = 0\nfor a in range(l, r + 1):\n    for b in range(a, r + 1):\n        if gcd_lcm(a, b) == x and gcd_lcm(a, b) == y:\n            pairs += 1\n\nprint(pairs)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n, k = map(int, input().split())\np = list(map(int, input().split()))\n\np.sort()\n\n# Check if the first k elements are stack-sortable\nif p[0:k] != sorted(p[0:k]):\n    print(-1)\nelse:\n    # Create a map to store the positions of the first k elements in their original order\n    positions = {p[i]: i for i in range(k)}\n\n    # Sort the remaining elements in descending order\n    p[k:] = sorted(p[k:], reverse=True)\n\n    # Place the first k elements in their original positions\n    for i in range(k):\n        p[positions[p[i]]] = p[i]\n\n    print(*p)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "import numpy as np\n\nn = int(input())\n\nvectors = []\n\nfor _ in range(n):\n    x, y = map(int, input().split())\n    vectors.append(np.array([x, y]))\n\ncos_angles = np.cos(np.arccos(np.dot(vectors[0], vectors[1]) / np.sqrt(np.dot(vectors[0], vectors[0]) * np.dot(vectors[1], vectors[1]))\n\na, b = np.argmin(cos_angles) + 1, np.argmax(cos_angles) + 1\n\nprint(a, b)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "w, m = map(int, input().split())\n\nif w * m >= m:\n    print(\"YES\")\nelse:\n    print(\"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "import sys\n\n# Read input\nbessie_grid = sys.stdin.read().splitlines()\nelsie_grid = sys.stdin.read().splitlines()\n\n# Create grids\nbessie_grid_2D = [[int(x) for x in line.split()] for line in bessie_grid.splitlines()]\nelsie_grid_2D = [[int(x) for x in line.split()] for line in elsie_grid.splitlines()]\n\n# Check if the grids are the same\nis_same = True\nfor r in range(2):\n    for c in range(2):\n        if bestie_grid_2D[r][c] != elsie_grid_2D[r][c]:\n            is_same = False\n\n# Print the answer\nif is_same:\n    print(\"YES\")\nelse:\n    print(\"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "import re\n\ndef fix_typo(word):\n    # Define the regex to find a block of three or more consonants in a row\n    consonant_block_regex = r\"[a-z]{3,}\"\n\n    # Check if the word has a typo\n    if re.search(consonant_block_regex, word):\n        # Count the number of vowels in the word\n        num_vowels = len(re.findall(\"[aeiou]\", word))\n\n        # If the number of vowels is less than the number of consonants, insert spaces to divide the word into words without typos\n        if num_vowels < re.search(consonant_block_regex, word).groups()[0].count(\"c\"):\n            # Find the minimum number of spaces to insert\n            min_spaces = min(re.findall(r\"\\s+\", word).count(\" \") + 1, len(word) - re.search(consonant_block_regex, word).start())\n\n            # Insert spaces into the word\n            words = re.split(r\"\\s+\", word, min_spaces)\n\n            # Print the words\n            print(\"\".join(words))\n    else:\n        # Print the original word\n        print(word)\n\n\n# Get the input word\nword = input().strip()\n\n# Fix the typo\nfix_typo(word)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "import math\n\nn, m, x, y, v_x, v_y = map(int, input().split())\n\n# Calculate the ball's trajectory\nvx_t = v_x\nvy_t = v_y\n\n# Check if the ball will fall into a pocket\nif abs(vx_t) == abs(v_y):\n    # The ball will fall into a corner pocket\n    pocket_x = int(x)\n    pocket_y = int(y)\n    print(pocket_x, pocket_y)\nelse:\n    # The ball will move indefinitely\n    print(-1)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "k = int(input())\nn = 1\nnum = str(n)\nwhile len(num) < k:\n    n += 1\n    num = str(n)\nprint(int(num[k-1]))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "a, b, x, y = map(int, input().split())\n\nw_h = (x * b) // y\n\nprint(w_h)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n, q = map(int, input().split())\n\nl, r = []\nfor _ in range(q):\n    l.append(int(input().split()[0]))\n    r.append(int(input().split()[1]))\n\nl.sort()\nr.sort()\n\nans = 0\ncurr = 0\nfor i in range(len(l)):\n    if l[i] >= curr:\n        curr = r[i]\n        ans += 1\n\nprint(ans)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n = int(input())\ns = input().lower()\nb = list(map(int, input().split()))\n\nm = len(s)\na = list(set(s))\n\nans = 0\nfor i in range(m):\n    if s[i] not in a:\n        a.add(s[i])\n        ans += b[i]\n\nprint(ans)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n = int(input())\n\na = []\nfor _ in range(n):\n    l, r = map(int, input().split())\n    a.append([l, r])\n\nans = False\n\nfor i in range(n):\n    for j in range(i, n):\n        if a[i][0] >= a[j][0] and a[i][1] <= a[j][1]:\n            print(i + 1, j + 1)\n            ans = True\n\nif not ans:\n    print(-1, -1)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\n\na.sort()\nmin_distance = float('inf')\n\n# Iterate over the array to find the two nearest minimums\nfor i in range(len(a) - 1):\n    # Calculate the distance between the current minimum and the previous minimum\n    distance = abs(a[i] - a[i + 1])\n\n    # Update the minimum distance if necessary\n    if distance < min_distance:\n        min_distance = distance\n\nprint(min_distance)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n, m = map(int, input().split())\n\nn_presents = dict()\nfor i in range(n):\n    n_presents[i] = int(input())\n\nboxes = m\n\nans = 1\nfor k, v in n_presents.items():\n    ans *= v + 1\n    boxes -= v\n\nprint(ans % (10**9 + 7))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "def valid(board, x, y):\n    # Check horizontal\n    for i in range(10):\n        if board[x][i] == board[x][y] and board[x][i] != '.':\n            return True\n\n    # Check vertical\n    for j in range(10):\n        if board[j][y] == board[x][y] and board[j][y] != '.':\n            return True\n\n    # Check diagonal\n    dx, dy = -1, 1\n    for i in range(x, 10, dx):\n        for j in range(y, 10, dy):\n            if board[i][j] == board[x][y] and board[i][j] != '.':\n                return True\n\n    # No winning line found\n    return False\n\n\nboard = [['.', 'X', 'O', 'X', '.', 'X', '.', 'O', 'X', 'O', '.'],\n ['.', 'O', 'O', 'O', 'O', 'X', 'O', 'X', 'O', '.']]\n\nif valid(board, 0, 1):\n    print('YES')\nelse:\n    print('NO')", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "s = input().lower()\n\nis_palindrome = s == s.lower().replace(\" \", \"\") and s.lower() == s.lower()[::-1]\n\nprint(\"TAK\" if is_palindrome else \"NIE\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n, k, s = map(int, input().split())\na = list(map(int, input().split()))\n\na.sort()\ns_sum = sum(a)\ndp = 0\n\nfor i in range(n):\n    if s_sum - a[i] <= k and a[i] > 0:\n        dp += 1\n\nprint(dp)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "a, b, m = map(int, input().split())\n\n# Calculate the number of distinct integers the frog can reach from position k\ndef f(k):\n    return min(k, a) - max(0, k - b) + 1\n\n# Calculate the sum of f(i) for i from 0 to m\nsum = 0\nfor i in range(m + 1):\n    sum += f(i)\n\n# Print the sum\nprint(sum)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n, k = map(int, input().split())\na = list(map(int, input().split()))\ns = sum(a)\n\nif s <= 8 * n:\n    print(\"YES\")\nelse:\n    print(\"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "N, K = map(int, input().split())\nA = list(map(int, input().split()))\n\n# Calculate the maximum possible divisor\nmax_divisor = 0\nfor i in range(N):\n    a_i = A[i]\n    for j in range(i, N):\n        a_j = A[j]\n        if a_i + 1 > a_j and a_i + 1 not in A:\n            max_divisor = max(max_divisor, a_i + 1)\n\n# Print the maximum divisor\nprint(max_divisor)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "x, y = map(int, input().split())\n\n# Calculate the minimum number of seconds required\nseconds = abs(x - y) + abs(x - y // 3) - 1\n\n# Print the result\nprint(seconds)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n, bx = map(int, input().split())\nx = int(\"\".join(str(int(x_i) // bx ** i for i, x_i in enumerate(reversed(map(int, input().split())))))\n\nm, by = map(int, input().split())\ny = int(\"\".join(str(int(y_i) // by ** i for i, y_i in enumerate(reversed(map(int, input().split())))))\n\nprint(\"<\" if x < y else \">\" if x > y else \"=\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "s = input().strip()\n\n# Check if the input string is an accordion\naccordion = bool(s.match(\"\\[:.*:\\]\"))\n\n# If it is not an accordion, print -1\nif not accordion:\n    print(-1)\n\n# Otherwise, find the maximum length of the result\nelse:\n    # Calculate the length of the shortest possible accordion\n    min_length = len(s) - s.count(\")\") - s.count(\"[\") - 2\n\n    # Print the maximum length of the result\n    print(min_length)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n = int(input())\n\n# Convert the year to a string\nyear_str = str(n)\n\n# Count the number of non-zero digits in the year\nnum_non_zero_digits = sum(int(digit) for digit in year_str.split('-') if int(digit) else 0)\n\n# Find the next lucky year\nnext_lucky_year = int(year_str) + 1\n\n# If the next lucky year is in the same year, increment the year until the next lucky year is found\nwhile num_non_zero_digits > 0:\n    next_lucky_year += 1\n    year_str = str(next_lucky_year)\n    num_non_zero_digits = sum(int(digit) for digit in year_str.split('-') if int(digit) else 0)\n\n# Print the number of years until the next lucky year\nprint(next_lucky_year - n)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n, t = map(int, input().split())\n\ng = 1\nf = 0\na = 0\nfor i in range(n):\n    a += g\n    g += 1\n    f = max(f, a)\n\nprint(f)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n = int(input())\n\nif n % 25 == 0:\n  print(0)\nelse:\n  # Find the first digit of n that is not a zero\n  i = 0\n  while n // 10 ** i != 0:\n    i += 1\n\n  # Count the number of moves required to make n divisible by 25\n  moves = 0\n  # If the first digit is not a zero, we can move it to the end\n  if n // 10 ** i != n:\n    moves += 1\n  # We can move the second digit of n to the end\n  if n % 10 != 0:\n    moves += 1\n\n  # If the number of moves required is greater than the number of moves that are possible, print -1\n  if moves > 1:\n    print(-1)\n  # Otherwise, print the number of moves required\n  else:\n    print(moves)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "def base_minus_two(n):\n    # Check if n is 0\n    if n == 0:\n        return \"0\"\n\n    # Initialize the result string\n    result = \"\"\n\n    # Iterate over the digits of n in reverse order\n    while n:\n        # Calculate the digit of n modulo 2\n        digit = n % 2\n\n        # Convert the digit to a string\n        digit_str = str(digit)\n\n        # Append the digit to the result string\n        result += digit_str\n\n        # Divide n by 2 to remove the digit\n        n //= 2\n\n    # Return the result string\n    return result\n\n\n# Get the input\nn = int(input())\n\n# Find the base -2 representation of n\nbase_minus_two_rep = base_minus_two(n)\n\n# Print the base -2 representation\nprint(base_minus_two_rep)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ngood_time = 0\nfor i in range(n):\n    if l <= a[i] <= r:\n        good_time += 1\n\nprint(good_time)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "3\nn = int(input())\nv = list(map(int, input().split()))\n\n# Check if the sequence is already /\\/\\/\\/\nis_valid = (len(set(v)) == 2) and all(v[i] == v[i+2] for i in range(len(v) - 2))\n\n# If the sequence is not valid, find the minimum number of elements to replace\nmin_replace = min(set(v) - set(v[2::2]))\n\n# Print the minimum number of elements to replace\nprint(min_replace)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "3\n\nimport sys\n\n# Read the input expression\nexpression = sys.stdin.read().strip()\n\n# Parse the expression\ntokens = expression.split()\n\n# Convert tokens to integers\noperands = [int(token) for token in tokens]\n\n# Calculate the result\nresult = eval(str(operands) + [\"+\", \"-\"] * len(operands) + [\"=\", str(operands[0])])\n\n# Print the result\nprint(str(result))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n, k = map(int, input().split())\ns = input().lower()\n\n# Calculate the prefix sum of the character counts\nps = []\ns_dict = {}\nfor i in range(n):\n    s_dict[s[i]] = s_dict.get(s[i], 0) + 1\n    ps.append(s_dict[s[i]] - 1)\n\n# Find the minimum cost\nmin_cost = float('inf')\nfor i in range(k):\n    if ps[i] >= 0:\n        min_cost = min(min_cost, i + ps[i])\n\n# Print the result\nif min_cost == float('inf'):\n    print -1\nelse:\n    print min_cost", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\n\na.sort()\n\nk = len(set(a))\ns = \"\"\n\nfor i in range(k):\n    if a[i] == a[0]:\n        s += \"L\"\n    else:\n        s += \"R\"\n\nprint(k)\nprint(s)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n, m = map(int, input().split())\ns = []\nd = []\nc = []\n\nfor i in range(m):\n    s_i, d_i, c_i = map(int, input().split())\n    s.append(s_i)\n    d.append(d_i)\n    c.append(c_i)\n\ns_set = set(s)\nif len(s_set) != m:\n    print(-1)\nelse:\n    ans = []\n    for i in range(n):\n        if i in s_set:\n            ans.append(m + 1)\n        elif i in d_set:\n            ans.append(0)\n        else:\n            ans.append(c[s.index(min(s_set))])\n    print(*ans)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n, d, k = map(int, input().split())\n\nif d > n-1 or k > n-1:\n    print(\"NO\")\nelse:\n    print(\"YES\")\n    edges = []\n    for _ in range(n-1):\n        u, v = map(int, input().split())\n        edges.append((u, v))\n    print(*edges)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\n\n# Calculate the minimum number of pairwise distinct flats to turn off the light\nk = 0\nfor i in range(1, n):\n    if a[i] == 0 and a[i - 1] == 1 and a[i + 1] == 1:\n        k += 1\n\nprint(k)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n, m = map(int, input().split())\na = list(map(int, input().split()))\n\ncaff_sum = sum(a)\npages_written = 0\ndays = 1\n\nwhile pages_written < m:\n    cups_drunk = min(caff_sum, pages_written + 1)\n    pages_written += cups_drunk - pages_written\n    caff_sum -= cups_drunk\n    days += 1\n\nif pages_written < m:\n    print(-1)\nelse:\n    print(days)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\n\n# Calculate the power set of each element\npower_set = {}\nfor i in a:\n    powers = set(x for x in range(1, int(i**0.5) + 1))\n    power_set[i] = powers\n\n# Find the minimum number of elements to remove\nmin_removes = float('inf')\nfor i in a:\n    if not power_set[i] & set(power_set[a_i] - set([a_i])):\n        min_removes = min(min_removes, 1 + a_i)\n\nprint(int(min_removes))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n = int(input())\nb = list(map(int, input().split()))\n\n# Check if the sequence is already an arithmetic progression\nif len(b) <= 2:\n    print(0)\n    exit()\ndiff = b[1] - b[0]\nfor i in range(1, len(b)):\n    if b[i] - b[i-1] != diff:\n        print(-1)\n        exit()\n\n# Count the number of elements that can be changed\ncount = 0\nfor i in range(len(b)):\n    if b[i] - b[0] != diff:\n        count += 1\n\nprint(count)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n = int(input())\na1, a2, a3 = map(int, input().split())\nb1, b2, b3 = map(int, input().split())\n\n# Calculate the minimum and maximum number of rounds Alice can win\nmin_wins = max(0, a2 - b3)\nmax_wins = min(a1, b2) - max(0, b3 - a2)\n\nprint(min_wins, max_wins)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\n\n# Check if the input is valid\nif len(a) != n**2 or len(set(a)) != n**2:\n    print(\"NO\")\nelse:\n    # Create a matrix and fill it with the numbers\n    m = n\n    n_a = len(a)\n    matrix = [[0] * m for _ in range(m)]\n    i = 0\n    for num in a:\n        matrix[i // m][i % m] = num\n        i += 1\n\n    # Check if the matrix is palindromic\n    is_palindrome = True\n    for i in range(m):\n        for j in range(m):\n            if matrix[i][j] != matrix[j][i]:\n                is_palindrome = False\n\n    # If the matrix is palindromic, print YES and the matrix\n    if is_palindrome:\n        print(\"YES\")\n        for i in range(m):\n            print(\" \".join(str(matrix[i][j]) for j in range(m)))\n    else:\n        print(\"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\n\na.sort()\nk = len(set(a))\ns = \"\"\n\nfor i in range(k):\n    if a[i] == a[i-1]:\n        s += \"L\"\n    else:\n        s += \"R\"\n\nprint(k)\nprint(s)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n = int(input())\ns = \"\"\n\nfor _ in range(n):\n    s += input().strip()\n\nprefixes = []\nsuffixes = []\n\nfor i in range(1, n):\n    prefixes.append(s[:i])\n    suffixes.append(s[i:])\n\nguess = input().split()\n\nans = \"\"\n\nfor i in range(len(guess)):\n    if prefixes[i] in guess or suffixes[i] in guess:\n        ans += \"P\"\n    else:\n        ans += \"S\"\n\nprint(ans)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "3\na, b = map(int, input().split())\n\nif 1 <= a <= 20 and 1 <= b <= 20:\n  print(a * b)\nelse:\n  print(-1)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "3\nN, M = map(int, input().split())\n\nL = []\nR = []\nfor _ in range(M):\n    l, r = map(int, input().split())\n    L.append(l)\n    R.append(r)\n\n# Create a dictionary to store the number of cards that allow us to pass each gate\ncards_needed = {}\nfor i in range(1, N+1):\n    cards_needed[i] = 0\n\n# Calculate the number of cards that allow us to pass each gate\nfor i in range(M):\n    cards_needed[L[i]] += 1\n    cards_needed[R[i]] -= 1\n\n# Find the number of ID cards that allow us to pass all the gates alone\nnum_cards = 0\nfor i in cards_needed.keys():\n    if cards_needed[i] == M:\n        num_cards += 1\n\n# Print the number of ID cards that allow us to pass all the gates alone\nprint(num_cards)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n, m, k = map(int, input().split())\na = []\nfor _ in range(n):\n    a.append(list(map(int, input().split())))\n\ndp = [[0] * (m + 1) for _ in range(n + 1)]\n\ndp[0][0] = 1\n\nfor i in range(1, n + 1):\n    for j in range(1, m + 1):\n        dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n\nprint(dp[n][m])", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "3\ns = input().lower()\n\n# Calculate the minimum number of hugs needed to make S palindromic\nmin_hugs = 0\nfor i in range(len(s)):\n    # Check if the character at the current position is not a palindrome\n    if s[i] != s[i:i+1].lower():\n        min_hugs += 1\n\n# Print the minimum number of hugs\nprint(min_hugs)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n = int(input())\n\nsegments = []\nfor _ in range(n):\n    l, r = map(int, input().split())\n    segments.append((l, r))\n\nsegments.sort()\n\n# Remove one segment\nsegments.pop(0)\n\n# Calculate the intersection\nintersection = max(range(segments[0][0], segments[-1][1] + 1))\n\n# Print the length of the intersection\nprint(intersection)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n, k = map(int, input().split())\na = list(map(int, input().split()))\n\na.sort()\n\ndp = 0\nt = 0\nans = 0\nfor i in range(n):\n    dp = max(dp, a[i] + t)\n    t += 1\n    ans = max(ans, dp)\n\nprint(ans)\nprint(*([int](str(t).split())])", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "s = int(input())\nn = len(str(s))\n\n# Calculate the number of cuts that can be made\ncuts = n - 1\n\n# Calculate the maximum number of numbers divisible by 3 that can be obtained\nmax_num_divisible_by_3 = cuts // 3\n\n# Print the maximum number of numbers divisible by 3\nprint(max_num_divisible_by_3)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "3\nN = int(input())\n\ncheeses = {}\nfor _ in range(N):\n    name, type = input().split()\n    if name not in cheeses:\n        cheeses[name] = type\n\nprint(len(cheeses.keys()) - 1)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "3\nK = int(input())\n\nsum = 0\nfor a in range(1, K + 1):\n    for b in range(1, K + 1):\n        for c in range(1, K + 1):\n            gcd = __gcd(a, b, c)\n            sum += gcd\n\nprint(sum)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "D, T, S = map(int, input().split())\n\ndistance = D\nspeed = S\ntime_taken = distance / speed\n\nif time_taken <= T:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "a, b, c, d = map(int, input().split())\n\nx_min = max(a, c)\nx_max = min(b, d)\n\ny_min = max(1, int((c-1)/a))\ny_max = min(int((d-1)/a) + 1, int((b-a)/a) + 1)\n\nprint(max(x_min * y_min, x_max * y_max))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "3\nn = int(input())\na = list(map(int, input().split()))\n\na.sort()\ntotal = 0\nteams = 0\n\nfor i in range(len(a)):\n    a[i] += teams\n    total += a[i]\n    teams += 1\n\n    if teams == n // 2:\n        print(total)\n        exit()\n\nprint(\"No solution\")", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n, m, k = map(int, input().split())\na = [[int(input()) for _ in range(m)] for _ in range(n)]\n\n# Calculate the maximum sum divisible by k for each row\nrow_sums = []\nfor i in range(n):\n    row_sum = 0\n    k_elements = int(m // 2)\n    for j in range(m):\n        row_sum += a[i][j]\n        if row_sum > k_elements:\n            row_sum -= a[i][j]\n    row_sums.append(row_sum)\n\n# Find the maximum sum divisible by k\nmax_sum = 0\nfor row_sum in row_sums:\n    max_sum = max(max_sum, row_sum % k * k)\n\nprint(max_sum)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "def is_obfuscated(s):\n    if len(s) > 26:\n        return False\n    used = set()\n    for c in s:\n        if c.isalpha() and c not in used:\n            used.add(c)\n    alphabet = list(set(chr(ord('a') + i) for i in range(len(used))))\n    current = {}\n    for c in used:\n        current[c] = alphabet.pop(0)\n    obfuscated = [current[c] for c in s]\n    for i in range(len(s)):\n        for j in range(i+1, len(s)):\n            if obfuscated[i] == obfuscated[j] and s[i] != s[j]:\n                return False\n    return True\n\n# Test cases\nprint(is_obfuscated('abacaba'))  # YES\nprint(is_obfuscated('jinotega'))  # NO", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "n = int(input())\nwhite\\_pos = [0]*n\nblack\\_pos = [0]*n\nfor i in range(1, 2*n+1):\n    if i % 2 == 1:\n        white\\_pos[int(input().split()[1])-1] = i\n    else:\n        black\\_pos[int(input().split()[1])-1] = i\n\nwhite\\_swaps = 0\nfor i in range(n):\n    for j in range(i+1, n):\n        if white\\_pos[i] > white\\_pos[j]:\n            white\\_swaps += 1\n\nblack\\_swaps = 0\nfor i in range(n):\n    for j in range(i+1, n):\n        if black\\_pos[i] > black\\_pos[j]:\n            black\\_swaps += 1\n\nprint(white\\_swaps + black\\_swaps)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "import sys\ninput = sys.stdin.readline\n\nMOD = 998244353\nN = int(input().strip())\nd = list(map(int, input().strip().split()))\n\n# Initialize dp array with all values set to 0\ndp = [[0] * (sum(d) + 1) for _ in range(N + 1)]\n\n# Base case: connecting two parts with no holes\ndp[1][0] = 1\n\n# Iterate over each part\nfor i in range(1, N):\n    # Iterate over each possible number of holes filled\n    for j in range(sum(d[:i]) + 1):\n        # Iterate over each possible hole to add a component to\n        for k in range(d[i]):\n            # Calculate number of ways to fill the remaining holes\n            #", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "import sys\ninput = sys.stdin.readline\n\nmod = 10**9 + 7\n\ndef dfs(cur, par):\n    w_sum = b_sum = 0\n    w_max = b_max = -1\n    for nxt in tree[cur]:\n        if nxt == par:\n            continue\n        res = dfs(nxt, cur)\n        w_sum += res[0]\n        b_sum += res[1]\n        w_max = max(w_max, res[0])\n        b_max = max(b_max, res[1])\n\n    # if cur has only one child, the niceness is max(w_sum, b_sum)\n    if par == -1:\n        ans = max(w_sum, b_sum)\n    else:\n        # if cur is white, the niceness is max(w_sum + dist(par, cur), b_sum)\n        # if cur is black, the niceness is max(w_sum, b_sum + dist(par, cur))\n        if cur & 1:\n            ans = max(w_sum + dist[par][cur], b_sum)\n        else:\n            ans = max(w_sum, b_sum + dist[par][cur])\n\n    # add the niceness of cur to the niceness of its parent\n    dist[cur][par] = dist[par][cur] = ans\n\n    return (w_sum, b_sum)\n\nN = int(input())\ntree = [[] for _ in range(N)]\ndist = [[-1] * N for _ in range(N)]\nfor _ in range(N-1):\n    a, b = map(int, input().split())\n    tree[a-1].append(b-1)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "n = int(input())\np = list(map(int, input().split()))\n\nmin_num, max_num = 1, n\nmoves = 0\n\nwhile min_num <= max_num:\n    if p[0] != min_num:\n        p.append(p.pop(0))\n        moves += 1\n    else:\n        min_num += 1\n\n    if len(p) > 1 and p[-1] != max_num:\n        p.insert(0, p.pop())\n        moves += 1\n    else:\n        max_num -= 1\n\nprint(moves)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "def min\\_cost\\_to\\_visit\\_all\\_schools(n):\nif n == 1:\nreturn 0\ncost = 0\ni = 1\nwhile True:\ncost = (cost + i) % (n + 1)\nif cost == 0:\nreturn min\\_cost\\_to\\_visit\\_all\\_schools(n - 1)\ni += 1\n\nn = int(input())\nprint(min\\_cost\\_to\\_visit\\_all\\_schools(n))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "def min\\_leaves\\_to\\_remove():\n\\# Read input\nH, W = map(int, input().split())\npond = [list(input()) for \\_ in range(H)]\n\nS\\_row, S\\_col = 0, 0\nfor i in range(H):\nfor j in range(W):\nif pond[i][j] == \"S\":\nS\\_row, S\\_col = i, j\nbreak\n\nT\\_row, T\\_col = 0, 0\nfor i in range(H):\nfor j in range(W):\nif pond[i][j] == \"T\":\nT\\_row, T\\_col = i, j\nbreak\n\n# Initialize necessary leaves to remove\nnecessary\\_leaves = 0\n\n# Check if the frog can reach the leaf T\nif S\\_row == T\\_row:\n# Same row\nfor j in range(min(S\\_col, T\\_col) - 1, max(S\\_col, T\\_col)):\nif pond[S\\_row][j] == \"o\":\nnecessary\\_leaves += 1\nelif pond[S\\_row][j] == \".\":\nbreak\n\nelif S\\_col == T\\_col:\n# Same column\nfor i in range(min(S\\_row, T\\_row) - 1, max(S\\_row, T\\_row)):\nif pond[i][S\\_col] == \"o\":\nnecessary\\_leaves += 1\nelif pond[i][S\\_col] == \".\":\nbreak\n\nelse:\n# Different rows and columns\nif pond[S\\_row][T\\_col] == \"o\":\nnecessary\\_leaves += 1\nelif pond[S\\_row][T\\_col] == \".\":\nnecessary\\_leaves = -1\n\nprint(necessary\\_leaves)\n\nif **name** == \"**main**\":\nmin\\_leaves\\_to\\_remove()", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "import sys\ninput = sys.stdin.readline\n\nMOD = 1000000007\n\ndef extended_gcd(a, b):\n    if b == 0:\n        return a, 1, 0\n    else:\n        g, x, y = extended_gcd(b, a % b)\n        return g, y, x - (a // b) * y\n\ndef invmod(a, b):\n    g, x, _ = extended_gcd(a, b)\n    return x % b", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "import math\n\ndef solve():\n    n, I = map(int, input().split())\n    a = list(map(int, input().split()))\n    K = len(set(a))\n    k = math.ceil(math.log2(K))\n    nk = n * k\n    if nk <= 8 * I:\n        print(0)\n        return\n    bound = (8 * I + n - 1) // n\n    ans = float('inf')\n    for r in range(1000000001):\n        l = max(0, r - bound)\n        cnt = sum(1 for x in a if l <= x <= r)\n        if nk - 8 * I >= 8 * (cnt - (r - l + 1) * n):\n            ans = min(ans, n - cnt)\n    print(ans)\n\nsolve()", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "import sys\nfrom collections import defaultdict\n\ndef read_data():\n    n, m = map(int, sys.stdin.readline().split())\n    edges = defaultdict(set)\n    for _ in range(m):\n        u, v = map(int, sys.stdin.readline().split())\n        edges[u - 1].add(v - 1)\n        edges[v - 1].add(u - 1)\n    return n, edges\n\ndef solve(n, edges):\n    if n == 1:\n        return \"Yes\", \"a\"\n\n    if n % 2 == 0:\n        return \"No\"\n\n    for i in range(n):\n        if len(edges[i]) not in (1, n - 1):\n            return \"No\"\n\n    first_letters = set()\n    for i in range(n):\n        if len(edges[i]) == 1:\n            first_letters.add(i)\n\n    if len(first_letters) != 2:\n        return \"No\"\n\n    start, end = first_letters\n    path = ['a'] * n\n    path[start] = 'b'\n    path[end] = 'c'\n\n    for i in range(n - 1):\n        if i != start and i != end and path[i] == path[i + 1]:\n            return \"No\"\n\n    for i in range(n - 1):\n        if i in edges[i + 1]:\n            continue\n\n        if path[i] == 'a' and path[i + 1] == 'c':\n            return \"No\"\n\n        path[i], path[i + 1] = path[i + 1], path[i]\n\n    return \"Yes\", ''.join(path)\n\ndef main():\n    n, edges = read_data()\n    ans, string = solve(n, edges)\n    print(ans)\n    if ans == \"Yes\":\n        print(string)\n\nif __name__ == \"__main__\":\n    main()", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "import sys\ninput = sys.stdin.readline\nMOD = 1000000007\n\ndef power(x, y):\n    res = 1\n    while y > 0:\n        if y & 1:\n            res = (res * x) % MOD\n        x = (x * x) % MOD\n        y >>= 1\n    return res\n\ndef dfs(cur, pre, vis, sum_vis):\n    if cur == n + 2:\n        if sum_vis - vis[0] - vis[1] == m:\n            return 1\n        else:\n            return 0\n    ret = 0\n    for i in range(n + 2):\n        if not vis[i] and (not pre or i != pre):\n            vis[i] = 1\n            sum_vis += 1\n            ret += dfs(cur + 1, i, vis, sum_vis)\n            sum_vis -= 1\n            vis[i] = 0\n    return ret\n\ndef solve(n, m):\n    vis = [0] * (n + 2)\n    vis[0] = vis[1] = 1\n    return dfs(2, 0, vis, 2) * power(2, n - 1) % MOD\n\nif __name__ == \"__main__\":\n    n, m = map(int, input().strip().split())\n    print(solve(n, m))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "import math\n\ndef min_time(n, p, q, a, b):\n    dp = [[math.inf] * (p + 1) for _ in range(n + 1)]\n    dp[0][0] = 0\n    for i in range(1, n + 1):\n        for j in range(p + 1):\n            for k in range(min(j // a[i - 1], q // b[i - 1]) + 1):\n                dp[i][j] = min(dp[i][j], dp[i - 1][max(0, j - a[i - 1] * k)] + k)\n    return dp[n][p] / q\n\nn, p, q = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\nprint(min_time(n, p, q, a, b))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "import sys\ninput = sys.stdin.readline\n\ndef gcd(a, b):\n    return a if b == 0 else gcd(b, a % b)\n\ndef make_tree(nodes, start, end, parent):\n    if start > end:\n        return None\n    mid = (start + end) // 2\n    node = TreeNode(nodes[mid])\n    node.parent = parent\n    if parent:\n        if parent.left and gcd(parent.left.val, node.val) > 1:\n            parent.left = node\n            make_tree(nodes, start, mid - 1, node)\n            make_tree(nodes, mid + 1, end, node)\n        elif parent.right and gcd(parent.right.val, node.val) > 1:\n            parent.right = node\n            make_tree(nodes, start, mid - 1, node)\n            make_tree(nodes, mid + 1, end, node)\n    else:\n        # this is the root node\n        make_tree(nodes, start, mid - 1, node)\n        make_tree(nodes, mid + 1, end, node)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "mod = 10**9 + 7\ndp = [0]*(10**8 + 1)\ndp[0] = 1\n\ndef calc(s):\n    if dp[s] != 0:\n        return dp[s]\n    res = 0\n    for i in range(1, 10):\n        if s < i:\n            break\n        res += calc(s - i)\n        res %= mod\n    dp[s] = res\n    return res\n\nS = int(input())\nprint(calc(S))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "def power(x, y, p):\n    res = 1\n    x = x % p\n    while (y > 0):\n        if (y & 1):\n            res = (res * x) % p\n        y = y >> 1\n        x = (x * x) % p\n    return res\n\ndef get_complexity(x):\n    n = len(bin(int(x, 2))) - 2\n    count = 0\n    for i in range(2**n):\n        diff = i ^ int(x, 2)\n        temp = min(i, diff)\n        count = (count + power(2, temp & (n - 1), 1000000007)) % 1000000007\n    return count\n\nif __name__ == '__main__':\n    x = input()\n    print(get_complexity(x))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "import sys\nfrom collections import defaultdict\nfrom math import sqrt\n\ninput = sys.stdin.readline\n\ndef distance(x1, y1, x2, y2):\n    return sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)\n\ndef solve():\n    n = int(input())\n    circles = []\n    for _ in range(n):\n        x, y, r = map(int, input().split())\n        circles.append((x, y, r))\n\n    # Calculate the pairwise distances between circles\n    distances = [[distance(circles[i][0], circles[i][1], circles[j][0], circles[j][1]) for j in range(i + 1, n)] for i in range(n)]\n\n    # Count the number of circles that intersect with each circle\n    k = [0] * n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if abs(distances[i][j] - circles[i][2] - circles[j][2]) <= 1e-8:\n                k[i] += 1\n                k[j] += 1\n\n    # Calculate the number of regions\n    result = (n * (n - 1)) // 2 + 1\n    for i in k:\n        result -= i\n\n    print(result)\n\nif __name__ == \"__main__\":\n    solve()", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "import heapq\n\ndef solve():\n    n, p, s = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n\n    # Use a min heap to get the top p students by programming skill\n    heapq.heapify(a)\n    programming_team = [heapq.heappop(a) for _ in range(p)]\n\n    # Use a max heap to get the top s students by sports skill\n    heapq.heapify(b)\n    sports_team = [heapq.heappop(b) for _ in range(s)]\n\n    # Calculate the total strength of the university\n    total_strength = sum(programming_team) + sum(sports_team)\n\n    print(total_strength)\n    print(*programming_team)\n    print(*sports_team)\n\nsolve()", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "import sys\ninput = sys.stdin.readline\n\nmod = 1000000007\n\ndef power(x, y):\n    res = 1\n    while y > 0:\n        if y & 1:\n            res = (res * x) % mod\n        x = (x * x) % mod\n        y >>= 1\n    return res\n\ndef solve(n, a):\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i + 1] = (dp[i + 1] + dp[j]) % mod\n    return dp[n]\n\ndef main():\n    n = int(input().strip())\n    a = list(map(int, input().strip().split()))\n\n    # Count the number of multiples of each number\n    freq = [0] * 61\n    for x in a:\n        freq[x] += 1\n\n    # Calculate the answer\n    ans = 0\n    for i in range(1, 61):\n        if freq[i] > 0:\n            freq_less_than_i = sum(freq[:i])\n            freq[i] -= 1\n            ans = (ans + freq_less_than_i * solve(n - i, a)) % mod\n            freq[i] += 1", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "n, t = map(int, input().split())\ngrade = input()\n\n# Initialize the maximum grade and the current position\nmax_grade = grade\ncurr_pos = n - 2\n\n# Loop through the remaining seconds\nfor _ in range(t):\n    # If the current position is already the most significant digit after the decimal point, break\n    if curr_pos == -1:\n        break\n\n    # Get the current digit and the next digit\n    digit, next_digit = int(grade[curr_pos + 1]), int(grade[curr_pos + 2])\n\n    # If the next digit is 5 or more, increment the current digit and set the next digits to 0\n    if next_digit >= 5:\n        grade = grade[:curr_pos + 1] + str(digit + 1) + '0' * (n - curr_pos - 2)\n        max_grade = max(max_grade, grade)\n\n    # If the next digit is less than 5, just set the next digits to 0\n    else:\n        grade = grade[:curr_pos + 1] + '0' * (n - curr_pos - 1)\n\n    # Move to the next position\n    curr_pos -= 1\n\nprint(max_grade)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef find_path_length(x1, y1, x2, y2):\n    g = gcd(abs(x2 - x1), abs(y2 - y1))\n    x_diff = (x2 - x1) // g\n    y_diff = (y2 - y1) // g\n    return 2 * (abs(x_diff) + abs(y_diff)) - (x_diff != 0) - (y_diff != 0)\n\nx1, y1 = map(int, input().split())\nx2, y2 = map(int, input().split())\nprint(find_path_length(x1, y1, x2, y2))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "import sys\n\ndef solve():\n    n = int(input().strip())\n    crushes = list(map(int, input().strip().split()))\n    for t in range(1, 101):\n        already_joonjoon = [False]*n\n        for x in range(n):\n            y = x\n            while not already_joonjoon[y]:\n                already_joonjoon[y] = True\n                y = crushes[y] - 1\n            if y != x:\n                break\n        else:\n            return t\n    return -1\n\nif __name__ == '__main__':\n    print(solve())", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "n = int(input())\nstudents = list(map(int, input().split()))\n\n# Calculate the total number of students\ntotal_students = sum(students)\n\n# Calculate the number of compartments that need to be filled\nneed_to_fill = total_students - 3 * (total_students // 4)\n\n# Print the result\nprint(need_to_fill)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "def solve():\n  T = int(input().strip())\n  for t in range(T):\n    N = int(input().strip())\n    a = list(map(int, input().strip().split()))\n    b = [0] * N\n    d = 0\n    @lru_cache(maxsize=None)\n    def winner(b, d):\n      if all(x == 0 for x in b):\n        if d == 0:\n          return 'First'\n        else:\n          return 'Second'\n      else:\n        if max(b) >= d:\n          return winner([x - max(b) for x in b], d + max(b))\n        else:\n          return winner(b, d - 1)\n    print(winner(b, d))\n\nsolve()", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "def solve():\n    n = int(input().strip())\n    statues = list(map(int, input().strip().split()))\n    desired = list(map(int, input().strip().split()))\n\n    # Initialize a dictionary to keep track of the current and desired statues on each island", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "n = int(input())\narr = list(map(int, input().split()))\narr.sort()\nsum_of_positive = 0\nsum_of_negative = 0\n\n# calculate sum of positive and negative numbers\nfor i in range(n):\n    sum_of_positive += arr[i]\n    sum_of_negative += arr[-i-1]\n\n# if the sum of positive numbers is less than the sum of negative numbers,\n# swap them and change the sign of the first n elements\nif sum_of_positive < sum_of_negative:\n    arr = arr[::-1]\n    for i in range(n):\n        arr[i] *= -1\n\n# print the result\nprint(sum(arr))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "n, k = map(int, input().split())\na, b = map(int, input().split())", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "import math\n\ndef min\\_fuel():\n    n = int(input().strip())\n    m = float(input().strip())\n    a = list(map(int, input().strip().split()))\n    b = list(map(int, input().strip().split()))\n\n    takeoff = [m / i for i in a]\n    landing = [m / j for j in b]\n\n    min\\_fuel\\_needed = math.inf\n\n    for i in range(n):\n        takeoff\\_fuel = takeoff[i]\n        landing\\_fuel = landing[(i + 1) % n]\n\n        if takeoff\\_fuel < landing\\_fuel:\n            fuel\\_needed = takeoff\\_fuel\n        else:\n            fuel\\_needed = landing\\_fuel\n\n        min\\_fuel\\_needed = min(min\\_fuel\\_needed, fuel\\_needed)\n\n        m -= fuel\\_needed\n\n    if m > 0:\n        min\\_fuel\\_needed = -1\n\n    print(\"{:.12f}\".format(min\\_fuel\\_needed))\n\nmin\\_fuel()", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "def cook\\_chicken(k, d, t):\nt\\_on = t * (d - 1) // k + t\nt\\_off = (t - 1) // k * (k - d)\nt\\_total = t\\_on + t\\_off\nreturn t\\_total / (d - (t\\_total % (d - 1)))\n\nk, d, t = map(int, input().split())\nprint(cook\\_chicken(k, d, t))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "n, k = map(int, input().split())\nx = input()\n\n# Calculate the length of the repeating pattern\npattern_len = (n - 1) // k + 1\n\n# Calculate the number of digits in the result\nm = (len(x) - 1) % k + pattern_len\n\n# Calculate the repeating pattern\npattern = x[-pattern_len:]\n\n# Extend the pattern if necessary\npattern = pattern * ((n - 1) % k + 1)\n\n# Check if the pattern needs to be shifted\nif (n - 1) % k >= 0:\n    pattern = pattern[k - (n - 1) % k:]\n\n# Add leading zeros if necessary\nx = pattern.zfill(m)\n\n# Print the result\nprint(m)\nprint(x)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "def max\\_nodes(x0, y0, ax, ay, bx, by, xs, ys, t):\nx, y = xs, ys\ndp = [[0 for _ in range(t + 1)] for _ in range(1000016)]\nfor j in range(t + 1):\ndp[0][j] = 1 if j >= abs(xs - x0) + abs(ys - y0) else 0\nfor i in range(1, 1000016):\nx, y = (ax * (x + bx) + by) % 1000016, (ay * (y + by) + bx) % 1000016\nfor j in range(t + 1):\ndp[i][j] = dp[i - 1][j]\nif j >= abs(xs - x) + abs(ys - y):\ndp[i][j] = max(dp[i][j], dp[i - 1][j - (abs(xs - x) + abs(ys - y))] + 1)\nreturn max(dp[-1])\n\nx0, y0, ax, ay, bx, by = map(int, input().split())\nxs, ys, t = map(int, input().split())\nprint(max\\_nodes(x0, y0, ax, ay, bx, by, xs, ys, t))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "def count_bulbasaurs(s: str) -> int:\n    # Initialize the count of Bulbasaurs\n    count = 0\n\n    # Loop until the entire string has been processed\n    while len(s) > 0:\n        # Try to find a Bulbasaur in the string\n        if s.find(\"Bulbasaur\") == 0:\n            # If found, increment the count and remove the Bulbasaur from the string\n            count += 1\n            s = s[len(\"Bulbasaur\"):].lower()\n        else:\n            # If not found, remove the first character from the string\n            s = s[1:].lower()\n\n    # Return the count of Bulbasaurs\n    return count\n\n# Get the string from the user\ns = input()\n\n# Print the result\nprint(count_bulbasaurs(s))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "import sys\nimport heapq\n\ndef solve():\n    n = int(input().strip())\n    k, s, kt = input().strip(), input().strip(), input().strip()\n    k = [0] + [ord(c) for c in k]\n    s = [0] + [ord(c) for c in s]\n    kt = [0] + [ord(c) for c in kt]\n\n    dp_k = [0] * (n + 1)\n    dp_s = [0] * (n + 1)\n    dp_kt = [0] * (n + 1)\n\n    for i in range(1, n + 1):\n        dp_k[i] = max(dp_k[i - 1], dp_k[i - 1] + 1)\n        for j in range(1, i):\n            if k[i] != k[j]:\n                dp_k[i] = max(dp_k[i], dp_k[j] + 1)\n\n    for i in range(1, n + 1):\n        dp_s[i] = max(dp_s[i - 1], dp_s[i - 1] + 1)\n        for j in range(1, i):\n            if s[i] != s[j]:\n                dp_s[i] = max(dp_s[i], dp_s[j] + 1)\n\n    for i in range(1, n + 1):\n        dp_kt[i] = max(dp_kt[i - 1], dp_kt[i - 1] + 1)\n        for j in range(1, i):\n            if kt[i] != kt[j]:\n                dp_kt[i] = max(dp_kt[i], dp_kt[j] + 1)\n\n    heap = [(-", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\n\nleft_sum = 0\nright_sum = sum(a)\n\nfor i in range(n):\n    right_sum -= a[i]\n    if left_sum == right_sum:\n        print(\"YES\")\n        break\n    left_sum += a[i]\nelse:\n    print(\"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    curr\\_seats = 0\n    curr\\_group = 0\n    for i in range(k):\n        if a[i] + curr\\_seats > 8:\n            print(\"NO\")\n            return\n        if i % 2 == 0:\n            available\\_seats = 8 - curr\\_seats\n            if a[i] > available\\_seats:\n                print(\"NO\")\n                return\n            curr\\_group += a[i]\n            curr\\_seats = 0\n        else:\n            if a[i] + curr\\_seats > 8:\n                print(\"NO\")\n                return\n            curr\\_seats += a[i]\n    print(\"YES\")\n\nsolve()", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "n, m = map(int, input().split())\nday = 1\nwhile (day * (day - 1) + 1 + (day - 1)) / 2 <= n + m - day:\n    day += 1\nprint(day)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "import sys\nfrom collections import defaultdict\n\ndef check\\_tracks(n, L, kefa, sasha):\nkefa\\_map = defaultdict(int)\nsasha\\_map = defaultdict(int)\n\nfor i in range(n):\nkefa\\_map[kefa[i]] += 1\nsasha\\_map[sasha[i]] += 1\n\nif kefa\\_map != sasha\\_map:\nreturn \"NO\"\n\nmin\\_dist = min(kefa)\nfor i in range(n):\nkefa[i] -= min\\_dist\nsasha[i] -= min\\_dist\n\nif max(kefa) < L - max(sasha):\nreturn \"NO\"\n\nkefa\\_map = defaultdict(int)\nsasha\\_map = defaultdict(int)\n\nfor i in range(n):\nkefa\\_map[kefa[i]] += 1\nsasha\\_map[sasha[i]] += 1\n\nif kefa\\_map != sasha\\_map:\nreturn \"NO\"\n\nreturn \"YES\"\n\nif __name__ == \"__main__\":\ninput = sys.stdin.readline\nn, L = map(int, input().strip().split())\nkefa = list(map(int, input().strip().split()))\nsasha = list(map(int, input().strip().split()))\n\nprint(check\\_tracks(n, L, kefa, sasha))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "import re\n\ndef check_password(password):\n    if len(password) < 5:\n        return \"Too weak\"\n    elif not re.search(r'[A-Z]', password) or not re.search(r'[a-z]', password) or not re.search(r'\\d', password):\n        return \"Too weak\"\n    else:\n        return \"Correct\"\n\n# Test the function\npassword = input()\nprint(check_password(password))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "n, k = map(int, input().split())\nremainders = set()\n\nfor i in range(1, k+1):\n    rem = n % i\n    if rem in remainders:\n        print(\"No\")\n        break\n    else:\n        remainders.add(rem)\nelse:\n    print(\"Yes\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "a = int(input())\nb = int(input())\n\nif max(a, b) == a:\n    if a > b:\n        print(\">\")\n    else:\n        print(\"<\")\nelse:\n    print(\"=\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "n, k = map(int, input().split())\na = list(map(int, input().split()))\n\n# Initialize the minimum hours required to water the garden\nmin_hours = k\n\n# Iterate through the buckets\nfor i in range(n):\n  # Calculate the remainder when the garden length is divided by the bucket's length\n  rem = k % a[i]\n\n  # If the remainder is 0, then the bucket can water the entire garden\n  if rem == 0:\n    # Calculate the number of hours required to water the garden\n    hours = k // a[i]\n    # Update the minimum hours required to water the garden\n    min_hours = min(min_hours, hours)\n\n  # If the remainder is not 0, then the bucket cannot water the entire garden\n  # but it can water a subsegment of length a[i]-rem\n  elif rem != 0:\n    # Calculate the number of hours required to water the garden\n    hours = (k - rem) // a[i] + 1\n    # Update the minimum hours required to water the garden\n    min_hours = min(min_hours, hours)\n\n# Print the minimum number of hours required to water the garden\nprint(min_hours)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "import math\n\ndef calculate(x, y, z, operation):\n    if operation == 1:\n        return x ** (y ** z)\n    elif operation == 2:\n        return x ** (z ** y)\n    elif operation == 3:\n        return (x ** y) ** z\n    elif operation == 4:\n        return (x ** z) ** y\n    elif operation == 5:\n        return y ** (x ** z)\n    elif operation == 6:\n        return y ** (z ** x)\n    elif operation == 7:\n        return (y ** x) ** z\n    elif operation == 8:\n        return (y ** z) ** x\n    elif operation == 9:\n        return z ** (x ** y)\n    elif operation == 10:\n        return z ** (y ** x)\n    elif operation == 11:\n        return (z ** x) ** y\n    elif operation == 12:\n        return (z ** y) ** x\n\ndef main():\n    x, y, z = map(float, input().split())\n    operations = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    max_value = -1\n    max_operation = -1\n    for operation in operations:\n        value = calculate(x, y, z, operation)\n        if value > max_value:\n            max_value = value\n            max_operation = operation\n\n    result = \"\"\n    if max_operation == 1:\n        result = \"x^y^z\"\n    elif max_operation == 2:\n        result = \"x^z^y\"\n    elif max_operation == 3:\n        result = \"(x^y)^z\"\n    elif max_operation == 4:\n        result = \"(x^z)^y\"\n    elif max_operation == 5:\n        result = \"y^x^z\"\n    elif max_operation == 6:\n        result = \"y^z^x\"", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "n = int(input())\narr = list(map(int, input().split()))\n\ncounts = [0]*1003 + [0] + [0]*1003\nfor num in arr:\n    counts[num+1003] += 1\n\nmax_pos = 0\nfor d in range(1, 1003):\n    cur_pos = sum(counts[d::d])\n    if cur_pos > max_pos:\n        max_pos = cur_pos\n\nif max_pos >= n//2:\n    print(max(d for d in range(1, 1003) if sum(counts[d::d]) >= n//2))\nelse:\n    print(0)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def solve():\n    n, m, x, y, vx, vy = map(int, input().split())\n    px, py = x + vx, y + vy\n    if vx == 1:\n        px = (px - 1) % (n + 2)\n    elif vx == -1:\n        px = (n + 1 + px) % (n + 2)\n    if vy == 1:\n        py = (py - 1) % (m + 2)\n    elif vy == -1:\n        py = (m + 1 + py) % (m + 2)\n    if px in [0, n + 1] or py in [0, m + 1]:\n        print(f'{px - 1} {py - 1}')\n    else:\n        print(-1)\n\nsolve()", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "import sys\ninput = sys.stdin.readline\n\nMOD = 1000000007\n\ndef pow_mod(a, b):\n    res = 1\n    while b > 0:\n        if b % 2 == 1:\n            res = res * a % MOD\n        a = a * a % MOD\n        b //= 2\n    return res\n\ndef solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    cnt = [0] * 2\n    for x in a:\n        cnt[x] += 1\n    if cnt[0] < k or cnt[1] < k:\n        print(0)\n        return\n    ans = pow_mod(2, k)\n    if n - 2 * k > 0:\n        ans = (ans - pow_mod(2, k) + MOD) % MOD\n    cnt[1] -= k\n    ans = ans * pow_mod(cnt[0], MOD - 2) % MOD\n    ans = ans * pow_mod(cnt[1], MOD - 2) % MOD\n    print(ans)\n\nsolve()", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def min\\_length\\_to\\_reach\\_target(n, ops, x, y):\ndx, dy = 0, 0\nfor i, op in enumerate(ops):\nglobal\\_idx = i\nif op == 'R':\ndx += 1\nelif op == 'L':\ndx -= 1\nelif op == 'U':\ndy += 1\nelif op == 'D':\ndy -= 1\nif dx == x and dy == y:\nreturn 0\n\n# If the robot cannot reach the target position\nif dx != x or dy != y:\nreturn -1\n\n# Binary search to find the minimum subarray\nleft, right = 0, n - 1\nwhile left <= right:\nmid = (left + right) // 2\nif ops[mid] == 'R' and mid + dx > n or ops[mid] == 'L' and mid - dx < 0 or ops[mid] == 'U' and mid + dy > n or ops[mid] == 'D' and mid - dy < 0:\nright = mid - 1\nelse:\nleft = mid + 1\n\nreturn max(dx, dy, right - left + 1)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def find\\_sequence(n, k):\nif n == 0 and k == 0:\nreturn \"Yes\", []\nif n > 0 and k == 1:\nreturn \"Yes\", [int(math.log2(n))]\nif (n & (n - 1)) != 0 or k == 0 or k > n or (n & (1 << k)) == 0:\nreturn \"No\", []\nres = [0] * k\ni = k - 1\nwhile n != 0:\nres[i] = int(math.log2(n))\nn -= 1 << res[i]\ni -= 1\nreturn \"Yes\", res[::-1]\n\nn, k = map(int, input().split())\nans, res = find\\_sequence(n, k)\nprint(ans)\nif ans == \"Yes\":\nprint(*res)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "import math\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    sqrt_n = math.isqrt(n)\n    for i in range(3, sqrt_n + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_divisors(n):\n    count = 1\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            count += 1\n            j = n // i\n            if j != i:\n                count += 1\n        i += 1\n    return count\n\ndef k_th_divisor(n, k):\n    if is_prime(n) and k == 1:\n        return n\n    if k > count_divisors(n):\n        return -1\n    i = 2\n    while True:", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "n, k = map(int, input().split())\nmain_courses = list(map(int, input().split()))\n\nadj_list = [[] for _ in range(n+1)]\nindegrees = [0] * (n+1)\nfor _ in range(n):\n    t, *deps = map(int, input().split())\n    adj_list[t] = deps\n    for dep in deps:\n        indegrees[dep] += 1\n\nqueue = [i for i in range(1, n+1) if indegrees[i] == 0 and i not in main_courses]\ncount = 0\norder = []\nwhile queue:\n    if len(queue) > 1 and count == k:\n        print(-1)\n        exit()\n    node = queue.pop(0)\n    order.append(node)\n    count += 1\n    for neighbor in adj_list[node]:\n        indegrees[neighbor] -= 1\n        if indegrees[neighbor] == 0:\n            queue.append(neighbor)\n\nif count < k:\n    print(-1)\nelse:\n    print(len(order))\n    print(' '.join(map(str, order)))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def max\\_points(n, k, M, t):\nn, k, M = map(int, (n, k, M))\nt = list(map(int, t))\n\ns = sorted(enumerate(t), key=lambda x: x[1])\ntasks = [0] * n\npoints = 0\n\nfor i in range(n):\nj, time = s[i]\nif M >= (k - j) * time:\nM -= (k - j) * time\npoints += k + 1\nelse:\npoints += M // time\nM %= time\n\nreturn points\n\nn, k, M = map(int, input().split())\nt = list(map(int, input().split()))\n\nprint(max\\_points(n, k, M, t))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def solve(n, m, mod):\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for _ in range(m):\n        temp = [0] * (n + 1)\n        for i in range(1, n + 1):\n            for j in range(i, n + 1):\n                temp[j] = (temp[j] + dp[j - i]) % mod\n        dp = temp\n    return dp[n]\n\nn, m = map(int, input().split())\nprint(solve(n, m, 1000000007))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "import sys\ninput = sys.stdin.readline\n\ndef get_divisors_count(n):\n    count = 0\n    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            count += 1\n            if i != n // i:\n                count += 1\n        i += 1\n    return count\n\ndef main():\n    a, b, c = map(int, input().strip().split())\n    mod = 1073741824\n    result = 0\n    for i in range(1, a+1):\n        for j in range(1, b+1):\n            for k in range(1, c+1):\n                result = (result + get_divisors_count(i * j * k)) % mod\n    print(result)\n\nif __name__ == '__main__':\n    main()", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def max\\_abs\\_diff(n, k, tabs):\nn, k = int(n), int(k)\ntabs = list(map(int, tabs.split()))\n\n# Initialize variables to keep track of the number of tabs of each type\ne, s = 0, 0\nfor i in range(n):\nif tabs[i] == 1:\ne += 1\nelse:\ns += 1\n\n# Initialize the variable to keep track of the maximum absolute difference\nmax\\_diff = 0\n\n# Iterate through all possible values of b\nfor b in range(1, k + 1):\n# Reset the number of tabs of each type to 0\ne, s = 0, 0\nfor i in range(n):\n# If the current tab is not a multiple of k or its multiple is greater than n,\n# add the number of tabs of each type that would be kept\nif (i + 1) % k != 0 or (i + 1) // k > n // k:\nif tabs[i] == 1:\ne += 1\nelse:\ns += 1\n# Otherwise, add the number of tabs of each type that would be kept if b is chosen\n# as the first tab to be kept\nelse:\nj = (i // k) * k\nif tabs[j] == 1:\ne += 1\nelse:\ns += 1\nif tabs[i] == 1:\ne += 1\nelse:\ns += 1\n\n# Update the maximum absolute difference if necessary\nmax\\_diff = max(max\\_diff, abs(e - s))\n\nreturn max\\_diff\n\n# Test the function with the provided examples\nprint(max\\_abs\\_diff(\"4 2\", \"1 1 -1 1\")) # 2\nprint(max\\_abs\\_diff(\"14 3\", \"-1 1 -1 -1 1 -1 -1 1 -1 -1 1 -1 -1 1\")) # 9", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "import sys\ninput = sys.stdin.readline\n\nMOD = 1000003\n\ndef powmod(x, y, mod):\n    res = 1\n    while y > 0:\n        if y % 2:\n            res = (res * x) % mod\n            y -= 1\n        x = (x * x) % mod\n        y //= 2\n    return res\n\ndef solve(n, k):\n    if k > (1 << n):\n        return 0, 1\n    elif k == (1 << n):\n        return 1, 1\n    else:\n        not_k = (1 << n) - k\n        num = powmod(k, not_k, MOD)\n        den = powmod(2, n, MOD) - 1\n        den = (den * powmod(2, MOD - 2, MOD)) % MOD\n        return num, den\n\nn, k = map(int, input().strip().split())\nnum, den = solve(n, k)\nprint(num, den)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "l1, r1, l2, r2, k = map(int, input().split())\n\n# Find the minimum and maximum of the overlap\nleft = max(l1, l2)\nright = min(r1, r2)\n\n# Check if there is any overlap\nif left > right:\n    print(0)\nelse:\n    # Adjust the right endpoint to account for Sonya's prinking\n    if k >= left and k <= right:\n        right -= 1\n    print(right - left + 1)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef max_gcd_sequence(n, k):\n    if k == 1:\n        return [n]\n    elif k > n:\n        return -1\n    else:\n        i = 2\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                g = n // i\n                if gcd(i, g) > 1 and k - 1 >= g:\n                    return [i] + [g] * (k - 1)\n                n = n // i - 1\n                i = 2\n        if n > 1 and k - 1 >= n:\n            return [n] + [1] * (k - 1)\n        return -1\n\nn, k = map(int, input().split())\nsequence = max_gcd_sequence(n, k)\nif sequence == -1:\n    print(-1)\nelse:\n    print(*sequence)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def min\\_coins():\n    n, m, k, l = map(int, input().split())\n    if l > n or (n - k) % m != 0:\n        print(-1)\n        return\n    print((n - k) // m)\n\nmin\\_coins()", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "n = int(input())\nnums = set(map(int, input().split()))\n\nfor num in nums:\n    if num * 2 == n:\n        print(\"YES\")\n        print(num, num)\n        break\n    elif num * 2 > n and num not in nums - {num for num in nums if num * 2 <= n}:\n        print(\"YES\")\n        print(num, list(nums - {num})[0])\n        break\nelse:\n    print(\"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "n, m, d = map(int, input().split())\nsofas = []\nfor _ in range(d):\n    x1, y1, x2, y2 = map(int, input().split())\n    sofas.append((x1, y1, x2, y2))\ncnt = list(map(int, input().split()))\n\nfor i, sofa in enumerate(sofas):\n    x1, y1, x2, y2 = sofa\n    if (x1 - 1) * (y1 - 1) == cnt[0] and \\\n       (n - x2) * (y1 - 1) == cnt[1] and \\\n       (x1 - 1) * (m - y2) == cnt[2] and \\\n       (n - x2) * (m - y2) == cnt[3]:\n        print(i + 1)\n        break\nelse:\n    print(-1)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "import sys\n\ndef find_area(points):\n    if len(points) != 2 and len(points) != 4:\n        return -1\n\n    x_coords = set([point[0] for point in points])\n    y_coords = set([point[1] for point in points])\n\n    if len(x_coords) != 2 or len(y_coords) != 2:\n        return -1\n\n    x_min, x_max = min(x_coords), max(x_coords)\n    y_min, y_max = min(y_coords), max(y_coords)\n\n    width = x_max - x_min\n    height = y_max - y_min\n\n    return width * height\n\ndef main():\n    n = int(sys.stdin.readline())\n    points = []\n\n    for i in range(n):\n        x, y = map(int, sys.stdin.readline().split())\n        points.append((x, y))\n\n    area = find_area(points)\n    print(area)\n\nif __name__ == \"__main__\":\n    main()", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def max\\_number(n, cubes):\nn = int(n)\ncubes = [list(map(int, cube.split())) for cube in cubes]\n\navail\\_digits = [set() for _ in range(10)]\nfor cube in cubes:\nfor digit in cube:\navail\\_digits[digit].add(cube.index(digit))\n\nmax\\_num = 0\nfor i in range(1, 10):\nif i not in avail\\_digits[i]:\ncontinue\n\nfor j in range(i + 1, 10):\nif j not in avail\\_digits[j]:\ncontinue\n\nfor k in range(j + 1, 10):\nif k not in avail\\_digits[k]:\ncontinue\n\n# We have found 3 digits that are available on the cubes\n# Now we check if we can form a number using these digits\n\n# Sort the indices of the cubes containing the digits\nindices = sorted([avail\\_digits[i].pop(), avail\\_digits[j].pop(), avail\\_digits[k].pop()])\n\n# Try all possible rotations\nfor rotation in range(6):\n# Try all possible positions for the first digit\nfor pos\\_first in range(4 - rotation):\n# Try all possible positions for the second digit\nfor pos\\_second in range(3 - rotation):\n\nnum = 0\n# Construct the number\nnum = 100 * cubes[indices[0]][rotation + pos\\_first] + \\\n10 * cubes[indices[1]][rotation + pos\\_second + pos\\_first] + \\\ncubes[indices[2]][rotation + pos\\_first + pos\\_second]\n\nmax\\_num = max(max\\_num, num)\n\nreturn max\\_num\n\n# Read input\nn = input()\ncubes = []\nfor _ in range(n):\ncubes.append(input())\n\n# Print output\nprint(max\\_number(n, cubes))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "import sys\ninput = sys.stdin.readline\n\ndef update(bit, i, x):\n    while i <= n:\n        bit[i] += x\n        i += i & -i\n\ndef query(bit, i):\n    s = 0\n    while i > 0:\n        s += bit[i]\n        i -= i & -i\n    return s\n\ndef max_messiness(n, k):\n    bit = [0] * (n + 1)\n    inv = 0\n    for i in range(1, n + 1):\n        inv += query(bit, n) - query(bit, i)\n        update(bit, i, 1)\n    for _ in range(k - 1):\n        i = query(bit, n) - query(bit, n - 1)\n        j = query(bit, n) - query(bit, i)\n        update(bit, i, -1)\n        update(bit, j + 1, 1)\n    return inv\n\nif __name__ == '__main__':\n    n, k = map(int, input().strip().split())\n    print(max_messiness(n, k))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def min_coins_needed(n, m, antennas):\n    # Sort the antennas by their right endpoint\n    antennas.sort(key=lambda x: x[0] + x[1])\n\n    # Initialize the minimum coins needed to cover the interval [1, m]\n    min_coins = 0\n\n    # Initialize the current right endpoint of the covered interval\n    current_right = 0\n\n    # Iterate over the antennas\n    for antenna in antennas:\n        # If the left endpoint of the antenna is greater than the current right endpoint\n        if antenna[0] > current_right:\n            # We need to increment the scope of some antenna to cover the interval [current_right + 1, antenna[0] - 1]\n            # The minimum number of coins needed to do this is equal to the length of this interval\n            min_coins += antenna[0] - current_right - 1\n\n        # Update the current right endpoint to the maximum between the current right endpoint and the right endpoint of the antenna\n        current_right = max(current_right, antenna[0] + antenna[1])\n\n    # Return the minimum number of coins needed to cover the interval [1, m]\n    return min_coins\n\n# Read the number of test cases\nT = int(input().strip())\n\n# Iterate over the test cases\nfor t in range(T):\n    # Read the number of antennas and the length of the street\n    n, m = map(int, input().strip().split())\n\n    # Read the positions and scopes of the antennas\n    antennas = [tuple(map(int, input().strip().split())) for _ in range(n)]\n\n    # Compute and print the minimum number of coins needed to modernize the street\n    print(min_coins_needed(n, m, antennas))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def is_valid(x):\n    # checks if x is a valid rectangle\n    return x % 2 == 0 and x // 2 % 2 == 0\n\ndef count_ways(n):\n    # count the number of ways to split the stick\n    count = 0\n    for a in range(1, n // 4 + 1):\n        if is_valid(a) and is_valid(n - 2 * a):\n            count += 1\n    return count\n\nn = int(input())\nprint(count_ways(n))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def min\\_seconds(n, pos, l, r):\nif l == 1 and r == n:\nreturn 0\n\n# Initialize the number of closed tabs to the left and right of the cursor\nleft, right = 0, 0\nif l > 1:\nleft = l - 1\nif r < n:\nright = n - r\n\n# Move the cursor to the leftmost or rightmost unclosed tab\nif pos < l:\npos = l - left\nelif pos > r:\npos = r + right\n\n# Compute the minimum number of seconds required to close all the tabs outside the segment [l, r]\nreturn pos - l + r - pos + max(left, right)\n\n# Read the input\nn, pos, l, r = map(int, input().split())\n\n# Print the result\nprint(min\\_seconds(n, pos, l, r))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def solve():\n    n, x = map(int, input().split())\n    s = input()\n    cnt0, cnt1, cur_balance = 0, 0, 0\n    ans = 0\n    for i in range(n):\n        if s[i] == '0':\n            cnt0 += 1\n        else:\n            cnt1 += 1\n        cur_balance = cnt0 - cnt1\n        if cur_balance == x:\n            ans += 1\n        elif cur_balance > x:\n            break\n    if cur_balance == x:\n        print(ans + 1)\n    elif cur_balance > x:\n        print(-1)\n    else:\n        if x > 0:\n            print(0)\n        else:\n            print(1)\n\nT = int(input())\nfor _ in range(T):\n    solve()", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def max\\_beauty(s, b):\nn = len(s)\n# Initialize result with sum of all beauties\nres = sum(b)\n# Create a frequency array to count the occurrence of each character\nfreq = [0]*26\nfor c in s:\nfreq[ord(c)-ord('a')] += 1\n# Initialize left and right pointers\nleft, right = 0, n-1\n# Iterate while left is less than or equal to right\nwhile left <= right:\n# If current character from left is same as from right, then subtract beauty of left index from result\nif s[left] == s[right]:\nres -= b[left]\n# Move left pointer\nleft += 1\n# Move right pointer\nright -= 1\n# If current character from left is less than right, then subtract beauty of right index from result\nelif freq[ord(s[right])-ord('a')] > 0:\nres -= b[right]\nfreq[ord(s[right])-ord('a')] -= 1\n# Move right pointer\nright -= 1\n# If current character from left is greater than right, then subtract beauty of left index from result\nelse:\nres -= b[left]\nfreq[ord(s[left])-ord('a')] -= 1\n# Move left pointer\nleft += 1\nreturn res", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def check\\_accident():\nfor _ in range(int(input())):\nroads = [list(map(int, input().split())) for _ in range(4)]\nfor i in range(4):\nif roads[i][3] == 1:\n# check if any of the corresponding car lights are green\nif roads[i][0] == 1 or roads[(i+1)%4][1] == 1 or roads[(i+2)%4][2] == 1:\nreturn \"YES\"\nreturn \"NO\"\n\n# Test cases\nprint(check\\_accident())\nprint(check\\_accident())\nprint(check\\_accident())", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\n\ntotal\\_problems = sum(a)\nhalf\\_way = total\\_problems // 2\ncurrent\\_problems = 0\n\nfor i in range(n):\n\tcurrent\\_problems += a[i]\n\tif current\\_problems >= half\\_way:\n\t\tprint(i+1)\n\t\tbreak", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "n, q = map(int, input().split())\npainters = []\nfor _ in range(q):\n    l, r = map(int, input().split())\n    painters.append((l, r))\n\npainters.sort(key=lambda x: x[1])\nhired = set()\nfor l, r in painters:\n    if r - l + 1 < n - hired:\n        continue\n    hired.update(range(l, r + 1))\n    if len(hired) == n:\n        print(len(hired))\n        break\nelse:\n    print(n - len(hired))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "n = int(input())\ns = input()\n\n# Initialize left and right indices and corresponding counts of golden trophies\nleft, left_count = 0, 0\nright, right_count = n-1, 0\n\n# Count the number of golden trophies on both sides of the array\nfor i in range(n):\n    if s[i] == 'G':\n        if i <= left:\n            left = i\n            left_count += 1\n        if n-1-i <= right:\n            right = n-1-i\n            right_count += 1\n\n# Print the maximum length of golden trophies\nprint(max(left_count, right_count))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def can_weight(w, m):\n    # If m is 0, we can weight it\n    if m == 0:\n        return 'YES'\n\n    # If m is greater than the maximum weight, we cannot weight it\n    if m > w*100:\n        return 'NO'\n\n    # Create a set of weights that we can use to weight m\n    weights = set()\n    for i in range(101):\n        weight = w**i\n        if weight > m:\n            break\n        weights.add(weight)\n\n    # Check if we can use the weights to get m\n    while m > 0:\n        # Find the largest weight that is less than or equal to m\n        weight = next((w for w in weights if w <= m), None)\n        if weight is None:\n            return 'NO'\n\n        # Subtract the weight from m\n        m -= weight\n\n        # Remove the weight from the set of weights\n        weights.remove(weight)\n\n    return 'YES'\n\n# Read input\nw, m = map(int, input().split())\n\n# Print output\nprint(can_weight(w, m))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def min_layers(n):\n    # Initialize the result as 0\n    res = 0\n\n    # Initialize two pointers i and j\n    i, j = 0, 0\n\n    # Keep incrementing j until it becomes greater than n\n    while j <= n:\n\n        # Increment the result\n        res += 1\n\n        # Initialize the max endpoint of the current layer as i\n        max_endpoint = i\n\n        # Keep incrementing i until it becomes greater than j or the\n        # max endpoint of the current layer becomes less than or equal\n        # to j\n        while i <= j and max_endpoint <= j:\n            max_endpoint = n - (j - i)\n            i += 1\n\n        # Update j\n        j = max_endpoint\n\n    # Return the result\n    return res\n\n# Read the input\nn = int(input())\n\n# Print the result\nprint(min_layers(n))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def min\\_cost(n, c0, c1):\nif n == 1:\nreturn min(c0, c1)\n\ndp = [[0] * (n + 1) for _ in range(2)]\n\nfor i in range(1, n + 1):\ndp[0][i] = dp[1][i - 1] + c0\ndp[1][i] = dp[0][i - 1] + c1\n\nfor i in range(2, n + 1):\ndp[0][i] = min(dp[0][i], dp[1][i - 1] + c0)\nfor i in range(2, n + 1):\ndp[1][i] = min(dp[1][i], dp[0][i - 1] + c1)\n\nreturn min(dp[0][n], dp[1][n])\n\nn, c0, c1 = map(int, input().split())\nprint(min\\_cost(n, c0, c1))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def min_deletions(a, b):\n    j = 0\n    for char in a:\n        while j < len(b) and b[j] != char:\n            j += 1\n        if j == len(b):\n            return '-'\n        j += 1\n    return b[:j]\n\n# Read input strings\na = input()\nb = input()\n\n# Compute and print the result\nprint(min_deletions(a, b))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def min_burles(n, m, a, b):\n    # Calculate the difference between n and the closest multiple of m\n    diff = (n - 1) % m\n    # If the difference is 0, then no need to build or demolish any boxes\n    if diff == 0:\n        return 0\n    # Calculate the number of boxes to be built or demolished\n    num_boxes = (diff if diff < m//2 else m - diff)\n    # Return the minimum cost to build or demolish the boxes\n    return num_boxes * a if a < b else num_boxes * b\n\n# Read the input values\nn, m, a, b = map(int, input().split())\n# Print the minimum amount of burles\nprint(min_burles(n, m, a, b))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "n, k = map(int, input().split())\nmarks = list(map(int, input().split()))\n\ncurrent\\_sum = sum(marks)\ncurrent\\_avg = current\\_sum / n\nadditional\\_marks = (k - current\\_avg) * n\nadditional\\_marks = math.ceil(additional\\_marks)\n\nprint(additional\\_marks)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def can_transform(a, b, c, x, y, z):\n    # If the target numbers are already reached, return True\n    if x <= a and y <= b and z <= c:\n        return True\n    # If there are no spheres of a certain color, it's impossible to reach the target\n    if a == 0 and x > 0 or b == 0 and y > 0 or c == 0 and z > 0:\n        return False\n    # Try all possible transformations\n    if a >= 2 and can_transform(a-2, b, c, x, y, z):\n        return True\n    if b >= 2 and can_transform(a, b-2, c, x, y, z):\n        return True\n    if c >= 2 and can_transform(a, b, c-2, x, y, z):\n        return True\n    if a >= 1 and b >= 1 and can_transform(a-1, b-1, c+1, x, y, z):\n        return True\n    if a >= 1 and c >= 1 and can_transform(a-1, b, c-1, x, y, z+1):\n        return True\n    if b >= 1 and c >= 1 and can_transform(a, b-1, c-1, x, y, z+1):\n        return True\n    # If no transformation is possible, return False\n    return False\n\n# Read the input\na, b, c = map(int, input().split())\nx, y, z = map(int, input().split())\n# Print the result\nprint(\"Yes\" if can_transform(a, b, c, x, y, z) else \"No\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def is_regular_bracket_sequence(cnt: list) -> int:\n    # Calculate total number of open and close brackets\n    open_brackets = cnt[0] + cnt[2]\n    close_brackets = cnt[1] + cnt[3]\n\n    # Check if total number of open and close brackets are equal\n    if open_brackets != close_brackets:\n        return", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def solve(m, a, b):\n    # Initialize the result as 0\n    result = 0\n\n    # Create a set to store the distinct integers reachable from 0\n    reachable = {0}\n\n    # Initialize the current maximum reachable integer as 0\n    max_reach = 0\n\n    # Iterate from 1 to m\n    for i in range(1, m + 1):\n\n        # Try to extend the reach of the frog using a jump\n        new_reach = reachable | {x + a for x in reachable} | {x - b for x in reachable}\n\n        # Update the reachable set and maximum reach\n        reachable = new_reach\n        max_reach = max(max_reach, max(new_reach))\n\n        # Add the number of distinct integers reachable so far to the result\n        result += max_reach - i + 1\n\n    # Return the result\n    return result\n\n# Read the input\nm, a, b = map(int, input().split())\n\n# Print the result\nprint(solve(m, a, b))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def max\\_abs\\_diff(n, k, tabs):\nn, k = int(n), int(k)\ntabs = list(map(int, tabs.split()))\n\n# Initialize variables to keep track of the number of tabs of each type\ne, s = 0, 0\nfor i in range(n):\nif tabs[i] == 1:\ne += 1\nelse:\ns += 1\n\n# Initialize the variable to keep track of the maximum absolute difference\nmax\\_diff = 0\n\n# Iterate through all possible values of b\nfor b in range(1, k + 1):\n# Reset the number of tabs of each type to 0\ne, s = 0, 0\nfor i in range(n):\n# If the current tab is not a multiple of k or its multiple is greater than n,\n# add the number of tabs of each type that would be kept\nif (i + 1) % k != 0 or (i + 1) // k > n // k:\nif tabs[i] == 1:\ne += 1\nelse:\ns += 1\n# Otherwise, add the number of tabs of each type that would be kept if b is chosen\n# as the first tab to be kept\nelse:\nj = (i // k) * k\nif tabs[j] == 1:\ne += 1\nelse:\ns += 1\nif tabs[i] == 1:\ne += 1\nelse:\ns += 1\n\n# Update the maximum absolute difference if necessary\nmax\\_diff = max(max\\_diff, abs(e - s))\n\nreturn max\\_diff\n\n# Test the function with the provided examples\nprint(max\\_abs\\_diff(\"4 2\", \"1 1 -1 1\")) # 2\nprint(max\\_abs\\_diff(\"14 3\", \"-1 1 -1 -1 1 -1 -1 1 -1 -1 1 -1 -1 1\")) # 9", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def get_next_char(c):\n    if c == 'z':\n        return None\n    else:\n        return chr(ord(c) + 1)\n\ndef can_reach_alphabet(s):\n    prev_char = None\n    for c in s:\n        if c == 'z':\n            if prev_char == 'y':\n                return False\n            else:\n                prev_char = None\n        elif prev_char is not None and get_next_char(prev_char) != c:\n            return False\n        else:\n            prev_char = c\n    return True", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "m, d = map(int, input().split())\ndays\\_in\\_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\nfirst\\_day\\_of\\_month = (d + sum(days\\_in\\_month[:m-1]) - 1) % 7 + 1\nnum\\_columns = (days\\_in\\_month[m-1] + first\\_day\\_of\\_month - 2) // 7 + 1\nprint(num\\_columns)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "s = input()\nn = len(s)\nfor i in range(n // 2):\n    if s[i] != s[n - i - 1]:\n        print(\"NIE\")\n        break\nelse:\n    print(\"TAK\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def min_rotations(x):\n    # Calculate the absolute value of x and floor divide by 90\n    num_rotations = abs(x) // 90\n    # If x is positive, return the number of rotations\n    if x > 0:\n        return num_rotations\n    # If x is negative, subtract the number of rotations from 4\n    # and return the result modulo 4 to handle cases where\n    # the absolute value of x is a multiple of 360\n    else:\n        return (4 - num_rotations) % 4\n\n# Test cases\nprint(min_rotations(60))  # Output: 1\nprint(min_rotations(-60)) # Output: 3", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "n = int(input())\ns = input()\n\n# Initialize left and right indices and corresponding counts of golden trophies\nleft, left_count = 0, 0\nright, right_count = n-1, 0\n\n# Count the number of golden trophies on both sides of the array\nfor i in range(n):\n    if s[i] == 'G':\n        if i <= left:\n            left = i\n            left_count += 1\n        if n-1-i <= right:\n            right = n-1-i\n            right_count += 1\n\n# Print the maximum length of golden trophies\nprint(max(left_count, right_count))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "n, x = map(int, input().split())\na = list(map(int, input().split()))\n\ncurrent_max = max_so_far = sum(a)\n\nfor i in range(n):\n    # We keep track of the maximum sum subarray ending at index i\n    current_max = max(a[i], current_max + a[i])\n    # We update the maximum sum of the whole array if needed\n    max_so_far = max(max_so_far, current_max)\n\n# If x is negative, we want to minimize the sum of the subarray\n# by multiplying it by x. We can do this by checking if the\n# maximum sum subarray is negative and if so, multiplying it by x.\nif x < 0:\n    max_so_far = max(max_so_far, sum(a) + x * max(0, current_max))\n\nprint(max_so_far)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def max_sum_digits(x):\n    # Generate the number with the maximum sum of digits\n    # by repeating the digit 9 as many times as possible\n    max_num = int(str(9) * (x // 9))\n    \n    # If x is not a multiple of 9, add one more 9 to the number\n    if x % 9 != 0:\n        max_num += 9\n    \n    return max_num\n\n# Read the input value of x\nx = int(input())\n\n# Print the result\nprint(max_sum_digits(x))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def solve(n, k):\n    if k > n * (n + 1) // 2 or k % 2 != 0:\n        return -1\n\n    matrix = [[0] * n for _ in range(n)]\n    for i in range(n):\n        matrix[i][i] = 1\n        k -= 1\n        if k == 0:\n            break\n\n    for i in range(n - 1, -1, -1):\n        for j in range(n - 1, i, -1):\n            if k > 0:\n                matrix[i][j] = 1\n                k -= 1\n\n    return matrix\n\nn, k = map(int, input().split())\nmatrix = solve(n, k)\nfor row in matrix:\n    print(*row)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "n = int(input().strip())\na = list(map(int, input().strip().split()))\n\nleft_min = a[0]\nleft_min_index = 0\n\nmin_distance = float('inf')\n\nfor i in range(1, n):\n    if a[i] < left_min:\n        left_min = a[i]\n        left_min_index = i\n    elif a[i] - left_min < min_distance:\n        min_distance = a[i] - left_min\n\nprint(min_distance)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def is_regular_bracket_sequence(cnt: list) -> int:\n    # Calculate total number of open and close brackets\n    open_brackets = cnt[0] + cnt[2]\n    close_brackets = cnt[1] + cnt[3]\n\n    # Check if total number of open and close brackets are equal\n    if open_brackets != close_brackets:\n        return", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def solve(n, m, mod):\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for _ in range(m):\n        temp = [0] * (n + 1)\n        for i in range(1, n + 1):\n            for j in range(i, n + 1):\n                temp[j] = (temp[j] + dp[j - i]) % mod\n        dp = temp\n    return dp[n]\n\nn, m = map(int, input().split())\nprint(solve(n, m, 1000000007))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def caterpillar(h1, h2, a, b):\n    # Calculate the net distance the caterpillar covers in a day\n    distance = a * 14 + b * 2\n    # Calculate the number of days needed for the caterpillar to reach the apple\n    days = (h2 - h1 - 1) // distance\n    # If the caterpillar cannot reach the apple, return -1\n    if (h2 - h1 - 1) % distance != 0:\n        return -1\n    # Otherwise, return the number of days\n    return days\n\n# Read input\nh1, h2 = map(int, input().split())\na, b = map(int, input().split())\n\n# Print the result\nprint(caterpillar(h1, h2, a, b))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "import sys\n\ndef is_regular(s):\n    stack = []\n    for c in s:\n        if c == '(':\n            stack.append(c)\n        elif stack and stack[-1] == '(':\n            stack.pop()\n        else:\n            stack.append(c)\n    return not stack\n\ndef solve(n, s):\n    ans = 0\n    for i in range(n):\n        if s[i] == '(':\n            s_new = s[:i] + ')' + s[i+1:]\n        else:\n            s_new = s[:i] + '(' + s[i+1:]\n        if is_regular(s_new):\n            ans += 1\n    return ans\n\nif __name__ == '__main__':\n    input = sys.stdin.readline\n    n = int(input().strip())\n    s = input().strip()\n    print(solve(n, s))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "def base_2_representation(N):\n    if N == 0:\n        return \"0\"\n    result = \"\"\n    is_negative = N < 0\n    if is_negative:\n        N = -N\n    while N != 0:\n        rem = N % (-2)\n        if rem < 0:\n            rem += 2\n            N += 1\n        result += str(rem)\n        N //= -2\n    if is_negative:\n        result = \"-\" + result[1:]\n    return result[::-1]\n\nN = int(input())\nprint(base_2_representation(N))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "import sys\nfrom collections import Counter\n\n# Read input\nN = int(input())\ndifficulties = list(map(int, input().split()))\n\n# Count the number of problems with difficulty greater than i\ncounts = [0] * (max(difficulties) + 1)\nfor diff in difficulties:\n    counts[diff] += 1\n\n# Calculate the answer\nans = 0\nfor i in range(1, len(counts)):\n    if counts[i] == counts[0] + i - 1:\n        ans += 1\n    elif counts[i] > counts[0] + i - 1:\n        break\n\nprint(ans)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "# Read the input values\nA, B = map(int, input().split())\nB = float(f\"0.{B}\") # Convert B to a number with two digits after the decimal point\n\n# Compute A * B and truncate its fractional part\nresult = int(A * B)\n\n# Print the result as an integer\nprint(result)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "def generate_brainfuck(expression):\n    def char_to_bf(c):\n        if c == '>':\n            return '>'\n        elif c == '<':\n            return '<'\n        elif c == '+':\n            return '+'\n        elif c == '-':\n            return '-'\n        elif c == '[':\n            return '['\n        elif c == ']':\n            return ']'\n\n    def eval_expr(expr):\n        stack = []\n        for token in expr.split():\n            if token.isdigit():\n                stack.append(int(token))\n            elif token in ('+', '-'):\n                b = stack.pop()\n                a = stack[-1]\n                if token == '+':\n                    stack[-1] = a + b\n                else:\n                    stack[-1] = a - b\n        return stack[0]\n\n    expr_bytes = [eval_expr(expression)]\n    bf_program = ''.join(char_to_bf(c) for c in expr_bytes[0])\n    bf_program += '>.<[->+<]>.'\n\n    return bf_program\n\n\n# Test cases\nprint(generate_brainfuck('2 + 3'))\nprint(generate_brainfuck('9 - 7'))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "def check_bingo(bingo_card, chosen_numbers):\n    # Transpose the bingo card to check columns\n    transposed_card = list(zip(*bingo_card))\n\n    # Check rows and columns\n    for row in bingo_card:\n        if set(row) & set(chosen_numbers) == {1, 2}:\n            return True\n\n    for col in transposed_card:\n        if set(col) & set(chosen_numbers) == {1, 2}:\n            return True\n\n    # Check diagonals\n    if set(bingo_card[i][i] for i in range(3)) & set(chosen_numbers) == {1, 2}:\n        return True\n\n    if set(bingo_card[i][2 - i] for i in range(3)) & set(chosen_numbers) == {1, 2}:\n        return True\n\n    return False\n\ndef main():\n    bingo_card = []\n    for _ in range(3):\n        bingo_card.append(list(map(int, input().split())))\n\n    N = int(input())\n    chosen_numbers = set(map(int, input().split()))\n\n    for _ in range(N):\n        num = int(input())\n        chosen_numbers.add(num)\n        if check_bingo(bingo_card, {2}):\n            print(\"Yes\")\n            return\n\n    print(\"No\")\n\nif __name__ == \"__main__\":\n    main()", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "import sys\ninput = sys.stdin.readline\n\ndef segTreeInit(node, segStart, segEnd):\n    if segStart == segEnd:\n        tree[node] = [a[segStart], a[segStart]]\n        return a[segStart]\n\n    mid = (segStart + segEnd) // 2\n    leftVal = segTreeInit(node * 2, segStart, mid)\n    rightVal = segTreeInit(node * 2 + 1, mid + 1, segEnd)\n\n    tree[node] = [max(leftVal, rightVal), min(leftVal, rightVal)]\n    return max(leftVal, rightVal)\n\ndef segTreeUpdate(node, segStart, segEnd, idx, val):\n    if segStart > idx or segEnd < idx:\n        return tree[node]\n\n    if segStart == segEnd:\n        tree[node][0] -= val\n        tree[node][1] -= val\n        return tree[node]\n\n    mid = (segStart + segEnd) // 2\n    leftVal = segTreeUpdate(node * 2, segStart, mid, idx, val)\n    rightVal = segTreeUpdate(node * 2 + 1, mid + 1, segEnd, idx, val)\n\n    tree[node] = [max(leftVal[0], rightVal[0]), min(leftVal[1], rightVal[1])]\n    return tree[node]\n\ndef segTreeQuery(node, segStart, segEnd, left, right):\n    if segStart > right or segEnd < left:\n        return [-10**6, 10**6]\n\n    if segStart >= left and segEnd <= right:\n        return tree[node]\n\n    mid = (segStart + segEnd) // 2\n    leftVal = segTreeQuery(node * 2, segStart, mid, left, right)\n    rightVal =", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "n, m = map(int, input().split())\nexams = []\nfor i in range(m):\n    s, d, c = map(int, input().split())\n    exams.append((s, d, c, i))\n\nexams.sort(key=lambda x: x[1])\nschedule = [0]*n\nprep = [-1]*m\n\nfor i in range(m):\n    s, d, c, e = exams[i]\n    if d - s < c:\n        print(-1)\n        exit()\n    for j in range(s-1, d):\n        if schedule[j] == 0:\n            schedule[j] = e + 1\n            prep[e] = j\n            c -= 1\n            if c == 0:\n                break\n    if c > 0:\n        print(-1)\n        exit()\n\nprint(*schedule)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "from sys import stdin, stdout\n\ndef construct_tree(n, d, k):\n    if (d % 2 == 0 or d < 2 or n % 2 == 0 or (n - 1) % 2 == 0 or k < (d // 2) or k >= n - 1):\n        print(\"NO\")\n        return\n\n    print(\"YES\")\n    mid = d // 2 + 1\n    print(mid, 1)\n\n    curr = 1\n    for i in range(2, mid):\n        print(i, curr)\n        if i == n - mid:\n            curr = i\n\n    for i in range(n - mid + 1, n):\n        print(i, curr)\n\ndef main():\n    line = stdin.readline().strip().split()\n    n, d, k = [int(x) for x in line]\n    construct_tree(n, d, k)\n\nif __name__ == \"__main__\":\n    main()", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "def apply_operations(n, operations):\n    result = set()\n    result.add(n)\n    for op in operations:\n        for r in result:\n            result.add(op(r))\n    return result\n\ndef aqua_fortis(n):\n    return n * 2\n\ndef aqua_regia(n):\n    return n * 3\n\ndef amalgama(n):\n    return (n - 1) ** 2\n\ndef minium(n):\n    return 5 * n + 1\n\ndef vitriol(n):\n    return 4 * n + 2\n\ndef philospher_stone(a):\n    operations = [aqua_fortis, aqua_regia, amalgama, minium, vitriol]\n    candidates = apply_operations(1, operations)\n    for num in a:\n        candidates = apply_operations(num, operations)\n    for i in range(2, max(candidates) + 1):\n        if i not in candidates:\n            return i\n\n# Read input\ninput_str = input().strip()\ninput_nums = [int(x) for x in input_str", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "def max\\_abs\\_sum(n, m):\nif n == 1:\nreturn 0\nelse:\nreturn max(m - n, n - 1)\n\nt = int(input().strip())\nfor _ in range(t):\nn, m = map(int, input().strip().split())\nprint(max\\_abs\\_sum(n, m))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "import sys\ninput = sys.stdin.readline\n\nMOD = 998244353\n\ndef power(x, y):\n    res = 1\n    while y > 0:\n        if y % 2:\n            res = (res * x) % MOD\n            y -= 1\n        x = (x * x) % MOD\n        y //= 2\n    return res\n\ndef solve():\n    n = int(input().strip())\n    a = list(map(int, input().strip().split()))\n\n    last = a[0]\n    count = 1\n    for i in range(1, n):\n        if a[i] == last:\n            count += 1\n        else:\n            last = a[i]\n            count = 1\n        a[i] = count - 1\n\n    dp = [0] * n\n    dp[0] = 1\n    for i in range(1, n):\n        if a[i] == a[i - 1]:\n            dp[i] = dp[i - 1]\n        else:\n            dp[i] = (dp[i - 1] + dp[i - 2]) % MOD\n\n    ans = dp[-1]\n    if a[-1] != a[-2]:\n        ans = (ans + dp[-2]) % MOD\n\n    print(ans)\n\nsolve()", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "def min_changes_to_make_arithmetic_progression(n, b):\n    # If the length of the sequence is less than 2, it is already an arithmetic progression\n    if n < 2:\n        return 0\n\n    # Calculate the difference between consecutive elements\n    diffs = [b[i+1] - b[i] for i in range(n-1)]\n\n    # If the differences are not equal, we need to make at least one change\n    if len(set(diffs)) > 1:\n        return 1\n\n    # If the first difference is 0, we cannot make the sequence an arithmetic progression\n    if diffs[0] == 0:\n        return -1\n\n    # If the first difference is not 0, we can make the sequence an arithmetic progression by changing the first element\n    return 1\n\n# Read the input\nn = int(input())\nb = list(map(int, input().split()))\n\n# Calculate the minimum number of changes needed\nmin_changes = min_changes_to_make_arithmetic_progression(n, b)\n\n# Print the result\nprint(min_changes)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\n# Calculate the minimum and maximum number of rounds Alice can win\nmin_alice_wins = max(a[i] - b[2] for i in range(3))\nmax_alice_wins = sum(min(a[i], b[i-1]) for i in range(1,4))\n\n# Print the result\nprint(min_alice_wins, max_alice_wins)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "def calculate_sequence_length(n: int) -> int:\n    # Calculate the length of the repeating sequence of digits\n    length = 0\n    current = 1\n    while current <= n:\n        length += 1\n        current *= 10\n    for digit in range(2, 10):\n        current = 0\n        for _ in range(digit):\n            current += 10 ** length\n        length *= digit\n    return length\n\ndef main():\n    string, k = input().split()\n    k = int(k)\n\n    sequence_length = calculate_sequence_length(9)\n    sequence_index = (5 * 10 ** 15) % sequence_length\n\n    # Calculate the K-th character in the sequence\n    character_index = k % sequence_length\n    current_index = sequence_index\n    current_char = \"1\"\n    for _ in range(character_index):\n        current_index = (current_index + 1) % sequence_length\n        if current_index == 0:\n            current_char = \"1\"\n        else:\n            current_digit = current_index % 10\n            current_char = str(current_digit) * current_index\n\n    print(current_char)\n\nif __name__ == \"__main__\":\n    main()", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    inc = [1] * n\n    dec = [1] * n\n    for i in range(1, n):\n        if a[i] > a[i - 1]:\n            inc[i] = inc[i - 1] + 1\n    for i in range(n - 2, -1, -1):\n        if a[i] < a[i + 1]:\n            dec[i] = dec[i + 1] + 1\n    ans = max(inc[i] + dec[i] - 1 for i in range(n))\n    res = ['?'] * ans\n    i = j = 0\n    for k in range(ans):\n        if i < n and (j == n or inc[i] > dec[j]):\n            res[k] = 'L'\n            i += 1\n        else:\n            res[k] = 'R'\n            j += 1\n    print(ans)\n    print(''.join(res))\n\nt = int(input())\nfor _ in range(t):\n    solve()", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "n = int(input())\npref_suff = [input() for _ in range(2*n-2)]\n\n# Initialize an array to keep track of whether a substring is a prefix or a suffix\nprefix = ['?' for _ in range(n)]\nsuffix = ['?' for _ in range(n)]\n\n# Initialize an array to keep track of the length of the longest common prefix and suffix\nlcp = [0 for _ in range(n)]\nlcs = [0 for _ in range(n)]\n\n# Set the length of the longest common prefix and suffix for the empty string\nlcp[0] = lcs[0] = -1\n\n# Calculate the length of the longest common prefix and suffix for each substring\nfor i in range(1, n):\n    for j in range(i):\n        if pref_suff[i-1][:j+1] == pref_suff[i-1-j][:j+1]:\n            lcp[i] = j+1\n            break\n\n    for j in range(1, i+1):\n        if pref_suff[i-1][-j:] == pref_suff[2*n-2-i+j][-j:]:\n            lcs[i] = j\n            break\n\n# Set the prefix and suffix for each substring based on the length of the longest common prefix and suffix\nfor i in range(1, n):\n    if lcp[i] == i:\n        for j in range(i):\n            prefix[j] = 'P'\n            suffix[2*n-2-j] = 'S'\n    if lcs[i] == i:\n        for j in range(i):\n            prefix[j] = 'S'\n            suffix[2*n-2-j] = 'P'\n\n# If there are any '?' left in the prefix and suffix arrays, set them to 'P' or 'S' based on the remaining substrings\nfor i in range(n):\n    if prefix[i] == '?':\n        for j in range(2*n-2):\n            if pref_suff[j][i:", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "import sys\nfrom collections import defaultdict\n\ndef min_moves():\n    N, M = map(int, input().split())\n    X = list(map(int, input().split()))\n    pos = defaultdict(int)\n    for x in X:\n        pos[x] += 1\n    cur, moves = max(X), 0\n    while pos:\n        if cur not in pos:\n            cur = 1 if cur == max(pos) else -1\n        else:\n            moves += abs(cur - list(pos.keys())[0])\n            pos[cur] -= 1\n            if pos[cur] == 0:\n                del pos[cur]\n        cur += cur\n    print(moves)\n\nif __name__ == \"__main__\":\n    min_moves()", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\n\ndp = [1] + [0]*n\nfor i in range(1, n):\n    for j in range(i):\n        if a[i] > a[j]*2:\n            dp[i] = max(dp[i], dp[j]+1)\n\nprint(max(dp))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "def find_golorp_diet(golorp_name: str) -> str:\n    stack = []\n    operations = {'<': lambda x: x[::-1],\n                  '>': lambda x: x,\n                  '/': lambda x: x[::-2],\n                  '_': lambda x: x,\n                  '*': max,\n                  '+': sum,\n                  '-': lambda x: (sum(x) - min(x)) // 2}\n\n    for char in golorp_name:\n        if char.isdigit():\n            stack.append(int(char))\n        elif char in operations:\n            second_operand = stack.pop()\n            first_operand = stack.pop()\n            stack.append(operations[char]([first_operand, second_operand]))\n\n    if not stack or stack[-1] != 0:\n        return \"false\"\n    else:\n        stack.pop()\n        return ''.join(map(str, sorted(stack)))\n\n# Test cases\nprint(find_golorp_diet('?(-_/)*:-<.'))  # 0010\nprint(find_golorp_diet('?(__-_+_/*):-__>__,_____<__.'))  # false\nprint(find_golorp_diet('?(______________________/*-_-_*--):-<___,<____,<_____,<______,<_______.'))  # 0250341\nprint(find_golorp_diet('?(__+___+__-___):-__>__.'))  # 0101", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "n, k = map(int, input().split())\ns = input()\n\n# Calculate the number of occurrences of each character in the string\nchar_counts = {c: s.count(c) for c in set(s)}\n\n# If the number of characters is less than the desired set size, it's impossible\nif len(char_counts) < k:\n    print(-1)\n    exit()\n\n# Calculate the minimum cost to include each character in the set\ncosts = [n - char_count for char_count in char_counts.values()]\ncost = sum(costs[:k])\n\n# Try to reduce the cost by removing extra occurrences of characters\nfor i in range(k, len(char_counts)):\n    cost = min(cost, cost + costs[i] - (costs[i] - costs[i-k]))\n\nprint(cost)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "n = int(input())\nsegments = []\nfor i in range(n):\n    l, r = map(int, input().split())", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "def solve():\n    n = int(input())\n    words = input().split()\n    if n == 1:\n        print(len(words[0]))\n        return\n\n    # Find all pairs of equal segments\n    pairs = []\n    for i in range(n - 1):\n        for j in range(i + 2, n - 1):\n            if ' '.join(words[i:j+1]) == ' '.join(words[n-j+i-1:n+i]):\n                pairs.append((i, j))\n\n    # If there are no equal segments, just output the length of the text\n    if not pairs:\n        print(len(' '.join(words)))\n        return\n\n    # Sort pairs by length and take the first one\n    pairs.sort(key=lambda x: x[1] - x[0])\n    i, j = pairs[0]\n\n    # Create the new text by replacing the first segment with its abbreviation\n    new_words = words[:i] + [words[i][0].upper() + words[i+1][0].upper() + ''] + words[j+1:]\n    print(len(' '.join(new_words)))\n\nsolve()", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "def max\\_divisible\\_by\\_three(s):\nn = len(s)\n# Initialize the result to zero\nresult = 0\n# Keep track of the current number and its length\ncurrent\\_num = \"\"\ncurrent\\_len = 0\n\nfor i in range(n):\n# Get the current digit\ndigit = int(s[i])\n# If the current number is divisible by three, increase the result\nif (current\\_len > 0 and (current\\_num + str(digit)) % 3 == 0):\nresult += 1\n# If the current number is not divisible by three, reset it\nelif (current\\_len > 0 and (current\\_num + str(digit)) % 3 != 0):\ncurrent\\_num = str(digit)\ncurrent\\_len = 1\n# If the current number is empty, start a new one with the current digit\nelse:\ncurrent\\_num = str(digit)\ncurrent\\_len = 1\n# If the current number has length three and is divisible by three, increase the result\nif (current\\_len == 3 and (current\\_num) % 3 == 0):\nresult += 1\ncurrent\\_num = \"\"\ncurrent\\_len = 0\n\n# If the last number has length one or two, add it to the result if it is divisible by three\nif (current\\_len == 1 and int(current\\_num) % 3 == 0):\nresult += 1\nelif (current\\_len == 2 and int(current\\_num) % 3 == 0):\nresult += 2\n\nreturn result\n\n# Test the function with the given examples\nprint(max\\_divisible\\_by\\_three(\"3121\")) # 2\nprint(max\\_divisible\\_by\\_three(\"6\")) # 1\nprint(max\\_divisible\\_by\\_three(\"1000000000000000000000000000000000\")) # 33\nprint(max\\_divisible\\_by\\_three(\"201920181\")) # 4", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "facts = {\n    1: 8848,\n    2: 958,\n    3: 12766,\n    4: 6695,\n    5: 1100,\n    6: 807,\n    7: 31962,\n    8: 238,\n    9: 25,\n    10: 134,\n    11: 10000,\n    12: 154103,\n    13: 1642,\n    14: 106,\n    15: 663268,\n    16: 665000\n}\n\n# Read input\nn = int(input())\n\n# Output the corresponding fact or 0 if not found\nprint(facts.get(n, 0))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "# Read the input value\nX = int(input())\n\n# Initialize the balance and the year\nbalance = 100\nyear = 0\n\n# Calculate the number of years it takes for the balance to reach X or above\nwhile balance < X:\n    balance += balance * 0.01  # Add interest\n    year += 1                 # Increase the year\n\n# Print the result\nprint(year)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "import math\n\ndef main():\n    # Read input\n    d, t, s = map(int, input().split())\n\n    # Calculate time needed to reach the place\n    time_needed = d / s\n\n    # Check if Takahashi will arrive in time\n    if time_needed <= t:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nif __name__ == \"__main__\":\n    main()", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "def max_remove(s, t):\n    # Initialize result as 0\n    res = 0\n\n    # Initialize j as 0\n    j = 0\n\n    # Traverse string s\n    for i in range(len(s)):\n\n        # If current character of s matches with\n        # current character of t, increment j\n        if j < len(t) and s[i] == t[j]:\n            j += 1\n\n        # Keep removing characters from s while\n        # t[j] can still be obtained from s[i..]\n        while j < len(t) and i + res + 1 < len(s) and s[i + res + 1] != t[j]:\n            res += 1\n\n    # Return the result\n    return res\n\n# Test the function\ns = \"bbaba\"\nt = \"bb\"\nprint(max_remove(s, t))  # Output: 3\n\ns = \"baaba\"\nt = \"ab\"\nprint(max_remove(s, t))  # Output: 2\n\ns = \"abcde\"\nt = \"abcde\"\nprint(max_remove(s, t))  # Output: 0\n\ns = \"asdfasdf\"\nt = \"fasd\"\nprint(max_remove(s, t))  # Output: 3", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "import sys\nfrom collections import defaultdict\n\ndef solve():\n    n = int(input().strip())\n    edges = defaultdict(list)\n    for i in range(n-1):\n        a, b = map(int, input().strip().split())\n        edges[a].append(b)\n        edges[b].append(a)\n\n    # Perform a depth-first search from node 1\n    visited = set()\n    stack = [1]\n    parent = {1: None}\n    while stack:\n        node = stack.pop()\n        visited.add(node)\n        for neighbor in edges[node]:\n            if neighbor not in visited:\n                parent[neighbor] = node\n                stack.append(neighbor)\n\n    # Find the leaf node that is farthest from node 1\n    leaf = max(set(range(1, n+1)) - set(parent.keys()), key=lambda x: depth(x))\n    # Find the nearest common ancestor of nodes leaf and n\n    ancestor = ancestor(leaf, n)\n\n    print(depth(leaf) + depth(n) + 1)\n    print(1, n, ancestor)\n\ndef depth(node, current_depth=0, parent=None):\n    if parent is None:\n        parent = 1\n    for neighbor in edges[node]:\n        if neighbor != parent:\n            return 1 + depth(neighbor, current_depth+1, node)\n    return current_depth\n\ndef ancestor(node1, node2):\n    while node1 != node2:\n        if depth(node1) > depth(node2):\n            node1 = parent[node1]\n        else:\n            node2 = parent[node2]\n    return node1\n\nsolve()", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "def max\\_divisible\\_sum(n, m, k, a):\n    # Initialize the maximum sum and current sum\n    max\\_sum = 0\n    current\\_sum = 0\n\n    # Iterate over each row\n    for i in range(n):\n        # Sort the row in non-decreasing order\n        a[i] = sorted(a[i])\n\n        # Initialize the left and right pointers\n        left = 0\n        right = m - 1\n\n        # Iterate until left is less than or equal to right\n        while left <= right:\n            # Calculate the middle index and element\n            mid = (left + right) // 2\n            mid\\_elem = a[i][mid]\n\n            # If the middle element is not divisible by k,\n            # increment the current sum by the largest possible value\n            if mid\\_elem % k != 0:\n                current\\_sum += mid\\_elem + (m - mid - 1) // 2 \\* k\n                right = mid - 1\n            else:\n                # Otherwise, check if adding the middle element to the current sum\n                # would yield a sum divisible by k\n                if (current\\_sum + mid\\_elem) % k == 0:\n                    # If so, we can add the middle element to the current sum\n                    # and continue searching to the left\n                    current\\_sum += mid\\_elem\n                    right = mid - 1\n                else:\n                    # If not, we cannot add the middle element to the current sum,\n                    # so we continue searching to the right\n                    left = mid + 1\n\n        # Update the maximum sum if the current sum is greater\n        max\\_sum = max(max\\_sum, current\\_sum)\n\n        # Reset the current sum to zero for the next row\n        current\\_sum = 0\n\n    return max\\_sum\n\nn, m, k = map(int, input().split())\na = []\nfor _ in range(n):\n    a.append(list(map(int, input().split())))\n\nprint(max\\_divisible\\_sum(n", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "import math\n\ndef gcd(a, b):\n    return math.gcd(a, b)\n\nn = int(input().strip())\na = list(map(int, input().strip().split()))\n\nresult = 1\nfor i in range(1, min(a) + 1):\n    if all(i % x == 0 for x in a):\n        result += 1\n\nprint(result)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
