{"code": "def max_grade(n, t, grade):\n    # Convert the grade to a string to make it easier to modify\n    grade = str(grade)\n    \n    # Split the grade into the integer part and the decimal part\n    integer_part = grade.split('.')[0]\n    decimal_part = grade.split('.')[1]\n    \n    # If the grade is already an integer, return it as it is the maximum\n    if len(decimal_part) == 0:\n        return int(integer_part)\n    \n    # If t is greater than the number of decimal places, round to the nearest integer\n    if t >= len(decimal_part):\n        return round(float(grade))\n    \n    # If t is less than the number of decimal places, round to the t-th decimal place\n    rounded_decimal_part = decimal_part[:t]\n    next_digit = int(decimal_part[t])\n    \n    # If the next digit is less than 5, keep the current decimal part\n    if next_digit < 5:\n        return float(integer_part + '.' + rounded_decimal_part)\n    \n    # If the next digit is greater than or equal to 5, round up\n    rounded_decimal_part = str(int(rounded_decimal_part) + 1)\n    return float(integer_part + '.' + rounded_decimal_part)\n\n# Input the values of n, t, and grade\nn, t = map(int, input().split())\ngrade = input()\n\n# Call the max_grade function and print the result\nprint(max_grade(n, t, grade))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "def find_winner(n, cards):\n    cards.sort()\n    conan_turn = True\n    while cards:\n        if conan_turn:\n            cards.pop()\n            if cards and cards[-1] < cards[-2]:\n                cards.pop()\n        else:\n            if len(cards) == 1:\n                return \"Agasa\"\n            cards.pop()\n        conan_turn = not conan_turn\n    return \"Conan\"\n\nn = int(input())\ncards = list(map(int, input().split()))\n\nwinner = find_winner(n, cards)\nprint(winner)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "# Input\nb = int(input())\ng = int(input())\nn = int(input())\n\n# Calculate the minimum number of decks\nmin_decks = n + 1 - min(b, g)\n\n# Output\nprint(min_decks)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "def solve(S):\n    n = len(S)\n    cnt = [0] * 3\n    for i in range(n):\n        cnt[ord(S[i]) - ord('A')] += 1\n    res = (cnt[0] * cnt[1] + cnt[0] * cnt[2] + cnt[1] * cnt[2]) % (10**9 + 7)\n    for i in range(n - 1):\n        cnt[ord(S[i]) - ord('A')] -= 1\n        if S[i] != S[i + 1]:\n            res += (cnt[0] * cnt[1] + cnt[0] * cnt[2] + cnt[1] * cnt[2]) % (10**9 + 7)\n    return res % (10**9 + 7)\n\n\nif __name__ == '__main__':\n    N = int(input())\n    S = input()\n    print(solve(S))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "n, k =map(int, input().split())\n\ndp = []\nk += 1\nfor j in range(k):\n    dp.append([0] * k)\n\ndp[0][0]=1\nc = list(map(int, input().split()))\nc = sorted(c)\nfor i in range(n):\n    for j in range(k-1, c[i]-1, -1):\n        for t in range(j+1):\n            if t>=c[i] and dp[j-c[i]][t-c[i]] > 0:\n                dp[j][t] = 1\n            if dp[j-c[i]][t] > 0:\n                dp[j][t] = 1\n    if sum(dp[k-1]) == k:\n        break\nprint(sum(dp[k-1]))\nfor i in range(k):\n    if dp[k-1][i]:\n        print(i)", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "#Input\nn = int(input())\narr = list(map(int, input().split()))\n\n#Function to find GCD of two numbers\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\n#Function to find GCD of all integers in an array\ndef array_gcd(arr):\n    result = arr[0]\n    for i in range(1, len(arr)):\n        result = gcd(result, arr[i])\n    return result\n\n#Initializing the answer array\nanswer = [0] * n\n\n#If GCD of all integers is 1, it is not possible to split the array\nif array_gcd(arr) == 1:\n    print(\"NO\")\n\n#Otherwise, we can split the array\nelse:\n    print(\"YES\")\n\n    #Initializing two groups\n    group1 = []\n    group2 = []\n\n    #Finding the GCD of all pairs of integers in the array\n    for i in range(n):\n        for j in range(i + 1, n):\n            g = gcd(arr[i], arr[j])\n            if g == 1:\n                group1.append(i)\n                group2.append(j)\n\n    #Assigning integers to groups\n    for i in range(n):\n        if i in group1:\n            answer[i] = 1\n        else:\n            answer[i] = 2\n\n    #Printing the answer\n    for x in answer:\n        print(x, end=\" \")", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "import sys\ninput = sys.stdin.readline\nN = int(input())\nA = list(map(int,input().split()))\nB = [int(input()) for i in range(N-1)]\n\ndef mex(x,y):\n    if x+y==1: return 2\n    if x==0 or y==0: return 1\n    return 0\n\nn = min(4,N)\narr = [[-1]*n for _ in range(n)]\nfor i,a in enumerate(A):\n    if i>=4: break\n    arr[0][i] = a\nfor i,b in enumerate(B):\n    if i+1>=4: break\n    arr[i+1][0] = b\nfor i in range(1,n):\n    for j in range(1,n):\n        arr[i][j] = mex(arr[i-1][j], arr[i][j-1])\n\nfrom collections import Counter\nctr = Counter()\nfor i in range(n):\n    for j in range(n):\n        ctr[arr[i][j]] += 1\nif N <= 4:\n    print(ctr[0], ctr[1], ctr[2])\n    return\n\narrtop = [[-1]*(N-3) for _ in range(4)]\nfor i in range(4):\n    arrtop[i][0] = arr[i][-1]\nfor j in range(4,N):\n    arrtop[0][j-3] = A[j]\nfor i in range(1,4):\n    for j in range(1,N-3):\n        arrtop[i][j] = mex(arrtop[i-1][j], arrtop[i][j-1])\nfor i in range(4):\n    for j in range(1,N-3):\n        ctr[arrtop[i][j]] += (1 if i<3 else N-3-j)\n\narrleft = [[-1]*4 for _ in range(N-3)]\nfor j in range(4):\n    arrleft[0][j] = arr[-1][j]\nfor i in range(4,N):\n    arrleft[i-3][0] = B[i-1]\nfor i in range(1,N-3):\n    for j in range(1,4):\n        arrleft[i][j] = mex(arrleft[i-1][j], arrleft[i][j-1])\nfor i in range(1,N-3):\n    for j in range(4):\n        ctr[arrleft[i][j]] += (1 if j<3 else N-3-i)\n\nctr[arr[-1][-1]] += N-4\nprint(ctr[0], ctr[1], ctr[2])", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "# Read the input\np, k = map(int, input().split())\n\n# Check if the polynomial exists\nif p >= k:\n    print(-1)\n    exit(0)\n\n# Find the coefficients\ndegree = 0\ncoefficients = []\nwhile p > 0:\n    coefficient = p % k\n    coefficients.append(coefficient)\n    p = (p - coefficient) // k\n    degree += 1\n\n# Output the result\nprint(degree)\nprint(\" \".join(map(str, coefficients[::-1])))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "# Read the input strings\ns1 = input()\ns2 = input()\nvirus = input()\n\n# Initialize a 2D array to store the lengths of common subsequences\ndp = [[0 for _ in range(len(s2) + 1)] for _ in range(len(s1) + 1)]\n\n# Fill the dp array using dynamic programming\nfor i in range(1, len(s1) + 1):\n    for j in range(1, len(s2) + 1):\n        if s1[i - 1] == s2[j - 1]:\n            # If the current characters match, increase the length of the subsequence\n            dp[i][j] = dp[i - 1][j - 1] + 1\n        else:\n            # If the current characters don't match, take the maximum of the lengths of the subsequences ending at the previous characters of both strings\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n# Initialize the result string to an empty string\nresult = \"\"\n\n# Start from the bottom-right corner of the dp array and trace back to find the longest common subsequence\ni = len(s1)\nj = len(s2)\n\nwhile i > 0 and j > 0:\n    # If the characters at the current positions match\n    if s1[i - 1] == s2[j - 1]:\n        # Append the character to the result and move diagonally up-left\n        result = s1[i - 1] + result\n        i -= 1\n        j -= 1\n    # If the characters at the current positions don't match\n    else:\n        # Move to the position with the larger subsequence length\n        if dp[i - 1][j] > dp[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n\n# Check if the result contains the virus substring\nif virus in result:\n    # If it does, print 0\n    print(0", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "def gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n\ndef get_polynomials(n):\n    if n < 1:\n        return -1\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            for k in range(1, n + 1):\n                A = [1] + [0] * (i - 1) + [k]\n                B = [1] + [0] * (j - 1)\n                steps = 0\n                while True:\n                    steps += 1\n                    if steps > n:\n                        break\n                    R = [x % 2 for x in A]\n                    while R and R[-1] == 0:\n                        R.pop()\n                    if not R:\n                        break\n                    A = B\n                    B = R\n                if steps == n:\n                    return A, B\n    return -1\n\ndef main():\n    n = int(input())\n    result = get_polynomials(n)\n    if result == -1:\n        print(-1)\n    else:\n        A, B = result\n        print(len(A) - 1)\n        print(*A)\n        print(len(B) - 1)\n        print(*B)\n\nif __name__ == '__main__':\n    main()", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "def gcd(a,b):\n\n    if b==0:\n\n        return a\n\n    else:\n\n        return gcd(b, a%b)\n\n    \n\ndef solve(x, y, a, b):\n\n    ans=\"\"\n\n    while not x==1 or not y==1:\n\n        if x < y:\n\n            x,y,a,b=y,x,b,a\n\n        ans+=str((x-1)//y)+a\n\n        x = x - (x-1)//y * y\n\n    print (ans)\n\n    \n\nx,y=list(map(int, input().split()))\n\nif gcd(x,y)>1:\n\n    print (\"Impossible\")\n\nelse:\n\n    solve(x,y, \"A\", \"B\")\n\n\n\n# Made By Mostafa_Khaled\n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "#!/usr/bin/env python3\n\nimport sys\n\ndef solve(n, m, k, flights):\n    dp = [[0 for _ in range(k)] for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(k):\n            min_cost = sys.maxsize\n            for flight in flights:\n                if flight[1] == i and flight[0] + j < k and dp[flight[2]][flight[0] + j] + flight[3] < min_cost:\n                    min_cost = dp[flight[2]][flight[0] + j] + flight[3]\n            dp[i][j] = min_cost\n\n    min_cost = sys.maxsize\n    for i in range(n + 1):\n        if dp[i][k - 1] < min_cost:\n            min_cost = dp[i][k - 1]\n\n    return -1 if min_cost == sys.maxsize else min_cost\n\nif __name__ == '__main__':\n    n, m, k = map(int, input().split())\n    flights = []\n    for _ in range(m):\n        d, f, t, c = map(int, input().split())\n        flights.append((d, f, t, c))\n\n    cost = solve(n, m, k, flights)\n    print(cost)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "from math import factorial\n\ndef combination(n, r):\n    if n < r:\n        return 0\n    return factorial(n) // factorial(r) // factorial(n-r)\n\ndef expected_length(N, A):\n    ans = 0\n    for k in range(1, N+1):\n        cnt = 0\n        for i in range(1, k+1):\n            cnt += combination(k, i)\n        for i in range(k+1, N+1):\n            cnt += combination(i-1, k)\n        ans += k * cnt\n    return ans\n\ndef main():\n    N = int(input())\n    A = list(map(int, input().split()))\n    ans = expected_length(N, A)\n    ans = ans % 1000000007\n    print(ans)\n\nif __name__ == '__main__':\n    main()", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "import sys\nfrom itertools import combinations\n\n# Define the number of students, number of students in the programming team, and number of students in the sports team\nn, p, s = map(int, input().split())\n\n# Define the programming skills and sports skills for each student\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\n# Define the maximum strength of the university and the teams\nmax_strength = -1\nmax_prog_team = []\nmax_sports_team = []\n\n# Iterate through all possible combinations of students for the programming team and the sports team\nfor prog_team in combinations(range(1, n + 1), p):\n    for sports_team in combinations(set(range(1, n + 1)) - set(prog_team), s):\n        # Calculate the strength of the programming team and the sports team\n        prog_strength = sum(a[i - 1] for i in prog_team)\n        sports_strength = sum(b[i - 1] for i in sports_team)\n\n        # Check if the current combination has the maximum strength\n        if prog_strength + sports_strength > max_strength:\n            max_strength = prog_strength + sports_strength\n            max_prog_team = prog_team\n            max_sports_team = sports_team\n\n# Print the maximum strength of the university and the teams\nprint(max_strength)\nprint(*max_prog_team)\nprint(*max_sports_team)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "n = int(input())\nseq = list(map(int, input().split(\" \")))\n\nif sum(seq) < 3 or sum(seq) == 5:\n\tprint(-1)\n\nelse:\n\tarr = [0,0,0,0,0]\n\tfor s in seq:\n\t\tarr[s] += 1\n\t#print(arr)\n\t\n\tans = 0\n\tif arr[2] >= arr[1]:\n\t\tans += arr[1]\n\t\tarr[2] -= arr[1]\n\t\tarr[3] += arr[1]\n\t\tarr[1] = 0\n\telse:\n\t\tans += arr[2]\n\t\tarr[1] -= arr[2]\n\t\tarr[3] += arr[2]\n\t\tarr[2] = 0\n\t#print(arr, ans)\n\t\n\n\tans += 2*(arr[1]//3)\n\tarr[3] += arr[1]//3\n\tarr[1] %= 3\n\t#print(arr, ans)\n\t\n\tif (arr[3] >= arr[1]):\n\t\tans += arr[1]\n\t\tarr[4] += arr[1]\n\t\tarr[3] -= arr[1]\n\t\tarr[1] = 0\n\telse:\n\t\tif arr[1] < 2:\n\t\t\tans += arr[3]\n\t\t\tarr[4] += arr[3]\n\t\t\tarr[1] -= arr[3]\n\t\t\tarr[3] = 0\n\t#print(arr, ans)\n\t\n\tif arr[1] > 0:\n\t\tif arr[1] == 2:\n\t\t\tans += arr[1]\n\t\t\tarr[4] -= 1\n\t\t\tarr[3] += 2\n\t\t\tarr[1] = 0\n\t\telse:\n\t\t\tans += 2\n\t\t\tarr[4] -= 2\n\t\t\tarr[3] += 2\n\t\t\tarr[1] = 0\n\t\n\tans += 2*(arr[2]//3)\n\tarr[3] += 2*(arr[2]//3)\n\tarr[2] %= 3\n\t#print(arr, ans)\n\t\n\tif arr[2] > 0:\n\t\tif (arr[4] >= arr[2]):\n\t\t\tans += arr[2]\n\t\t\tarr[4] -= arr[2]\n\t\t\tarr[3] += 2*arr[2]\n\t\t\tarr[2] = 0\n\t\t\t#print(arr, ans)\n\t\t\t\n\t\t\tans += 2*(arr[2])\n\t\t\tarr[4] += 2*arr[2]\n\t\t\tarr[3] -= arr[2]\n\t\t\tarr[2] = 0\n\t\t\t#print(arr, ans)\n\t\telse:\n\t\t\tif (arr[4] > 0):\n\t\t\t\tans += arr[2]\n\t\t\t\tarr[4] -= arr[2]\n\t\t\t\tarr[3] += 2*arr[2]\n\t\t\t\tarr[2] = 0\n\t\t\t\t#print(arr, ans)\n\t\t\telse:\n\t\t\t\tif arr[2] == 1:\n\t\t\t\t\tans += 2*arr[2]\n\t\t\t\t\tarr[3] += 2\n\t\t\t\t\tarr[2] = 0\n\t\t\t\telse:\n\t\t\t\t\tans += arr[2]\n\t\t\t\t\tarr[4] += 1\n\t\t\t\t\tarr[2] = 0\n\t\n\tprint(ans)", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "n, k, m, a = map(int, input().split())\ng = list(map(int, input().split()))\n\nresult = [3] * n\n\nvotes = [0] * n\nfor i in range(a):\n    votes[g[i] - 1] += 1\n\nfor i in range(n):\n    if votes[i] > 0:\n        result[i] = 1\n\nfor i in range(n):\n    if result[i] == 3 and votes[i] == max(votes):\n        result[i] = 2\n\nprint(*result)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "n = int(input())\nprint(n)\n\n# Function to check if a cell is under attack of 4 or more knights\ndef is_under_attack(x, y, knights):\n    for knight in knights:\n        if abs(x - knight[0]) + abs(y - knight[1]) == 3:\n            return True\n    return False\n\n# Initial placement\nknights = [(1, 1), (3, 1), (1, 5), (4, 4)]\n\n# Loop until there are at least floor(n^2/10) knights\nwhile len(knights) < n * n // 10:\n    # Loop over all cells\n    for x in range(-10**9, 10**9 + 1):\n        for y in range(-10**9, 10**9 + 1):\n            # Check if the cell is not occupied and is under attack of 4 or more knights\n            if (x, y) not in knights and is_under_attack(x, y, knights):\n                # Place a new knight\n                knights.append((x, y))\n\n# Print the initial placement\nfor knight in knights:\n    print(*knight)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "def sum_of_digits(n):\n    s = 0\n    while n > 0:\n        s += n % 10\n        n //= 10\n    return s\n\ndef solve(n):\n    max_sum = 0\n    for a in range(n + 1):\n        b = n - a\n        max_sum = max(max_sum, sum_of_digits(a) + sum_of_digits(b))\n    return max_sum\n\nif __name__ == \"__main__\":\n    n = int(input())\n    print(solve(n))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "def solve(N, K, Q, A):\n    A.sort()\n    return A[Q] - A[Q - 1]\n\nN, K, Q = map(int, input().split())\nA = list(map(int, input().split()))\nprint(solve(N, K, Q, A))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "n=int(input())\na=list(map(int,input().split()))\na.sort()\ndp = [0]\nfor i in a:\n    add = False\n    for j in range(len(dp)):\n        if(dp[j]<=i):\n            dp[j]+=1\n            add = True\n            break\n    if not add :\n        dp.append(1)\nprint(len(dp))\n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "import sys\n\ndef mex(x, y):\n    if x == 0 and y == 0:\n        return 1\n    elif x == 0 and y == 1:\n        return 2\n    elif x == 1 and y == 0:\n        return 2\n    elif x == 1 and y == 1:\n        return 0\n    elif x == 2 and y == 0:\n        return 1\n    elif x == 2 and y == 1:\n        return 0\n\ndef solve(N, input_matrix):\n    matrix = [[0 for _ in range(N)] for _ in range(N)]\n    matrix[0] = input_matrix[0]\n    for i in range(1, N):\n        matrix[i][0] = input_matrix[i][0]\n\n    for i in range(1, N):\n        for j in range(1, N):\n            matrix[i][j] = mex(matrix[i-1][j], matrix[i][j-1])\n\n    count_0 = 0\n    count_1 = 0\n    count_2 = 0\n    for row in matrix:\n        for element in row:\n            if element == 0:\n                count_0 += 1\n            elif element == 1:\n                count_1 += 1\n            elif element == 2:\n                count_2 += 1\n\n    return (count_0, count_1, count_2)\n\nif __name__ == '__main__':\n    N = int(input())\n    input_matrix = []\n    for _ in range(N):\n        input_matrix.append([int(x) for x in input().split()])\n    result = solve(N, input_matrix)\n    print(*result)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "#!/usr/bin/env python3\n\nimport sys\n\nn, m = map(int, input().split())\n\ny1 = list(map(int, input().split()))\ny2 = list(map(int, input().split()))\n\ndef count_destroyed(y1, y2, y):\n    cnt = 0\n    for x in y1:\n        if abs(x - y) <= 100:\n            cnt += 1\n    for x in y2:\n        if abs(x - y) <= 100:\n            cnt += 1\n    return cnt\n\nans = 0\nfor i in range(1, 10001):\n    for j in range(i + 1, 10001):\n        cnt1 = count_destroyed(y1, y2, i)\n        cnt2 = count_destroyed(y1, y2, j)\n        ans = max(ans, cnt1 + cnt2)\n\nprint(ans)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "import math\nn,k=list(map(int,input().split()))\na,b=list(map(int,input().split()))\nreqmin,reqmax=n*k,0\ndef calc(start):\n    nonlocal reqmin,reqmax\n    for i in range(0,n*k+1,k):\n        for j in range(-1,2,2):\n            if(start<i+j*b):\n                l=i+j*b-start\n                lcm=(l*n*k)/math.gcd(l,n*k)\n                reqmin=min(reqmin,lcm/l)\n                reqmax=max(reqmax,lcm/l)\n                \ncalc(a)\ncalc(k-a)\nprint(round(reqmin),round(reqmax))\n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "from collections import defaultdict\nfrom random import shuffle\n\ndef find_permutation(n):\n    if n % 2 == 0:\n        return -1\n    permutation = list(range(n))\n    shuffle(permutation)\n    return permutation\n\ndef find_lucky_permutation_triple(n):\n    a = find_permutation(n)\n    b = find_permutation(n)\n    c = [a[i] + b[i] for i in range(n)]\n    return a, b, c\n\ndef solve_lucky_permutation_triple(n):\n    if n % 2 == 0:\n        return -1\n    a, b, c = find_lucky_permutation_triple(n)\n    return [a, b, c]\n\nif __name__ == '__main__':\n    n = int(input())\n    if n % 2 == 0:\n        print(-1)\n    else:\n        a, b, c = solve_lucky_permutation_triple(n)\n        for permutation in [a, b, c]:\n            print(' '.join(map(str, permutation)))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "n = int(input())\ns = input()\n\n# Find the longest alternating subsequence without flipping\nans = 1\nprev = -1\nfor c in s:\n    if c != prev:\n        ans += 1\n        prev = c\n\n# Find the longest alternating subsequence with flipping\ni = 0\nwhile i < n:\n    j = i\n    while j < n and s[j] == s[i]:\n        j += 1\n    if j - i >= 2:\n        flipped = s[:i] + ''.join('1' if c == '0' else '0' for c in s[i:j]) + s[j:]\n        curr = 1\n        prev = -1\n        for c in flipped:\n            if c != prev:\n                curr += 1\n                prev = c\n        ans = max(ans, curr)\n    i = j\n\nprint(ans)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "#!/usr/bin/env python3\nfrom itertools import accumulate\nfrom heapq import heappop, heappush\n\n\ndef top(ppl_indices, vals, start):\n    Q = []\n    res = [0 for i in range(len(ppl_indices))]\n    for k, idx in enumerate(ppl_indices):\n        heappush(Q, -vals[idx])\n        if k >= start:\n            res[k] = res[k-1] - heappop(Q)\n\n    return res\n\n\nn, a_size, b_size = list(map(int, input().split()))\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\nconversion_gain = [y - x for x, y in zip(a, b)]\n\nordered_by_a = sorted(zip(a, list(range(n))), reverse=True)\nprefix_sums_a = list(accumulate([x for x, y in ordered_by_a]))\nconversions = top([idx for val, idx in ordered_by_a], conversion_gain, a_size)\nrest_of_bs = list(reversed(top([idx for val, idx in reversed(ordered_by_a[a_size:])],\n                               b, n - a_size - b_size))) + [0]\n\nsol, top_k = max([(prefix_a + convert + add_bs, idx)\n                  for idx, (prefix_a, convert, add_bs)\n                  in enumerate(zip(prefix_sums_a[a_size-1:a_size+b_size],\n                                   conversions[a_size-1:a_size+b_size],\n                                   rest_of_bs))])\ntop_k += a_size\n\nconversion_ordered_by_a = [(conversion_gain[idx], idx) for val, idx in ordered_by_a]\nconversion_sorted = sorted(conversion_ordered_by_a[:top_k], reverse=True)\nconverted = [idx for val, idx in conversion_sorted[:top_k-a_size]]\nteam_a = list(set(idx for val, idx in ordered_by_a[:top_k]) - set(converted))\n\nb_ordered_by_a = [(b[idx], idx) for val, idx in ordered_by_a]\nb_sorted = sorted(b_ordered_by_a[top_k:], reverse=True)\nteam_b = converted + [idx for val, idx in b_sorted[:(a_size+b_size) - top_k]]\n\nprint(sol)\nprint(\" \".join(str(idx+1) for idx in team_a))\nprint(\" \".join(str(idx+1) for idx in team_b))\n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "def solve_duel(n, k, s):\n    def flip(i, j):\n        return s[:i] + s[i:j].replace('1', '2').replace('0', '1').replace('2', '0') + s[j:]\n\n    if n % k == 0:\n        return \"once again\"\n\n    for i in range(n):\n        for j in range(i, n, k):\n            if (j - i + 1) % k == 0:\n                s = flip(i, j + 1)\n                if s.count('0') == 0 or s.count('1') == 0:\n                    return \"tokitsukaze\"\n\n    return \"quailty\"\n\nn, k = map(int, input().split())\ns = input()\nprint(solve_duel(n, k, s))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "def can_rearrange_statues(n, current_statues, desired_statues):\n    # Check if the number of statues is equal to the number of islands\n    if n != len(current_statues) or n != len(desired_statues):\n        return False\n\n    # Initialize an empty dictionary to store the statues and their positions\n    statues = {}\n\n    # Iterate through the current and desired statues\n    for i in range(n):\n        current_statue = current_statues[i]\n        desired_statue = desired_statues[i]\n\n        # If the current statue is not 0 (i.e., it is a valid statue), add it to the dictionary\n        if current_statue != 0:\n            statues[current_statue] = i\n\n        # If the desired statue is not 0 (i.e., it is a valid statue), check if it is already in the dictionary\n        if desired_statue != 0:\n            if desired_statue not in statues:\n                # If it is not in the dictionary, it means it has not been placed on the pedestal yet\n                return False\n\n            # If it is in the dictionary, check if it is adjacent to the current island\n            if abs(statues[desired_statue] - i) != 1:\n                # If it is not adjacent, it means it cannot be reached by the islanders\n                return False\n\n    # If all checks pass, it is possible to rearrange the statues in the desired order\n    return True\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    current_statues = list(map(int, input().split()))\n    desired_statues = list(map(int, input().split()))\n\n    if can_rearrange_statues(n, current_statues, desired_statues):\n        print(\"YES\")\n    else:\n        print(\"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "def is_sorted(l):\n    for i in range(len(l)-1):\n        if l[i] > l[i+1]:\n            return False\n    return True\n\ndef solve(n, m, matrix):\n    for i in range(n):\n        if not is_sorted(matrix[i]):\n            return \"NO\"\n    for j in range(m):\n        col = [matrix[i][j] for i in range(n)]\n        if not is_sorted(col):\n            return \"NO\"\n    return \"YES\"\n\n\nif __name__ == \"__main__\":\n    n, m = list(map(int, input().split()))\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, input().split())))\n    ans = solve(n, m, matrix)\n    print(ans)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "n,a,d=map(int,input().split())\nprint(368131125*a%10**9*12*10**9+1,368131125*d%10**9*12*10**9)", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "def solve(n, m, k, a):\n    rows = []\n    for i in range(n):\n        rows.append(a[i])\n    cols = []\n    for j in range(m):\n        col = []\n        for i in range(n):\n            col.append(a[i][j])\n        cols.append(col)\n    components = []\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 0:\n                continue\n            found = False\n            for component in components:\n                for x, y in component:\n                    if (i > 0 and a[i - 1][j] == 1 and (i - 1, j) in component) or (j > 0 and a[i][j - 1] == 1 and (i, j - 1) in component) or (i + 1 < n and a[i + 1][j] == 1 and (i + 1, j) in component) or (j + 1 < m and a[i][j + 1] == 1 and (i, j + 1) in component):\n                        component.append((i, j))\n                        found = True\n                        break\n                if found:\n                    break\n            if not found:\n                components.append([(i, j)])\n    for component in components:\n        if len(component) == 1:\n            continue\n        w = h = 0\n        for x, y in component:\n            w = max(w, x)\n            h = max(h, y)\n        w += 1\n        h += 1\n        if len(component) != w * h:\n            return -1\n    return k - len(components)\n\n\ndef main():\n    n, m, k = map(int, input().split())\n    a =", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n\n#\n# Complete the 'minArea' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts following parameters:\n#  1. INTEGER n\n#  2. 2D_INTEGER_ARRAY sizes\n#\n\ndef minArea(n, sizes):\n    # Write your code here\n    sizes.sort(key=lambda x: x[0] * x[1])\n    w = 0\n    h = 0\n    for i in range(n // 2):\n        w += sizes[i][0]\n        h = max(h, sizes[i][1])\n    for i in range(n - 1, n // 2 - 1, -1):\n        w += sizes[i][1]\n        h = max(h, sizes[i][0])\n    return w * h\n\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input().strip())\n\n    sizes = []\n\n    for _ in range(n):\n        sizes.append(list(map(int, input().rstrip().split())))\n\n    result = minArea(n, sizes)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "import itertools\nfrom itertools import permutations as perm\nimport copy\n\ndef getPerm(it, index):\n\tif index == 0:\n\t\treturn it\n\telif index == 1:\n\t\treturn [it[0], it[2], it[1]]\n\telif index == 2:\n\t\treturn [it[1], it[0], it[2]]\n\telif index == 3:\n\t\treturn [it[1], it[2], it[0]]\n\telif index == 4:\n\t\treturn [it[2], it[0], it[1]]\n\telif index == 5:\n\t\treturn [it[2], it[1], it[0]]\n\ndef distance(coord1, coord2):\n\treturn ((coord2[0] - coord1[0])**2 + (coord2[1] - coord1[1])**2 + (coord2[2] - coord1[2])**2)\n\ndists = ([0]*6)*7\n\npointList =  [[int(x) for x in input().split()] for y in range(0, 8)]\n\np0 = pointList[0]\n\nfor x in range(0, 7):\n\ty = 0\n\tfor pt in perm(pointList[x + 1], 3):\n\t\t# print(pt, p0)\n\t\tdists[x*6 + y] = distance(p0, pt)\n\t\t# print(dists)\n\t\ty += 1\n\n# print(pointList)\n# print(dists)\ndone = False\nfinal = None\n\ndef same(it1, it2):\n\t# print(it1, it2)\n\tif list(it1) == list(it2):\n\t\treturn True\n\treturn False\n\ndef checkNotSame(indicesSoFar, newIndex):\n\tnonlocal pointList\n\tptToComp = getPerm(pointList[len(indicesSoFar) + 1], newIndex)\n\tfor c in range(len(indicesSoFar)):\n\t\tif same(getPerm(pointList[c + 1], indicesSoFar[c]), ptToComp):\n\t\t\t# print(getPerm(pointList[c + 1], indicesSoFar[c]), getPerm(pointList[len(indicesSoFar)], newIndex), False)\n\t\t\treturn False\n\treturn True\n\n\n\ndef checkCompatible(a, b):\n\tif a == b or a*2 == b or a == 2*b or a*3 == b or a ==3*b or 2*a == 3*b or 3*a== 2*b:\n\t\treturn True\n\treturn False\n\ndef getSeven(distList, soFar, index):\n\tnonlocal done\n\tnonlocal final\n\tif done == True:\n\t\treturn\n\tif index == 7:\n\t\t# for h in range(0,7):\n\t\t# \tprint(getPerm(pointList[h+1], soFar[h]), end=\" \")\n\t\t# print()\n\t\t# for i in range(0,7):\n\t\t# \tprint(dists[i*6+soFar[i]], end=\" \")\n\t\t# print()\n\t\t# print(soFar)\n\t\tdistsSoFar = [dists[i*6+soFar[i]] for i in range(0, 7)]\n\t\t# print(distsSoFar)\n\t\tlowest = min(distsSoFar)\n\t\tlows = 0\n\t\ttwos = 0\n\t\tthrees = 0\n\t\tfor a in range(0, 7):\n\t\t\tif distsSoFar[a] == lowest:\n\t\t\t\tlows += 1\n\t\t\telif distsSoFar[a] == lowest*2:\n\t\t\t\ttwos += 1\n\t\t\telif distsSoFar[a] == lowest*3:\n\t\t\t\tthrees += 1\n\t\tif lows == 3 and twos == 3 and threes == 1:\n\t\t\tdone = True\n\t\t\tfinal = soFar\n\t\treturn\n\tfor x in range(0, 6):\n\t\tif done == True:\n\t\t\treturn\n\t\tif soFar == []:\n\t\t\tcurList = copy.copy(soFar)\n\t\t\tcurList.append(x)\n\t\t\tgetSeven(distList, curList, index + 1)\n\t\telse:\n\t\t\t # and checkNotSame(soFar, x)\n\t\t\t# print(getPerm(pointList[index], soFar[index - 1]), getPerm(pointList[index + 1], x))\n\t\t\t# print(distList[x+(index)*6], distList[soFar[index - 1]+(index - 1)*6])\n\t\t\tif checkCompatible(distList[x+(index)*6], distList[soFar[index - 1]+(index-1)*6]):\n\t\t\t\tif checkNotSame(soFar, x):\n\t\t\t\t\t# print(\"Enters\")\n\t\t\t\t\tcurList = copy.copy(soFar)\n\t\t\t\t\tcurList.append(x)\n\t\t\t\t\t# print(curList)\n\t\t\t\t\tgetSeven(distList, curList, index+1)\n\t\t# else:\n\ngetSeven(dists, [], 0)\n\nif final is None:\n\tprint(\"NO\")\nelse:\n\tprint(\"YES\")\n\tprint(p0[0], p0[1], p0[2])\n\tfor b in range(0, 7):\n\t\tx, y, z = getPerm(pointList[b+1], final[b])\n\t\tprint(x, y, z)\n\n\n\n\n\n\n\n# print(combosList)\n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "n=int(input())\na=[0,0]+list(map(int,input().split()))\nb=[0]*(n+1);c=[0]*(n+1)\nfor i in range(2,n+1):\n       if a[i]==1:\n              b[i]=1\nfor i in range(2,n+1):\n       cou=0;s=i\n       while b[s]==0:  \n              cou+=1;s=a[s]\n       b[i]=cou+b[s]\nfor i in b[2:]:\n       c[i]+=1\nans=1\nfor i in c:\n       ans+=i%2\nprint(ans)", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "def solve(n, m, set1, set2):\n    known = set()\n    for pair in set1:\n        for num in pair:\n            if num in known:\n                return num\n            known.add(num)\n    for pair in set2:\n        for num in pair:\n            if num in known:\n                return num\n            known.add(num)\n    return 0\n\nif __name__ == \"__main__\":\n    n, m = map(int, input().split())\n    set1 = []\n    set2 = []\n\n    for _ in range(n):\n        pair = list(map(int, input().split()))\n        set1.append(pair)\n\n    for _ in range(m):\n        pair = list(map(int, input().split()))\n        set2.append(pair)\n\n    result = solve(n, m, set1, set2)\n\n    print(result)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "n = int(input())\ns = [int(x) for x in input().split()]\ng = [int(x) for x in input().split()]\n\ns_i = [0 for _ in range(n)]\ns_i[0] = s[0]\n\nfor i in range(1, n):\n    if s_i[i - 1] - 1 <= s[i] + g[i] and s_i[i - 1] + 1 >= s[i]:\n        s_i[i] = s_i[i - 1]\n    else:\n        s_i[i] = s[i] + g[i]\n\nprint(sum(s_i))\nprint(*s_i)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "n=int(input())\narr=[]\nbig=10000000000\nnegbig=-10000000000\nfor i in range(n):\n    x1,x2,y1,y2=[int(j) for j in input().split()]\n    arr.append([[x1,x2],[y1,y2]])\nprefix_arr=[ [[negbig,negbig],[big,big]] ]\nfor i in range(1,n):\n    first=prefix_arr[-1]\n    second=arr[i-1]\n    x1,y1=first[0]\n    x2,y2=first[1]\n    x3,y3=second[0]\n    x4,y4=second[1]\n    a1=max(x1,x3)\n    b1=max(y1,y3)\n    a2=min(x2,x4)\n    b2=min(y2,y4)\n    if ((x1==negbig and x2==negbig and y1==negbig and y2==negbig) or (x3==negbig and x4==negbig and y3==negbig and y4==negbig )):\n        prefix_arr.append([ [negbig,negbig],[negbig,negbig] ] )\n    else:\n        if (a1<=a2 and b1<=b2):\n            prefix_arr.append([[a1,b1],[a2,b2]])\n        else:\n            prefix_arr.append([ [negbig,negbig],[negbig,negbig] ] )\nsuffix_arr=[]\nfor i in range(n):\n    suffix_arr.append([])\nsuffix_arr[-1].append([negbig,negbig])\nsuffix_arr[-1].append([big,big])\nfor i in range(n-2,-1,-1):\n    flag=1\n    first=suffix_arr[i+1]\n    second=arr[i+1]\n    x1,y1=first[0]\n    x2,y2=first[1]\n    x3,y3=second[0]\n    x4,y4=second[1]\n    a1=max(x1,x3)\n    b1=max(y1,y3)\n    a2=min(x2,x4)\n    b2=min(y2,y4)\n    if ((x1==negbig and x2==negbig and y1==negbig and y2==negbig) or (x3==negbig and x4==negbig and y3==negbig and y4==negbig ) ):\n        suffix_arr[i].extend([[negbig,negbig],[negbig,negbig]])\n    else:\n        if (a1<=a2 and b1<=b2):\n            suffix_arr[i].extend([[a1,b1],[a2,b2]])\n        else:\n            suffix_arr[i].extend([[negbig,negbig],[negbig,negbig]])\n\nfor i in range(n):\n    first=prefix_arr[i]\n    second=suffix_arr[i]\n    x1,y1=first[0]\n    x2,y2=first[1]\n    x3,y3=second[0]\n    x4,y4=second[1]\n    a1=max(x1,x3)\n    b1=max(y1,y3)\n    a2=min(x2,x4)\n    b2=min(y2,y4)\n    if ((x1==negbig and x2==negbig and y1==negbig and y2==negbig) or (x3==negbig and x4==negbig and y3==negbig and y4==negbig)):\n        continue\n    else:\n        if (a1<=a2 and b1<=b2):\n            print(a1,b1)\n            break\n\n\n\n\n\n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "def untangle(wire_sequence):\n    n = len(wire_sequence)\n    # Initialize the number of crossings to 0\n    crossings = 0\n\n    for i in range(n):\n        # If the current wire is '+' and the previous wire is '-',\n        # increment the number of crossings\n        if wire_sequence[i] == '+' and i > 0 and wire_sequence[i-1] == '-':\n            crossings += 1\n\n    # If the number of crossings is odd, the wires cannot be untangled\n    if crossings % 2 == 1:\n        return False\n    else:\n        return True\n\n# Read the input wire sequence\nwire_sequence = input()\n\n# Call the function to determine if the wires can be untangled\ncan_be_untangled = untangle(wire_sequence)\n\n# Print the output\nif can_be_untangled:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "input()\nsqrs = set()\nx = 0\nwhile x ** 2 <= 10 ** 6:\n    sqrs.add(x ** 2)\n    x += 1\n\nprint(max([x for x in map(int, input().split()) if x not in sqrs]))\n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "I=lambda:list(map(int,input().split()))\nR=list(range(999))\nq,w,e=I()\nr,t,y=I()\na,b,c=I()\nprint(min(i*b+j*c+max(0,(r//(w+i-y)+bool(r%(w+i-y)))*(t-e-j)-q+1)*a for i in R for j in R if w+i>y))\n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "n, k = list(map(int, input().split()))\ns = input()\nt = input()\nSum = -1\npos = 0\nans = 0\nwhile pos < n and s[pos] == t[pos]:\n    pos += 1\n    ans += 1\nfor i in range(pos, n):\n    Sum = Sum * 2 + 1 - ord(s[i]) + ord(t[i])\n    if Sum + 2 >= k:\n        ans += (n - i) * k\n        break\n    else:\n        ans += Sum + 2\nprint(ans)\n\n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "# Function to check if string t matches string s with wildcard character\ndef match(s, t):\n    # Initialize the length of strings s and t\n    n = len(s)\n    m = len(t)\n    # Initialize the length of the longest common substring\n    max_length = 0\n    # Initialize the length of the prefix and suffix for string s and t\n    prefix_length = 0\n    suffix_length = 0\n    # Find the length of the longest common substring for string s and t\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if s[i - 1] == t[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n                max_length = max(max_length, dp[i][j])\n            else:\n                dp[i][j] = 0\n    # Check if the longest common substring is equal to the length of string t\n    if max_length == m:\n        # Find the length of the prefix for string s and t\n        for i in range(n):\n            if s[i] == t[0]:\n                prefix_length = i + 1\n                break\n        # Find the length of the suffix for string s and t\n        for i in range(n):\n            if s[n - i - 1] == t[m - 1]:\n                suffix_length = i + 1\n                break\n        # Check if the length of the prefix + suffix + longest common substring is equal to the length of string s\n        if prefix_length + suffix_length + max_length == n:\n            return True\n    return False\n\n# Read the input\nn, m = map(int, input().split())\ns = input()\nt = input()\n# Initialize the dynamic programming array\ndp = [[0] * (m + 1) for _ in range(n + 1)]\n# Check if string t matches string s with wildcard character\nif match(s, t):\n    print(\"YES\")\nelse", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "k, a, b = map(int, input().split())\nif (b > a):\n    a, b = b, a\nif (a // k > 0 and b // k > 0):\n    print(a // k + b // k)\nelif (b < k and a % k == 0):\n    print(a // k)\nelse:\n    print(-1)", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "#!/usr/bin/python3\n\ndef mod_exp(base, exponent, modulus):\n    result = 1\n    while exponent > 0:\n        if exponent % 2 == 1:\n            result = (result * base) % modulus\n        exponent = exponent // 2\n        base = (base * base) % modulus\n    return result\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\ndef mod_inverse(a, m):\n    if gcd(a, m) != 1:\n        return None\n    else:\n        return mod_exp(a, m - 2, m)\n\ndef count_ways(n, k):\n    mod = 1000000007\n    ans = 0\n    for i in range(1, k + 1):\n        ans += (mod_exp(i, n - 1, mod) - 1) * mod_inverse(i - 1, mod)\n        ans %= mod\n    return ans\n\nif __name__ == \"__main__\":\n    n, k = map(int, input().split())\n    print(count_ways(n, k))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "n = int(input())\ns = input()\ns = list(map('_ABC'.index, s))\ns0 = s[0]\n\nMOD = 10 ** 9 + 7\n\ndp = [0, 0, 0, 0]\ndp[s0] = 1\n\np = 1\nwhile p < n and s[p] == s0:\n    p += 1\n\nxor = 0 if p % 2 == 0 else s0\n\nfor i, c in enumerate(s[p:], start=p):\n\n    d, e = c % 3 + 1, (c + 1) % 3 + 1\n\n    dp[c] = sum(dp) % MOD\n    dp[d], dp[e] = dp[e], dp[d]\n\n    if i == p:\n        dp[c] += p // 2\n        dp[s[i - 1] ^ c] += (p - 1) // 2\n    elif xor == 0:\n        dp[c] += 1\n\n    xor ^= c\n\nprint((sum(dp) % MOD))\n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "import sys\ndef factorial():\n    nonlocal mod\n    fac = [1] * int(3e5 + 1)\n    for i in range(1, int(3e5)):\n        fac[i] = i*fac[i-1] % mod\n    return fac\ndef inverse(x):\n    nonlocal mod\n    return pow(x, mod-2, mod)\ndef C(n, r):\n    nonlocal fac\n    if n < 0 or n < r:\n        return 0\n    return fac[n]*inverse(fac[r])*inverse(fac[n-r]) % mod\ndef calc(f, w, h):\n    nonlocal mod\n    if w == 0:\n        return 1\n    ans = 0\n    for k in range(1, min(w//(h+1),f+1)+1):\n        ans += C(f+1, k) * C(w-k*h-1, k-1) % mod\n        ans %= mod\n    return ans\nf, w, h = list(map(int,sys.stdin.readline().split(' ')))\nmod = int(1e9 + 7)\nfac = factorial()\ncnt = calc(f, w, h)\nsys.stdout.write(str(cnt*inverse(C(f+w, w)) % mod))\n\n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "n,*d=map(int,open(0).read().split())\na,m,s=1,998244353,sum(d)\nd.extend(range(s-2*n+3,s-n+1))\nfor i in d:a=a*i%m\nprint(a)", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "def solve(n, k):\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(1, n + 1):\n        for j in range(1, min(i, k) + 1):\n            dp[i] += dp[i - j] * (k - 1) ** (j - 1)\n    return dp[n]\n\ndef main():\n    n, k = map(int, input().split())\n    ans = solve(n, k) % (10 ** 9 + 7)\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "input1 = input()\ninput2 = input()\n\ndef sort(s, length):\n    half, one = divmod(length, 2)\n    if one == 1:\n        return s\n    else:\n        s1, s2 = sort(s[:half], half), sort(s[half:], half)\n        if s1 < s2:\n            return s1 + s2\n        else:\n            return s2 + s1\n\n\nif sort(input1, len(input1)) == sort(input2, len(input2)):\n    print(\"YES\")\nelse:\n    print(\"NO\")", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "# Input the two strings\ns1 = input()\ns2 = input()\n\n# Function to check if two strings are equivalent\ndef is_equivalent(a, b):\n    n = len(a)\n    if n != len(b):\n        return False\n    if n == 1:\n        return a == b\n    return (a[:n // 2] == b[:n // 2] and a[n // 2:] == b[n // 2:]) or (a[:n // 2] == b[n // 2:] and a[n // 2:] == b[:n // 2])\n\n# Check if the strings are equivalent\nif is_equivalent(s1, s2):\n    print(\"YES\")\nelse:\n    print(\"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "from heapq import heappush, heappop\n\nn, m = [int(i) for i in input().split()]\nfood = 0\ntummy = []\ndish = [ -int(i) for i in input().split()]\nfor i in range(1, min(m, n+1)):\n    while tummy and -tummy[0] >= m- i:\n        heappop(tummy)\n    if max(-dish[i-1], i) < m:\n        heappush(tummy, dish[i-1] + i)\n    food = max(len(tummy), food)\nprint(food)\n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "from math import gcd\nfrom collections import Counter\n\ndef get_max_piles(n, boxes):\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    cnt = Counter(boxes)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if gcd(boxes[i], boxes[j]) == boxes[i]:\n                dp[j] += dp[i]\n    return max(dp)\n\nn = int(input())\nboxes = list(map(int, input().split()))\nres = get_max_piles(n, boxes)\nprint(res % (10**9 + 7))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "b=int(input())\ng=int(input())\nn=int(input())\nl=[]\ncount=0\nfor i in range(n+1):\n    x1=i\n    x2=n-i\n    if (x1<=b and x2<=g):\n        count+=1\n    else:\n        continue\nprint(count)", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "def get_sequence(n, a, b):\n    if n < max(a, b):\n        return -1\n    elif a == b == 1:\n        return n\n    elif a == b:\n        return get_sequence(n, a - 1, b)\n    elif a < b:\n        return get_sequence(n, a, b - 1)\n    elif n == a:\n        return [i for i in range(1, n + 1)]\n    else:\n        return get_sequence(n, a - 1, b)\n\n\nif __name__ == \"__main__\":\n    n, a, b = map(int, input().split())\n    sequence = get_sequence(n, a, b)\n    if sequence == -1:\n        print(\"No such sequence exists.\")\n    else:\n        print(\" \".join(map(str, sequence)))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "def minimum_bitcoins(hp_y, atk_y, def_y, hp_m, atk_m, def_m, h, a, d):\n    min_bitcoins = 0\n    while hp_y <= hp_m:\n        hp_y += 1\n        min_bitcoins += h\n    while atk_y <= atk_m:\n        atk_y += 1\n        min_bitcoins += a\n    while def_y <= def_m:\n        def_y += 1\n        min_bitcoins += d\n    return min_bitcoins\n\n\nif __name__ == '__main__':\n    hp_y, atk_y, def_y = input().split()\n    hp_m, atk_m, def_m = input().split()\n    h, a, d = input().split()\n    hp_y, atk_y, def_y, hp_m, atk_m, def_m, h, a, d = int(hp_y), int(atk_y), int(def_y), int(hp_m), int(atk_m), int(def_m), int(h), int(a), int(d)\n\n    print(minimum_bitcoins(hp_y, atk_y, def_y, hp_m, atk_m, def_m, h, a, d))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "n = int(input())\n\nif n % 2 == 0:\n    print(-1)\nelse:\n    print(\" \".join(map(str, range(n))))\n    print(\" \".join(map(str, range(n))))\n    print(\" \".join(map(str, [2*x % n for x in range(n)])))", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "n = int(input())\nt = list(map(int, input().split()))\nt.append(0)\np = [0] * (n + 1)\nfor i in range(n - 1):\n    p[i + 1] = p[i] + 1 if t[i + 1] > t[i] else 0\ns = max(p) + 2\nif s >= n: print(n)\nelse:\n    i = 1\n    if p[i] == 0:\n        if t[i + 1] > t[i - 1] + 1:\n            d = p[i - 1] - 1\n            i += 1\n            while p[i]: i += 1\n            s = max(s, d + p[i - 1] + 3)\n        else: i += 1\n    else: i += 1\n    while i < n - 1:\n        if p[i] == 0:\n            if t[i] > t[i - 2] + 1: d = p[i - 2]\n            elif t[i + 1] > t[i - 1] + 1: d = p[i - 1] - 1\n            else:\n                i += 1\n                continue\n            i += 1\n            while p[i]: i += 1\n            s = max(s, d + p[i - 1] + 3)\n        else: i += 1\n    print(s)", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "n, c = 0, 0\ndef dfs(now, m, t):\n\tnonlocal n, c\n\tif now == 0:\n\t\tif m > n:\n\t\t\tn, c = m, t\n\t\treturn\n\ti = 1\n\twhile i**3 <= now:\n\t\ti += 1\n\ti -= 1\n\tdfs(now-i**3, m+1, t+i**3)\n\tdfs(i**3-1-(i-1)**3, m+1, t+(i-1)**3)\nm = int(input())\ndfs(m, 0, 0)\nprint(n, c) ", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "def solve(n, a):\n    # Return \"sjfnb\" if Tokitsukaze will win, or \"cslnb\" if CSL will win.\n\n    # Check if there is only one pile.\n    if n == 1:\n        # If the pile is empty, CSL wins.\n        if a[0] == 0:\n            return \"cslnb\"\n        # Otherwise, Tokitsukaze wins.\n        else:\n            return \"sjfnb\"\n\n    # Check if there are two piles.\n    if n == 2:\n        # If both piles are empty, CSL wins.\n        if a[0] == 0 and a[1] == 0:\n            return \"cslnb\"\n        # If one pile is empty and the other is not, CSL wins.\n        elif a[0] == 0 or a[1] == 0:\n            return \"cslnb\"\n        # If both piles have the same number of stones, CSL wins.\n        elif a[0] == a[1]:\n            return \"cslnb\"\n        # Otherwise, Tokitsukaze wins.\n        else:\n            return \"sjfnb\"\n\n    # Check if there are three or more piles.\n    if n >= 3:\n        # Initialize a variable to count the number of piles with even numbers of stones.\n        even_piles = 0\n\n        # Loop through the piles and count the number of piles with even numbers of stones.\n        for i in range(n):\n            if a[i] % 2 == 0:\n                even_piles += 1\n\n        # If the number of even piles is even, CSL wins.\n        if even_piles % 2 == 0:\n            return \"cslnb\"\n        # Otherwise, Tokitsukaze wins.\n        else:\n            return \"sjfnb\"\n\n\n# Read the input data.\nn = int(input())\na = list(map(int, input().split()))\n\n# Call the solve function and print the result.", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "#!/usr/bin/env python3\n\nimport re\n\ntry:\n    while True:\n        s = input()\n        n = int(s[s.rfind(' '):])\n        pos = s.count('+') + 1\n        neg = s.count('-')\n        if n * pos - neg < n or pos - n * neg > n:\n            print(\"Impossible\")\n        else:\n            print(\"Possible\")\n            need = n - (pos - neg)\n            prev = '+'\n            first = True\n            for m in re.finditer(r\"[+-]\", s):\n                if first:\n                    first = False\n                else:\n                    print(prev, end=' ')\n\n                if prev == '+' and need > 0:\n                    x = min(need + 1, n)\n                    need -= x - 1\n                elif prev == '-' and need < 0:\n                    x = min(-need + 1, n)\n                    need += x - 1\n                else:\n                    x = 1\n\n                print(x, end=' ')\n                prev = m.group()\n\n            if not first:\n                print(prev, end=' ')\n\n            if prev == '+' and need > 0:\n                x = min(need + 1, n)\n                need -= x - 1\n            elif prev == '-' and need < 0:\n                x = min(-need + 1, n)\n                need += x - 1\n            else:\n                x = 1\n\n            print(x, '=', n)\n\nexcept EOFError:\n    pass\n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "#This code solves the given question using Python3.\n\n#Importing necessary libraries\nfrom math import log2, floor\n\n#Defining the function to calculate the required number of perfect sets\ndef number_of_perfect_sets(k):\n    #Initializing the answer variable\n    answer = 0\n    \n    #Iterating over all possible set sizes\n    for set_size in range(1, floor(log2(k)) + 1):\n        #Checking if the current set size is a power of 2\n        if set_size & (set_size - 1) == 0:\n            #If the set size is a power of 2, we can create 2^(set_size - 1) perfect sets\n            answer += (1 << (set_size - 1))\n        #Otherwise, we can create 2^(set_size - 1) - 1 perfect sets\n        else:\n            answer += (1 << (set_size - 1)) - 1\n    \n    #Returning the answer modulo 1000000007 (10^9 + 7)\n    return answer % 1000000007\n\n#Taking the input for k\nk = int(input())\n\n#Printing the required number of perfect sets\nprint(number_of_perfect_sets(k))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "# import required modules\nimport sys\nfrom collections import defaultdict\n\n# read input\nn, m = map(int, input().split())\npairs = [tuple(map(int, input().split())) for _ in range(m)]\n\n# create a graph\nfriends = defaultdict(set)\nfor a, b in pairs:\n    friends[a].add(b)\n    friends[b].add(a)\n\n# function to find the minimum number of steps required\ndef min_steps():\n    n_steps = 0\n    selected = []\n    while True:\n        # find the person with the maximum number of friends\n        person = max(friends, key=lambda x: len(friends[x]))\n        selected.append(person)\n        # introduce all friends of the selected person to each other\n        for a in friends[person]:\n            for b in friends[person]:\n                if a != b:\n                    friends[a].add(b)\n                    friends[b].add(a)\n        n_steps += 1\n        # check if all pairs of guests are friends\n        if all(a in friends[b] for a in range(1, n + 1) for b in range(1, n + 1)):\n            break\n    return n_steps, selected\n\n# calculate the minimum number of steps and the selected guests\nn_steps, selected = min_steps()\n\n# print the output\nprint(n_steps)\nprint(*selected)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "def check_balls(balls):\n    balls.sort()\n    for i in range(len(balls) - 2):\n        if balls[i] + 2 >= balls[i+2]:\n            return True\n    return False\n\nn = int(input())\nballs = list(map(int, input().split()))\n\nif check_balls(balls):\n    print(\"YES\")\nelse:\n    print(\"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "N = int(input()) \nA = list(map(int,input().split()))\n\nDP = [(a, -1) for a in A]\n\nfor i in range(N):\n  for j in range(i+2, N, 2):\n    val_nxt = DP[i][0] + A[j]\n    if DP[j][0] < val_nxt:\n      DP[j] = (val_nxt, i)\n    \ntmp = -10**20\ni_max = -1\nfor j, dp in enumerate(DP):\n  if dp[0] > tmp:\n    tmp = dp[0]\n    i_max = j\nprint(tmp)\n#print(DP)\n#print(i_max)\npath = []\ni = i_max\nwhile i >= 0:\n  path.append(i)\n  _, i = DP[i]\n  \npath.reverse()\n\nsft = 0\nans = []\nfor _ in range(path[0]):\n  ans.append(0)\nsft += path[0]\nfor j in range(1,len(path)):\n  i_prv = path[j-1]\n  d = path[j] - path[j-1]\n  for _ in range((d-1)//2):\n    ans.append(i_prv+2-sft)\n  ans.append(i_prv+1-sft)\n  sft += d\nfor j in range(N-1,path[-1],-1):\n  ans.append(j-sft)\n#print(path)    \n\nans = [a+1 for a in ans]\nprint(len(ans))\nprint(*ans, sep=\"\\n\")\n  \n  ", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "# -*- coding:utf-8 -*-\n\n\"\"\"\n\ncreated by shuangquan.huang at 1/17/20\n\n\"\"\"\n\nimport collections\nimport time\nimport os\nimport sys\nimport bisect\nimport heapq\nfrom typing import List\n\n\ndef solve(N, M, edges):\n    if M == N*(N-1)//2:\n        return 'a' * N\n    \n    g = collections.defaultdict(list)\n    for u, v in edges:\n        g[u].append(v)\n        g[v].append(u)\n\n    s = ['', 'a', 'b', 'c']\n    for u in range(1, N+1):\n        mark = [3 for _ in range(N + 1)]\n        mark[0] = 0\n        mark[u] = 1\n        for v in g[u]:\n            mark[v] = 1\n    \n        for u in range(1, N+1):\n            if mark[u] == 3:\n                for v in g[u]:\n                    if mark[v] == 1:\n                        mark[v] = 2\n        \n        a, b, c = mark.count(1), mark.count(2), mark.count(3)\n        if a*(a-1)//2 + b*(b-1)//2 + c*(c-1)//2 + a*b + b*c != M:\n            continue\n        \n        if any([abs(mark[u] - mark[v]) > 1 for u, v in edges]):\n            continue\n            \n        return ''.join([s[mark[v]] for v in range(1, N+1)])\n    \n    return None\n    \n\nN, M = map(int, input().split())\nedges = []\nfor i in range(M):\n    u, v = map(int, input().split())\n    edges.append((u, v))\n    \ns = solve(N, M, edges)\nif s:\n    print('Yes')\n    print(s)\nelse:\n    print('No')", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "# Define the function to check if the jackpot is possible\ndef check_jackpot(n, a):\n    # Initialize the variables for the number of doubled and tripled bids\n    doubled = 0\n    tripled = 0\n    # Check if the first player has already tripled his bid\n    if a[0] % 3 == 0:\n        tripled += 1\n    # Iterate through the list of bids from the second player to the last\n    for i in range(1, n):\n        # Check if the current player has already doubled his bid\n        if a[i] % 2 == 0:\n            doubled += 1\n        # Check if the current player has already tripled his bid\n        if a[i] % 3 == 0:\n            tripled += 1\n    # Check if the number of doubled bids is less than the number of players - 1\n    if doubled < n - 1:\n        return \"No\"\n    # Check if the number of tripled bids is less than the number of players - 2\n    if tripled < n - 2:\n        return \"No\"\n    # Check if the first player's bid is divisible by 3\n    if a[0] % 3 != 0:\n        return \"No\"\n    # If all the checks pass, return \"Yes\"\n    return \"Yes\"\n\n# Read the number of players n from the input\nn = int(input())\n# Read the list of bids a from the input\na = list(map(int, input().split()))\n\n# Call the check_jackpot function and print the result\nresult = check_jackpot(n, a)\nprint(result)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "m,n=list(map(int,input().split()))\n\nP=1\nans=0\n\nwhile(m>0):\n    p=P*(1-(((m-1)/m)**n))\n    ans+=m*p\n    m-=1\n    P-=p\nprint(ans)\n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!\n# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!\n# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!\nfrom sys import stdin, stdout\nfrom math import sqrt\nimport math\nimport heapq\nfrom itertools import accumulate\n\nN = int(input())\n\nf = {}\nf['00'] = []\nf['10'] = []\nf['01'] = []\nf['11'] = []\n\nfor i in range(N):\n    s = [x for x in stdin.readline().split()]\n    f[s[0]].append(int(s[1]))\n    \nfor key in f:\n    f[key].sort(reverse=True)\n    \n#print(f)\n\ns_X = sum(f['11'])\n# X >= W\nX = len(f['11'])\nY = len(f['10'])\nZ = len(f['01'])\n\nm = min(Y,Z)\n\n# calculate prefix of '10' and '01'\ns_Y = [0]*len(f['10'])\ns = 0\nfor i in range(len(f['10'])):\n    s += f['10'][i]\n    s_Y[i] = s\ns_Z = [0]*len(f['01'])\ns = 0\nfor i in range(len(f['01'])):\n    s += f['01'][i]\n    s_Z[i] = s\n\n# W = 0 to X\nres = 0\ns = 0\nfor W in range(X+1):\n    # abs(Y-Z) <= X-W\n    if W>len(f['00']):\n        break\n    if W>=1:\n        s += f['00'][W-1]\n    \n    bound = X-W\n    if Y>Z:\n        tmp_Y = min(Y,Z+bound)\n        tmp_Z = Z\n    elif Y==Z:\n        tmp_Y = Y\n        tmp_Z = Z\n    elif Y<Z:\n        tmp_Y = Y\n        tmp_Z = min(Z,Y+bound)\n    \n    # X+W+Y+Z\n    calculate = s_X + s\n    if tmp_Y>0:\n        calculate += s_Y[tmp_Y-1]\n    if tmp_Z>0:\n        calculate += s_Z[tmp_Z-1]\n        \n    res = max(res,calculate)\n    #print(X,tmp_Y,tmp_Z,W,calculate)\n    \nprint(res)\n            \n\n\n    \n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "import sys\n\ndef gcd(l):\n\tif len(l)==0:\n\t\treturn 0\n\tif len(l)==1:\n\t\treturn l[0]\n\tif len(l)==2:                                   \n\t\tif l[1]==0:\n\t\t\treturn l[0]  \n\t\treturn gcd([l[1],l[0]%l[1]])\n\treturn gcd([gcd(l[:-1]),l[-1]])\n\t\t\ndef brute_force(l1,l2,l,sol):                   \n\tif len(l)==0:\n\t\tg1=gcd(l1)\n\t\tg2=gcd(l2)\n\t\treturn g1==1 and g2==1,sol\n\t\n\tres,s=brute_force(l1+[l[0]],l2,l[1:],sol+[1])\n\tif res:\n\t\treturn True,s\n\treturn brute_force(l1,l2+[l[0]],l[1:],sol+[2])\n\ndef factor(n):\n\tres=[]\n\ti=2\n\twhile i*i<=n:\n\t\tif n%i==0:\n\t\t\tres.append(i)\n\t\twhile n%i==0:\n\t\t\tn=int(n/i)\n\t\ti+=1\n\n\tif n!=1:\n\t\tres.append(n)\n\n\treturn res\n\ndef dumpsol(sol):\n\tfor v in sol:\n\t\tprint(v,end=' ')\n\nn=int(sys.stdin.readline())\nl=sys.stdin.readline().strip().split(\" \")[0:n]\nl=[int(x) for x in l]\nif n<12:\n\tret,sol=brute_force([],[],l,[])\n\tif ret:\n\t\tprint(\"YES\")\n\t\tdumpsol(sol)\n\telse:\n\t\tprint(\"NO\")\n\treturn\n\nfactors={}\nfor i in range(10):\n\tfor key in factor(l[i]):\n\t\tfactors[key]=0\n\nflists={}\nfor f in factors:\n\tflists[f]=[]\n\tpos=0\n\tfound=False\n\tfor v in l:\n\t\tif v%f!=0:\n\t\t\tfound=True\n\t\t\tfactors[f]+=1\n\t\t\tflists[f].append(pos)\n\t\t\tif (factors[f]>9):\n\t\t\t\tbreak\n\t\tpos+=1\n\tif not found:\n\t\tprint(\"NO\")\n\t\treturn\n\noftf=[]\nisoftf={}\nfor f in factors:\n\tif factors[f]==0:\n\t\tprint(\"NO\")\n\t\treturn\n\n\tif factors[f]<10:\n\t\toftf.append(f)\n\t\tisoftf[f]=1\n\n#print(oftf)\n\nsol=[1 for i in range(len(l))]\nx=l[0]\nsol[0]=2\noxf=factor(x)\n#print(oxf)\nxf=[]\nnxf=0\nisxoftf={}\nfor f in oxf:\n\tif f in isoftf:\n\t\tnxf+=1\n\t\tisxoftf[f]=1\n\t\txf.append(f)\n\telse:\n\t\tsol[flists[f][0]]=2\n\nnonxf=[]\nfor f in oftf:\n\tif not f in isxoftf:\n\t\tnonxf.append(f)\n\nmasks={}\npos=0\n\n#print(xf)\n#print(nonxf)\n\nfor f in xf+nonxf:\n\tfor v in flists[f]:\n\t\tif not v in masks:\t\n\t\t\tmasks[v]=0\n\t\tmasks[v]|=1<<pos\n\tpos+=1\n\nvals=[{} for i in range(len(masks)+1)]\nvals[0][0]=0\npos=0\nmlist=[]\nfor mask in masks:\n\tmlist.append(mask)\n\tcmask=masks[mask]\n\tcmask1=cmask<<10\n\t#print(vals)\n\tfor v in vals[pos]:\n\t\tvals[pos+1][v|cmask]=v\n\t\t# first number is always in group2\n\t\tif (mask!=0):\n\t\t\tvals[pos+1][v|cmask1]=v\n\tpos+=1\t\n\n#print(vals)\n#print(masks)\n#print(sol)\n\ntest_val=((1<<len(xf))-1)|(((1<<len(oftf))-1)<<10)\n#print(test_val)\nfor v in vals[pos]:\n\tif (v&test_val)==test_val:\n\t\tprint(\"YES\")\n\n\t\t#print(pos)\n\t\twhile (pos!=0):\n\t\t\t#print(v)\n\t\t\t#print(vals[pos])\n\t\t\tnv=vals[pos][v]\n\t\t\t#print(nv)\n\t\t\tif (nv^v<1024 and nv^v!=0):\n\t\t\t\tsol[mlist[pos-1]]=2\n\t\t\tv=nv\n\t\t\tpos-=1\n\n\t\tdumpsol(sol)\n\t\treturn\n\nprint(\"NO\")\n\n#print(oftf)\n#print(masks)\n\n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\n\ndef solve(n, a):\n    res = 0\n    for i in range(1, n+1):\n        s = sum(a[i-1] for j in range(1, n+1) if j % i == 0)\n        res = max(res, s)\n    return res\n\nprint(solve(n, a))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "def solve(n):\n    total = 2**(n**2)\n    # The number of binary relations over a set of size n is 2^(n^2)\n    reflexive = 2**(n*(n-1))\n    # The number of reflexive binary relations over a set of size n is 2^(n(n-1))\n    return (total - reflexive) % (10**9 + 7)\n\nn = int(input())\nprint(solve(n))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\n\ndef is_tree_possible(values):\n    for i in range(1, len(values)):\n        if lcm(values[i-1], values[i]) == 2:\n            return False\n    return True\n\n\ndef construct_tree(values):\n    if is_tree_possible(values):\n        print(\"Yes\")\n        print(values)\n    else:\n        print(\"No\")\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    values = list(map(int, input().split()))\n    construct_tree(values)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "# This function calculates the minimum number of actions required to sort the train\ndef minimum_actions(train):\n    # Create a dictionary to store the position of each car in the train\n    car_position = {car: i for i, car in enumerate(train)}\n    # Initialize the number of actions required to 0\n    num_actions = 0\n    # Loop through each car in the train\n    for i, car in enumerate(train):\n        # If the car is not in its correct position\n        if car_position[car] != i:\n            # Increment the number of actions required\n            num_actions += 1\n            # Swap the current car with the car at its correct position\n            car_position[train[i]], car_position[car] = car_position[car], car_position[train[i]]\n            train[car_position[car]], train[i] = train[i], train[car_position[car]]\n    # Return the minimum number of actions required\n    return num_actions\n\n# Read the number of cars in the train\nn = int(input())\n# Read the sequence of numbers of the cars in the train\ntrain = list(map(int, input().split()))\n# Calculate and print the minimum number of actions required\nprint(minimum_actions(train))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "MOD = 10**9 + 7\nN, M = map(int, input().split())\nS = [[N]*(N+1) for i in [0,1,2]]\nT = [[0]*(N+1) for i in [0,1,2]]\n\nC = [0]*(N+1)\nfor i in range(M):\n    l, r, x = map(int, input().split())\n    S[x-1][r] = min(S[x-1][r], l)\n    T[x-1][r] = max(T[x-1][r], l)\n    C[r] = 1\n\nS0, S1, S2 = S\nT0, T1, T2 = T\n\nok = 1\nfor i in range(N+1):\n    if not T2[i] < S1[i] or not T1[i] < S0[i]:\n        ok = 0\n        break\n\nif not ok:\n    print(0)\n    return\n\n\nX = {(0, 0): 3}\nfor b in range(1, N):\n    t2 = T2[b+1]; s1 = S1[b+1]; t1 = T1[b+1]; s0 = S0[b+1]\n    check = lambda r, g: t2 <= r < s1 and t1 <= g < s0\n\n    Z = [0]*(N+1)\n    if C[b+1]:\n        if t1 <= b < s0:\n            for (r, g), v in X.items():\n                if t2 <= g < s1:\n                    # r <- b+1\n                    Z[g] += v\n                if t2 <= r < s1:\n                    # g <- b+1\n                    Z[r] += v\n        X = {(r, g): v for (r, g), v in X.items() if t2 <= r < s1 and t1 <= g < s0}\n    else:\n        Z = [0]*(N+1)\n        for (r, g), v in X.items():\n            # r <- b+1\n            Z[g] += v\n            # g <- b+1\n            Z[r] += v;\n    for z, v in enumerate(Z):\n        if v:\n            X[z, b] = v % MOD\nprint(sum(X.values()) % MOD)", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "readInts=lambda: list(map(int, input().split()))\nn=int(input())\na=readInts()\np=[0]*n\nfor i in range(n):\n    p[a[i]-1]=i\ninc=1;ret=n-1\n#print(p)\nfor i in range(1,n):\n    if p[i]>p[i-1]:\n        inc+=1\n    else:\n        inc=1\n    ret=min(ret,n-inc)\nprint(ret)\n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "n, k, q = list(map(int, input().split()))\na = list(map(int, input().split()))\n\nans = 10 ** 10\nfor y in a:\n    li = []\n    l = 0\n    cnd = []\n    l_cnd = 0\n    for x in a + [-1]:\n        if x < y:\n            if l - k + 1 >= 0:\n                li.sort()\n                cnd += li[:l-k+1]\n                l_cnd += l - k + 1\n            li = []\n            l = 0\n        else:\n            li.append(x)\n            l += 1\n\n    if l_cnd >= q:\n        cnd.sort()\n        sub = cnd[q-1] - y\n        ans = min(ans, sub)\n\nprint(ans)\n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "n = int(input()) + 1\nd = 1000000007\ng = [[1] * n for i in range(n)]\nfor i in range(1, n):\n    g[i][0] = g[i - 1][i - 1]\n    for j in range(1, i + 1): g[i][j] = (g[i][j - 1] + g[i - 1][j - 1]) % d\nprint((g[-1][-1] - g[-1][0]) % d)\n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "n = input()\nif len(n) == 1:\n    print(int(n))\nelse:\n    a = \"\"\n    if n[0] != '1':\n        a += chr(ord(n[0]) - 1)\n    a += '9' * (len(n) - 1)\n    b = str(int(n) - int(a))\n    print(sum(map(int, list(a) + list(b))))\n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "\nimport sys\n#sys.stdin=open(\"data.txt\")\ninput=sys.stdin.readline\n\nn=int(input())\n\nl=list([int(x)-1 for x in input().split()])\n\nuse=[]\nvalid=1\nfor i in range(n):\n    t=i\n    for j in range(n+5):\n        t=l[t]\n        if t==i:\n            if (j+1)%2==0: use.append((j+1)//2)\n            else: use.append(j+1)\n            break\n    else:\n        valid=0\n\nif not valid: print(\"-1\")\nelse:\n    # get lcm\n    ans=1\n    for i in use:\n        t=ans\n        while ans%i:\n            ans+=t\n    print(ans)\n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "print(max(1, 4 * int(int(input()) * 2 ** 0.5)))\n\n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "n = input()\nn = int(n)\narr = [0] * n\nfact = [0] * 51\na = input().split()\np = input()\np = int(p)\n\nfor i in range(n):\n\tarr[i] = int(a[i])\n\nif n == 1:\n\tif arr[0] <= p:\n\t\tprint(1)\n\telse:\n\t\tprint(0)\n\treturn\n\ndef pre():\n\tfact[0] = 1\n\tfor i in range(1, 51):\n\t\tfact[i] = fact[i - 1] * i\n\ndef get(arr, min_sum, max_sum):\n\tways = [[0 for i in range(max_sum + 1)] for i in range(len(arr) + 1)]\n\tways[0][0] = 1\n\tfor i in range(len(arr)):\n\t\tfor j in range(i, -1, -1):\n\t\t\tfor k in range(max_sum, -1, -1):\n\t\t\t\tif k + arr[i] <= max_sum:\n\t\t\t\t\tways[j + 1][k + arr[i]] += ways[j][k]\n\n\tans = 0\n\tcounted = 0\n\tfor i in range(0, len(arr) + 1):\n\t\tfor j in range(min_sum, max_sum + 1):\n\t\t\tans += fact[i] * fact[n - i - 1] * ways[i][j] * i\n\t\t\tcounted += fact[i] * fact[n - i - 1] * ways[i][j]\n\n\treturn ans, counted\n\npre()\ntot = 0\ncount = 0\nsm = 0\nfor i in range(n):\n\tsm += arr[i]\n\tarr1 = [0] * (n - 1)\n\tgot = 0\n\tfor j in range(n):\n\t\tif j == i:\n\t\t\tcontinue\n\t\tarr1[got] = arr[j]\n\t\tgot += 1\n\thow_many = get(arr1, max(0, p - arr[i] + 1), p)\n\ttot += how_many[0]\n\tcount += how_many[1]\n\ndef get_div(a, b):\t#a / b\n\tres = a // b\n\ta %= b\n\tfor i in range(1, 10):\n\t\ta = int(a)\n\t\ta *= 10\n\t\tx = a // b\n\t\tx1 = x\n\t\tres += pow(10, -i) * x1\n\t\ta -= x * b\n\treturn res\n\nif sm <= p:\n\tprint(n)\nelse:\n\tprint(get_div(tot, fact[n]))\n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "# input strings\ns = input()\nt = input()\n\n# function to count number of 'a' and 'b'\ndef count(st):\n    return st.count('a'), st.count('b')\n\n# function to check if the strings are already appropriate\ndef is_appropriate(st1, st2):\n    return (count(st1)[0] == len(st1) and count(st2)[1] == len(st2)) or (count(st2)[0] == len(st2) and count(st1)[1] == len(st1))\n\n# function to find the minimum number of operations to make the strings appropriate\ndef min_operations(st1, st2):\n    if is_appropriate(st1, st2):\n        return 0\n    if st1[0] == 'a' and st2[-1] == 'b':\n        return 1 + min_operations(st2, st1)\n    if st1[0] == 'b' and st2[-1] == 'a':\n        return 1 + min_operations(st1[1:], st2[:-1])\n    if st1[0] == 'a':\n        return 1 + min_operations(st1[1:], st2)\n    return 1 + min_operations(st1, st2[:-1])\n\n# find the minimum number of operations\nnum_operations = min_operations(s, t)\n\n# print the number of operations\nprint(num_operations)\n\n# print the operations\nfor i in range(num_operations):\n    print(f'1 {len(s) - i}')", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "def solve(n, d):\n    d = sorted(d)\n    ans = 1\n    for i in range(n):\n        ans *= d[i]\n        ans %= 998244353\n    return ans\n\nn = int(input())\nd = list(map(int, input().split()))\nprint(solve(n, d))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "# \u3053\u306e\u89e3\u6cd5\u306f\u5618\u3092\u542b\u3080\n\nfrom itertools import groupby\nH, W = list(map(int, input().split()))\nS_ = [\"\" for _ in range(W)]\nT_ = []\nfor _ in range(H):\n    s = input()\n    T_.append(s)\n    for i, c in enumerate(s):\n        S_[i] += c\nT = [sorted(t) for t in T_]\nS = [sorted(s) for s in S_]\ncnt = 0\nfor _, g in groupby(sorted(T)):\n    if len(list(g))%2:\n        cnt += 1\nif H%2 < cnt:\n    print(\"NO\")\n    return\ncnt = 0\nfor _, g in groupby(sorted(S)):\n    if len(list(g))%2:\n        cnt += 1\nif W%2 < cnt:\n    print(\"NO\")\n    return\nif W%2 or H%2:\n    print(\"YES\")\n    return\nT1 = []\nT2 = []\nfor i, (_, t) in enumerate(sorted(zip(T, T_))):\n    if i%2:\n        T1.append(t)\n    else:\n        T2.append(t)\nT_p = T1 + T2[::-1]\nS_pp = [\"\" for _ in range(W)]\nfor t in T_p:\n    for i, c in enumerate(t):\n        S_pp[i] += c\nS1 = []\nS2 = []\nfor i, (_, s) in enumerate(sorted(zip(S, S_pp))):\n    if i%2:\n        S1.append(s)\n    else:\n        S2.append(s)\nS_p = S1 + S2[::-1]\nfor s1, s2 in zip(S_p, S_p[::-1]):\n    for c1, c2 in zip(s1, s2[::-1]):\n        if c1!=c2:\n            print(\"NO\")\n            return\nprint(\"YES\")\n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "MOD=int(1e9+7)\nn,k=list(map(int,input().split()))\nif k<2:p=n-(1-k)\nelse:\n\tt=1\n\ta=k\n\twhile a!=1:\n\t\ta=a*k%n\n\t\tt+=1\n\tp=(n-1)//t\nprint(pow(n,p,MOD))\n\n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "def is_beautiful(a, b, c, d):\n    if a < b or b < c or c < d:\n        return False\n    if a == b and b == c and c == d:\n        return True\n    return False\n\n\ndef beautiful_sequence(a, b, c, d):\n    if not is_beautiful(a, b, c, d):\n        return \"NO\"\n    return \"YES\"\n\n\nif __name__ == \"__main__\":\n    a, b, c, d = map(int, input().split())\n    print(beautiful_sequence(a, b, c, d))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "# This program uses a BFS algorithm to find the shortest path from the frog's initial position to the target leaf.\n# It will also keep track of the number of leaves removed.\n# If the frog can reach the target leaf, it will output the minimum number of leaves removed.\n# If the frog cannot reach the target leaf, it will output -1.\nimport queue\n\n# Read the input\nH, W = map(int, input().split())\ngrid = []\nfor _ in range(H):\n    row = input()\n    grid.append(row)\n\n# Define a function to check if a square is a valid square\ndef is_valid(x, y):\n    return 0 <= x < H and 0 <= y < W and grid[x][y] != '.'\n\n# Define a function to perform a BFS search\ndef bfs(start_x, start_y, target_x, target_y):\n    # Initialize variables\n    visited = [[False] * W for _ in range(H)]\n    removed_leaves = 0\n    queue = [[start_x, start_y]]\n\n    # Perform the BFS search\n    while queue:\n        x, y = queue.pop(0)\n\n        # If the current square is the target, return the number of removed leaves\n        if x == target_x and y == target_y:\n            return removed_leaves\n\n        # Check the adjacent squares\n        for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n            next_x, next_y = x + dx, y + dy\n            if is_valid(next_x, next_y) and not visited[next_x][next_y]:\n                # Mark the current square as visited\n                visited[next_x][next_y] = True\n\n                # If the current square is a leaf, increase the number of removed leaves\n                if grid[next_x][next_y] == 'o':\n                    removed_leaves += 1\n\n                # Add the current square to the queue\n                queue.append([next_x, next_y])\n\n    # If the target cannot be", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "MOD = 1000000007\n\n\ndef isSubset(a, b):\n\treturn (a & b) == a\n\n\ndef isIntersect(a, b):\n\treturn (a & b) != 0\n\n\n# Solve for each weakly connected component (WCC)\ndef cntOrder(s, t):\n\tp = len(s)\n\tm = len(t)\n\n\tinMask = [0 for i in range(m)]\n\n\tfor x in range(p):\n\t\tfor i in range(m):\n\t\t\tif t[i] % s[x] == 0:\n\t\t\t\tinMask[i] |= 1 << x\n\n\tcnt = [0 for mask in range(1<<p)]\n\tfor mask in range(1<<p):\n\t\tfor i in range(m):\n\t\t\tif isSubset(inMask[i], mask):\n\t\t\t\tcnt[mask] += 1\n\n\tdp = [[0 for mask in range(1<<p)] for k in range(m+1)]\n\tfor i in range(m):\n\t\tdp[1][inMask[i]] += 1\n\tfor k in range(m):\n\t\tfor mask in range(1<<p):\n\t\t\tfor i in range(m):\n\t\t\t\tif not isSubset(inMask[i], mask) and isIntersect(inMask[i], mask):\n\t\t\t\t\tdp[k+1][mask | inMask[i]] = (dp[k+1][mask | inMask[i]] + dp[k][mask]) % MOD\n\t\t\tdp[k+1][mask] = (dp[k+1][mask] + dp[k][mask] * (cnt[mask] - k)) % MOD\n\n\treturn dp[m][(1<<p)-1]\n\n\ndef dfs(u):\n\tnonlocal a, graph, degIn, visited, s, t\n\n\tvisited[u] = True\n\tif degIn[u] == 0:\n\t\ts.append(a[u])\n\telse:\n\t\tt.append(a[u])\n\n\tfor v in graph[u]:\n\t\tif not visited[v]:\n\t\t\tdfs(v)\n\n\ndef main():\n\tnonlocal a, graph, degIn, visited, s, t\n\n\t# Reading input\n\tn = int(input())\n\ta = list(map(int, input().split()))\n\n\t# Pre-calculate C(n, k)\n\tc = [[0 for j in range(n)] for i in range(n)]\n\tfor i in range(n):\n\t\tc[i][0] = 1\n\t\tfor j in range(1, i+1):\n\t\t\tc[i][j] = (c[i-1][j-1] + c[i-1][j]) % MOD\t\n\n\t# Building divisibility graph\n\tdegIn = [0 for u in range(n)]\n\tgraph = [[] for u in range(n)]\n\tfor u in range(n):\n\t\tfor v in range(n):\n\t\t\tif u != v and a[v] % a[u] == 0:\n\t\t\t\tgraph[u].append(v)\n\t\t\t\tgraph[v].append(u)\n\t\t\t\tdegIn[v] += 1\n\n\t# Solve for each WCC of divisibility graph and combine result\n\tans = 1\n\tcurLen = 0\n\tvisited = [False for u in range(n)]\n\tfor u in range(n):\n\t\tif not visited[u]:\n\t\t\ts = []\n\t\t\tt = []\n\t\t\tdfs(u)\n\n\t\t\tif len(t) > 0:\n\t\t\t\tsz = len(t) - 1\n\t\t\t\tcnt = cntOrder(s, t)\n\n\t\t\t\t# Number of orders for current WCC\n\t\t\t\tans = (ans * cnt) % MOD\n\t\t\t\t# Number of ways to insert <sz> number to array of <curLen> elements\n\t\t\t\tans = (ans * c[curLen + sz][sz]) % MOD\n\t\t\t\tcurLen += sz\t\t\n\n\tprint(ans)\n\ndef __starting_point():\n\tmain()\n__starting_point()", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "n, t = map(int, input().split())\ns = bin(n + 2)[2:]\nl = len(s)\n\nif t & (t - 1):\n    ans = 0\nelse:\n    t = t.bit_length()\n    f = [[0] * (l + 1) for i in range(l + 1)]\n    for i in range(l + 1):\n        f[i][0] = f[i][i] = 1\n        for j in range(1, i):\n            f[i][j] = f[i - 1][j - 1] + f[i - 1][j]\n\n    ans = c = 0\n    for i in range(l):\n        if s[i] == '1':\n            if t - c <= l - i - 1:\n                ans += f[l - i - 1][t - c]\n            c += 1\n    if t == 1: ans -= 1\nprint(ans)", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "def find_longest_subsegment(arr):\n    n = len(arr)\n    longest_subsegment = 0\n    start = 0\n    end = 0\n\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            end = i\n        else:\n            start = i\n            end = i\n\n        longest_subsegment = max(longest_subsegment, end - start + 1)\n\n    return longest_subsegment\n\nn = int(input())\narr = list(map(int, input().split()))\nresult = find_longest_subsegment(arr)\nprint(result)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "s = input()\ni = 0\nf = True\nwhile len(s):\n\tif s[0] != chr(97 + i):\n\t\tf = False\n\t\tbreak\n\ts = s.replace(chr(97 + i), '')\n\ti += 1\nprint('YES' if f else 'NO')", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "def get_smallest_beautiful_number(n, k, x):\n    if n <= k:\n        return x\n\n    i = 0\n    while i < n - k:\n        if x[i] < x[i + k]:\n            return ''.join(x[:i + 1]) + ''.join(x[i + 1:])\n        i += 1\n\n    return ''.join(x)\n\n\nn, k = map(int, input().split())\nx = input()\n\ny = get_smallest_beautiful_number(n, k, x)\nm = len(y)\n\nprint(m)\nprint(y)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "def grundy(a,k):\n    while a >= k:\n        q = a//k\n        if (a-q*k)%(q+1)==0: return a//k\n        a -= (q+1)*((a-q*k)//(q+1) + 1)\n    return 0\n\nn, = map(int,input().split())\ng = 0\nfor _ in range(n):\n    g ^= grundy(*map(int,input().split()))\nprint(\"Takahashi\" if g else \"Aoki\")", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "from heapq import heappush, heappop\n\n# Read the number of bottles\nn = int(input())\n\n# Read the amount of soda remaining in each bottle\na = list(map(int, input().split()))\n\n# Read the volume of each bottle\nb = list(map(int, input().split()))\n\n# Initialize a list to store the remaining soda in each bottle\nsoda = []\n\n# Iterate through each bottle\nfor i in range(n):\n    # Calculate the remaining soda in the bottle\n    remaining = b[i] - a[i]\n    # If there is remaining soda, add it to the list\n    if remaining > 0:\n        heappush(soda, (remaining, i))\n\n# Initialize the number of bottles to store the soda\nk = len(soda)\n\n# Initialize the time to pour the soda\nt = 0\n\n# While there are more than one bottle in the list\nwhile len(soda) > 1:\n    # Get the bottle with the least remaining soda\n    (min_soda, min_index) = heappop(soda)\n    \n    # Get the bottle with the most remaining soda\n    (max_soda, max_index) = heappop(soda)\n    \n    # Calculate the amount of soda to pour from the max bottle to the min bottle\n    pour = min(max_soda, b[min_index] - min_soda)\n    \n    # Update the time to pour the soda\n    t += pour\n    \n    # Update the amount of soda in the max bottle\n    max_soda -= pour\n    \n    # If there is remaining soda in the max bottle, add it back to the list\n    if max_soda > 0:\n        heappush(soda, (max_soda, max_index))\n    \n    # If the min bottle is not full, add it back to the list\n    if min_soda + pour < b[min_index]:\n        heappush", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "def main():\n    def center(xx):\n        return sum(xx[::2]) * .25, sum(xx[1::2]) * .25\n\n    aa = list(map(float, input().split()))\n    bb = list(map(float, input().split()))\n    x, y = center(aa)\n    for i in range(0, 8, 2):\n        aa[i] -= x\n        bb[i] -= x\n        aa[i + 1] -= y\n        bb[i + 1] -= y\n    x, y = center(bb)\n    if x < 0.:\n        for i in range(0, 8, 2):\n            bb[i] *= -1.\n    if y < 0.:\n        for i in range(1, 8, 2):\n            bb[i] *= -1.\n    x, y = max(aa[i:i + 2] for i in range(0, 8, 2))\n    for i in range(0, 8, 2):\n        bb[i] -= x\n        bb[i + 1] -= y\n    [x1, y1], [x2, y2] = sorted(bb[i:i + 2] for i in range(0, 8, 2))[:2]\n    print(('NO', 'YES')[x1 <= 0 and x1 + y1 <= 0. and y2 <= 0. and x2 + y2 <= 0.])\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "def answer(N, c_AA, c_AB, c_BA, c_BB):\n    MOD = 10**9 + 7\n\n    # Create a 2D array to store the number of possible strings with\n    # the length of s being i and the last character being A or B\n    dp = [[0, 0] for _ in range(N+1)]\n\n    # Initialize the number of possible strings with the length of s\n    # being 1 and the last character being A or B\n    dp[1] = [1, 1]\n\n    # Loop through the length of s from 2 to N\n    for i in range(2, N+1):\n        # For the last character being A\n        if c_AA == 'A':\n            dp[i][0] += dp[i-2][0]\n        if c_AB == 'A':\n            dp[i][0] += dp[i-2][1]\n\n        # For the last character being B\n        if c_BA == 'B':\n            dp[i][1] += dp[i-2][0]\n        if c_BB == 'B':\n            dp[i][1] += dp[i-2][1]\n\n        # Take modulo of the values to avoid overflow\n        dp[i][0] %= MOD\n        dp[i][1] %= MOD\n\n    # Return the sum of possible strings with the length of s being N\n    return (dp[N][0] + dp[N][1]) % MOD\n\n# Read input from standard input\nN = int(input())\nc_AA, c_AB, c_BA, c_BB = input(), input(), input(), input()\n\n# Call the answer function and print the result\nprint(answer(N, c_AA, c_AB, c_BA, c_BB))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "# Input\n\na, b, h, w, n = map(int, input().split())\na_i = list(map(int, input().split()))\n\n# Define function to check if the rectangle can be placed\ndef check(h, w):\n    return a <= h and b <= w\n\n# Check if the rectangle can be placed on the initial field\nif check(h, w):\n    print(0)\n    exit()\n\n# Initialize the number of extensions needed\nans = 0\n\n# Loop through all extensions\nfor a_i in a_i:\n    # Check if the rectangle can be placed after using the extension\n    if check(a_i * h, w) or check(h, a_i * w):\n        # If yes, increase the number of extensions needed\n        ans += 1\n        break\n\n# Check if it is possible to place the rectangle on the field\nif ans == 0:\n    print(-1)\nelse:\n    print(ans)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "x1,y1=list(map(int,input().split()))\nx2,y2=list(map(int,input().split()))\n\nif x1==x2:\n    print(4+(abs(y2-y1)+1)*2)\nelif y1==y2:\n    print((abs(x2-x1)+1)*2+4)\nelse:\n    print((abs(x2-x1)+1)*2+(abs(y2-y1)+1)*2)\n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "def rebus(rebus):\n    # Split the rebus into a list of terms\n    terms = rebus.split()\n\n    # Define a function to check if the solution is valid\n    def is_valid(terms):\n        # Replace question marks with integers from 1 to n\n        for i in range(len(terms)):\n            if terms[i] == '?':\n                for j in range(1, n + 1):\n                    terms[i] = str(j)\n                    if eval(''.join(terms)) == n:\n                        return True\n                terms[i] = '?'\n        return False\n\n    # Iterate through all terms\n    for term in terms:\n        # Check if the term is an integer\n        if term.isdigit():\n            n = int(term)\n            break\n\n    # Check if the solution is valid\n    if is_valid(terms):\n        return \"Possible\"\n    else:\n        return \"Impossible\"\n\n# Example rebus\nrebus = \"? + ? - ? + ? + ? = 42\"\n\n# Output the solution\nprint(rebus(rebus))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "#!/usr/bin/env python3\n\nfrom collections import defaultdict\nfrom sys import stdin, setrecursionlimit\n\nsetrecursionlimit(10 ** 6)\n\n\ndef find(parent, i):\n    if parent[i] == i:\n        return i\n    parent[i] = find(parent, parent[i])\n    return parent[i]\n\n\ndef union(parent, rank, i, j):\n    iroot = find(parent, i)\n    jroot = find(parent, j)\n\n    if rank[iroot] < rank[jroot]:\n        parent[iroot] = jroot\n    elif rank[iroot] > rank[jroot]:\n        parent[jroot] = iroot\n    else:\n        parent[jroot] = iroot\n        rank[iroot] += 1\n\n\ndef get_answer(n, m, x, edges):\n    parent = [i for i in range(n + 1)]\n    rank = [0] * (n + 1)\n\n    for i in range(m):\n        u, v, w = edges[i]\n        if w == 0:\n            union(parent, rank, u, v)\n\n    components = defaultdict(list)\n    for i in range(1, n + 1):\n        components[find(parent, i)].append(i)\n\n    dp = [0] * (x + 1)\n    for root in components:\n        dp[0] += 1\n        for i in range(1, x + 1):\n            dp[i] += dp[i - 1]\n\n        for v, w in components[root]:\n            if w == 1:\n                for i in range(x, 0, -1):\n                    dp[i] -= dp[i - 1]\n\n    return dp[x]\n\n\nif __name__ == '__main__':\n    n, m = map(int, input().split())\n    x = int(input())\n\n    edges = []\n    for _ in range", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "import sys\n\ndef debug(x, table):\n    for name, val in table.items():\n        if x is val:\n            print('DEBUG:{} -> {}'.format(name, val), file=sys.stderr)\n            return None\n\ndef solve():\n    n, l, r = map(int, input().split())\n    ans = f(n, r) - f(n, l - 1)\n\n    print(ans)\n\ndef f(n, i):\n    if n == 0:\n        return 0\n    if i == 0:\n        return 0\n\n    mx = 2**(n.bit_length())\n\n    if i == mx//2:\n        return n//2 + n%2\n    elif i < mx//2:\n        return f(n//2, i)\n    else:\n        return n//2 + n%2 + f(n//2, i - mx//2)\n\ndef __starting_point():\n    solve()\n__starting_point()", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "\ndef blokovi(x):\n    ret = [0]\n    for i in range(len(x) - 1):\n        if x[i] != x[i + 1]:\n            ret.append(i + 1)\n    return ret + [len(x)]\n\ns = input()\nt = input()\n\nss = blokovi(s)\ntt = blokovi(t)\n\nif s[-1] == 'a':\n    s += 'b'\nelse:\n    s += 'a'\n\nif t[-1] == 'a':\n    t += 'b'\nelse:\n    t += 'a'\n\ndef greedy(x, y, rev=False):\n    i, j = len(x) - 1, len(y) - 1\n    swaps = []\n    while True:\n        while i >= 0 and x[i] == 'a':\n            i -= 1\n        while j >= 0 and y[j] == 'b':\n            j -= 1\n        if i < 0 and j < 0:\n            break\n        x, y = y, x\n        if rev:\n            swaps.append((j + 1, i + 1))\n        else:\n            swaps.append((i + 1, j + 1))\n        i, j = j, i\n    return swaps\n\ndef solve(x, y):\n    p = greedy(x, y)\n    q = greedy(y, x, True)\n    if len(p) < len(q):\n        return p\n    return q\n\nprobao = set()\n\ntotal = len(ss) + len(tt)\nsol = solve(s[:-1], t[:-1])\nfor b, i in enumerate(ss):\n    for c in range((2 * b + len(tt) - len(ss)) // 2 - 2, (2 * b + len(tt) - len(ss) + 1) // 2 + 3):\n        if 0 <= c < len(tt):\n            j = tt[c]\n            bs = b + len(tt) - c - 1\n            bt = c + len(ss) - b - 1\n            if abs(bs - bt) > 2:\n                continue\n            proba = (bs, bt, s[i], t[j])\n            if proba in probao:\n                continue\n            probao.add(proba)\n            s2 = t[:j] + s[i:-1]\n            t2 = s[:i] + t[j:-1]\n            if i + j > 0: \n                if i + j == len(s) + len(t) - 2:\n                    cand = solve(t2, s2)\n                else:\n                    cand = [(i, j)] + solve(s2, t2)\n            else:\n                cand = solve(s2, t2)\n            if len(cand) < len(sol):\n                sol = cand\n\nprint(len(sol))\nfor i, j in sol:\n    print(i, j)\n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\n\nd = [[10 ** 6] * 3 for i in range(n)]\nd[0][0] = 1\nif a[0] & 1:\n    d[0][1] = 0\nif a[0] & 2:\n    d[0][2] = 0\n\nfor i in range(1, n):\n    d[i][0] = min(d[i - 1]) + 1\n    if a[i] & 1:\n        d[i][1] = min(d[i - 1][0], d[i - 1][2])\n    if a[i] & 2:\n        d[i][2] = min(d[i - 1][0], d[i - 1][1])\n\nprint(min(d[-1]))\n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "read = lambda: list(map(int, input().split()))\nn, m = read()\na = [list(read()) for i in range(n)]\nb = [a[i][:] for i in range(n)]\nflag = True\nfor i in range(n):\n            c = sorted(b[i])\n            d = b[i][:]\n            dif = sum(c[j] != d[j] for j in range(m))\n            if dif > 2: flag = False\nif flag:\n            print('YES')\n            return\nfor k1 in range(m):\n    for k2 in range(k1 + 1, m):\n        b = [a[i][:] for i in range(n)]\n        for i in range(n):\n                b[i][k1], b[i][k2] = b[i][k2], b[i][k1]\n        flag = True\n        for i in range(n):\n            c = sorted(b[i])\n            d = b[i][:]\n            dif = sum(c[j] != d[j] for j in range(m))\n            if dif > 2: flag = False\n        if flag:\n            print('YES')\n            return\nprint('NO')\n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "import sys\ninput = sys.stdin.readline\n\nfrom fractions import gcd\nimport numpy as np\n\nMOD = 10 ** 9 + 7\n\nS = int(input())\n\nM = 10**4\n\ndef type_1(S):\n    cnt = 0\n    # S 2\u7a2e\u306e\u6841\u6570k,k+1\u304b\u3089\u306a\u308b\u3002\u3055\u3089\u306bk>=9\u3092\u4eee\u5b9a\u3059\u308b\u3002\n    # \u9805\u6570n\u3068\u3059\u308b\u3068\u3001kn < S < (k+1)n \u3068\u306a\u308b(k,n)\u306e\u500b\u6570\u3092\u6570\u3048\u308b\n    # \u307e\u305ak > M\u3068\u306a\u308b\u3082\u306e\u3092\u6570\u3048\u308b\u3002\u3053\u306e\u3068\u304d1<=n<=M\u3067\u3042\u308b\u3002\n    n = np.arange(1,M+1)\n    k_max = (S-1)//n\n    k_min = np.maximum(M+1,S//n)\n    cnt += np.maximum(0,k_max - k_min + 1).sum()\n    # \u6b21\u306b\u30019<=k<=M\u3068\u306a\u308b\u3082\u306e\u3092\u6570\u3048\u308b\n    k = np.arange(9,M+1)\n    n_max = (S-1)//k\n    n_min = S//(k+1) + 1\n    cnt += np.maximum(0,n_max-n_min+1).sum()\n    return cnt\n\ntype_1(S)\n\ndef type_2(S):\n    # S 1\u7a2e\u306e\u6841\u6570\u304b\u3089\u306a\u308b\u3002\n    cnt = 0\n    div = np.arange(1,M+1,dtype=np.int64)\n    div = set(div[S%div==0])\n    div |= set(S//x for x in div)\n    for d in div:\n        n = S//d\n        # d\u6841\u306e\u3082\u306e\u3092n\u500b\u4f7f\u3046\u3088\u3046\u306b\u3057\u305f\u3044\n        if d < 10:\n            total = 9 * 10 ** (d-1)\n            cnt += max(0,total-n+1)\n        else:\n            total = 9 * pow(10,int(d)-1,MOD)\n            cnt += total-n+1\n    return cnt % MOD\n\ndef type_3(S):\n    cnt = 0\n    # S 2\u7a2e\u4ee5\u4e0a\u306e\u6841\u6570\u304b\u3089\u306a\u308b\u30029\u6841\u306e\u6570\u4ee5\u4e0b\u3057\u304b\u4f7f\u308f\u306a\u3044\u3002\n    # \u3053\u3053\u306f\u9069\u5f53\u306b\u3044\u3051\u305d\u3046\n    for R in range(1,10):\n        for L in range(1,R):\n            mid = sum(i*9*10**(i-1) for i in range(L+1,R)) # \u9014\u4e2d\u306e\u6841\u6570\u306e\u5bc4\u4e0e\n            rest = S - (L+mid+R)\n            if rest < 0:\n                continue\n            # L\u304c1+x\u500b\u3001R\u304c1+y\u500b\u3068\u3057\u3066\n            # Lx + Ry = rest, 0<=x<=x_max, 0<=y<=y_max\n            x_max = 9*10**(L-1)-1\n            y_max = 9*10**(R-1)-1\n            g = gcd(L,R)\n            if rest % g != 0:\n                continue\n            L0 = L//g\n            R0 = R//g\n            rest //= g\n            # x mod R0\u304c\u4e00\u610f\u306b\u6c7a\u307e\u308b\n            for x0 in range(R0):\n                if (L0*x0-rest)%R0 == 0:\n                    break\n            y0 = (rest-L0*x0)//R0\n            # (x0 + tR, y0-tL)\u3068\u3057\u3066\u89e3\u304c\u30d1\u30e9\u30e1\u30fc\u30bf\u8868\u793a\u3067\u304d\u308b\n            # 0 <= x0 + tR <= x_max\n            t_min = 0\n            t_max = (x_max-x0)//R0\n            # y0-tL >= 0\n            t_max = min(t_max,y0//L0)\n            # y0-tL <= y_max iff y0-y_max <= tL\n            t_min = max(t_min,(y0-y_max+L-1)//L0)\n            cnt += max(0, t_max - t_min + 1)\n    return cnt\n\nanswer = (type_1(S) + type_2(S) + type_3(S)) % MOD\nprint(answer)", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "from collections import defaultdict\n\nn, k = map(int, input().split())\nancient_numbers = list(map(int, input().split()))\n\n# Function to find if there exists a winning strategy\ndef is_winning_strategy_exist(n, k, ancient_numbers):\n\n    # Create an empty dictionary to store the counts\n    count = defaultdict(int)\n\n    # For each ancient number\n    for c in ancient_numbers:\n\n        # Calculate the remainder and increment its count\n        remainder = c % k\n        count[remainder] += 1\n\n    # If there are two or more ancient numbers with the same remainder\n    if max(count.values()) >= 2:\n\n        # Then Arya has a winning strategy\n        return True\n\n    # Otherwise, Arya does not have a winning strategy\n    return False\n\n# Check if Arya has a winning strategy\nif is_winning_strategy_exist(n, k, ancient_numbers):\n\n    # Print \"Yes\" if Arya has a winning strategy\n    print(\"Yes\")\n\nelse:\n\n    # Print \"No\" if Arya does not have a winning strategy\n    print(\"No\")", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "# -*- coding: UTF-8 -*-\n\ns = input()\nstatus = ['a', 'b', 'c']\ncount = [0, 0, 0]\np = 0\nflag = True\n\nfor c in s:\n    while p < 3 and c != status[p]:\n        p += 1\n    if p >= 3:\n        flag = False\n        break\n    count[p] += 1\n\nif count[0] == 0 or count[1] == 0 or count[2] == 0:\n    flag = False\nif count[0] != count[2] and count[1] != count[2]:\n    flag = False\nif flag:\n    print('YES')\nelse:\n    print('NO')\n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "# import necessary libraries\nfrom collections import deque\nimport sys\n\n# read input from file\nT = int(sys.stdin.readline())\nfor _ in range(T):\n    # read the number of bags and dishes\n    N = int(sys.stdin.readline())\n    # read the number of coins in each bag\n    a = list(map(int, sys.stdin.readline().split()))\n\n    # initialize the number of coins in each dish\n    b = [0] * N\n    # initialize the number of coins in each bag\n    c = a.copy()\n\n    # initialize the winner\n    win = \"First\"\n\n    # simulate the game\n    for i in range(2 * N - 1):\n        # player 1's turn\n        if i % 2 == 0:\n            # find the bag with the highest number of coins\n            bag = c.index(max(c))\n            # move the coins from the bag to the dish\n            b[bag] = c[bag]\n            c[bag] = 0\n        # player 2's turn\n        else:\n            # find the dish with the highest number of coins\n            dish = b.index(max(b))\n            # remove one coin from the dish\n            b[dish] -= 1\n            # if there are no coins left in the dish, player 1 wins\n            if b[dish] == 0:\n                win = \"Second\"\n                break\n\n    # print the winner\n    print(win)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "import sys\ninput = sys.stdin.readline\n\nimport itertools\nfrom collections import defaultdict\nimport numpy as np\n\nN = int(input())\nX = set(int(x) for x in input().split())\n\n# 2\u306f\u7d20\u6570\u3067\u306a\u3044\u3068\u3057\u3066\u6271\u3063\u3066\nU = 10**7 + 100\nis_prime = np.zeros(U,dtype=np.bool)\nis_prime[3::2] = 1\nfor p in range(3,U,2):\n    if p*p > U:\n        break\n    if is_prime[p]:\n        is_prime[p*p::p+p] = 0\n\n# imos\u3067\u5024\u3092\u5165\u308c\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u5834\u6240\nX ^= set(x+1 for x in X)\n\nEV = set(x for x in X if x%2 == 0)\nOD = set(x for x in X if x%2 == 1)\n\n# 1\u624b\u3067\u3068\u308c\u308b\u30da\u30a2\u3092\u898b\u3064\u3051\u308b\uff1a\u6700\u5927\u30de\u30c3\u30c1\u30f3\u30b0\n# \u5947\u70b9\u304b\u3089\u5076\u70b9\u306b\u8fba\u3092\u8cbc\u308b\nsource = -1\nsink = -2\ngraph = defaultdict(dict)\nfor x in EV:\n    graph[x][sink] = 1\n    graph[sink][x] = 0\nfor x in OD:\n    graph[source][x] = 1\n    graph[x][source] = 0\nfor x,y in itertools.product(OD,EV):\n    if is_prime[abs(x-y)]:\n        graph[x][y] = 1\n        graph[y][x] = 0\n\ndef bfs():\n    level = defaultdict(int)\n    q = [source]\n    level[source] = 1\n    d = 1\n    while q:\n        d += 1\n        if level[sink] != 0:\n            break\n        qq = []\n        for x in q:\n            for y,cap in graph[x].items():\n                if cap==0 or level[y]!=0:\n                    continue\n                level[y] = d\n                qq.append(y)\n        q = qq\n    return level\n\ndef dfs(v,f,level,itr):\n    if v == sink:\n        return f\n    for w,cap in itr[v]:\n        if cap==0 or level[w]!=level[v]+1:\n            continue\n        d = dfs(w,min(f,cap),level,itr)\n        if d:\n            graph[v][w] -= d\n            graph[w][v] += d\n            return d\n    return 0\n\ndef max_flow():\n    flow = 0\n    while True:\n        level = bfs()\n        if level[sink] == 0:\n            return flow\n        itr = {v:iter(graph[v].items()) for v in graph}\n        while True:\n            f = dfs(source,10**9,level,itr)\n            if f == 0:\n                break\n            flow += f\n\nf = max_flow()\n\nod = len(OD); ev = len(EV)\nanswer = f\nod -= f; ev -= f\nanswer += 2*(od//2); od %= 2\nanswer += 2*(ev//2); ev %= 2\nif od:\n    answer += 3\nprint(answer)", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "import sys\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\nst = set()\nidx = 0\n\ni = 0\nj = 0\nwhile i < n and a[i] == 0: i += 1\nwhile j < n and a[i] != b[j]: j += 1\n\nb = b[j:] + b[:j] \nj = 0\nwhile i < n:\n    if a[i] != 0:\n        while j < n and b[j] == 0: j += 1\n        if b[j] != a[i] or j == n:\n            print('NO')\n            return\n        j += 1\n    i += 1\nprint('YES')\n        \n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "from sys import stdin, stdout\nimport math, collections\nmod = 10**9+7\n\ndef isPower(n):\n    if (n <= 1):\n        return True\n    for x in range(2, (int)(math.sqrt(n)) + 1):\n        p = x\n        while (p <= n):\n            p = p * x\n            if (p == n):\n                return True\n\n    return False\nn = int(input())\narr = [0,1,2,1,4,3,2,1,5,6,2,1,8,7,5,9,8,7,3,4,7,4,2,1,10,9,3,6,11,12]\nans = arr[int(math.log(n, 2))]\ns = int(math.log(n, 2))\nfor i in range(3, int(n**0.5)+1):\n    if not isPower(i):\n        ans^=arr[int(math.log(n, i))]\n        s+=int(math.log(n, i))\nans^=((n-s)%2)\nprint(\"Vasya\" if ans else \"Petya\")", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nn = int(input())\nabove = n // 3\nbelow = n - above\nfor i in range(above):\n    print(2 * i + 1, 3)\nfor i in range(below):\n    print(i, 0)\n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "\ninp = input().split(\" \")\nn = int(inp[0])\nk = int(inp[1])\n\ns = set()\nfor i in range(n):\n    a = input().split(' ')\n    x = 0\n    for j in range(k):\n        x = 2 * x + int(a[j])\n    s.add(x)\n\nfor i in range(16):\n    if i in s:\n        for j in range(16):\n            if j in s:\n                if i & j == 0:\n                    print(\"YES\")\n                    return\n\n\nprint(\"NO\")\n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "import math\nimport sys\ninput=sys.stdin.readline\n \np=(10**9)+7\npri=p\nfac=[1 for i in range((10**6)+1)]\nfor i in range(2,len(fac)):\n    fac[i]=(fac[i-1]*(i%pri))%pri\ndef modi(x):\n    return (pow(x,p-2,p))%p;\n    \ndef ncr(n,r):\n    x=(fac[n]*((modi(fac[r])%p)*(modi(fac[n-r])%p))%p)%p\n    return x;\n\ndef prime(x):\n    ans=[]\n    while(x%2==0):\n        x=x//2\n        ans.append(2)\n    for i in range(3,int(math.sqrt(x))+1,2):\n        while(x%i==0):\n            ans.append(i)\n            x=x//i\n    if(x>2):\n        ans.append(x)\n\n    return ans;\n\n\n\nn=int(input())\n\nz=list(map(int,input().split()))\nans=[]\nfor i in range(len(z)):\n    m=prime(z[i])\n    ans.extend(m)\n  \nans.sort()\nif(ans.count(1)==len(ans)):\n    print(1)\n    return\ncn=[]\ncount=1\nfor i in range(1,len(ans)):\n    if(ans[i]==ans[i-1]):\n        count+=1\n    else:\n        cn.append(count)\n        count=1\ncn.append(count)\nal=1\n\nfor i in range(len(cn)):\n    al=al*ncr(n+cn[i]-1,n-1)\n    al%=pri\nprint(al)\n    \n    \n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "def is_cube(lines):\n    # Check if the given lines represent a cube.\n    points = []\n    for line in lines:\n        points.append(tuple(map(int, line.split())))\n    for i in range(len(points)):\n        for j in range(i + 1, len(points)):\n            diff = [points[i][k] - points[j][k] for k in range(3)]\n            if diff not in points:\n                return False\n    return True\n\nlines = []\nfor _ in range(8):\n    lines.append(input())\n\nif is_cube(lines):\n    print(\"YES\")\n    for line in lines:\n        print(line)\nelse:\n    print(\"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "def solve(n, a):\n    # Initialize the answer and the number of operations.\n    answer = 0\n    num_ops = 0\n    # Create a stack to store the current sequence.\n    stack = a[:]\n    # Perform the operations until the stack has only one element.\n    while len(stack) > 1:\n        # Find the maximum element and its index.\n        max_elem = max(stack)\n        max_idx = stack.index(max_elem)\n        # If the maximum element is at either end of the sequence, delete it.\n        if max_idx == 0 or max_idx == len(stack) - 1:\n            del stack[max_idx]\n        # If the maximum element is not at either end of the sequence, replace it with the sum of the two elements that are adjacent to it. Then, delete those two elements.\n        else:\n            stack[max_idx] = stack[max_idx - 1] + stack[max_idx + 1]\n            del stack[max_idx + 1]\n            del stack[max_idx - 1]\n        # Update the answer and the number of operations.\n        answer = max(answer, max_elem)\n        num_ops += 1\n    # Print the answer and the number of operations.\n    print(answer)\n    print(num_ops)\n    # Print the indices of the chosen elements.\n    for i in range(num_ops):\n        print(i + 1)\n\n# Read input from Standard Input.\nn = int(input())\na = list(map(int, input().split()))\n# Call the solve function.\nsolve(n, a)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "def get_minimum_complexity(n, bulbs):\n    bulbs = [b for b in bulbs if b != 0]\n    bulb_count = [0] * (n + 1)\n    for bulb in bulbs:\n        bulb_count[bulb] += 1\n\n    # Check if the bulbs are already in the correct order\n    is_ordered = True\n    for i in range(1, n + 1):\n        if bulb_count[i] == 0:\n            continue\n        if bulb_count[i] != 1:\n            is_ordered = False\n            break\n        if i % 2 != bulbs[i - 1] % 2:\n            is_ordered = False\n            break\n\n    if is_ordered:\n        return 0\n\n    # Sort the bulbs\n    sorted_bulbs = sorted(bulbs)\n\n    # Calculate the complexity for all possible positions of each bulb\n    complexity = [0] * (n + 1)\n    for i in range(1, n + 1):\n        complexity[i] = complexity[i - 1] + (sorted_bulbs[i - 1] % 2 == i % 2)\n\n    # Calculate the minimum complexity for each bulb\n    min_complexity = 0\n    for bulb in bulbs:\n        min_complexity += complexity[bulb]\n\n    return min_complexity\n\n\nn = int(input())\nbulbs = list(map(int, input().split()))\nprint(get_minimum_complexity(n, bulbs))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "import math\n\nw, h, alpha = map(int, input().split())\n\nalpha = alpha * math.pi / 180\n\nx = w / 2 * math.cos(alpha) + h / 2 * math.sin(alpha)\ny = w / 2 * math.sin(alpha) - h / 2 * math.cos(alpha)\n\narea = (w * x + h * y) / 2\n\nprint(area)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "a,b=map(int,input().split())\nans=1;mod=1000000009;gh=pow(2,b,mod)\nfor i in range(1,1+a):ans=(ans*(gh-i))%mod\nprint(ans)", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "N = int(input())\na = list(map(int, input().split()))\n\nm = 0\noperations = []\n\nfor i in range(N):\n    for j in range(i+1, N):\n        if a[j] < a[i]:\n            m += 1\n            operations.append((j+1, i+1))\n            a[i] += a[j]\n            a[j] = 0\n\nprint(m)\nfor operation in operations:\n    print(*operation)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "# Input\nn, k = map(int, input().split())\ns = input()\nt = input()\n\n# Initialization\nc = 0\n\n# Iterate through all possible strings\nfor i in range(n):\n    for j in range(i, n):\n        # Check if the current string is a prefix of s or t\n        if s[i:j+1] == s[:j+1] or t[i:j+1] == t[:j+1]:\n            c += 1\n\nprint(c)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "import sys\nfrom collections import defaultdict\n\n# Find the parent of a vertex in a union find data structure.\ndef find_parent(parent, vertex):\n    if parent[vertex] == vertex:\n        return vertex\n    parent[vertex] = find_parent(parent, parent[vertex])\n    return parent[vertex]\n\n# Perform a union operation to merge two connected components in a union find data structure.\ndef union(parent, rank, vertex_1, vertex_2):\n    parent_1 = find_parent(parent, vertex_1)\n    parent_2 = find_parent(parent, vertex_2)\n    if parent_1 == parent_2:\n        return\n    if rank[parent_1] < rank[parent_2]:\n        parent[parent_1] = parent_2\n    elif rank[parent_1] > rank[parent_2]:\n        parent[parent_2] = parent_1\n    else:\n        parent[parent_1] = parent_2\n        rank[parent_2] += 1\n\n# Read input from stdin.\nN, M = map(int, input().split())\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\nedges = []\nfor _ in range(M):\n    U, V = map(int, input().split())\n    edges.append((U, V))\n\n# Initialize the union find data structure.\nparent = [i for i in range(N + 1)]\nrank = [0] * (N + 1)\n\n# Build the union find data structure by adding edges.\nfor edge in edges:\n    union(parent, rank, edge[0], edge[1])\n\n# Find the connected components and calculate their scores.\ncomponents = defaultdict(list)\nfor i in range(1, N + 1):\n    components[find_parent(parent, i)].append(i)\n\nscores = []\nfor component in components.values():\n    score = 0\n    for vertex in component:\n        score += B[vertex - 1]\n    scores.append(abs", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "from functools import reduce\n\n# Read the number of pairs\nn = int(input())\n\n# Initialize an empty list to store the pairs\npairs = []\n\n# Read the pairs and store them in the list\nfor i in range(n):\n    a, b = map(int, input().split())\n    pairs.append([a, b])\n\n# Function to calculate the GCD of two numbers\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\n# Function to calculate the LCM of two numbers\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\n# Function to calculate the WCD of the pairs\ndef weakened_common_divisor(pairs):\n    # Calculate the LCM of the first pair\n    lcm_value = lcm(pairs[0][0], pairs[0][1])\n\n    # Calculate the LCM of the remaining pairs\n    for i in range(1, len(pairs)):\n        lcm_value = lcm(lcm_value, pairs[i][0])\n        lcm_value = lcm(lcm_value, pairs[i][1])\n\n    # Initialize the WCD to 2\n    wcd = 2\n\n    # Check if the WCD exists for the LCM\n    while wcd <= lcm_value:\n        for pair in pairs:\n            if wcd % pair[0] == 0 or wcd % pair[1] == 0:\n                continue\n            else:\n                break\n        else:\n            break\n        wcd += 1\n\n    # If the WCD exists, return it, else return -1\n    if wcd <= lcm_value:\n        return wcd\n    else:\n        return -1\n\n# Calculate the WCD of the pairs and print the result\nresult = weakened_common_divisor(pairs)\nprint(result)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "import sys\ninput = sys.stdin.readline\nimport bisect\n\nN=int(input())\nA=list(map(int,input().split()))\n\nmod=1000000007\n\ndef Combi(a,b):# a\u306f\u5927\u304d\u3044\u304c\u3001b\u306f\u5c0f\u3055\u3044\u3068\u304d\n    if b>a:\n        return 0\n    \n    ANS=1\n    for i in range(min(b,a-b)):\n        ANS=ANS*(a-i)*pow(min(b,a-b)-i,mod-2,mod)%mod\n\n    return ANS%mod\n\ndef alltuple(A):\n    #print(A)\n    ANS=[]\n    MAX=max(A)\n\n    if min(A)!=-1:\n        return [tuple(A)]\n\n    LEN=len(A)\n    for i in range(LEN):\n        if A[i]==-1:\n            if MAX!=-1:\n                A[i]=MAX\n                ANS+=alltuple(A)\n            A[i]=MAX+1\n            ANS+=alltuple(A)\n            A[i]=-1\n            \n    return ANS\n\nALLX=set(alltuple([-1]*N))\n\ndef LIS(A):\n    LEN=len(A)\n    DP=[float(\"inf\")]*LEN # DP[i]\u3067\u3001\u9577\u3055i\u306eLIS\u306e\u6700\u7d42\u8981\u7d20\u306e\u6700\u5c0f\u5024.\n\n    for a in A:\n        pos=bisect.bisect_left(DP,a)\n        DP[pos]=a\n\n    ANS=0\n    for i in range(LEN):\n        if DP[i]!=float(\"inf\"): # float(\"inf\")\u3067\u306a\u3044\u6700\u5c0f\u306e\u3082\u306e\u304cLIS\u306e\u9577\u3055\n            ANS=i\n            \n    return ANS+1\n\nANS=0\nKOSUU=0\n\nfor tu in ALLX:\n    LIS_tu=LIS(tu)\n\n    B=[]\n    for i in range(max(tu)+1):\n        MIN=1<<30\n        for j in range(N):\n            if tu[j]==i:\n                MIN=min(MIN,A[j])\n        B.append(MIN)\n\n    for i in range(len(B)-2,-1,-1):\n        B[i]=min(B[i],B[i+1])\n\n    SB=[0]+sorted(set(B))\n\n    compression_dict={a: ind for ind, a in enumerate(SB)}\n    BC=[compression_dict[m] for m in B]\n\n    LEN=len(B)\n    DPLEN=len(SB)\n    DP=[[0]*(DPLEN) for i in range(LEN+1)]\n    DP[0][0]=1\n\n    for i in range(LEN):\n        for j in range(DPLEN):\n            if DP[i][j]==0:\n                continue\n\n            for k in range(j+1,DPLEN):\n                if k>BC[i]:\n                    break\n                for l in range(i+1,LEN+1):\n                    DP[l][k]+=DP[i][j]*Combi(SB[k]-SB[k-1],l-i)\n                    DP[l][k]%=mod\n\n    KOSUU+=sum(DP[-1])\n    ANS+=sum(DP[-1])*LIS_tu\n\nprint(ANS*pow(KOSUU,mod-2,mod)%mod)", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "n, m = map(int, input().split())\na, d = [1e9], [1e9]\nfor x in range(n):\n    p, s = input().split()\n    [d, a][p < 'B'].append(int(s))\nv = [int(input()) for y in range(m)]\nfor q in [a, d, v]: q.sort()\ns = sum(v)\ni = j = 0\nfor t in v:\n    if t > d[i]: s, i = s - t, i + 1\n    elif t >= a[j]: s, j = s - a[j], j + 1\nif i + j - n: s = 0\nprint(max(s, sum(max(0, y - x) for x, y in zip(a, v[::-1]))))", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "# Input\nn = int(input())\na = list(map(int, input().split()))\n\n# If there are no targets in the grid, output 0\nif all(x == 0 for x in a):\n    print(0)\n    exit()\n\n# Check if there is a valid configuration of targets\nif n % 2 == 0:\n    if a[n // 2] == 0 or a[n // 2 - 1] == 0:\n        print(-1)\n        exit()\n\n# Construct a valid configuration of targets\ntargets = []\n\nfor i in range(1, n + 1):\n    if i % 2 == 0:\n        if a[i - 1] == 3:\n            targets.append((i, n))\n            targets.append((i, n - 1))\n            targets.append((i, n - 2))\n        elif a[i - 1] == 2:\n            targets.append((i, n))\n            targets.append((i, n - 1))\n        elif a[i - 1] == 1:\n            targets.append((i, n))\n    else:\n        if a[i - 1] == 3:\n            targets.append((n, i))\n            targets.append((n - 1, i))\n            targets.append((n - 2, i))\n        elif a[i - 1] == 2:\n            targets.append((n, i))\n            targets.append((n - 1, i))\n        elif a[i - 1] == 1:\n            targets.append((n, i))\n\n# Output\nprint(len(targets))\nfor target in targets:\n    print(target[0], target[1])", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "'''\nCreated on May 4, 2016\n@author: Md. Rezwanul Haque\n'''\nn = int (input())\nif(n<3):print(n)\nelif(n%2==0):\n    if(n%3 == 0 and (n-3)%3 == 0):\n        print((n-1)*(n-2)*(n-3))\n    else:\n        print(n*(n-1)*(n-3))\nelse:\n    print(n*(n-1)*(n-2))\n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\nt = [0] * 2 * n\ns = 0\nfor i in range(n):\n    d = a[i] - i - 1\n    s += abs(d)\n    if d > 0: t[d] += 1\np = sum(t)\nr = (s, 0)\nfor i in range(1, n):\n    d = a[n - i] - 1\n    s += d - p << 1\n    t[d + i] += d > 0\n    p += (d > 0) - t[i]\n    if s < r[0]: r = (s, i)\nprint(*r)", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "n, m = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nx = int(input())\n\ndef sum_subrect(c, x1, x2, y1, y2):\n    return c[x2][y2] - c[x2][y1 - 1] - c[x1 - 1][y2] + c[x1 - 1][y1 - 1]\n\nc = [[0 for _ in range(m + 1)] for _ in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, m + 1):\n        c[i][j] = c[i - 1][j] + c[i][j - 1] - c[i - 1][j - 1] + a[i - 1] * b[j - 1]\n\narea = 0\n\nfor i in range(1, n + 1):\n    for j in range(i, n + 1):\n        left, right = 1, m\n        while left < right:\n            mid = (left + right) // 2\n            if sum_subrect(c, i, j, 1, mid) <= x:\n                left = mid + 1\n            else:\n                right = mid\n        if sum_subrect(c, i, j, 1, left - 1) <= x:\n            area = max(area, (j - i + 1) * (left - 1))\n\nprint(area)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "mod = int(input())\nh1, a1 = map(int, input().split())\nx1, y1 = map(int, input().split())\nh2, a2 = map(int, input().split())\nx2, y2 = map(int, input().split())\n\nq1 = 0\nwhile h1 != a1:\n    h1 = (h1 * x1 + y1) % mod\n    q1 += 1\n    if q1 > 2 * mod:\n        print(-1)\n        return\n\nq2 = 0\nt2 = h2\nwhile t2 != a2:\n    t2 = (t2 * x2 + y2) % mod\n    q2 += 1\n    if q2 > 2 * mod:\n        print(-1)\n        return\n\nif q1 == q2:\n    print(q1)\n    return\n\n\nc1 = 1\nh1 = (a1 * x1 + y1) % mod\nwhile h1 != a1:\n    h1 = (h1 * x1 + y1) % mod\n    c1 += 1\n    if c1 > 2 * mod:\n        print(-1)\n        return\n\nc2 = 0\nnx2 = 1\nny2 = 0\n\nfor i in range(c1):\n    nx2 = (nx2 * x2) % mod\n    ny2 = (ny2 * x2 + y2) % mod\n\nfor i in range(q1):\n    h2 = (h2 * x2 + y2) % mod\n\nwhile h2 != a2:\n    h2 = (h2 * nx2 + ny2) % mod\n    c2 += 1\n    if c2 > 2 * mod:\n        print(-1)\n        return\n\nprint(q1 + c1 * c2)", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "import math\nmod = 998244353\nn = int(input())\np = [list(map(int, input().split())) for i in range(n)]\npow2 = [1]\nfor i in range(n):\n    pow2.append(pow2[-1] * 2 % mod)\nused = [[False] * n for i in range(n)]\nret = (pow2[n] - 1 - n - n * (n - 1) / 2) % mod\nfor i in range(n):\n    for j in range(i):\n        if used[i][j]:\n            continue\n        inline = [i, j]\n        for k in range(n):\n            if k == i or k == j:\n                continue\n            if (p[i][1] - p[k][1]) * (p[j][0] - p[k][0]) == (p[j][1] - p[k][1]) * (p[i][0] - p[k][0]):\n                inline.append(k)\n        for k in range(len(inline)):\n            for l in range(len(inline)):\n                used[inline[k]][inline[l]] = True\n        v = len(inline)\n        ret = (ret + mod - pow2[v] + 1 + v + v * (v - 1) // 2) % mod\nprint((int(ret)))\n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "def solve(a, e):\n\tif not a[e]:\n\t\treturn False, []\n\ta = list(a[::])\n\tans = [e]\n\ta[e] -= 1\n\tfor i in range(sum(a)):\n\t\tif ans[-1] - 1 >= 0 and a[ans[-1] - 1] > 0:\n\t\t\tv = ans[-1] - 1\n\t\t\tans.append(v)\n\t\t\ta[v] -= 1\n\t\telif ans[-1] + 1 <= 3 and a[ans[-1] + 1] > 0:\n\t\t\tv = ans[-1] + 1\n\t\t\tans.append(v)\n\t\t\ta[v] -= 1\n\t\telse:\n\t\t\treturn False, []\n\treturn True, ans\n\ndef main():\n\ta = list(map(int, input().split()))\n\tfor i in range(4):\n\t\tr, b = solve(a, i)\n\t\tif r:\n\t\t\tprint('YES')\n\t\t\tprint(*b)\n\t\t\treturn\n\tprint('NO')\n\nmain()\n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "from collections import Counter\nMV = 400020\na = [0] * MV\nfor i in range(MV):\n    a[i] = set()\n\nn ,m = list(map(int , input().split()))\n\nfirst = list(map(int , input().split()))\nsecond = list(map(int , input().split()))\n\nfor fid, f in enumerate(first):\n    for sid, s in enumerate(second):\n        a[f+s].add(fid + MV)\n        a[f+s].add(sid)\n\na.sort(key = lambda x: -len(x))\n\nb = [len(k) for k in a]\n\n# for k in range(MV):\n#     if b[k]>0:\n#         print(k, b[k], a[k])\n\nbest_res = b[0]\nfor pos in range(MV):\n    for pos2 in range(MV):\n        if b[pos] + b [pos2] <= best_res:\n            break\n        cur = len(a[pos].union(a[pos2]))\n        if cur > best_res :\n            best_res = cur\nprint(best_res)\n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "from collections import deque\n\nn, m = map(int, input().split())\n\ngrid = []\n\nfor _ in range(n):\n    grid.append(input())\n\ndef bfs(grid, start, end):\n    queue = deque([start])\n    visited = set([start])\n    steps = 0\n    \n    while queue:\n        for _ in range(len(queue)):\n            x, y = queue.popleft()\n            if (x, y) == end:\n                return steps\n            \n            for dx, dy in [(1, 0), (0, 1)]:\n                new_x, new_y = x + dx, y + dy\n                if 0 <= new_x < len(grid) and 0 <= new_y < len(grid[0]) and grid[new_x][new_y] == '.' and (new_x, new_y) not in visited:\n                    queue.append((new_x, new_y))\n                    visited.add((new_x, new_y))\n                    \n        steps += 1\n        \n    return -1\n\ndef min_witch_cells(grid):\n    start = (0, 0)\n    end = (len(grid) - 1, len(grid[0]) - 1)\n    dist = bfs(grid, start, end)\n    \n    if dist == -1:\n        return -1\n    \n    min_cells = float('inf')\n    \n    for x in range(len(grid)):\n        for y in range(len(grid[0])):\n            if grid[x][y] == '.' and (x, y) != start and (x, y) != end:\n                grid[x] = grid[x][:y] + '#' + grid[x][y+1:]\n                new_dist = bfs(grid, start, end)\n                if new_dist == -1 or new_dist > dist:\n                    min_cells = min(min_cells, 1)\n                grid[x] = grid[x][:y] +", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "# Input the number of oranges and apples\nx, y = map(int, input().split())\n\n# Check if the number of oranges and apples is 1\nif x == 1 and y == 1:\n    print(\"Impossible\")\n    exit()\n\n# Initialize the answer string\nans = \"\"\n\n# Check if the number of oranges is even\nif x % 2 == 0:\n    # Calculate the number of 'A's\n    num_a = x // 2\n\n    # Calculate the number of 'B's\n    num_b = y - num_a\n\n    # Calculate the number of 'A's to print\n    if num_a > 1:\n        ans += str(num_a)\n    ans += 'A'\n\n    # Calculate the number of 'B's to print\n    if num_b > 1:\n        ans += str(num_b)\n    ans += 'B'\n\n    # Print the answer\n    print(ans)\n\n# Check if the number of apples is even\nelif y % 2 == 0:\n    # Calculate the number of 'B's\n    num_b = y // 2\n\n    # Calculate the number of 'A's\n    num_a = x - num_b\n\n    # Calculate the number of 'B's to print\n    if num_b > 1:\n        ans += str(num_b)\n    ans += 'B'\n\n    # Calculate the number of 'A's to print\n    if num_a > 1:\n        ans += str(num_a)\n    ans += 'A'\n\n    # Print the answer\n    print(ans)\n\n# Check if the number of oranges is odd\nelif x % 2 == 1:\n    # Calculate the number of 'B's\n    num_b = y - (x + 1) // 2\n\n    # Calculate the number of 'A's\n    num_a = x - num_b\n\n    # Calculate the number of 'B's to print", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "\nfrom collections import Counter\nfrom itertools import accumulate\nfrom math import sqrt\nfrom operator import itemgetter\nimport sys\n \nn = int(input())\ncnt = Counter(map(int, input().split()))\nnums, counts = zip(*sorted(cnt.items(), key=itemgetter(1)))\nacc = [0] + list(accumulate(counts))\narea = 1\nh, w = 1, 1\ni = len(counts)\n \nfor y in range(int(sqrt(n)), 0, -1):\n    while i and counts[i-1] > y:\n        i -= 1\n    total = acc[i] + (len(counts) - i) * y\n    x = total // y\n    if y <= x and area < x * y:\n        h, w, area = y, x, x*y\n \nans = [[0]*w for _ in range(h)]\ni = len(counts)-1\nnum, count = nums[i], min(h, counts[i])\n \nfor x in range(w):\n    for y in range(h):\n        ans[y][(x + y) % w] = num\n \n        count -= 1\n        if count == 0:\n            i -= 1\n            num, count = nums[i], h if h < counts[i] else counts[i]\n \nprint(area)\nprint(h, w)\nfor y in range(h):\n    sys.stdout.write(' '.join(map(str, ans[y])) + '\\n')", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "n, T = input().split()\nn, T = int(n), int(T)\na = list(map(int, input().split()))\n\ndef find_longest_non_decreasing_subsequence(a):\n    lis = [1] * len(a)\n    for i in range(1, len(a)):\n        for j in range(i):\n            if a[i] >= a[j] and lis[i] < lis[j] + 1:\n                lis[i] = lis[j] + 1\n    return max(lis)\n\nresult = find_longest_non_decreasing_subsequence(a)\nprint(result * T + n)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "n = int(input())\ncompartments = list(map(int, input().split()))\n\ndef swap_compartments(compartments):\n    bored_compartments = 0\n    for compartment in compartments:\n        if compartment == 1 or compartment == 2:\n            bored_compartments += 1\n\n    if bored_compartments == 0:\n        return 0\n\n    swaps = 0\n    for i in range(n):\n        if compartments[i] == 1 or compartments[i] == 2:\n            for j in range(i + 1, n):\n                if compartments[j] == 3 or compartments[j] == 4:\n                    compartments[i], compartments[j] = compartments[j], compartments[i]\n                    swaps += 1\n                    break\n    return swaps\n\nswaps = swap_compartments(compartments)\n\nif swaps == 0:\n    print(-1)\nelse:\n    print(swaps)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "# Function to determine the leader of the team\ndef find_leader(n, m, messages):\n    # Initialize a list to store the presence of each person\n    presence = [0] * (n + 1)\n    # Initialize the number of leaders\n    leaders = 0\n    # Initialize a list to store the leader ids\n    leader_ids = []\n\n    # Iterate through all the messages\n    for message in messages:\n        # Split the message into a list\n        message = message.split()\n        # Check if the message is a log on event\n        if message[0] == '+':\n            # Increment the presence of the person\n            presence[int(message[1])] += 1\n            # Check if the person is present at the meeting\n            if presence[int(message[1])] == 1:\n                # Increment the number of leaders\n                leaders += 1\n        # Check if the message is a log off event\n        else:\n            # Decrement the presence of the person\n            presence[int(message[1])] -= 1\n            # Check if the person is not present at the meeting\n            if presence[int(message[1])] == 0:\n                # Decrement the number of leaders\n                leaders -= 1\n\n    # Check if there is no leader\n    if leaders == 0:\n        # Print the number of leaders\n        print(0)\n    # Check if there is at least one leader\n    else:\n        # Print the number of leaders\n        print(leaders)\n        # Iterate through the presence list\n        for i in range(1, len(presence)):\n            # Check if the person is a leader\n            if presence[i] == 1:\n                # Append the person's id to the leader_ids list\n                leader_ids.append(i)\n        # Print the leader_ids list in increasing order\n        print(' '.join(str(i) for i in sorted(leader_ids)))\n\n\n# Main function\nif __name__ == \"__main__\":\n    # Take input for n and m\n    n, m = map(int, input().split", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "def get_max_nodes(x0, y0, ax, ay, bx, by, xs, ys, t):\n    def get_node(i):\n        x, y = x0, y0\n        while i > 0:\n            x = ax * x + bx\n            y = ay * y + by\n            i -= 1\n        return x, y\n\n    nodes = [(x0, y0)]\n    i = 1\n    while True:\n        x, y = get_node(i)\n        if abs(x - x0) + abs(y - y0) > t:\n            break\n        nodes.append((x, y))\n        i += 1\n\n    visited = set()\n    best = 0\n    def dfs(x, y, time):\n        nonlocal best\n        if (x, y) in visited or time < 0:\n            return\n        visited.add((x, y))\n        if time == 0:\n            return\n        best = max(best, len(visited))\n        for nx, ny in [(x - 1, y), (x + 1, y), (x, y - 1), (x, y + 1)]:\n            if (nx, ny) in nodes:\n                dfs(nx, ny, time - 1)\n        visited.remove((x, y))\n\n    dfs(xs, ys, t)\n    return best\n\nx0, y0, ax, ay, bx, by = map(int, input().split())\nxs, ys, t = map(int, input().split())\nprint(get_max_nodes(x0, y0, ax, ay, bx, by, xs, ys, t))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "s = \"What are you doing at the end of the world? Are you busy? Will you save us?\"\ns1 = 'What are you doing while sending \"'\ns2 = '\"? Are you busy? Will you send \"'\ns3 = '\"?'\nl1,l2,l3=len(s1),len(s2),len(s3)\ndef count(n):\n    if n>=60:return 10**20\n    return (1<<n)*75+((1<<n)-1)*68\ndef find(n,k):\n    if count(n)<k:return '.'\n    if n==0:return s[k-1]\n    if k<=l1:return s1[k-1]\n    c=count(n-1)\n    k-=l1\n    if k<=c:\n        return find(n-1,k)\n    k-=c\n    if k<=l2:return s2[k-1]\n    k-=l2\n    if k<=c:\n        return find(n-1,k)\n    k-=c\n    if k<=l3:return s3[k-1]\nq=int(input())\nans=''\nwhile q:\n    n,k=map(int,input().split())\n    while n > 70 and k > 34:\n        k -= 34\n        n -= 1\n    if n > 0 and k <= 34: ans+=s1[k - 1]\n    else :ans+=find(n,k)\n    q-=1\nprint(ans)", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "def get_min_rubles(n, d, e):\n    # Calculate the number of dollars and euros that can be bought\n    dollars = n // d\n    euros = n // e\n\n    # Calculate the minimum number of rubles after buying dollar and euro bills\n    min_rubles = min(n % d, n % e)\n\n    # Check if there are any dollar or euro bills that can be bought\n    if dollars > 0 or euros > 0:\n        # Find the number of rubles after buying dollar and euro bills\n        rubles_after_buy = n - (dollars * d + euros * e)\n\n        # Update the minimum number of rubles if necessary\n        min_rubles = min(min_rubles, rubles_after_buy)\n\n    # Return the minimum number of rubles\n    return min_rubles\n\n# Read input\nn = int(input())\nd = int(input())\ne = int(input())\n\n# Calculate and print the minimum number of rubles\nmin_rubles = get_min_rubles(n, d, e)\nprint(min_rubles)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "n, p = map(int, input().split())\nt = [ord(c) - 97 for c in input()] + [27, 27]\nfor k in range(n - 1, -1, -1):\n    for i in range(t[k] + 1, p):\n        if i - t[k - 1] and i - t[k - 2]:\n            a, b = min(t[k - 1], 2), min(i, 2)\n            if a == b: a = 1\n            t = t[: k] + [i] + [3 - a - b, a, b] * (n // 3 + 1)\n            print(''.join(chr(i + 97) for i in t)[: n])\n            return\nprint('NO')", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "import collections\n\nn, q = list(map(int, input().split()))\nd = collections.defaultdict(list)\ncnt, t = [0] * 6, [0] * 6\nfor i in range(q):\n    s1, s2 = input().split()\n    d[s2].append(s1)\n    cnt[ord(s2) - ord('a')] += 1\nfor s in d['a']:\n    t[ord(s[0]) - ord('a')] += 1\nfor i in range(n - 2):\n    p = [0] * 6\n    for j in range(6):\n        if t[j] == 0:\n            continue\n        for s in d[chr(j + 97)]:\n            p[ord(s[0]) - ord('a')] += t[j]\n    t = p\nprint(sum(t))\n    \n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "#!/Library/Frameworks/Python.framework/Versions/3.6/bin/python3\n'''\nCreated on 13/09/2018\n\n@author: ernesto\n'''\n\nn, m = [int(x) for x in input().strip().split(\" \")]\n\nposibles_jefes = set(range(1, n + 1))\nanteriores = set()\nposteriores = set()\ncontinuos = [True] * (n + 1)\nmencionados = set()\nposibles_jefes_mencionados = set()\nultimo_en_salir = [True] * (n + 1)\nultima_salida_inesperada = None\n\nops = []\n\nif(m > 1):\n    for _ in range(0, m):\n        s, n_s = [x for x in input().strip().split(\" \")]\n        n = int(n_s)\n        ops.append((s, n))\n    for i in range(0, m):\n        op, num = ops[i]\n        cont = False\n        if op == '+':\n            cont = not i or (ops[i - 1][0] == '-' and ops[i - 1][1] == num)\n            posteriores.add(num)\n        if op == '-':\n            cont = i == m - 1 or (ops[i + 1][0] == '+' and ops[i + 1][1] == num)\n            if num not in mencionados:\n                anteriores.add(num)\n                ultima_salida_inesperada = num\n            posteriores.discard(num)\n            ultimo_en_salir[num] &= not posteriores\n        continuos[num] &= cont \n        mencionados.add(num)\n#    print(\"anteriores {} posteriores {} continuos {} ops {}\".format(anteriores, posteriores, continuos, ops))\n    if not anteriores and not posteriores:\n        assert ultima_salida_inesperada is None\n        if ops[0][0] == '+' and ops[-1][0] == '-' and ops[0][1] == ops[-1][1] and continuos[ops[0][1]] and ultimo_en_salir[ops[0][1]]:\n            posibles_jefes_mencionados.add(ops[0][1])\n    else:\n        if not posteriores:\n            assert ultima_salida_inesperada is not None\n            posibles_jefes_filtrados = list([x for x in anteriores if continuos[x] and ultimo_en_salir[x] and ultima_salida_inesperada == x])\n            assert len(posibles_jefes_filtrados) <= 1\n            if(posibles_jefes_filtrados):\n                assert posibles_jefes_filtrados[0] == ops[-1][1]\n                posibles_jefes_mencionados.add(ops[-1][1])\n        else:\n            if not anteriores:\n                assert ultima_salida_inesperada is None\n                posibles_jefes_filtrados = list([x for x in posteriores if continuos[x] and ultimo_en_salir[x]])\n#                print(\"posibles {}\".format(posibles_jefes_filtrados))\n                assert len(posibles_jefes_filtrados) <= 1\n                if(posibles_jefes_filtrados):\n                    assert posibles_jefes_filtrados[0] == ops[0][1]\n                    posibles_jefes_mencionados.add(ops[0][1])\n            else:\n                assert ultima_salida_inesperada is not None\n#                print(\"continuos {}\".format(continuos))\n                posibles_jefes_mencionados = set([x for x in anteriores & posteriores if ultimo_en_salir[x] and continuos[x] and ultima_salida_inesperada == x])\n\n#    print(\"posibles jefes menc {}\".format(posibles_jefes_mencionados))\n    posibles_jefes -= (mencionados - posibles_jefes_mencionados)\n        \nprint(len(posibles_jefes))\nif(len(posibles_jefes)):\n    print(\" \".join(map(str, sorted(posibles_jefes))))\n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\nm = min(a)\nM = max(a)\ncount = 0\nfor el in a:\n    if el != m and el != M:\n        count += 1\nprint(count)\n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "import math\n\n# Define the distance function\ndef distance(a, b):\n    return math.sqrt((a[0] - b[0])**2 + (a[1] - b[1])**2)\n\n# Read the input\na_x, a_y, b_x, b_y, t_x, t_y = map(int, input().split())\nn = int(input())\nbottles = []\nfor _ in range(n):\n    x, y = map(int, input().split())\n    bottles.append((x, y))\n\n# Initialize the minimum distance\nmin_distance = math.inf\n\n# Try all possible orderings of the bottles\nfor ordering in itertools.permutations(bottles):\n    # Initialize the distance for this ordering\n    distance_a = 0\n    distance_b = 0\n\n    # Start from Adil's initial position\n    current_position_a = (a_x, a_y)\n    current_position_b = (b_x, b_y)\n\n    # Go through each bottle in the ordering\n    for bottle in ordering:\n        # Calculate the distances for Adil and Bera to the bottle\n        distance_to_bottle_a = distance(current_position_a, bottle)\n        distance_to_bottle_b = distance(current_position_b, bottle)\n\n        # Determine which one is closer and move accordingly\n        if distance_to_bottle_a < distance_to_bottle_b:\n            distance_a += distance_to_bottle_a\n            current_position_a = bottle\n        else:\n            distance_b += distance_to_bottle_b\n            current_position_b = bottle\n\n        # Move to the recycling bin after picking up the bottle\n        distance_a += distance(current_position_a, (t_x, t_y))\n        distance_b += distance(current_position_b, (t_x, t_y))\n        current_position_a = (t_x", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "# Inputs\nN = int(input())\ncards = list(map(int, input().split()))\n\n# Calculate the total number of prime numbers between 2 and the largest card number\ndef count_primes(n):\n    prime = [True for i in range(n + 1)]\n    p = 2\n    while (p * p <= n):\n        if (prime[p] == True):\n            for i in range(p * p, n + 1, p):\n                prime[i] = False\n        p += 1\n    return sum(prime) - 1\n\ncount = 0\n# Iterate over all cards\nfor card in cards:\n    # Add the number of primes between 2 and the card number to the count\n    count += count_primes(card)\n\n# Print the minimum number of operations required to achieve the objective\nprint(count)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "n=int(input())\ns=input()\nif s.count('(')!=s.count(')'):\n    print('No')\n    return \nstk=[] \nkarma=0 \nf=1 \nans=1 \nfor i in s:\n    if i=='(': \n        stk.append(i)\n    else:\n        if not stk:\n            f=0 \n            if not karma: \n                karma=1 \n            else:\n                ans=0 \n                break \n        else:\n            stk.pop() \nif ans and len(stk)==1 and stk[0]=='(':\n    print('Yes')\n    return \nif not stk and f :\n    f=1 \nif f:\n    print('Yes')\n    return \nif not ans:\n    print('No')\n    return", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "# Input the values of n and m\nn, m = map(int, input().split())\n\n# Initialize the black_cells_row and black_cells_col variables\nblack_cells_row = []\nblack_cells_col = []\n\n# For each row and column\nfor i in range(n):\n    row = input()\n    for j in range(m):\n        # If a black cell is found, append the row and column index to the corresponding lists\n        if row[j] == 'B':\n            black_cells_row.append(i)\n            black_cells_col.append(j)\n\n# Calculate the center row and column index of the black square\ncenter_row = (min(black_cells_row) + max(black_cells_row)) // 2\ncenter_col = (min(black_cells_col) + max(black_cells_col)) // 2\n\n# Output the center row and column index\nprint(center_row + 1, center_col + 1)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "# Read input\nx1, y1 = map(int, input().split())\nx2, y2 = map(int, input().split())\nn = int(input())\n\n# Create a list to store the lines\nlines = []\n\n# Store the lines in the list\nfor _ in range(n):\n    a, b, c = map(int, input().split())\n    lines.append([a, b, c])\n\n# Define a function to check if two lines intersect\ndef intersect(line1, line2):\n    a1, b1, c1 = line1\n    a2, b2, c2 = line2\n    return a1 * b2 - a2 * b1 != 0\n\n# Define a function to check if a point lies on a line\ndef lies_on(point, line):\n    x, y = point\n    a, b, c = line\n    return a * x + b * y + c == 0\n\n# Define a function to get the number of blocks\ndef count_blocks():\n    # Initialize a set to store the visited lines\n    visited = set()\n\n    # Initialize a list to store the blocks\n    blocks = []\n\n    # Iterate over all the lines\n    for i, line in enumerate(lines):\n        # Check if the line is already visited\n        if i in visited:\n            continue\n\n        # Initialize a list to store the adjacent lines\n        adjacent = [i]\n\n        # Find all the adjacent lines\n        for j in range(i + 1, len(lines)):\n            if intersect(line, lines[j]):\n                adjacent.append(j)\n\n        # Mark all the adjacent lines as visited\n        visited.update(adjacent)\n\n        # Add a block to the list\n        blocks.append(adjacent)\n\n    return len(blocks)\n\n# Define a function to get the number of steps to reach the university\ndef get_steps():\n    # Initialize a set to store the visited blocks\n    visited = set()\n\n    # Initialize a queue for BFS\n    queue = [(x1, y1)]\n\n    # Perform BFS to find the", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "# Define a function to calculate the minimum fuel mass\ndef min_fuel(n, m, a, b):\n    # Initialize the fuel mass to 0\n    fuel = 0\n    \n    # Iterate through each planet\n    for i in range(n-1):\n        # Calculate the amount of fuel required for take-off\n        takeoff = m * a[i]\n        # Calculate the amount of fuel required for landing\n        landing = m * b[i]\n        \n        # If the fuel is greater than the takeoff, subtract the takeoff from the fuel\n        if fuel >= takeoff:\n            fuel -= takeoff\n        # Otherwise, add the takeoff to the fuel\n        else:\n            fuel += takeoff\n        \n        # If the fuel is greater than the landing, subtract the landing from the fuel\n        if fuel >= landing:\n            fuel -= landing\n        # Otherwise, add the landing to the fuel\n        else:\n            fuel += landing\n            \n    # If the fuel is greater than the payload, subtract the payload from the fuel\n    if fuel >= m:\n        fuel -= m\n    # Otherwise, add the payload to the fuel\n    else:\n        fuel += m\n        \n    # If the fuel is negative, return -1\n    if fuel < 0:\n        return -1\n    # Otherwise, return the fuel\n    else:\n        return fuel\n\n# Read input from stdin\nn = int(input())\nm = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\n# Call the function to calculate the minimum fuel mass\nresult = min_fuel(n, m, a, b)\n\n# Print the result\nprint(result)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "from itertools import accumulate\n\nn,m=list(map(int,input().split(\" \")))\nc=list(map(int,input().split(\" \")))\nb=list(map(int,input().split(\" \")))\na=list(accumulate(c))\nx=int(input())\nres=0\nfor i in range(1,n+1):\n    sa=min(ar-al for ar,al in zip(a[i-1:],[0]+a[:]))\n    l,s=-1,0\n    for r in range(m):\n        s+=sa*b[r]\n        while s>x:\n            l+=1\n            s-=sa*b[l]\n        res=max(res,i*(r-l))\nprint(res)\n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "from sys import stdin\nimport sys\n\nn = int(stdin.readline())\na = list(map(int,stdin.readline().split()))\n\none = []\nttt = []\nans = []\n\nfor i in range(n,0,-1):\n\n    now = a[i-1]\n    if now == 0:\n        continue\n    elif now == 1:\n        ans.append((i,i))\n        one.append(i)\n    elif now == 2:\n        if len(one) == 0:\n            print (-1)\n            return\n        ans.append((one[-1],i))\n        del one[-1]\n        ttt.append(i)\n    elif now == 3:\n        if len(ttt) == 0:\n            if len(one) == 0:\n                print (-1)\n                return\n            ans.append((i,i))\n            ans.append((i,one[-1]))\n            del one[-1]\n            ttt.append(i)\n        else:\n            ans.append((i,i))\n            ans.append((i,ttt[-1]))\n            del ttt[-1]\n            ttt.append(i)\n\nprint (len(ans))\nfor i in ans:\n    print (*i)", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "# coding=utf-8\nfrom functools import reduce\n\na = input()\nb = input()\nc = input()\n\nalen = len(a)\nblen = len(b)\nclen = len(c)\n\nkmpnext = [0]*(clen+1)\ni = 1\nj = 0\nwhile i < clen:\n\twhile j > 0 and c[i]!=c[j]:\n\t\tj = kmpnext[j]\n\tif c[i] == c[j]:\n\t\tj+=1\n\tkmpnext[i+1] = j\n\ti+=1\n#print(kmpnext)\n\nf = [[[0 for i in range(clen+2)] for i in range(blen+2)] for i in range(alen+2)]\ng = [[[0 for i in range(clen+2)] for i in range(blen+2)] for i in range(alen+2)]\nh = [[[0 for i in range(clen+2)] for i in range(blen+2)] for i in range(alen+2)]\n\nf[0][0][0] = 0\ng[0][0][0] = (-1,-1,-1)\nh[0][0][0] = 1\nm = (0,0,0)\n\nfor i in range(alen):\n\tfor j in range(blen):\n\t\tfor k in range(clen):\n\t\t\tif h[i][j][k] == 0:\n\t\t\t\t#print(i,j,k)\n\t\t\t\tcontinue\n\t\t\tif f[i+1][j][k] < f[i][j][k] or h[i+1][j][0] == 0:\n\t\t\t\tf[i+1][j][k] = f[i][j][k]\n\t\t\t\tg[i+1][j][k] = g[i][j][k]\n\t\t\t\th[i+1][j][k] = 1\n\t\t\tif f[i][j+1][k] < f[i][j][k] or h[i][j+1][0] == 0:\n\t\t\t\tf[i][j+1][k] = f[i][j][k]\n\t\t\t\tg[i][j+1][k] = g[i][j][k]\n\t\t\t\th[i][j+1][k] = 1\n\n\t\t\tif a[i] == b[j]:\n\t\t\t\t#print(i,j,a[i],b[j])\n\t\t\t\tkt = k\n\t\t\t\twhile kt != 0 and a[i] != c[kt]:\n\t\t\t\t\tkt = kmpnext[kt]\n\t\t\t\tif a[i] == c[kt]:\n\t\t\t\t\tif f[i+1][j+1][kt+1] < f[i][j][k] + 1:\n\t\t\t\t\t\tf[i+1][j+1][kt+1] = f[i][j][k] + 1\n\t\t\t\t\t\tg[i+1][j+1][kt+1] = (i,j,k)\n\t\t\t\t\t\th[i+1][j+1][kt+1] = 1\n\t\t\t\telse:\n\t\t\t\t\tif f[i+1][j+1][0] < f[i][j][k] + 1:\n\t\t\t\t\t\tf[i+1][j+1][0] = f[i][j][k] + 1\n\t\t\t\t\t\tg[i+1][j+1][0] = (i,j,k)\n\t\t\t\t\t\th[i+1][j+1][0] = 1\n\n\t\t\t#print(i,j,k,f[i][j][k],g[i][j][k])\n\nfor i in range(alen+1):\n\tfor j in range(blen+1):\n\t\tfor k in range(clen):\n\t\t\tif f[i][j][k] > f[m[0]][m[1]][m[2]]:\n\t\t\t\tm = (i,j,k)\nif f[m[0]][m[1]][m[2]] == 0:\n\tprint(0)\nelse:\n\tans = \"\"\n\tt = m\n\tt = g[t[0]][t[1]][t[2]]\n\twhile t != (-1,-1,-1):\n\t\tans = a[t[0]] + ans\n\t\tt = g[t[0]][t[1]][t[2]]\n\tprint(ans)\n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "[k, d, t] = input().split()\nk = int (k)\nd = int (d)\nt = int (t)\n\nif k % d == 0:\n    d = k\nif k > d and k % d != 0:\n    d = (k // d + 1) * d\n\n\np1 = 1.0 * k / t\np2 = 0.5 * (d - k) / t\np = p1 + p2\n#print(p1, p2, p)\ns = 1.0 / p\nc = int(s)\n#print(s, c)\nz = 1.0 - p * c\n#print(z)\nif z < p1:\n    ans = c * d + 1.0 * z * t\nelse:\n    ans = c * d + k\n    z = z - p1;\n    ans += 2.0 * z * t\ntemplate = '{:.' + str(10) + 'f}'\nprint(template.format(ans))", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "import sys\nfrom math import *\n\ndef minp():\n\treturn sys.stdin.readline().strip()\n\ndef mint():\n\treturn int(minp())\n\ndef mints():\n\treturn list(map(int, minp().split()))\n\nn, k = mints()\nq = list(mints())\nfor i in range(n):\n\tq[i] -= 1\ns = list(mints())\na = [i for i in range(1,n+1)]\nd = [0]*n\nb = [False]*(k+1)\nc = [False]*(k+1)\ne = [10000]*2\nf = [10000]*2\nfor i in range(k+1):\n\t#print(a)\n\tb[i] = (a == s)\n\tif b[i]:\n\t\te[i%2] = min(e[i%2], i)\n\tfor j in range(n):\n\t\td[j] = a[q[j]]\n\ta,d = d,a\n#print('====')\na = [i for i in range(1,n+1)]\nfor i in range(k+1):\n\t#print(a)\n\tc[i] = (a == s)\n\tif c[i]:\n\t\tf[i%2] = min(f[i%2], i)\n\tfor j in range(n):\n\t\td[q[j]] = a[j]\n\ta,d = d,a\n#print('====')\n#print(e)\n#print(f)\nif e[0] == 0:\n\tprint('NO')\nelif e[1] == 1:\n\tif f[1] == 1 and k > 1:\n\t\tprint('NO')\n\telif k%2 == 1 or f[k%2] <= k:\n\t\tprint('YES')\n\telse:\n\t\tprint('NO')\nelif f[1] == 1:\n\tif k%2 == 1 or e[k%2] <= k:\n\t\tprint('YES')\n\telse:\n\t\tprint('NO')\nelse:\n\tif e[k%2] <= k or f[k%2] <= k:\n\t\tprint('YES')\n\telse:\n\t\tprint('NO')\n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "n,a,b = map(int,input().split())\nif not (a+b-1 <= n <= a*b):\n  print(-1)\n  return\nn -= a\nl = list()\nfor i in range(b,a*b+1,b):\n  t = min(n,b-1)\n  l += [i-j for j in range(t+1)]\n  n -= t\nd = dict()\ng = sorted(l)\nfor i,x in enumerate(g,1):\n  d[x] = i\nl = list(map(lambda x:d[x], l))\nprint(*l)", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "def robot_position(a, b, s):\n    # Initialize the robot's position\n    robot_x = 0\n    robot_y = 0\n\n    # Iterate over the commands in the string\n    for command in s:\n        if command == 'U':\n            robot_y += 1\n        elif command == 'D':\n            robot_y -= 1\n        elif command == 'L':\n            robot_x -= 1\n        elif command == 'R':\n            robot_x += 1\n\n    # Check if the robot's position matches the target position\n    if robot_x == a and robot_y == b:\n        return \"Yes\"\n    else:\n        return \"No\"\n\n# Read the input\na, b = map(int, input().split())\ns = input()\n\n# Check the robot's position\nresult = robot_position(a, b, s)\n\n# Print the result\nprint(result)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "USE_STDIO = False\n\nif not USE_STDIO:\n    try: import mypc\n    except: pass\n\ndef main():\n    n, m = list(map(int, input().split(' ')))\n    s = input()\n    t = input()\n\n    i = s.find('*')\n    if i < 0: return s == t\n    return len(t) >= len(s) - 1 and s[:i] == t[:i] and s[i+1:] == t[len(t)-len(s)+i+1:]\n\ndef __starting_point():\n    print(['NO', 'YES'][main()])\n\n\n\n\n__starting_point()", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "x, y = list(map(float, input().split(' ')))\nx1, y1 = list(map(float, input().split(' ')))\nn = int(input())\nr = 0\nfor i in range(n):\n    a, b, c = list(map(float, input().split(' ')))\n    q1 = a * x + b * y + c\n    q2 = a * x1 + b * y1 + c\n    if (q1 > 0 and q2 < 0) or (q1 < 0 and q2 > 0):\n        r += 1\nprint(r)\n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "def astronaut(n, k, a):\n    count = 0\n    div_list = []\n    for i in range(n):\n        if a[i] % k == 0:\n            div_list.append(a[i])\n    for i in range(k):\n        sum = 0\n        for j in div_list:\n            sum += j\n            if sum % k == i:\n                count += 1\n                break\n    return count\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\nprint(astronaut(n, k, a))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "# Define the function to calculate the number of apples\ndef number_of_apples(n, p):\n    # Create a list to store the number of apples in each inflorescence\n    apples = [0] * n\n    \n    # Place one apple in the first inflorescence\n    apples[0] = 1\n    \n    # Iterate over the inflorescences\n    for i in range(1, n):\n        # Calculate the number of apples in the current inflorescence\n        apples[i] = apples[p[i-1]]\n        \n        # Update the number of apples in the previous inflorescence\n        apples[p[i-1]] = 0\n    \n    # Return the number of apples in the first inflorescence\n    return apples[0]\n\n# Read the input values\nn = int(input())\np = list(map(int, input().split()))\n\n# Calculate the number of apples\nresult = number_of_apples(n, p)\n\n# Print the result\nprint(result)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "def solve(n, a, k):\n    # Find the pile with the maximum value of A_i/K_i\n    max_value = 0\n    max_index = -1\n    for i in range(n):\n        if a[i] / k[i] > max_value:\n            max_value = a[i] / k[i]\n            max_index = i\n\n    # If the maximum value is an integer, the first player loses\n    if max_value == int(max_value):\n        return \"Aoki\"\n    else:\n        return \"Takahashi\"\n\n\n# Read input from STDIN\nn = int(input())\na = []\nk = []\nfor _ in range(n):\n    a_i, k_i = map(int, input().split())\n    a.append(a_i)\n    k.append(k_i)\n\n# Call the solve function to find the winner\nwinner = solve(n, a, k)\n\n# Output the winner\nprint(winner)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "n, m = map(int, input().split())\na = [list(input()) for i in range(n)]\nstart = 0\nfinish = 0\nfor i in range(n):\n    for j in range(m):\n        if a[i][j] == 'B':\n            finish = [i, j]\n            if start == 0:\n                start = finish.copy()\nprint((start[0] + finish[0]) // 2 + 1, (start[1] + finish[1]) // 2 + 1)", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "import itertools\nimport networkx as nx\nH, W = [int(_) for _ in input().split()]\nA = [input() for _ in range(H)]\n\ngraph = nx.DiGraph()\nfor h, w in itertools.product(list(range(H)), list(range(W))):\n    if A[h][w] == 'S':\n        s = (h, w)\n        graph.add_edge(s, (h, -1), capacity=10**10)\n        graph.add_edge(s, (-1, w), capacity=10**10)\n    elif A[h][w] == 'T':\n        t = (h, w)\n        graph.add_edge((h, -1), t, capacity=10**10)\n        graph.add_edge((-1, w), t, capacity=10**10)\n    elif A[h][w] == 'o':\n        graph.add_edge((h, -1), (-1, w), capacity=1)\n        graph.add_edge((-1, w), (h, -1), capacity=1)\nans = nx.minimum_cut_value(graph, s, t)\nprint((-1 if ans >= 10**10 else ans))\n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "import math as m\n\nr=0\n\nfor _ in range(int(input())):\n\n    k,a=[int(x) for x in input().split()]\n\n    e=0;v=1\n\n    while v<a: v*=4;e+=1\n\n    if e+k>r: r=e+k\n\n    if k+1>r: r=k+1\n\nprint(r)", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "n = int(input())\na = list(map(float, input().split()))\na.sort()\ns = a[-1]\np = 1 - a[-1]\nfor i in range(n - 2, -1, -1):\n\tif s < s * (1 - a[i]) + a[i] * p:\n\t\ts = s * (1 - a[i]) + a[i] * p\n\t\tp *= (1 - a[i])\nprint('%.9lf' % s)\n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "# Input the initial element, lower index (l), and upper index (r)\nn, l, r = map(int, input().split())\n\n# Initialize a list with the initial element\narr = [n]\n\n# Perform the required operations until all elements in the list are 0 or 1\nwhile True:\n    new_arr = []\n    for x in arr:\n        if x > 1:\n            new_arr.append(x // 2)\n            new_arr.append(x % 2)\n            new_arr.append(x // 2)\n        else:\n            new_arr.append(x)\n    arr = new_arr\n\n    # Check if all elements are 0 or 1\n    if all(x == 0 or x == 1 for x in arr):\n        break\n\n# Calculate the total number of 1s in the range l to r\nones = sum(arr[l-1:r])\n\n# Output the result\nprint(ones)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "import sys\ndef MI(): return map(int,sys.stdin.readline().rstrip().split())\n\nN,K = MI()\nmod = 10**9+7\n\ndef divisor(n):  # n\u306e\u7d04\u6570\u306e\u30ea\u30b9\u30c8\n    res = []\n    for i in range(1,int(n**.5)+1):\n        if n % i == 0:\n            res.append(i)\n            if i != n//i:\n                res.append(n//i)\n    return res\n\nA = divisor(N)\n\nd = {}  # d[i] = i\u306e\u7d04\u6570\u306e\u30ea\u30b9\u30c8(i\u306fN\u306e\u7d04\u6570)\nfor a in A:\n    d[a] = divisor(a)\n\nprime = []  # N\u306e\u7d20\u56e0\u6570\u306e\u30ea\u30b9\u30c8\nfor i in range(2,int(N**.5)+1):\n    if N % i == 0:\n        prime.append(i)\n        while N % i == 0:\n            N //= i\nif N != 1:\n    prime.append(N)\n\nmu = {}  # mu[i] = \u03bc(i) (i\u306fN\u306e\u7d04\u6570)\nfor a in A:\n    b = a\n    r = 1\n    for p in prime:\n        if b % p == 0:\n            r *= -1\n            if b//p % p == 0:\n                r = 0\n                break\n    mu[a] = r\n\n\nans = 0\nfor a in A:\n    for b in d[a]:\n        if a % 2 == 0:\n            ans += mu[a//b]*pow(K,(b+1)//2,mod)*(a//2)\n            ans %= mod\n        else:\n            ans += mu[a//b]*pow(K,(b+1)//2,mod)*a\n            ans %= mod\n\nprint(ans)", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "from collections import Counter\nT = int(input())\nD = {0: 'First', 1: 'Second'}\nfor _ in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    if N % 2 == 1:\n        print((D[1]))\n    else:\n        C = Counter(A)\n        # print(C)\n        for c in C:\n            if C[c] % 2 == 1:\n                print((D[0]))\n                break\n        else:\n            print((D[1]))\n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "# Read the length of the sequence\nn = int(input())\n\n# Read the sequence\ns = input()\n\n# Count the number of opening and closing brackets\nopen_count = 0\nclose_count = 0\n\nfor c in s:\n    if c == '(':\n        open_count += 1\n    else:\n        close_count += 1\n\n# If the difference between the number of opening and closing brackets is not 1, then the sequence is not correct\nif abs(open_count - close_count) > 1:\n    print(\"No\")\n\n# If the sequence is correct, then it is solvable\nelif open_count == close_count:\n    print(\"Yes\")\n\n# If the difference is 1, then the sequence can be made correct by moving at most one bracket\nelse:\n    print(\"Yes\")", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "from collections import Counter\n\nn = int(input())\na = [int(v) for v in input().split()]\n\ncnt = Counter(a)\n\nprint('Agasa' if all(v % 2 == 0 for v in list(cnt.values())) else 'Conan')\n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "##\n##\n##\nimport sys\ndef line():\n    return sys.stdin.readline()\n\ndef numbers():\n    return list(map(int, line().split()))\n\ndef number():\n    return int(line())\n\nadjlist = {}\nn, k = 0, 0\nmark = [False]*2010\nedges = [False]*1010\n\n# bfs for \"ssph\"\ndef bfs(s):\n    \n    i = 0\n    frontier = [s]\n    while frontier:\n\n        if mark[s]:\n            break;\n\n        next_frontier = []\n        for u in frontier:\n\n            # check next state\n            for v, isState in enumerate(edges):\n                if isState:\n                    # check new node\n                    state = u + (n - 1000) - v\n\n                    if state >= 0 and state <= 2000 and not mark[state]:\n                        mark[state] = True\n                        next_frontier.append(state)\n\n        frontier = next_frontier\n        i += 1\n\n    if mark[s]:\n        return i\n    else:\n        return -1\n\n# main program\n[n, k] = numbers()\nconcentrations = numbers()\n\n# reading edges\nfor x in concentrations:\n    edges[x] = True\n\nn = n + 1000\nans = bfs(1000)\nprint(ans)\n\n# 1496438704903\n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "def get_answer(p, k):\n    ans = 1\n    for i in range(1, p):\n        if pow(k, i, p) == 1:\n            ans *= i\n    return ans % (1000000007)\n\n\np, k = map(int, input().split())\nprint(get_answer(p, k))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "n=int(input())\nd=int(input())\ne=int(input())*5\nd,e=max(d,e),min(d,e)\nv=n\nfor i in range(e):\n    m=n-i*d\n    if m<0:\n        break\n    m%=e\n    v=min(v,m)\nprint(v)", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "import math\nn,k=map(int,input().split())\ng=k\nfor a in map(int,input().split()):\n g=math.gcd(g,a)\nprint(k//g)\nprint(*range(0,k,g))", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "a = int(input())\ns = input()\n\nsm ={}\nfor i in range(len(s)):\n    for j in range(i,len(s)):\n        if j== i:\n            t = int(s[j])\n        else:\n            t += int(s[j])\n        if t in sm:\n            sm[t] += 1\n        else:\n            sm[t] = 1\nif a==0:\n    if 0 in sm:\n        sum_pairs = (len(s)*(len(s)+1))//2\n        print((sm[0]*(sum_pairs))+(sm[0]*((sum_pairs) - sm[0])))\n    else:\n        print(0)\nelse:\n    c = 0\n    for f in sm:\n        if f != 0  and a % f == 0 and (a//f) in sm:\n            c += sm[f] * sm[a//f]\n\n    print(c)\n\n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "def main(a, b, l, r):\n\n    \n\n    qL = (l - 1) // (2 * a + 2 * b)\n\n    rL = (l - 1) % (2 * a + 2 * b) + 1\n\n    \n\n    qR = (r - 1) // (2 * a + 2 * b)\n\n    rR = (r - 1) % (2 * a + 2 * b) + 1\n\n    #print(qL, qR, rL, rR)\n\n    if qL == qR:\n\n        #In b segment\n\n        if a < rL <= a + b and a < rR <= a + b:\n\n            return 1\n\n        if 2 * a + b < rL and 2 * a + b < rR:\n\n            return 1\n\n        #In a segment\n\n        if 1 <= rL <= a and 1 <= rR <= a:\n\n            return rR - rL + 1\n\n        if a + b < rL <= 2 * a + b and a + b < rR <= 2 * a + b:\n\n            return rR - rL + 1\n\n        #In a + b segment\n\n        if 1 <= rL <= a + b and 1 <= rR <= a + b:\n\n            return a - rL + 1\n\n        if a + b < rL and a + b < rR:\n\n            return (2 * a + b) - rL + 1\n\n        if a < rL <= a + b and a + b < rR <= 2 * a + b:\n\n            return 1 + rR - (a + b)\n\n        if a < rL <= a + b and 2 * a + b < rR:\n\n            return 1 + a\n\n        if 1 <= rL <= a and a + b < rR <= 2 * a + b:\n\n            ans = a - rL + 1 + max(rR - (a + b + b), 0) + min(b, rR) - max(min(rR, b) - rL + 1, 0)\n\n            return ans\n\n        if 1 <= rL <= a and 2 * a + b < rR:\n\n            return a - rL + 1 + a - max(b - rL + 1, 0)\n\n    elif qL == qR - 1:\n\n        #abababab\n\n        newL = qL * (2 * a + 2 * b) + 1\n\n        newR = (qR + 1) * (2 * a + 2 * b)\n\n        \n\n        if 1 <= rL <= a + b and a + b + 1 <= rR:\n\n            return a + max(a - b, 0) + int(a <= b) \n\n            \n\n        if a + b + 1 <= rL <= 2 * (a + b) and (2 * a + 2 * b) + 1 <= rR <= a + b:\n\n            return main(a, b, l - (a + b), r - (a + b))\n\n        \n\n        if 1 <= rL <= a and 1 <= rR <= a:\n\n            return a + max(a - b, 0) + int(a <= b) + rR - max(rR - rL + 1, 0)\n\n        if 1 <= rL <= a and a + 1 <= rR <= a + b:\n\n            return a + max(a - b, 0) + int(a <= b)\n\n        \n\n        if a + 1 <= rL <= a + b and 1 <= rR <= a:\n\n            return 1 + a\n\n        if a + 1 <= rL <= a + b and a + 1 <= rR <= a + b:\n\n            return 1 + a + max(a - b, 0)\n\n        \n\n        return main(a, b, l - (a + b), r - (a + b))\n\n        \n\n    else:\n\n        return a + max(a - b, 0) + int(a <= b) # + main(a, b, l, (qL + 1) * (2 * a + 2 * b)) + main(a, b, qR * (2 * a + 2 * b) + 1, r)\n\n\n\na, b, l, r = [int(item) for item in input().split()]\n\n\n\nprint(main(a, b, l, r))\n\n\n\n# Made By Mostafa_Khaled\n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "scan=lambda:list(map(int,input().split()))\nx1,y1,x2,y2=scan()\nvmx,t=scan()\nvx,vy=scan()\nwx,wy=scan()\nlb,ub,EPS=0,1e15,1e-8\nwhile ub-lb>EPS:\n\tmid=(lb+ub)/2\n\txx,yy=(vx*mid,vy*mid) if t-mid>EPS else (vx*t+wx*(mid-t),vy*t+wy*(mid-t))\n\tif vmx*mid-((x2-x1-xx)**2+(y2-y1-yy)**2)**.5>EPS:ub=mid\n\telse:lb=mid\nprint(\"%.8f\"%ub)\n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "x = int(input())\nmass = []\nfor i in range(x):\n    l = list(map(int, input().split()))\n    mass += [l]\nres = [0 for i in range(x)]\nres[0] = int(((mass[0][1] * mass[0][2]) // mass[1][2]) ** 0.5)\nfor i in range(1, x):\n    res[i] = int(mass[0][i] // res[0])\nprint(*res)", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "def min_rest_days(n, a):\n    # dp[i][j] is the minimum number of rest days if we have j days left and\n    # we have done sport in the previous day if i is 1, or not if i is 0\n    dp = [[float('inf') for _ in range(n + 1)] for _ in range(2)]\n    dp[0][0] = 0\n    dp[1][0] = 0\n\n    for i in range(n):\n        if a[i] == 0 or a[i] == 1:\n            # If the gym is closed or the contest is carried out, we can only rest\n            dp[0][i + 1] = min(dp[0][i + 1], dp[0][i])\n            dp[1][i + 1] = min(dp[1][i + 1], dp[1][i])\n        elif a[i] == 2 or a[i] == 3:\n            # If the gym is open, we can either rest or do sport\n            dp[0][i + 1] = min(dp[0][i + 1], dp[0][i] + 1)\n            dp[1][i + 1] = min(dp[1][i + 1], dp[1][i] + 1)\n            dp[0][i + 1] = min(dp[0][i + 1], dp[1][i])\n            dp[1][i + 1] = min(dp[1][i + 1], dp[0][i])\n\n    return min(dp[0][n], dp[1][n])\n\n\nn = int(input())\na = list(map(int, input().split()))\nprint(min_rest_days(n, a))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "# function to count the number of numbers m\n# such that the sum of values in the cells\n# in the row number m + 1 of the resulting matrix equals t\ndef count(n, t):\n    # initialize the count\n    count = 0\n    \n    # iterate over the numbers from 1 to n\n    for m in range(1, n + 1):\n        # initialize the sum\n        sum = 0\n        \n        # iterate over the numbers from 1 to m + 1\n        for i in range(1, m + 2):\n            # calculate the sum of values in the row number m + 1\n            sum += (i ^ (m + 1))\n        \n        # if the sum equals t, increment the count\n        if sum == t:\n            count += 1\n    \n    # return the count\n    return count\n\n# read the input\nn, t = map(int, input().split())\n\n# calculate the count\ncount = count(n, t)\n\n# print the result\nprint(count)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "n = int(input())\nx = input()\n\n\ndef popcount(x):\n    return bin(x).count(\"1\")\n\n\ndef complexity(x):\n    ans = 0\n    for i in range(n):\n        if x[i] == '0':\n            ans += pow(2, n - i - 1, 1000000007)\n    return ans % 1000000007\n\n\nans = 0\nfor i in range(n):\n    ans += pow(2, i, 1000000007) * complexity(x[i:])\n    ans %= 1000000007\n\nprint(ans)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "a,b,h,w,n=list(map(int,input().strip().split(' ')))\nif a>b:\n    a,b=b,a\n    \nfactor=list(map(int,input().strip().split(' ')))\nfactor=sorted(factor)[::-1]\n#print(factor)\ndef findout(a,b,h,w,factor):\n    possible=set()\n    for i in range(len(factor)):\n        temp=set()\n        if i==0:\n            temp.add((factor[0],1))\n            temp.add((1,factor[0]))\n            possible=temp\n            for X in temp:\n                f1,f2=X\n                if f1*h>=a and f2*w>=b:\n                    return i+1\n            \n            \n        else:\n            for X in possible:\n                c1,c2=X\n                if c1*h<=a:\n                    temp.add((c1*factor[i],c2))\n                    if c1*factor[i]*h>=a and c2*w>=b:\n                        return i+1\n                    \n                    \n                    \n                if c2*w<=b:    \n                    temp.add((c1,c2*factor[i]))\n                    if c1*h>=a and c2*w*factor[i]>=b:\n                        return i+1\n            possible=temp\n    return 10**9+1\n\nif (h>=a and w>=b) or (h>=b and w>=a):\n    print(0)\nelse:\n    ans=min(findout(a,b,h,w,factor),findout(a,b,w,h,factor))\n    if ans!=10**9+1:\n        print(ans)\n    else:\n        print(-1)\n                \n                \n            \n            \n            \n            \n            \n            \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "# read the number of people\nn = int(input())\n# read the crushes\ncrushes = list(map(int, input().split()))\n\n# store the count of each crush\ncount = [0] * (n + 1)\nfor crush in crushes:\n    count[crush] += 1\n\n# check if t = 1 satisfies the condition\nif all(crushes[i - 1] == i or count[i] == 1 for i in range(1, n + 1)):\n    print(1)\nelse:\n    # find the smallest t that satisfies the condition\n    for t in range(2, n + 1):\n        if all(crushes[i - 1] == i or count[crushes[crushes[i - 1] - 1]] == 1 for i in range(1, n + 1)):\n            print(t)\n            break\n    else:\n        print(-1)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "k, a, b = list(map(int, input().split()))\n\nsets = 0\n\nwhile a + b >= k:\n    if a >= k:\n        a = 0\n    if b >= k:\n        b = 0\n    sets += 1\n\nif a + b > 0:\n    print(-1)\nelse:\n    print(sets)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "n, m = map(int, input().split())\n\na = [[] for i in range(5010)]\n\nfor i in range(m):\n\tx, y = map(int, input().split())\n\tif y < x:\n\t\ta[x].append(n - x + y)\n\telse:\n\t\ta[x].append(y - x)\n\n\nfor i in range(1, n + 1):\n\ta[i].sort()\n\nmx = int(-1e9)\n\nfor i in range(1, n + 1):\n\tif len(a[i]):\n\t\tmx = n * (len(a[i]) - 1) + a[i][0]\n\telse:\n\t\tmx = 0\n\t\n\tk = 1\n\tl = i + 1\n\tif l == n + 1:\n\t\tl = 1\n\t\n\twhile l != i:\n\t\tif len(a[l]):\n\t\t\tmx = max(mx, n * (len(a[l]) - 1) + a[l][0] + k)\n\t\t\t\n\t\tk += 1\n\t\tl += 1\n\t\tif l == n + 1:l = 1\n\tprint(mx, end = \" \")\n\nprint()\n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "__author__ = 'Think'\nday1=input()\nday2=input()\ndays={\"monday\":1, \"tuesday\":2, \"wednesday\":3, \"thursday\":4, \"friday\":5, \"saturday\":6, \"sunday\":7}\nnum1=days[day1]\nnum2=days[day2]\ndiff=(num2-num1)%7\nif diff in [0, 2, 3]:\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n\ndef solve(n, m, grid):\n    # Write your code here\n    pass\n\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nm = input().split()\n\n    n = int(nm[0])\n\n    m = int(nm[1])\n\n    grid = []\n\n    for _ in range(n):\n        grid_item = input()\n        grid.append(grid_item)\n\n    result = solve(n, m, grid)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "import sys, re\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians\nfrom itertools import accumulate, permutations, combinations, product, groupby, combinations_with_replacement\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom bisect import bisect, bisect_left\nfrom fractions import gcd\nfrom heapq import heappush, heappop\nfrom functools import reduce\nfrom scipy.sparse import csr_matrix\nfrom scipy.sparse.csgraph import floyd_warshall\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef MAP(): return list(map(int, input().split()))\ndef LIST(): return list(map(int, input().split()))\ndef ZIP(n): return list(zip(*(MAP() for _ in range(n))))\nsys.setrecursionlimit(10 ** 9)\nINF = 10**10\nmod = 10 ** 9 + 7\n\nclass Dinic:\n    def __init__(self, v, inf=10**10):\n        self.v = v\n        self.inf = inf\n        self.G = [[] for _ in range(v)]\n        self.level = [-1]*v  # \u6df1\u3055\n        self.ite = [0]*v  # DFS\u3067\u306e\u63a2\u7d22\u304c\u6e08\u3093\u3067\u3044\u308b\u304b\n    def add_edge(self, fr, to, cap):\n        self.G[fr].append([to, cap, len(self.G[to])])\n        self.G[to].append([fr, 0, len(self.G[fr])-1])\n    def bfs(self, s):  # BFS\u3067\u6df1\u3055\u6c7a\u5b9a,s\u304cstart\n        self.level = [-1]*self.v  # \u5fc5\u8981\n        self.level[s] = 0\n        Q = deque()\n        Q.append(s)\n        while Q:\n            v = Q.popleft()\n            for i in range(len(self.G[v])):\n                e = self.G[v][i]\n                if e[1]>0 and self.level[e[0]]<0: ###capacity>0\u304b\u3064to\u306e\u6df1\u3055\u672a\u5b9a\n                    self.level[e[0]] = self.level[v]+1\n                    Q.append(e[0])\n    def dfs(self, v, t, f):  # DFS\u3067\u5897\u52a0\u30d1\u30b9\u63a2\u7d22,v\u958b\u59cb\u3001t\u7d42\u70b9\u3001\u7dcf\u30d5\u30ed\u30fcf\n        if v==t:\n            return f\n        for i in range(self.ite[v], len(self.G[v])):\n            self.ite[v] = i\n            e = self.G[v][i]\n            if e[1]>0 and self.level[v]<self.level[e[0]]:\n                d = self.dfs(e[0], t, min(f, e[1]))\n                if d>0:\n                    e[1] -= d  # cap\u6e1b\u5c11\n                    self.G[e[0]][e[2]][1] += d  # \u9006\u8fba\u306ecap\u5897\u52a0\n                    return d\n        return 0\n    def max_flow(self, s, t):\n        flow = 0\n        while True:\n            self.bfs(s)\n            if self.level[t]<0:\n                return flow\n            self.ite = [0]*self.v  # DFS\u3067\u306e\u63a2\u7d22\u304c\u6e08\u3093\u3067\u3044\u308b\u304b\u5426\u304b\n            f = self.dfs(s,t,self.inf)\n            while f>0:\n                flow += f\n                f = self.dfs(s,t,self.inf)\n\nN = INT()\na = LIST()\n\nD = Dinic(N+2)\ns = 0\nt = N+1\n\nrw = 0\n\nfor i, x in enumerate(a):\n    if x <= 0:  # \u305d\u306e\u307e\u307e\u7f70\u91d1\n        D.add_edge(s, i+1, -x)\n    elif x > 0:  # \u3042\u3089\u304b\u3058\u3081x\u3082\u3089\u3063\u3066\u304a\u304d\uff0c\u3053\u308c\u304c\u7834\u58ca\u3055\u308c\u308b\u3068x\u306e\u7f70\u91d1\uff0c\n        D.add_edge(i+1, t, x)\n        rw += x\n    for j in range(2*(i+1), N+1, i+1):  # \u300ci\u304c\u7834\u58ca\u304b\u3064j\u304c\u975e\u7834\u58ca\u300d\u306f\u3060\u3081\n        D.add_edge(i+1, j, INF)\n\nprint((rw - D.max_flow(s, t)))\n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "# Function to check if a string is a palindrome\ndef isPalindrome(s):\n    return s == s[::-1]\n\n# Function to find the next tolerable string\ndef nextTolerableString(s, n, p):\n    # Initialize the result string as an empty string\n    result = \"\"\n    # Iterate over the string s\n    for i in range(n):\n        # If the current character is not 'z'\n        if s[i] != 'z':\n            # Initialize a variable to store the next character\n            next_char = chr(ord(s[i]) + 1)\n            # Initialize a variable to store the substring from the next character to the end\n            suffix = s[i+1:]\n            # Check if the next character is not a palindrome\n            if not isPalindrome(next_char + suffix):\n                # If it is not a palindrome, append the next character to the result string\n                result += next_char\n                # Append the suffix to the result string\n                result += suffix\n                # Break out of the loop\n                break\n        # If the current character is 'z'\n        else:\n            # Append 'a' to the result string\n            result += 'a'\n    # If the result string is empty\n    if result == \"\":\n        # Print \"NO\"\n        print(\"NO\")\n    else:\n        # Print the result string\n        print(result)\n\n# Read the input values for n and p\nn, p = map(int, input().split())\n# Read the input string s\ns = input()\n# Call the nextTolerableString function\nnextTolerableString(s, n, p)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "def find_winner(n):\n    if n % 4 == 0:\n        return \"Petya\"\n    else:\n        return \"Vasya\"\n\nif __name__ == \"__main__\":\n    n = int(input())\n    winner = find_winner(n)\n    print(winner)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "# Read the input values\na = int(input())\ns = input()\n\n# Define the b matrix\nb = [[0 for _ in range(len(s))] for _ in range(len(s))]\n\n# Calculate b values\nfor i in range(len(s)):\n    for j in range(len(s)):\n        if j >= i:\n            b[i][j] = int(s[i]) * int(s[j])\n\n# Count the number of rectangles with the desired sum\ncount = 0\nfor i in range(len(s)):\n    for j in range(i, len(s)):\n        for k in range(j, len(s)):\n            if sum(b[i][l] for l in range(j, k+1)) == a:\n                count += 1\n\n# Print the result\nprint(count)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "def solve(n, hills):\n    hills.sort(reverse=True)\n    ans = [0] * (n // 2 + 1)\n    for i in range(1, n // 2 + 1):\n        ans[i] = ans[i - 1]\n        last = -1\n        for j, h in enumerate(hills):\n            if j == last:\n                continue\n            if h > hills[last]:\n                last = j\n                ans[i] += h - hills[last]\n            else:\n                break\n    return ans\n\nn = int(input())\nhills = list(map(int, input().split()))\nans = solve(n, hills)\nprint(*ans)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "import math\nimport functools\n\n# Calculate the number of combinations of items in n stacks\ndef comb(n, items):\n    res = 1\n    for i in range(n):\n        res *= math.factorial(items)\n        items -= 1\n    return res\n\n# Calculate the probability of Jon Snow liking the arrangement\ndef probability(f, w, h):\n    # Calculate the total number of arrangements\n    total = comb(f + w, f + w)\n    # Calculate the number of arrangements where Jon Snow won't like the arrangement\n    bad = 0\n    for i in range(1, h + 1):\n        bad += comb(w - i + 1, w) * comb(f + i, f)\n    # Calculate the probability of Jon Snow liking the arrangement\n    good = total - bad\n    # Return the probability, using a modulo to handle large numbers\n    return good % (10**9 + 7)\n\n# Read input from the user\nf, w, h = map(int, input().split())\n# Calculate the probability and print the result\nprint(probability(f, w, h))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "n = int(input())\ns = input()\n\ncnt8 = 0\nfor x in s:\n    if(x == '8'):\n        cnt8 += 1\n\nprint(min(cnt8, n // 11))\n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "n, m = map(int, input().split())\n\nedges = [list(map(int, input().split())) for _ in range(m)]\n\nans = \"No\"\n\ndef is_valid(s):\n    for a, b in edges:\n        if s[a - 1] != s[b - 1] and s[a - 1] != chr(ord(s[b - 1]) + 1) and s[a - 1] != chr(ord(s[b - 1]) - 1):\n            return False\n    return True\n\nfor i in range(3**n):\n    s = \"\"\n    for j in range(n):\n        s += [\"a\", \"b\", \"c\"][i % 3**(j + 1) // 3**j]\n    if is_valid(s):\n        ans = \"Yes\"\n        break\n\nprint(ans)\nif ans == \"Yes\":\n    print(s)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "import sys\ninput = sys.stdin.readline\nimport numpy as np\n\nN,MOD = list(map(int,input().split()))\n\n\"\"\"\n\u4f59\u4e8b\u8c61\u3092\u8abf\u3079\u308b\u3002\u5305\u9664\u306e\u539f\u7406\u3092\u4f7f\u3046\u3002\nA[n] = \uff081,2,...,n\uff09\u304c1\u676f\u4ee5\u4e0b\u3001\u4ed6\u306f\u4f55\u3067\u3082\u826f\u3044\nB[n,l] : (1,2,...,n) \u3092l\u30b0\u30eb\u30fc\u30d7\u306b\u5206\u3051\u308b\u65b9\u6cd5\u306e\u500b\u6570\nA[n]\n\u30fb0\u676f\u306e\u30b0\u30eb\u30fc\u30d7\u3042\u308a\n\u30fb\u306a\u3057\n\"\"\"\n\nB = np.zeros((N+1,N+1), dtype=np.int64)\nB[0,0] = 1\nfor n in range(1,N+1):\n    # 1\u756a\u3092\u5358\u72ec\u3067\u4f7f\u3046\n    B[n,1:] = B[n-1,:-1]\n    # 1\u756a\u3092\u3069\u3053\u304b\u306b\u6df7\u305c\u3066\u3082\u3089\u3046\n    B[n,1:] += B[n-1,1:] * np.arange(1,N+1) % MOD\n    B[n] %= MOD\n\n# 2^{kl}\npow_2 = np.ones((N+1,N+1), dtype=np.int64)\nfor n in range(1,N+1):\n    pow_2[1,n] = 2 * pow_2[1,n-1] % MOD\nfor n in range(2,N+1):\n    pow_2[n] = pow_2[n-1] * pow_2[1] % MOD\n\nA = np.zeros(N+1, dtype=np.int64)\nfor n in range(N+1):\n    A[n] = (pow(2,pow(2,N-n,MOD-1),MOD) * B[n,1:] % MOD * (pow_2[N-n,1:] + pow_2[N-n,:-1] * np.arange(1,N+1) % MOD) % MOD).sum() % MOD\n\ncomb = np.zeros((N+1,N+1),dtype = np.int64)\ncomb[:,0] = 1\nfor n in range(1,N+1):\n    comb[n,1:] = (comb[n-1,1:] + comb[n-1,:-1]) % MOD\n\nA[::2] *= (-1)\nA *= comb[N]\nA %= MOD\nanswer = pow(2,pow(2,N,MOD-1),MOD) - A.sum()\nanswer %= MOD\nprint(answer)\n\n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "x, y, m = map(int, input().split())\nsteps = 0\nwhile not (x >= m or y >= m):\n    if x == y == 0:\n        break\n    if x < y:\n        x, y = x + y, y\n    else:\n        x, y = x, x + y\n    steps += 1\n\nif x >= m or y >= m:\n    print(steps)\nelse:\n    print(-1)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "def main():\n    name = input()\n    s = ('B', 'C', 'D', 'E', 'F', 'G', 'J', 'K', 'L', 'N', 'P', 'Q', 'R', 'S', 'Z')\n    for ch in s:\n        if ch in name:\n            print('NO')\n            return\n    if name[:len(name) // 2] != name[::-1][:len(name) // 2]:\n        print('NO')\n        return\n    print('YES')\n\nmain()\n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "import math\nimport itertools\n\ndef calculate_average_guests(n, sizes, p):\n    total_guests = 0\n    total_permutations = 0\n\n    # Generate all possible permutations of guests\n    for perm in itertools.permutations(sizes):\n        total_permutations += 1\n\n        # Check if each guest can fit in the table\n        table_length = 0\n        guests_in = 0\n        for size in perm:\n            if table_length + size <= p:\n                table_length += size\n                guests_in += 1\n            else:\n                break\n\n        total_guests += guests_in\n\n    return total_guests / total_permutations\n\n# Inputs\nn = int(input())\nsizes = [int(x) for x in input().split()]\np = int(input())\n\n# Calculate and output the average number of guests\naverage = calculate_average_guests(n, sizes, p)\nprint(average)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "import math\n\ndef get_max_blocks_and_volume(m):\n    if m <= 6:\n        return m, m\n    k = int(math.floor(m ** (1.0/3.0)))\n    k_cube = k ** 3\n    max_blocks = k + (m - k_cube) // (k - 1)\n    max_volume = k_cube + (m - k_cube) * k\n    return max_blocks, max_volume\n\nif __name__ == \"__main__\":\n    m = int(input())\n    max_blocks, max_volume = get_max_blocks_and_volume(m)\n    print(max_blocks, max_volume)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "n, t = map(int, input().split())\nx = input()\ni = x.find('.')\nfor j in range(i + 1, n):\n    if x[j] > '4':\n        for k in range(t):\n            j -= 1\n            if x[j] != '4': break\n        if j == i:\n            j -= 1\n            while j and x[j] == '9': j -= 1\n            x = x[:j] + str(int(x[j]) + 1) + '0' * (i - j - 1)\n        else:\n            x = x[:j] + str(int(x[j]) + 1)\n        break\nprint(x)", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "# Input the integers a and b\na, b = map(int, input().split())\n\n# Initialize the number of resistors as 0\nresistors = 0\n\n# While the numerator is not equal to 1\nwhile a != 1:\n    # If the numerator is divisible by the denominator\n    if a % b == 0:\n        # Divide the numerator by the denominator\n        a //= b\n        # Increment the number of resistors by 1\n        resistors += 1\n    # If the numerator is not divisible by the denominator\n    else:\n        # Increment the numerator by the denominator\n        a += b\n        # Increment the number of resistors by 1\n        resistors += 1\n\n# Print the number of resistors\nprint(resistors)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "z=[int(p) for p in input().split()]\nm=z[2]\nlst=[]\nlst.append(z[0])\nlst.append(z[1])\ntempi=min(lst)\ntempa=max(lst)\n\ncount=0\nfibo=[]\n\n\nn=1000000000000000000\ndef fib(n):\n        \n        a, b = 0, 1\n        while b < n:\n                fibo.append(b)\n                a, b = b, a+b\n    \n\n\ndef add(m):\n        n=10**18\n        tempi=min(lst)\n        tempa=max(lst)\n        count=0\n        if(tempi>0 and tempa>0 and m>tempa):\n                fib(n)\n                for p in range(1,len(fibo)+1):\n                        if(((fibo[p]*tempa)+ (fibo[p-1]*tempi))>=m):\n                                count+=p\n                                return count\n        elif(tempi==0 or tempa==0):\n                count=1\n                fib(n)\n                tempi=tempa+(tempi)\n                for p in range(1,len(fibo)):\n                        if(((fibo[p]*tempa)+ (fibo[p-1]*tempi))>=m):\n                                count+=p\n                                return count\n\n        elif(tempi<0 and tempa>0):\n                val=(-(tempi)//tempa)+1\n                count=val\n                tempi=tempi+(val*tempa)\n                fib(n)\n                for p in range(1,len(fibo)):\n                        if(((fibo[p]*tempa)+ (fibo[p-1]*tempi))>=m):\n                                count+=p\n                                return count\n\n        \n\n\n\n\n\nif(tempi>0 and tempa>0 and m>tempa):\n        cou=add(m)\n        print(cou)\n\nelif(tempi>0 and tempa>0 and m<=tempa):\n        print(0)\n\nelif(tempi==0 ):\n        if(tempi==0 and tempa==0 and m>0):\n                print(-1)\n        elif(tempi==0 and tempa==0 and m<=0):\n                print(0)\n        elif(tempa==0 and tempi<0 and m>0):\n                print(-1)\n                \n        else:\n                cou=add(m)\n                print(cou)\nelif(tempi<0 and tempa>0):\n        if(m<=tempa):\n                print(0)\n        else:\n                cou=add(m)\n                print(cou)\nelif(tempi<0 and tempa==0):\n        if(m>0):\n                print(-1)\n        else:\n                print(0)\nelif(tempi<0 and tempa<0):\n        if(m>=0):\n                print(-1)\n        elif(m<0 and m<=tempa):\n                print(0)\n        elif(m<0 and m>tempa):\n                print(-1)\n\n        \n\n\n        \n                \n                \n                        \n                        \n                                \n                        \n                \n\n\n                        \n                        \n                        \n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "import math\n\n# Read input\nn = int(input())\nrectangles = []\nfor i in range(n):\n    x1, y1, x2, y2 = map(int, input().split())\n    rectangles.append((x1, y1, x2, y2))\n\n# Function to check if a point is inside a rectangle\ndef is_inside(x, y, rectangle):\n    x1, y1, x2, y2 = rectangle\n    return x1 <= x <= x2 and y1 <= y <= y2\n\n# Find a point with integer coordinates that belongs to at least (n-1) given rectangles\ndef find_point(rectangles):\n    n = len(rectangles)\n    # Calculate the center point of each rectangle\n    center_points = []\n    for rectangle in rectangles:\n        x1, y1, x2, y2 = rectangle\n        center_x = (x1 + x2) / 2\n        center_y = (y1 + y2) / 2\n        center_points.append((center_x, center_y))\n    \n    # Check if the center point of each rectangle belongs to at least (n-1) given rectangles\n    for i in range(n):\n        count = 0\n        for j in range(n):\n            if i != j and is_inside(center_points[i][0], center_points[i][1], rectangles[j]):\n                count += 1\n        if count >= n - 1:\n            x = math.floor(center_points[i][0])\n            y = math.floor(center_points[i][1])\n            return (x, y)\n    \n    # If no such point is found, return None\n    return None\n\n# Call the find_point function and print the result\nresult = find_point(rectangles)\nif result is not None:\n    print(result[0], result[1])\nelse:\n    print(\"No such point found.\")", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "from itertools import permutations\nfrom math import ceil, log\n\nn, m = t = list(map(int, input().split()))\nl, _ = t = [ceil(log(x, 7.)) if x > 1 else 1 for x in t]\nprint(sum(int(s[:l], 7) < n and int(s[l:], 7) < m for s in map(''.join, permutations(\"0123456\", sum(t)))))\n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "import sys\nfrom collections import defaultdict\n\n# Read the input\nN = int(input())\nedges = []\nfor i in range(N - 1):\n    x, y = map(int, input().split())\n    edges.append((x, y))\n\n# Construct the graph\ngraph = defaultdict(set)\nfor u, v in edges:\n    graph[u].add(v)\n    graph[v].add(u)\n\n# Construct the Tutte matrix\ntutte_matrix = [[0] * (N + 1) for _ in range(N + 1)]\nfor u in range(1, N + 1):\n    for v in range(1, N + 1):\n        if u == v:\n            continue\n        if u in graph[v]:\n            continue\n        # Construct a subtree by removing the edge (u, v)\n        graph[u].remove(v)\n        graph[v].remove(u)\n        # Use depth-first search to find the size of each component\n        visited = set()\n        def dfs(node):\n            visited.add(node)\n            for neighbor in graph[node]:\n                if neighbor not in visited:\n                    dfs(neighbor)\n        dfs(1)\n        # Calculate the number of perfect matchings in the subtree\n        num_matchings = 1\n        for component_size in visited:\n            num_matchings *= (component_size - 1)\n        # Update the Tutte matrix entry\n        tutte_matrix[u][v] = num_matchings\n        # Restore the graph\n        graph[u].add(v)\n        graph[v].add(u)\n\n#", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "def f(b, n):\n    if n < b:\n        return n\n    else:\n        return f(b, n // b) + (n % b)\n\nn, s = map(int, input().split())\n\nb = 2\nwhile b <= 10**11:\n    if f(b, n) == s:\n        print(b)\n        break\n    b += 1\nelse:\n    print(-1)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "# Dinic's algorithm\nfrom collections import deque\nclass Dinic:\n    def __init__(self, N):\n        self.N = N\n        self.G = [[] for i in range(N)]\n\n    def add_edge(self, fr, to, cap):\n        forward = [to, cap, None]\n        forward[2] = backward = [fr, 0, forward]\n        self.G[fr].append(forward)\n        self.G[to].append(backward)\n\n    def add_multi_edge(self, v1, v2, cap1, cap2):\n        edge1 = [v2, cap1, None]\n        edge1[2] = edge2 = [v1, cap2, edge1]\n        self.G[v1].append(edge1)\n        self.G[v2].append(edge2)\n\n    def bfs(self, s, t):\n        self.level = level = [None]*self.N\n        deq = deque([s])\n        level[s] = 0\n        G = self.G\n        while deq:\n            v = deq.popleft()\n            lv = level[v] + 1\n            for w, cap, _ in G[v]:\n                if cap and level[w] is None:\n                    level[w] = lv\n                    deq.append(w)\n        return level[t] is not None\n\n    def dfs(self, v, t, f):\n        if v == t:\n            return f\n        level = self.level\n        for e in self.it[v]:\n            w, cap, rev = e\n            if cap and level[v] < level[w]:\n                d = self.dfs(w, t, min(f, cap))\n                if d:\n                    e[1] -= d\n                    rev[1] += d\n                    return d\n        return 0\n\n    def flow(self, s, t):\n        flow = 0\n        INF = 10**9 + 7\n        G = self.G\n        while self.bfs(s, t):\n            *self.it, = map(iter, self.G)\n            f = INF\n            while f:\n                f = self.dfs(s, t, INF)\n                flow += f\n        return flow\n\nN,M = map(int,input().split())\nA = list(map(int,input().split()))\nB = list(map(int,input().split()))\nedge = [tuple(map(int,input().split())) for i in range(M)]\n\nG = Dinic(2*N+2)\nres = 0\nfor i in range(1,N+1):\n    if B[i-1]>0:\n        res += B[i-1]\n        G.add_edge(0,i,B[i-1])\n        G.add_edge(0,N+i,B[i-1])\n        G.add_edge(N+i,i,A[i-1])\n    else:\n        G.add_edge(i,2*N+1,-B[i-1])\n        res += -B[i-1]\n        G.add_edge(N+i,2*N+1,-B[i-1])\n        G.add_edge(N+i,i,A[i-1])\n    G.add_edge(i,N+i,10**15)\n\nfor u,v in edge:\n    G.add_edge(u,N+v,10**15)\n    G.add_edge(v,N+u,10**15)\n\nres -= G.flow(0,2*N+1)\n\nprint(res)", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "# Input\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\n# Initialize the answer as infinity\nans = float('inf')\n\n# Loop through all possible combinations of Coke types\nfor mask in range(1 << k):\n    # Initialize the total volume and concentration\n    total_volume = 0\n    total_concentration = 0\n    \n    # Check each Coke type\n    for i in range(k):\n        # If the i-th bit of the mask is set, it means the i-th Coke type is used\n        if mask & (1 << i):\n            # Increment the total volume and concentration\n            total_volume += 1\n            total_concentration += a[i]\n    \n    # If the concentration matches the desired value, update the answer\n    if total_concentration == n and total_volume < ans:\n        ans = total_volume\n\n# Print the answer\nif ans == float('inf'):\n    print(-1)\nelse:\n    print(ans)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "n,k=list(map(int,input().split()));n-=k;print(k**~-k*n**n%(10**9+7))\n\n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "h, m, s, t1, t2 = [int(i) for i in input().split()]\nh *= 5\nt1 *= 5\nt2 *= 5\nif h < t1: h += 60\nif m < t1: m += 60\nif s < t1: s += 60\nif t2 < t1: t2 += 60\nc = (t2 <= h) + (t2 <= m) + (t2 <= s)\nans = \"YES\" if c == 0 or c == 3 else \"NO\"\nprint(ans)\n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "import sys\nreader = (s.rstrip() for s in sys.stdin)\ninput = reader.__next__\n\nn = int(input())\np = list(map(int, input().split()))\nodd = (n+1)//2\neven = n-odd\nfor i in p:\n    if i:\n        if i%2 == 0:\n            even -= 1\n        else:\n            odd -= 1\n\nif even == 0:\n    p = [i if i else 1 for i in p]\nif odd*even == 0:\n    ans = 0\n    prev = p[0]\n    for pi in p:\n        ans += (pi+prev)%2\n        prev = pi\n    print(ans)\n    return\n\nDP = [[float(\"inf\")]*(even+1) for i in range(2)]\nfor i in range(n):\n    nxt = [[float(\"inf\")]*(even+1) for i in range(2)]\n    if i == 0:\n        if p[i]:\n            if p[i]%2 == 0:\n                nxt[0][0] = 0\n            else:\n                nxt[1][0] = 0\n        else:\n            nxt[0][1] = 0\n            nxt[1][0] = 0\n    else:\n        if p[i]:\n            if p[i]%2 == 0:\n                for j in range(even+1):\n                    nxt[0][j] = min(DP[0][j], DP[1][j]+1)\n            else:\n                for j in range(even+1):\n                    nxt[1][j] = min(DP[0][j]+1, DP[1][j])\n        else:\n            for j in range(1, even+1):\n                nxt[0][j] = min(DP[0][j-1], DP[1][j-1]+1)\n            for j in range(even+1):\n                nxt[1][j] = min(DP[0][j]+1, DP[1][j])\n    DP = nxt\nprint(min(DP[0][-1], DP[1][-1]))\n\n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "import sys\nfrom collections import defaultdict", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "class State:\n  __slots__ = ['candidate', 'votes', 'last_vote']\n\n  def __init__(self, cand, votes, last):\n    self.candidate = cand\n    self.votes = votes\n    self.last_vote = last\n\n  def beats(self, other, extra):\n    return self.votes + extra > other.votes\n\ndef main():\n  candidates, seats, people, voted = map(int, input().split())\n  votes = [0 for i in range(candidates)]\n  last_vote = [0 for i in range(candidates)]\n\n  if candidates == 1:\n    print(1)\n    return\n\n  v = list(map(int, input().split()))\n  for t in range(voted):\n    cand = v[t] - 1\n    votes[cand] += 1\n    last_vote[cand] = t\n\n  states = [State(i, votes[i], last_vote[i]) for i in range(candidates)]\n  states = sorted(states, key = lambda x : (x.votes, -x.last_vote))\n  res = [0 for i in range(candidates)]\n\n  for i in range(candidates):\n    if i < candidates - seats:\n      low = candidates - seats\n      if states[i].beats(states[low], people - voted):\n        res[states[i].candidate] = 2\n      else:\n        res[states[i].candidate] = 3\n    else:\n      extra = people - voted\n      other = i - 1\n      place = i\n\n      if extra == 0 and states[i].votes == 0:\n        res[states[i].candidate] = 3\n        continue\n\n      while other >= 0 and extra > 0:\n        needed = states[i].votes - states[other].votes + 1\n        if needed <= extra:\n          extra -= needed;\n          place -= 1\n          other -= 1\n        else:\n          break\n\n      res[states[i].candidate] = (1 if place + seats >= candidates and states[i].votes > 0 else 2)\n\n  for i in res:\n    print(i, end = ' ')\n\nmain()\n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "import sys\n\nsys.setrecursionlimit(5001)\nMOD = 10 ** 9 + 7\n\nn = int(input())\nlinks = [set() for _ in range(n)]\nfor line in sys.stdin.readlines():\n    x, y = list(map(int, line.split()))\n    x -= 1\n    y -= 1\n    links[x].add(y)\n    links[y].add(x)\n\ndouble_factorial_odd = [0] * (n // 2)\nprev = 1\nfor i in range(n // 2):\n    prev = double_factorial_odd[i] = (2 * i + 1) * prev % MOD\n\n\ndef dfs(v, p):\n    ret = [0, 1]\n    for u in links[v]:\n        if u == p:\n            continue\n        res = dfs(u, v)\n        lt, ls = len(ret), len(res)\n        mrg = [0] * (lt + ls - 1)\n        for i in range(1 - lt % 2, lt, 2):\n            c = ret[i]\n            for j in range(1 - ls % 2, ls, 2):\n                mrg[i + j] = (mrg[i + j] + c * res[j]) % MOD\n        ret = mrg\n\n    if len(ret) % 2 == 1:\n        ret[0] = -sum(pattern * df % MOD for pattern, df in zip(ret[2::2], double_factorial_odd)) % MOD\n\n    return ret\n\n\nprint((MOD - dfs(0, -1)[0]))\n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "from math import gcd\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef solve(n, m):\n    total_seqs = 2**(m * n)\n    ans = total_seqs\n    for i in range(2, m + 1):\n        if is_prime(i):\n            ans -= total_seqs // i\n    for i in range(2, m + 1):\n        for j in range(i + 1, m + 1):\n            if gcd(i, j) == 1:\n                ans += total_seqs // (i * j)\n    for i in range(2, m + 1):\n        for j in range(i + 1, m + 1):\n            for k in range(j + 1, m + 1):\n                if gcd(i, j) == 1 and gcd(i, k) == 1 and gcd(j, k) == 1:\n                    ans -= total_seqs // (i * j * k)\n    return ans % (10**9 + 9)\n\nn, m = map(int, input().split())\nprint(solve(n, m))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "n, k = map(int, input().split())\ncoins = list(map(int, input().split()))\n\n# Function to calculate the values that Arya can make using a subset of coins with sum k\ndef subset_values(coins, k):\n    # Create a dp array to store the values that can be made with each subset of coins\n    dp = [False] * (k + 1)\n    # Initialize the value 0 to True as Arya can make 0 with no coins\n    dp[0] = True\n    # Iterate through each coin\n    for coin in coins:\n        # Iterate through each value from k to coin\n        for i in range(k, coin - 1, -1):\n            # If a value can be made with a subset of coins, check if it can be made with the current coin as well\n            if dp[i - coin]:\n                dp[i] = True\n    # Initialize an empty set to store the values that Arya can make\n    values = set()\n    # Iterate through each value from 0 to k\n    for i in range(k + 1):\n        # If a value can be made, add it to the set\n        if dp[i]:\n            values.add(i)\n    return values\n\n# Calculate the values that Arya can make using a subset of coins with sum k\nvalues = subset_values(coins, k)\n# Sort the values in ascending order\nvalues = sorted(values)\n# Print the number of values\nprint(len(values))\n# Print the values\nprint(*values)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "a, b = list(map(int, input().split()))\nif a < b:\n    print(-1)\nelif a == b:\n    print(a)\nelse:\n    ku = (a - b) // (2 * b)\n    kd = (a + b) // (2 * b)\n    xd = (a + b) / (2 * kd)\n    if ku == 0:\n        print(xd)\n    else:\n        xu = (a - b) / (2 * ku)\n        print(min(xu, xd))\n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "def solve(n, k, a, b):\n    x = y = 1\n    for s in range(1, n * k + 1):\n        for l in range(1, n * k + 1):\n            if (s - 1) % k + a == (s + l - 1) % k + b:\n                x = max(x, l)\n                y = min(y, l)\n    return x, y\n\nif __name__ == '__main__':\n    n, k = map(int, input().split())\n    a, b = map(int, input().split())\n    x, y = solve(n, k, a, b)\n    print(x, y)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "import calendar\n\ndef leap_year(year):\n    if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n        return True\n    return False\n\ndef get_day(day, month, year):\n    return calendar.day_name[calendar.weekday(year, month, day)]\n\ndef is_possible(first_day, second_day):\n    for year in range(2017, 2023):\n        for month in range(1, 13):\n            days_in_month = 31 if month in [1, 3, 5, 7, 8, 10, 12] else 30\n            days_in_month = 29 if month == 2 and leap_year(year) else days_in_month\n\n            if get_day(1, month, year).lower() == first_day and get_day(1, month + 1, year).lower() == second_day:\n                return True\n\n    return False\n\nfirst_day = input()\nsecond_day = input()\n\nif is_possible(first_day, second_day):\n    print(\"YES\")\nelse:\n    print(\"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "n=int(input())\na=list(map(int,input().split()))\nd=set()\nt={}\nrep=set()\nif a.count(0)>=2:\n\tprint(\"cslnb\")\n\treturn\n\nfor i in a:\n\tif i in d:\n\t\tif t[i]+1==3:\n\t\t\tprint(\"cslnb\")\n\t\t\treturn\n\t\telse:\n\t\t\tt[i]+=1\n\t\t\trep.add(i)\n\t\t\tif len(rep)>=2:\n\t\t\t\tprint(\"cslnb\")\n\t\t\t\treturn\n\telse:\n\t\tt[i]=1\n\t\td.add(i)\nif rep:\n\tfor c in rep:\n\t\tif c-1 in d:\n\t\t\tprint(\"cslnb\")\n\t\t\treturn\ns=0\na.sort()\nfor i in range(n):\n\ts+=a[i]-i\nif s%2==1:print(\"sjfnb\")\nelse:print(\"cslnb\")", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "f = lambda: list(map(int, input().split()))\n\nn, m = f()\n\nt = list(f())\n\ns = [0] * 301\n\nd = s[:]\n\nfor i in t: d[i] += 1\n\nfor i in t * min(m, 2 * n): s[i] = max(s[:i + 1]) + 1\n\nprint(max(s) + max((m - n * 2) * max(d), 0))\n\n\n\n\n# Made By Mostafa_Khaled\n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "\nimport sys\ninput=sys.stdin.readline\nimport math\nn, k = list(map(int, input().split()))\na = 1;\nar = list(map(int, input().split()))\nfor c in ar:\n    a *=  math.gcd(k,c)//math.gcd(a,c) \n    #print(a,c)\nif a==k:\n\tprint(\"Yes\")\nelse:\n\tprint(\"No\")\n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "n=int(input())\n\na=input()\n\nprint(min(n,3+a.count('01')+a.count('10')))\n\n\n\n# Made By Mostafa_Khaled\n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "\nM = 10 ** 5\n\nn = int(input())\nss = [int(s) for s in input().split()]\n\nprime_factor = {i: set() for i in range(1, M + 1)}\n\nfor p in range(2, M + 1):\n    if prime_factor[p] != set():\n        continue\n    else:\n        for i in range(p, M + 1, p):\n            prime_factor[i].add(p)\n\ncnt = [0] * (M + 1)\n\nfor s in ss:\n    for p in prime_factor[s]:\n        cnt[p] += 1\n\nprint(max(1, max(cnt)))", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "from sys import stdin\nfrom math import ceil\nn=int(stdin.readline().strip())\ns=tuple([0]+list(map(int,stdin.readline().strip().split()))+[0])\nlim=ceil(n/2)+1\ndp=[[2000000002 for i in  range(n+1)] for j in range(lim)]\nvis=[[False for i in  range(n+1)] for j in range(lim)]\nfor  i in range(n+1):\n    dp[0][i]=0\nans=[0 for i in range(lim-1)]\nfor i in range(1,lim):\n    for j in range(1,n+1):\n        x=0\n        y=s[j-1]\n        if vis[i-1][j-2]:\n            y=min(y,s[j-2]-1)\n        if y>=s[j]:\n            x=y-s[j]+1\n        if s[j+1]>=s[j]:\n            x+=s[j+1]-s[j]+1\n        if j==1:\n            if dp[i-1][0]+x<=dp[i][j-1]:\n                vis[i][j]=True\n                dp[i][j]=dp[i-1][0]+x\n            else:\n                dp[i][j]=dp[i][j-1]\n        else:\n            if dp[i-1][j-2]+x<=dp[i][j-1]:\n                vis[i][j]=True\n                dp[i][j]=dp[i-1][j-2]+x\n            else:\n                dp[i][j]=dp[i][j-1]\n    ans[i-1]=dp[i][-1]\nprint(*ans)\n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "def max_area_smallest_piece(n, m, k):\n    def check(n, m, k, area):\n        def dfs(x, y, n, m, dp):\n            if dp[x][y] != -1:\n                return dp[x][y]\n            res = 1\n            if x + 1 < n and not visited[x + 1][y]:\n                res += dfs(x + 1, y, n, m, dp)\n            if x - 1 >= 0 and not visited[x - 1][y]:\n                res += dfs(x - 1, y, n, m, dp)\n            if y + 1 < m and not visited[x][y + 1]:\n                res += dfs(x, y + 1, n, m, dp)\n            if y - 1 >= 0 and not visited[x][y - 1]:\n                res += dfs(x, y - 1, n, m, dp)\n            dp[x][y] = res\n            return res\n        visited = [[False] * m for _ in range(n)]\n        dp = [[-1] * m for _ in range(n)]\n        count = 0\n        for i in range(n):\n            for j in range(m):\n                if not visited[i][j] and dfs(i, j, n, m, dp) * area <= n * m:\n                    count += 1\n        return count <= k\n    low, high = 1, n * m\n    while low < high:\n        mid = (low + high) // 2\n        if check(n, m, k, mid):\n            high = mid\n        else:\n            low = mid + 1\n    if check(n, m, k, low):\n        return low\n    return -1\n\nn, m, k = list(map(int, input().split()))\nprint(max_area_smallest_piece(n, m, k))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "import sys\nmod = 10 ** 9 + 7\nsys.setrecursionlimit(mod)\ninput = sys.stdin.readline\n\ndef root(v):\n    if v == par[v]:\n        return v\n    par[v] = root(par[v])\n    return par[v]\n\ndef unite(u, v):\n    u = root(u)\n    v = root(v)\n    if u == v:\n        return\n    if rank[u] < rank[v]:\n        u, v = v, u\n    par[v] = u\n    if rank[u] == rank[v]:\n        rank[u] += 1\n\ndef same(u, v):\n    return root(u) == root(v)\n\ndef kruskal(edges):\n    tree = [[] for _ in range(N)]\n    used = [False] * M\n    weight = 0\n    for i, (w, u, v) in enumerate(edges):\n        if same(u, v):\n            continue\n        unite(u, v)\n        weight += w\n        tree[u].append((w, v))\n        tree[v].append((w, u))\n        used[i] = True\n    return weight, tree, used\n\ndef dfs(v=0, p=-1, d=0, w=0):\n    parent[0][v] = p\n    depth[v] = d\n    max_w[0][v] = w\n    for w, u in T[v]:\n        if u == p:\n            continue\n        dfs(u, v, d+1, w)\n\ndef lca(u, v):\n    if depth[u] > depth[v]:\n        u, v = v, u\n    tmp = 0\n    while depth[v] > depth[u]:\n        diff = depth[v] - depth[u]\n        k = diff.bit_length() - 1\n        tmp = max(tmp, max_w[k][v])\n        v = parent[k][v]\n    if u == v:\n        return tmp\n    for k in range(logN-1, -1, -1):\n        if parent[k][u] != parent[k][v]:\n            tmp = max(tmp, max_w[k][u], max_w[k][v])\n            u = parent[k][u]\n            v = parent[k][v]\n    return max(tmp, max_w[0][u], max_w[0][v])\n\ndef modpow(x, p):\n    if p == 0:\n        return 1\n    elif p == 1:\n        return x % mod\n    if p % 2 == 1:\n        return x * modpow(x, p-1) % mod\n    return modpow(x * x % mod, p // 2) % mod\n\nN, M = map(int, input().split())\nlogN = (N - 1).bit_length()\nX = int(input())\nE = [tuple()] * M\nfor i in range(M):\n    u, v, w = map(int, input().split())\n    E[i] = (w, u-1, v-1)\nE = sorted(E, key=lambda x: x[0])\npar = list(range(N))\nrank = [1] * N\nW, T, F = kruskal(E)\ndepth = [0] * N\nparent = [[0] * N for _ in range(logN+1)]\nmax_w = [[0] * N for _ in range(logN+1)]\ndfs()\nfor k in range(logN):\n    for v in range(N):\n        if parent[k][v] < 0:\n            parent[k+1][v] = -1\n            max_w[k+1][v] = max_w[k][v]\n        else:\n            parent[k+1][v] = parent[k][parent[k][v]]\n            max_w[k+1][v] = max(max_w[k][v], max_w[k][parent[k][v]])\n\nle = 0\neq = 0\nge = 0\nfor i, (w, u, v) in enumerate(E):\n    s = W\n    if not F[i]:\n        s += (w - lca(u, v))\n    if s < X:\n        le += 1\n    else:\n        if s == X:\n            eq += 1\n        else:\n            ge += 1\nans = 0\nif eq != 0:\n    if le == 0:\n        ans = (modpow(2, eq) - 2) * modpow(2, ge) % mod\n    else:\n        ans = 2 * (modpow(2, eq) - 1) * modpow(2, ge) % mod\nprint(ans)", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "# Function to determine if allocating colors and weights is possible\ndef is_possible(N, P, X):\n    # Create a graph as an adjacency list\n    graph = [[] for _ in range(N + 1)]\n    for i in range(2, N + 1):\n        graph[P[i - 1]].append(i)\n\n    # Initialize the visited array\n    visited = [False] * (N + 1)\n\n    # Recursive function to check if it is possible to allocate colors and weights\n    def dfs(node):\n        # Mark the current node as visited\n        visited[node] = True\n\n        # Initialize the weight of each color\n        white_weight = 0\n        black_weight = 0\n\n        # Iterate over the children of the current node\n        for child in graph[node]:\n            if not visited[child]:\n                # Recursively call the dfs function for the child node\n                white_weight += dfs(child)\n\n        # Calculate the weight of the other color\n        black_weight = X[node] - white_weight\n\n        # Check if the weight of the other color is non-negative\n        if black_weight < 0:\n            return -1\n\n        # Return the weight of the current node's white color\n        return white_weight\n\n    # Check if it is possible to allocate colors and weights\n    if dfs(1) == -1:\n        return False\n    else:\n        return True\n\n# Main function\nif __name__ == \"__main__\":\n    # Read the input from the user\n    N = int(input())\n    P = list(map(int, input().split()))\n    X = list(map(int, input().split()))\n\n    # Check if it is possible to allocate colors and weights\n    if is_possible(N, P, X):\n        print(\"POSSIBLE\")\n    else:\n        print(\"IMPOSSIBLE\")", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "def findConvexHullArea(points):\n    def cross(o, a, b):\n        return (a[0] - o[0]) * (b[1] - o[1]) - (a[1] - o[1]) * (b[0] - o[0])\n\n    points.sort()\n    lower = []\n    for p in points:\n        while len(lower) >= 2 and cross(lower[-2], lower[-1], p) <= 0:\n            lower.pop()\n        lower.append(p)\n\n    upper = []\n    for p in reversed(points):\n        while len(upper) >= 2 and cross(upper[-2], upper[-1], p) <= 0:\n            upper.pop()\n        upper.append(p)\n\n    return abs(cross(lower[0], lower[1], upper[0]))\n\n\ndef solve(N, points):\n    mod = 998244353\n    ans = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            for k in range(j + 1, N):\n                for l in range(k + 1, N):\n                    if findConvexHullArea([points[i], points[j], points[k], points[l]]) > 0:\n                        ans += 2 ** (3 - 1)\n    return ans % mod\n\n\nN = int(input())\npoints = []\nfor _ in range(N):\n    x, y = map(int, input().split())\n    points.append([x, y])\n\nprint(solve(N, points))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "def answer_question(N, M):\n    # Base case\n    if N == 1:\n        return 2\n    # Recursive case\n    else:\n        return ((2**N) - (2**(N-1))) % M\n\n# Get the input from the user\nN, M = map(int, input().split())\n\n# Calculate the result\nresult = answer_question(N, M)\n\n# Print the result\nprint(result)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "import math\n\ndef solve_problem(n, m, x, y, a, b):\n    # Initialize the closest rectangle with a large distance\n    closest_rectangle = [0, 0, 0, 0]\n    closest_distance = float(\"inf\")\n\n    # Iterate through all possible rectangles\n    for x1 in range(x + 1):\n        for x2 in range(x, n + 1):\n            for y1 in range(y + 1):\n                for y2 in range(y, m + 1):\n                    # Check if the current rectangle is a valid solution\n                    if (x2 - x1) / (y2 - y1) == a / b:\n                        # Calculate the Euclidean distance between (x, y) and the center of the rectangle\n                        center_x = (x1 + x2) / 2\n                        center_y = (y1 + y2) / 2\n                        distance = math.sqrt((center_x - x) ** 2 + (center_y - y) ** 2)\n\n                        # Check if this rectangle is closer to (x, y) or lexicographically smaller\n                        if distance < closest_distance or (distance == closest_distance and [x1, y1, x2, y2] < closest_rectangle):\n                            closest_rectangle = [x1, y1, x2, y2]\n                            closest_distance = distance\n\n    # Print the result\n    if closest_rectangle == [0, 0, 0, 0]:\n        print(\"No solution\")\n    else:\n        print(*closest_rectangle)\n\n\n# Read input\nn, m, x, y, a, b = map(int, input().split())\n\n# Solve the problem\nsolve_problem(n, m, x, y, a, b)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "#!/usr/bin/env python3\n\n# Function to calculate the number of distinct decompositions of a number\n# into n ordered positive integers\ndef count_decompositions(number, n):\n    # Initialize an empty list to store the results\n    results = []\n    # Start with the smallest possible decomposition\n    start = [number // n] * n\n    # Append the starting decomposition to the results list\n    results.append(start)\n    # Initialize a flag to indicate if we have reached the end\n    done = False\n    # Loop until we have reached the end\n    while not done:\n        # Initialize a flag to indicate if we have made any changes\n        changed = False\n        # Loop through the decomposition in reverse order\n        for i in range(n - 1, 0, -1):\n            # Check if the current decomposition can be increased\n            if start[i - 1] + 1 <= start[i]:\n                # Increase the decomposition\n                start[i - 1] += 1\n                start[i] -= 1\n                # Mark the change flag as True\n                changed = True\n                break\n        # If no changes were made, we have reached the end\n        if not changed:\n            done = True\n        else:\n            # Reverse the decomposition to get the smallest possible\n            # decomposition with the updated values\n            start = start[:i] + list(reversed(start[i:]))\n            # Append the new decomposition to the results list\n            results.append(start)\n    # Calculate the number of distinct decompositions\n    num_decompositions = len(set(map(tuple, results)))\n    # Return the number of distinct decompositions modulo 1000000007\n    return num_decompositions % 1000000007\n\n# Read the input\nn = int(input())\nnumbers = list(map(int, input().split()))\n# Calculate the product of the numbers\nnumber = 1\nfor i in numbers:\n    number *= i\n# Call the function to calculate the number of distinct decompositions\nresult = count_decompositions", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "_ = input()\n\nballs = sorted(list(set([int(x) for x in input().split()])))\n\nfor i in range(len(balls) - 2):\n    a = balls[i]\n    b = balls[i + 2]\n    if b - a <= 2:\n        print('YES')\n        break\nelse:\n    print('NO')\n", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "a, b, c = map(int, input().split(' '))\narray = [[i for i in input()] for j in range(a)]\np = []\nx = 0\nfor i in range(a):\n    for j in range(b):\n        if array[i][j] == '.':\n            p = [(i, j)]\n            x += 1\n\nvisited = [[False for _ in range(b)] for i in range(a)]\ndef ok(i, j):\n    if 0 <= i <= a-1 and 0 <= j <= b-1:\n        if array[i][j] == '.':\n            return True\n    return False\n\nsa = 0\nwhile sa < x-c:\n    i, j = p[-1]\n    p.pop()\n    #print(i,j,sa)\n    if not visited[i][j]:\n        if ok(i, j-1):\n            if not visited[i][j-1]:\n                p.append((i, j-1))\n        if ok(i, j+1):\n            if not visited[i][j+1]:\n                p.append((i, j+1))\n        if ok(i+1, j):\n            if not visited[i+1][j]:\n                p.append((i+1, j))\n        if ok(i-1, j):\n            if not visited[i-1][j]:\n                p.append((i-1, j))\n        visited[i][j] = True\n        sa+=1\n\nfor i in range(a):\n    for j in range(b):\n        if array[i][j] == '.' and not visited[i][j]:\n            array[i][j] = 'X'\n\nfor each in [''.join(i) for i in array]:\n    print(each)", "label": 0, "label_name": "human_written", "difficulty": "competition", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_competition_207.jsonl"}
{"code": "import re\n\n# Function to check if a block of consonants has all letters the same\ndef all_letters_same(block):\n    return len(set(block)) == 1\n\n# Function to check if a word has typos\ndef has_typos(word):\n    # Regular expression to match blocks of consonants (without vowels)\n    consonants_regex = re.compile(r'[^aeiou]+')\n    # Find all blocks of consonants in the word\n    consonants_blocks = re.findall(consonants_regex, word)\n    # Check if any of the blocks has at least three consonants and all letters the same\n    for block in consonants_blocks:\n        if len(block) >= 3 and not all_letters_same(block):\n            return True\n    return False\n\n# Function to insert spaces to remove typos\ndef remove_typos(word):\n    # Initialize a list to store the result\n    result = []\n    # Regular expression to match blocks of consonants (without vowels)\n    consonants_regex = re.compile(r'[^aeiou]+')\n    # Find all blocks of consonants in the word\n    consonants_blocks = re.findall(consonants_regex, word)\n    # Iterate over each block\n    for block in consonants_blocks:\n        # If a block has at least three consonants and all letters the same\n        if len(block) >= 3 and not all_letters_same(block):\n            # Insert a space before the block\n            word = word.replace(block, ' ' + block)\n    # Append the modified word to the result list\n    result.append(word)\n    return result\n\n# Read the input\nword = input()\n# Check if the word has typos\nif has_typos(word):\n    # If there are typos, remove them and print the result\n    result = remove_typos(word)\n    print(result[0])\nelse:\n    # If there are no typos,", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "import re\n\ndef getAnswer(x):\n    if len(x) < 5:\n        return \"Too weak\"\n    if (re.search('[A-Z]',x)) == None:\n        return \"Too weak\"\n    if (re.search('[a-z]',x)) == None:\n        return \"Too weak\"\n    if (re.search('[0-9]',x)) == None:\n        return \"Too weak\"\n    return \"Correct\"\ndef main():\n    x = input()\n    print(getAnswer(x))\n\nmain()", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "import math\nM, A, B = list(map(int, input().split()))\nbound = [10**9 + 7]*(A + B)\nl, r = 0, 0\nwhile True:\n    bound[l] = r\n    if l >= B:\n        l -= B\n    else:\n        l += A\n    r = max(r, l)\n    if l == 0:\n        break\n\nans = 0\nfor i in range(0, A + B):\n    if bound[i] <= M:\n        ans += M - bound[i] + 1\n\nrem = M - (A + B) + 1\nif M >= (A + B):\n    g = math.gcd(A, B)\n    up = (rem // g) * g\n    lo = rem - up\n    cnt = up // g + 1\n    ans += (lo + rem) * cnt // 2\nprint(ans)\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "R, C = [int(x) for x in input().split()]\ngrid = [list(input()) for _ in range(R)]\n\nwpr = [0] * R\nwpc = [0] * C\nn = 0\n\nfor r in range(R):\n    for c in range(C):\n        if grid[r][c] != '*':\n            continue\n        wpr[r] += 1\n        wpc[c] += 1\n        n += 1\n\nfor r in range(R):\n    for c in range(C):\n        field = 1 if grid[r][c] == '*' else 0\n\n        if wpr[r] + wpc[c] - field == n:\n            print('YES')\n            print(r+1, c+1)\n            return\n\nprint('NO')\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\n\ndef solve(m, x):\n    if gcd(x, m) != 1:\n        return -1\n    else:\n        return m - 1\n\n\nif __name__ == \"__main__\":\n    m, x = map(int, input().split())\n    print(solve(m, x))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "def min_deletions(n, k):\n    n_str = str(n)\n    max_length = len(n_str) - k + 1\n    for length in range(max_length, -1, -1):\n        for start_index in range(len(n_str) - length + 1):\n            candidate = n_str[start_index:start_index + length]\n            if int(candidate) % 10**k == 0:\n                return len(n_str) - length\n    return -1\n\nif __name__ == \"__main__\":\n    n, k = map(int, input().split())\n    print(min_deletions(n, k))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "n, a, x, b, y = map(int, input().split())  # Read the input numbers\n\n# Check if Daniel and Vlad will ever be at the same station\n# at the same time during their journey\n\n# Initialize the current station of Daniel and Vlad\ncurrent_station_daniel = a\ncurrent_station_vlad = b\n\n# Initialize the number of minutes passed\nminutes_passed = 0\n\n# Keep looping until one of the trains leaves the subway\nwhile current_station_daniel != x and current_station_vlad != y:\n    # Increment the minutes passed\n    minutes_passed += 1\n\n    # Calculate the next station of Daniel and Vlad\n    next_station_daniel = (current_station_daniel + 1) % n\n    if next_station_daniel == 0:\n        next_station_daniel = 1\n    next_station_vlad = (current_station_vlad - 1) % n\n    if next_station_vlad == 0:\n        next_station_vlad = n\n\n    # Check if Daniel and Vlad are at the same station\n    if next_station_daniel == next_station_vlad:\n        # If they are, print \"YES\" and break the loop\n        print(\"YES\")\n        break\n    else:\n        # If they are not, update the current station of Daniel and Vlad\n        current_station_daniel = next_station_daniel\n        current_station_vlad = next_station_vlad\n\n# If the loop is not broken, it means Daniel and Vlad are not at the same station\nelse:\n    print(\"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "def is_accident_possible(lights):\n    # Check if there are any green lights for left or straight lanes\n    # in the same part as the green pedestrian light\n    for part in lights:\n        if part[0] == 1 or part[1] == 1:\n            if part[3] == 1:\n                return True\n\n    # Check if there are any green lights for right lanes\n    # in the next part as the green pedestrian light\n    for i in range(4):\n        if lights[i][2] == 1:\n            if lights[(i+1)%4][3] == 1:\n                return True\n\n    return False\n\n# Read the input\nlights = []\nfor _ in range(4):\n    line = input().split()\n    lights.append([int(num) for num in line])\n\n# Check if an accident is possible\nif is_accident_possible(lights):\n    print(\"YES\")\nelse:\n    print(\"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "# Read the input\nn, k = map(int, input().split())\np = list(map(int, input().split()))\n\n# Initialize the array b\nb = []\n\n# Initialize the stack s\ns = []\n\n# Push the first k elements of p to s\nfor i in range(k):\n    s.append(p[i])\n\n# Initialize the index i\ni = k\n\n# While s is not empty\nwhile s:\n    # Append the top element of s to b\n    b.append(s.pop())\n\n    # While s is not empty and the top element of s is less than the element at index i\n    while s and s[-1] < p[i]:\n        # Pop the top element from s and append it to b\n        b.append(s.pop())\n\n    # If i is less than n\n    if i < n:\n        # Push the element at index i to s\n        s.append(p[i])\n\n        # Increment i\n        i += 1\n\n# If b is not sorted in non-descending order\nif b != sorted(b):\n    # Print -1\n    print(-1)\nelse:\n    # Print the elements of b separated by spaces\n    print(*b)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "a = [[int(i) for i in input().split()] for j in range(4)]\n\npesh = [0] * 4\navt = [0] * 4\n\nfor i in range(len(a)):\n    if a[i][3]:\n        pesh[i] = True\n    if a[i][0]:\n        avt[(i - 1) % 4] = True\n        avt[i] = True\n    if a[i][1]:\n        avt[(i + 2) % 4] = True\n        avt[i] = True\n    if a[i][2]:\n        avt[(i + 1) % 4] = True\n        avt[i] = True\n\nfor i in range(4):\n    if avt[i] and pesh[i]:\n        print(\"YES\")\n        break\nelse:\n    print(\"NO\")\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "n = int(input())\ns = input()\n\n\nmax_ans = len([x for x in s if x == 'G'])\nright = 0\ncnt = 0\nans = 0\nfor i in range(n):\n\tassigned = False\n\tfor j in range(right, n, 1):\n\t\tif s[j] == 'S':\n\t\t\tcnt += 1\n\t\tif cnt > 1:\n\t\t\tright = j\n\t\t\tcnt -= 1\n\t\t\tassigned = True\n\t\t\tbreak\n\tif not assigned:\n\t\tright = n\n\t# print(i, right)\n\tans = max(ans, right - i)\n\tif s[i] == 'S':\n\t\tcnt -= 1\nans = min(ans, max_ans)\nprint(ans)", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "s=input()\nk=0\ns1=''\ns2=['','','']\nfor a in s:\n    if a=='a' or a=='e' or a=='i' or a=='o' or a=='u':\n        s1+=a\n        k=0\n    else:\n        if k+1==3:\n            s2[2]=a\n            if (s2[0]!=s2[1] or s2[0]!=s2[2]):\n                s1=s1+' '+a\n                k=1\n                s2[0]=a\n            else:\n                k=2\n                s1+=a\n        else:\n            s2[k] = a\n            k+=1\n            s1+=a\nprint(s1)", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "R=lambda:list(map(int,input().split()))\nn,k=R()\na=k\nfor i in R():\n  if k%i==0:\n    a=min(a,k//i)\nprint(a)\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "N, M, K, L = map(int, input().split())\n\nif L <= M:\n    print(M - K)\nelse:\n    if L - M > N - K:\n        print(-1)\n    else:\n        print(N - K - (L - M))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "import sys\ninput = sys.stdin.readline\n\nn,T=list(map(int,input().split()))\nS=[list(map(int,input().split())) for i in range(n)]\n\nDP=[[0]*(4) for i in range(T+1)]\nmod=10**9+7\n\nfrom functools import lru_cache\n@lru_cache(maxsize=None)\ndef calc(used,recent,time):\n    ANS=0\n    for i in range(n):\n        #print(i,used)\n        if i in used:\n            continue\n        if time+S[i][0]>T:\n            continue\n        if S[i][1]==recent:\n            continue\n        if time+S[i][0]==T:\n            ANS+=1\n        if time+S[i][0]<T:\n            used2=list(used)+[i]\n            used2.sort()\n            recent2=S[i][1]\n            time2=time+S[i][0]\n            ANS=(ANS+calc(tuple(used2),recent2,time2))%mod\n\n    return ANS\n\nprint(calc(tuple(),-1,0)%mod)\n    \n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "def check_spalindrome(s):\n    n = len(s)\n    mid = n // 2\n    if n % 2 == 0:\n        return s[:mid] == s[mid:][::-1]\n    else:\n        return s[:mid] == s[mid + 1:][::-1]\n\n\nif __name__ == \"__main__\":\n    s = input()\n    if check_spalindrome(s):\n        print(\"TAK\")\n    else:\n        print(\"NIE\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "import math \n\ndef prefixIds(a, b):\n\tprefSubsId = [math.inf] * len(b)\n\n\t# print(a)\n\t# print(b)\n\n\tbId = 0\n\taId = 0\n\n\twhile aId < len(a):\n\t\tif bId == len(b):\n\t\t\tbreak\n\n\t\tif a[aId] == b[bId]:\n\t\t\tprefSubsId[bId] = aId + 1\n\t\t\tbId += 1\n\t\t\taId += 1\n\t\telse:\n\t\t\taId += 1\n\n\treturn prefSubsId\n\na = input()\nb = input()\n\n# print(a)\n# print(b)\n\nn = len(b)\n\nprefLens = prefixIds(a, b)\nsuffLens = prefixIds(a[::-1], b[::-1])[::-1]\n\n# for i in range(n):\n# \tif suffLens[i] != math.inf:\n# \t\tsuffLens[i] = len(a) - suffLens[i]\n\n# print(*prefLens, sep='\\t')\n# print(*suffLens, sep='\\t')\n\nprefLen = 0\nsuffLen = 0\n\nminCutLen = n\nlBorder = -1\nrBorder = n\n\nwhile suffLen < n and suffLens[suffLen] == math.inf:\n\tsuffLen += 1\n\ncurCutLen = suffLen\n# print(curCutLen)\nif curCutLen < minCutLen:\n\tminCutLen = curCutLen\n\trBorder = suffLen\n\nwhile prefLen < suffLen and prefLens[prefLen] != math.inf:\n\twhile suffLen < n and prefLens[prefLen] + suffLens[suffLen] > len(a):\n\t\t# print(suffLen)\n\t\tsuffLen += 1\n\t# print(prefLen)\n\t# print(suffLen)\n\tcurCutLen = suffLen - prefLen - 1\n\t# print(curCutLen)\n\tif curCutLen < minCutLen:\n\t\tminCutLen = curCutLen\n\t\tlBorder = prefLen\n\t\trBorder = suffLen\n\tprefLen += 1\n\t# print(prefLens[prefLen])\n\t# print(suffLens[suffLen])\n# \t# print()\n\n# print(\"pref, suff\")\n# print(prefLen)\n# print(suffLen)\n\n# print(minCutLen)\n# print(n)\n# print(lBorder)\n# print(rBorder)\n\nif minCutLen == n:\n\tprint('-')\nelif minCutLen == 0:\n\tprint(b)\nelse:\n\tprint(b[:lBorder + 1] + b[rBorder:])\n\n# print(maxPrefLen)\n# print(maxSuffLen)\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "k,a,b=map(int,input().split())\nprint(b//k-(a-1)//k)", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "def ain():\n    return map(int,input().split())\ndef lin():\n    return list(ain())\n\ndef plist(l):\n    for x in l:\n        print(x, end= ' ')\n    print()\n\na,b,c = ain()\nif a > b+c:\n    print('+')\nelif b > a+c:\n    print('-')\nelif c == 0 and a==b:\n    print('0')\nelse:\n    print('?')\n# python3 p.py\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "import sys\nfrom math import sqrt\n\ndef is_square(n):\n    root = int(sqrt(n))\n    return root * root == n\n\ndef find_triple(n):\n    if n % 2 == 0:\n        m = (n // 2) ** 2 - 1\n        if is_square(m):\n            return int(sqrt(m)), n // 2\n    else:\n        m = (n ** 2 - 1) // 2\n        if is_square(m):\n            return int(sqrt(m)), (n ** 2 - 1) // 2\n    return -1, -1\n\nn = int(input())\nm, k = find_triple(n)\nif m == -1 and k == -1:\n    print(-1)\nelse:\n    print(m, k)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "def who_wins(x_p, y_p, x_v, y_v):\n    if x_p == x_v:\n        return \"Vasiliy\" if y_p < y_v else \"Polycarp\"\n    else:\n        return \"Vasiliy\" if x_p < x_v else \"Polycarp\"\n\nx_p, y_p, x_v, y_v = map(int, input().split())\nprint(who_wins(x_p, y_p, x_v, y_v))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "'''\n    Author : thekushalghosh\n    Team   : CodeDiggers\n'''\nimport sys,math\ninput = sys.stdin.readline\nn = int(input())\nq = [1,2]\nfor i in range(34):\n    if q[-1] % 2 != 0:\n        q = q + [q[-1] + q[-2],q[-1] + q[-2] + 1]\n    else:\n        q = q + [(2 * q[-1]),(2 * q[-1]) + 1]\nif n in q:\n    print(1)\nelse:\n    print(0)", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "\ndef exgcd(a, b):\n    if b == 0: return (a, 1, 0)\n    g, y, x = exgcd(b, a%b)\n    return (g, x, y-x*(a//b))\n\ndef crt(a1, m1, a2, m2):\n    g = exgcd(m1, m2)[0]\n    \n    e1, e2 = a1%g, a2%g\n    if e1 != e2: return None\n\n    a1 //= g \n    m1 //= g \n    a2 //= g\n    m2 //= g\n\n    (_, m1i, m2i) = exgcd(m1, m2)\n\n    ans = a1*m2*m2i + a2*m1*m1i\n    \n    ans = ans%(m1*m2)\n    if ans < 0: ans += m1*m2\n\n    return ans*g + e1\n\n\ndef solve(N, M, x, y, vx, vy):\n  if vx == 0:\n    if x == 0 or x == N: return (x, 0)\n    else: return None\n  if vy == 0:\n    if y == 0 or y == M: return (0, y)\n    else: return None\n  \n  ans = crt(x, N, y, M)\n  #print(ans)\n  if ans is None: return ans\n\n  xhit, yhit = (ans+N-1) // N, (ans+M-1) // M\n  if x == 0: xhit -= 1\n  if y == 0: yhit -= 1\n  #print(xhit, yhit)\n\n  return (N if xhit%2 == 0 else 0, M if yhit%2 == 0 else 0)\n\ndef main():\n  N, M, x, y, vx, vy = map(int, input().split())\n\n  swapx, swapy = False, False\n\n  if vx > 0:\n    swapx = True\n    x = N-x\n  \n  if vy > 0:\n    swapy = True\n    y = M-y\n    \n  ans = solve(N, M, x, y, vx, vy)\n  if ans is None: print(-1)\n  else:\n    ax, ay = ans\n    if swapx: ax = N-ax\n    if swapy: ay = M-ay \n    print(ax, ay)\n\n\ndef __starting_point():\n  main()\n__starting_point()", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "def solve(n, a, b, c):\n    # Initialize the cost\n    cost = 0\n    # If n is already divisible by 4, no need to buy anything\n    if n % 4 == 0:\n        return 0\n    # Calculate the number of copybooks required to make n divisible by 4\n    required = 4 - (n % 4)\n    # Initialize the cost of buying required number of copybooks\n    cost_required = required * a\n    # Check if buying a pack of 2 copybooks is cheaper\n    cost_required = min(cost_required, required // 2 * b + required % 2 * a)\n    # Check if buying a pack of 3 copybooks is cheaper\n    cost_required = min(cost_required, required // 3 * c + (required % 3) // 2 * b + (required % 3) % 2 * a)\n    # Return the minimum cost\n    return cost_required\n\n# Input\nn, a, b, c = map(int, input().split())\n# Output\nprint(solve(n, a, b, c))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "n = int(input())\nlst = [int(x) for x in input().split(\" \")]\n\neven = list([x for x in lst if x % 2 == 0])\nodd = list([x for x in lst if x % 2 != 0])\n\neven_sum = 0\nfor i in even:\n    if i > 0:\n        even_sum += i # always take all even sums\n\nodd = reversed(sorted(odd))\n\npossible = []\nrolling = 0\nfor i in odd: # there must be at least one odd number\n    rolling += i\n    possible.append(even_sum + rolling)\n\npossible = reversed(sorted(possible))\nfor i in possible: # print highest sum\n    if i % 2 != 0:\n        print(i)\n        break\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "# Input the number of cubes\nn = int(input())\n\n# Initialize a list to store the digits of each cube\ncubes = []\n\n# Take the input for each cube\nfor i in range(n):\n    cubes.append(list(map(int, input().split())))\n\n# Initialize the largest number x\nx = 0\n\n# Function to check if the number can be made using the cubes\ndef can_make(number):\n    # Initialize a variable to store the current number\n    current_number = \"\"\n    # Iterate through each digit of the number\n    for digit in str(number):\n        # Initialize a variable to check if the digit can be made\n        can_make_digit = False\n        # Iterate through each cube\n        for cube in cubes:\n            # Check if the digit is on one of the cube faces\n            if int(digit) in cube:\n                # If the digit is found, add it to the current number\n                current_number += digit\n                can_make_digit = True\n                break\n        # If the digit cannot be made, return False\n        if not can_make_digit:\n            return False\n    # If all digits can be made, return True\n    return True\n\n# Iterate through all possible numbers from 1 to 1000000\nfor i in range(1, 1000000):\n    # Check if the number can be made using the cubes\n    if can_make(i):\n        # If the number can be made, update the largest number x\n        x = i\n    else:\n        # If the number cannot be made, break out of the loop\n        break\n\n# Print the largest number x\nprint(x)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "\nn, m = map(int, input().split())\n\nif n <= m:\n    print(n)\n    return\n\ntl = m\ntr = n\nwhile tr - tl > 1:\n    tm = (tl + tr) // 2\n    cnt = tm * (tm + 1) // 2 - m * (m + 1) // 2\n    cur = n + (tm - m - 1) * m - cnt\n    if cur <= 0:\n        tr = tm\n    else:\n        tl = tm\nprint(tr)", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "n, m = map(int, input().split())\nA = []\nfor i in range(n):\n    A.append(list(map(int, input().split())))\nB = [[0] * m for i in range(n)]\n\ndef check():\n    for i in range(n):\n        for j in range(m):\n            if A[i][j] != B[i][j]:\n                return False\n    return True\n\ndef solve(i, j):\n    if i >= n or j >= m:\n        return False\n    if check():\n        return True\n    B[i][j] = 1\n    B[i][j+1] = 1\n    B[i+1][j] = 1\n    B[i+1][j+1] = 1\n    if solve(i, j+2):\n        return True\n    B[i][j] = 0\n    B[i][j+1] = 0\n    B[i+1][j] = 0\n    B[i+1][j+1] = 0\n    if solve(i+2, j):\n        return True\n    return False\n\nif solve(0, 0):\n    print(1)\nelse:\n    print(-1)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "def calculate_ways(n, m):\n    # Calculate the number of ways to pack the presents\n    ways = 1\n    for i in range(m):\n        ways = (ways * (n + i)) % (10**9 + 7)\n    return ways\n\n# Take the input\nn, m = map(int, input().split())\n\n# Calculate and print the result\nresult = calculate_ways(n, m)\nprint(result)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "import sys\ninput = sys.stdin.readline\n\nn,m=list(map(int,input().split()))\nmod=10**9+7\n\nprint(pow(pow(2,m,mod)-1,n,mod))\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "n, pos, l, r = list(map(int, input().split()))\n\nl_close = l == 1\nr_close = r == n\nans = 0\nif l_close and r_close:\n\tpass\nelif l_close:\n\tans += abs(pos - r) + 1\nelif r_close:\n\tans += abs(pos - l) + 1\nelse:\n\tans += min(abs(pos - r), abs(pos - l)) + 1 + abs(l - r) + 1\n\nprint(ans)\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "def solve(n, m, k):\n    # The initial position of Lara is (1, 1)\n    row = 1\n    col = 1\n\n    # Move Lara down n - 1 times\n    for i in range(n - 1):\n        row += 1\n        k -= 1\n\n    # Move Lara in the snake pattern\n    while k > 0:\n        # Move right m - 2 times\n        for i in range(m - 2):\n            col += 1\n            k -= 1\n            if k == 0:\n                return row, col\n\n        # Move up n - 2 times\n        for i in range(n - 2):\n            row -= 1\n            k -= 1\n            if k == 0:\n                return row, col\n\n        # Move left m - 2 times\n        for i in range(m - 2):\n            col -= 1\n            k -= 1\n            if k == 0:\n                return row, col\n\n        # Move down n - 2 times\n        for i in range(n - 2):\n            row += 1\n            k -= 1\n            if k == 0:\n                return row, col\n\n\n# Read input from stdin\nn, m, k = map(int, input().split())\n\n# Calculate the position of Lara\nrow, col = solve(n, m, k)\n\n# Print the result\nprint(row, col)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "x,y,z=[int(k) for k in input().split(\" \")]\na,b,c=[int(k) for k in input().split(\" \")]\n\n\nif a>=x and a+b>=x+y and a+b+c>=x+y+z:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "\ndef solve(n, k, M, t):\n    '''\n    >>> solve(3, 4, 11, [1, 2, 3, 4])\n    6\n    >>> solve(5, 5, 10, [1, 2, 4, 8, 16])\n    7\n    >>> solve(3, 2, 4, [1, 1])\n    6\n    >>> solve(5, 2, 10, [2, 3])\n    6\n    '''\n    t.sort()\n    k = len(t)\n\n    T = sum(t)\n\n    max_score = 0\n\n    for fully_solved in range(min(n, M // T) + 1):\n        # Try to fully solve fully_solved problems, remainder is for remaining subproblems\n        score_1 = fully_solved * (k + 1) # For fully solved\n\n        score_2 = 0 # For partially solved\n        remaining_time = M - T * fully_solved\n        remaining_problems = n - fully_solved\n\n        if remaining_problems > 0:\n            level = 0\n            while level < k:\n                # remaining_time > 0 and level < k:\n                level_coeff = 1 if level + 1 < k else 2 # last_level\n                time_to_solve_level = t[level] * remaining_problems\n                if time_to_solve_level <= remaining_time:\n                    score_2 += remaining_problems * level_coeff\n                    remaining_time -= time_to_solve_level\n                else:\n                    score_2 += (remaining_time // t[level]) * level_coeff\n                    break\n                level += 1\n        score = score_1 + score_2\n        max_score = max(score, max_score)\n\n    return max_score\n\n\n\ndef main():\n    n, k, M = list(map(int, input().split()))\n    t = list(map(int, input().split()))\n    print(solve(n, k, M, t))\n\n\ndef __starting_point():\n    main()\n\n\n__starting_point()", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "# input integers a, b, c\na, b, c = map(int, input().split())\n\n# check if b is a multiple of c + a\nif ((b - a) % c == 0):\n    # b is a multiple of c + a, print \"YES\"\n    print(\"YES\")\nelse:\n    # b is not a multiple of c + a, print \"NO\"\n    print(\"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "# Input\nn, b_x = map(int, input().split())\nx = list(map(int, input().split()))\nm, b_y = map(int, input().split())\ny = list(map(int, input().split()))\n\n# Convert x to decimal\ndec_x = 0\nfor i in range(n):\n    dec_x += x[i] * (b_x ** (n - i - 1))\n\n# Convert y to decimal\ndec_y = 0\nfor i in range(m):\n    dec_y += y[i] * (b_y ** (m - i - 1))\n\n# Compare x and y\nif dec_x < dec_y:\n    print('<')\nelif dec_x > dec_y:\n    print('>')\nelse:\n    print('=')", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "import sys\n\nn = int(input())\n\ncur = 0\n\nfor _ in range(n):\n    a, b = input().split()\n    a = int(a)\n    if b == \"North\":\n        cur -= a\n    elif b == \"South\":\n        cur += a\n    elif cur == 0 and b != \"South\":\n        print(\"NO\")\n        return\n    elif cur == 20000 and b != \"North\":\n        print(\"NO\")\n        return\n    if not 0 <= cur <= 20000:\n        print(\"NO\")\n        return\n\nif cur != 0:\n    print(\"NO\")\nelse:\n    print(\"YES\")\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "s = input().split()\nk = int(s[1])\nn = s[0]\nptr = len(s[0]) - 1\nzerocount = 0\nans = 0\nwhile ptr >= 0 and zerocount < k:\n    if n[ptr] == '0':\n        zerocount += 1\n    else:\n        ans += 1\n    ptr -= 1\nif ptr == -1:\n    print(len(n) - 1)\nelse:\n    \n    print(ans)\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "def find_missed_meals(b, d, s):\n    # Calculate the total number of meals in the dining room\n    total_meals = b + d + s\n    # Calculate the minimum number of meals in the dining room\n    min_meals = min(b, d, s)\n    # Calculate the maximum number of meals in the dining room\n    max_meals = max(b, d, s)\n    # Calculate the number of days Vasiliy was in the sanatorium\n    days = total_meals - min_meals\n    # Calculate the minimum number of meals Vasiliy could have missed\n    missed_meals = max(0, total_meals - days - max_meals)\n    return missed_meals\n\n# Read input from stdin\nb, d, s = map(int, input().split())\n# Calculate and print the result\nresult = find_missed_meals(b, d, s)\nprint(result)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "import collections\nimport math\n\ndef is_prime(x): \n    for i in range(2, math.ceil(math.sqrt(x))):\n        if x % i == 0:\n            return False\n    return True\n\nn = int(input())\na = int(input())\nb = int(input())\nc = int(input())\nans = 0\nif b - c < a:\n    if b < n:\n        ans += (n - b) // (b - c)\n        n = b + (n - b) % (b - c)\n    while n >= b:\n        ans += n // b\n        n = n % b + n // b * c\nans += n // a\nprint(ans)", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "#This code is dedicated to Vlada S.\n\nclass Course:\n\tdef __init__(self, reqs, number):\n\t\tself.reqs = list(map(int, reqs.split()[1:]))\n\t\tself.available = False\n\t\tself.in_stack = False\n\t\tself.number = number\n\nn, k = list(map(int, input().split()))\nrequirements = list(map(int, input().split()))\ncourses = {}\n\nanswer = \"\"\n\nfor i in range(n):\n\tcourses[i + 1]= Course(input(), i + 1)\n\nfor i in range(len(requirements)):\n\trequirements[i] = courses[requirements[i]]\n\nwhile requirements:\n\tdata = {}\n\n\tcourse = requirements.pop()\n\n\tif not course.available:\n\t\trequirements.append(course)\n\n\t\tdone = True\n\n\t\tfor c in course.reqs:\n\t\t\tc = courses[c]\n\n\t\t\tif not c.available:\n\t\t\t\trequirements.append(c)\n\t\t\t\tdone = False\n\n\t\tif done:\n\t\t\tanswer += \" \" + str(course.number)\n\t\t\tcourse.available = True\n\t\telse:\n\t\t\tif course.in_stack:\n\t\t\t\tprint(-1)\n\t\t\t\tbreak\n\n\t\t\tcourse.in_stack = True\nelse:\n\tprint(answer.count(\" \"))\n\tprint(answer[1:])", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "n, k = map(int, input().split())\na = list(map(int, input().split()))\n\nseats = [0] * (n * 8)\n\ndef check(a, seats):\n    for i in range(len(a)):\n        for j in range(8):\n            if seats[i * 8 + j] == 0:\n                seats[i * 8 + j] = a[i]\n                a[i] = 0\n                break\n    return seats\n\n\nfor i in range(len(a)):\n    seats = check(a, seats)\n    if a.count(0) == len(a):\n        print('YES')\n        break\nelse:\n    print('NO')", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "def solve(n, k):\n    # Find the minimum decimal number so that by converting it to the system with the base n he will get the number k\n    # Convert k to base-10\n    k = int(k, n)\n    # Initialize result\n    result = 0\n    # Iterate from 0 to k\n    for x in range(k + 1):\n        # Convert x to base-n\n        x_base_n = str(base_repr(x, n))\n        # Check if x_base_n is equal to k\n        if x_base_n == k:\n            # If so, return x\n            return x\n    # If no match is found, return -1\n    return -1\n\n# Input the base and number\nn = int(input())\nk = input()\n\n# Call the solve function\nresult = solve(n, k)\n\n# Print the result\nif result == -1:\n    print(\"No such number exists\")\nelse:\n    print(result)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "n = int(input())\narr = [int(x) for x in input().split()]\nma = 0\ncnt = 0\nif len(arr) == 1000:\n    print(1000)\nelse:\n    for i in range(len(arr) - 1):\n        if arr[i + 1] == arr[i] + 1:\n            cnt += 1\n            if arr[i] == 1 or arr[i + 1] == 1000:\n                cnt += 1\n        else:\n            ma = max(ma, cnt)\n            cnt = 0\nma = max(ma, cnt)\nprint(max(0, ma - 1))", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "n = int(input())\na = int(input())\nb = int(input())\n\n# The total length of all sides of the frames for two doors\ntotal_length = 2 * (2 * a + b)\n\n# Calculate the number of bars needed\nbars_needed = total_length // n\nif total_length % n != 0:\n    bars_needed += 1\n\nprint(bars_needed)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "n = int(input())\nx = input()\ncur = 0\nfor c in x:\n    if c == '-':\n        while cur <= 0:\n            cur += 1\n        cur -= 1\n    else:\n        cur += 1\nprint(cur)", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "# Function to check whether the grasshopper can reach the target\ndef canReachTarget(n, k, obstacles):\n    # Get the indices of the grasshopper and the target\n    grasshopper_index = obstacles.index('G')\n    target_index = obstacles.index('T')\n\n    # If the grasshopper and the target are on the same side of an obstacle,\n    # return False\n    for i in range(n):\n        if obstacles[i] == '#' and grasshopper_index < i and i < target_index:\n            return False\n\n    # Calculate the distance between the grasshopper and the target\n    distance = abs(grasshopper_index - target_index)\n\n    # Check if the distance is divisible by k\n    if distance % k == 0:\n        return True\n    else:\n        return False\n\n# Read input\nn, k = map(int, input().split())\nobstacles = input()\n\n# Check if the grasshopper can reach the target\nif canReachTarget(n, k, obstacles):\n    print(\"YES\")\nelse:\n    print(\"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "def check_flag(n, m, field):\n    if n % 3 != 0 or m != n // 3:\n        return \"NO\"\n    colors = set()\n    for i in range(n // 3):\n        color = field[i][0]\n        if color in colors:\n            return \"NO\"\n        colors.add(color)\n        for j in range(n):\n            if field[j][i] != color:\n                return \"NO\"\n    return \"YES\"\n\nn, m = map(int, input().split())\nfield = []\nfor _ in range(n):\n    field.append(list(input()))\n\nprint(check_flag(n, m, field))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "a, b, c, n = map(int, input().split())\nans = n - a - b + c\nif (ans < 1) or (min(a, b) < c):\n    print(-1)\nelse:\n    print(ans)", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "from collections import Counter\n\ndef count_prefixes(s, x):\n    n = len(s)\n    cnt = Counter(s)\n    zeros = cnt['0']\n    ones = cnt['1']\n\n    if x == 0:\n        return 1\n    elif x == ones - zeros:\n        return 1\n    elif x == ones - zeros - 1:\n        return 2\n    elif x == ones - zeros + 1:\n        return 2\n    else:\n        return 0\n\n\ndef main():\n    t = int(input())\n\n    for _ in range(t):\n        n, x = map(int, input().split())\n        s = input()\n\n        prefixes = count_prefixes(s, x)\n\n        if prefixes == 0:\n            print(0)\n        else:\n            print(-1)\n\n\nif __name__ == \"__main__\":\n    main()", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "def solve(s):\n    n = len(s)\n    i = 0\n    j = 0\n    res = []\n    while i < n and j < 26:\n        if ord(s[i]) == ord('a') + j:\n            res.append(s[i])\n            i += 1\n            j += 1\n        else:\n            i += 1\n    if j == 26:\n        return ''.join(res)\n    else:\n        return -1", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "def min_steps(x1, y1, x2, y2):\n    # Calculate the absolute difference between the start and finish x coordinates\n    dx = abs(x2 - x1)\n    # Calculate the absolute difference between the start and finish y coordinates\n    dy = abs(y2 - y1)\n\n    # If dx == dy, then the optimal path is a zig-zag diagonal.\n    # In this case, the number of steps is the same as the difference in either coordinate.\n    if dx == dy:\n        return dx\n\n    # If dx != dy, then the optimal path is a combination of horizontal, vertical, and diagonal steps.\n    # Calculate the number of diagonal steps that can be taken.\n    # This is the minimum of the differences in x and y coordinates.\n    diag = min(dx, dy)\n\n    # Calculate the remaining horizontal or vertical steps.\n    # This is the absolute difference between the differences in x and y coordinates.\n    remaining = abs(dx - dy)\n\n    # The total number of steps is the sum of the diagonal steps and the remaining steps.\n    return diag + remaining\n\n\nif __name__ == '__main__':\n    x1, y1 = [int(x) for x in input().split()]\n    x2, y2 = [int(x) for x in input().split()]\n    print(min_steps(x1, y1, x2, y2))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "import math, sys\n\ndef mp():\n    return list(map(int, input().split()))\n\ndef main():\n    n, m, k, l = mp()\n    ost = n - k\n    need = (l + k)\n    if ost < l or need > n:\n        print(-1)\n        return\n    ans = (l + k - 1) // m + 1\n    if ans * m - k >= l and ans * m <= n:\n        print(ans)\n    else:\n        print(-1)\n    \n    \n    \n\ndeb = 0\nif deb:\n    file = open(\"input.txt\", \"r\")\n    input = file.readline\nelse:\n    input = sys.stdin.readline\n\nmain()\n\nif deb:\n    file.close()\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "from math import sqrt\n\n# Function to calculate the determinant of a 2x2 matrix\ndef det(a, b, c, d):\n    return a*d - b*c\n\n# Function to calculate the norm of a matrix\ndef norm(a, b, c, d):\n    return max(abs(a), abs(b), abs(c), abs(d))\n\n# Function to calculate the minimum value of ||A - B||\ndef min_norm(a, b, c, d):\n    # Calculate the determinant of A\n    det_a = det(a, b, c, d)\n    if det_a == 0:\n        # If det(A) == 0, then A is already degenerate\n        return 0.0\n    else:\n        # Find the maximum value of the elements of A\n        max_a = max(abs(a), abs(b), abs(c), abs(d))\n        # Calculate the minimum value of ||A - B||\n        return min(max_a/abs(det_a), sqrt(2.0))\n\n# Read the input\na, b = map(int, input().split())\nc, d = map(int, input().split())\n\n# Calculate the minimum value of ||A - B||\nmin_norm_a = min_norm(a, b, c, d)\n\n# Print the output\nprint(\"{:.10f}\".format(min_norm_a))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "# Read input for a\na = input()\n\n# Read input for b\nb = input()\n\n# Remove leading zeroes from a\na = a.lstrip(\"0\")\n\n# Remove leading zeroes from b\nb = b.lstrip(\"0\")\n\n# Check if a and b are equal\nif a == b:\n    print(\"=\")\n\n# Check if a is greater than b\nelif len(a) > len(b) or (len(a) == len(b) and a > b):\n    print(\">\")\n\n# Check if a is less than b\nelse:\n    print(\"<\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "def solve(n, a):\n    a.sort()\n    mex = 1\n    for i in range(n):\n        if a[i] > mex:\n            break\n        else:\n            mex = max(mex, a[i] + 1)\n    return mex\n\n\nn = int(input())\na = list(map(int, input().split()))\nans = solve(n, a)\nprint(ans)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "def nearest_zero(arr):\n    n = len(arr)\n    result = [0] * n\n    zero_pos = -1\n    for i in range(n):\n        if arr[i] == 0:\n            zero_pos = i\n        if zero_pos != -1:\n            result[i] = i - zero_pos\n\n    zero_pos = -1\n    for i in range(n - 1, -1, -1):\n        if arr[i] == 0:\n            zero_pos = i\n        if zero_pos != -1:\n            result[i] = min(result[i], zero_pos - i)\n    return result\n\nn = int(input())\narr = list(map(int, input().split()))\nprint(' '.join(map(str, nearest_zero(arr))))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "n = int(input())\nmass = list(map(int, input().split()))\n\ndef gcd(a, b):\n    if b:\n        return(gcd(b, a % b))\n    else:\n        return a\n\n#def add(a, b):\n    #k = 1\n    #while gcd(k, a) != 1\n#print(tmp_mass)\ni = 0\nc = len(mass)\ncount = 0\nwhile i < c - 1:\n    #print(i, c)\n    k = gcd(mass[i], mass[i + 1])\n    if k == 1:\n        i+= 1\n        continue\n    else:\n        count += 1\n        mass.insert(i+1, 1)\n        c += 1\n        i += 2\nprint(count)\nprint(' '.join(map(str, mass)))\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "n = int(input())\n\na = list(map(int, input().split()))\n\ns = input()\n\nfor i in range(n-1):\n\n    if s[i] == '1':\n\n        while a[i] != i+1:\n\n            a[i], a[i+1] = a[i+1], a[i]\n\nif a == [i for i in range(1, n+1)]:\n\n    print(\"YES\")\n\nelse:\n\n    print(\"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "a = input()\nb = input()\nif len(a)>len(b):\n    gap = len(a)-len(b)\n    new = ''\n    for _ in range(gap):\n        new+='0'\n    b = new + b\nelif len(b)>len(a):\n    gap = len(b) - len(a)\n    new = ''\n    for _ in range(gap):\n        new+='0'\n    a = new + a\nfor i in range(0,len(a)):\n    if(a[i]>b[i]):\n        print('>')\n        return\n    elif(b[i]>a[i]):\n        print('<')\n        return\nprint('=') ", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "a, b = map(int, input().split())\nrows = [list(input()) for x in range(a)]\ncolumns = [[x[y] for x in rows] for y in range(b)]\ndef check(l):\n    line = []\n    for x in l:\n        p = x[0]\n        for y in x:\n            if y != p:\n                break\n        else:\n            line.append(p)\n            continue\n        return [False, line]\n    else:\n        return [True, line]\ndef colors(c, l):\n    p = c[1][0]\n    n = 0\n    colors = []\n    for x in c[1]:\n        if x != p:\n            colors.append([p, n])\n            p = x\n            n = 1\n        else:\n            n += 1\n    colors.append([p, n])\n    if len(colors) == 3 and l % 3 == 0:\n        m = l // 3\n        letters = [\"R\", \"G\", \"B\"]\n        for x in colors:\n            p, q = x[0], x[1]\n            if x[0] in letters and q == m:\n                letters.remove(x[0])\n            else:\n                return False\n                break\n        else:\n            return True\n    else:\n        return False\ncondition = False\nif a % 3 == 0 or b % 3 == 0:\n    c, d = check(rows), check(columns)\n    if c[0]:\n        condition = colors(c, a)\n    if not condition and d[0]:\n        condition = colors(d, b)\nif condition:\n    print(\"YES\")\nelse:\n    print(\"NO\")", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "import sys\n\ndef solve(x, y, l, r):\n    if x == y:\n        return 0\n\n    ans = 0\n    for a in range(64):\n        for b in range(64):\n            n = pow(x, a) + pow(y, b)\n            if n > r:\n                break\n            if n >= l:\n                ans = max(ans, b + a)\n    return ans\n\nx, y, l, r = map(int, sys.stdin.readline().split())\nprint(solve(x, y, l, r))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "n, m, l = list(map(int,input().split(' '))) + [[]]\nfor i in range(n):l.append(list(map(int,input().split(' '))))\ndp = [0] + [m for i in range(m)]\nfor i in range(1,m+1):\n    dp[i] = min(dp[i-1] + 1,dp[i])\n    for j in l:\n        x = max(0,j[0] - j[1] - i)\n        y = min(m,j[0] + j[1] + x)\n        dp[y] = min(dp[y],dp[i - 1] + x)\nprint(dp[-1])", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "# Input\nseat = input()\n\n# Extract row and seat\nrow = int(seat[:-1])\nseat = seat[-1]\n\n# Initialize variables\nserved = 0\nstep = 2\n\n# Calculate time taken\nwhile True:\n    # Check if Vasya's row is reached\n    if row <= step:\n        break\n    # Increase served seats and step\n    served += 6 * step\n    step += 3\n\n# Calculate remaining time\nremaining = 6 * (row - step) + 1 + \"abcdef\".index(seat)\n\n# Print result\nprint(served + remaining)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "n = int(input())\n\nnumbers = list(map(int, input().split()))\n\nif 0 in numbers:\n    print(0)\nelse:\n    if len(numbers) == 1:\n        print(numbers[0])\n    else:\n        negative_numbers = [x for x in numbers if x < 0]\n        if len(negative_numbers) % 2 == 0:\n            print(*numbers)\n        else:\n            max_negative = max(negative_numbers)\n            numbers[numbers.index(max_negative)] *= -1\n            numbers[numbers.index(max_negative)] -= 1\n            print(*numbers)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "n,k=list(map(int,input().split()))\nl = list(map(int,input().split()))\ns = sum(l)\nreq = k-0.5\nif(s>=n*req):\n\tprint(0)\n\treturn\nfor i in range(1,100000):\n\tif((s+(k*i))>=(n+i)*req):\n\t\tprint(i)\n\t\treturn\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "L = [(i+1)*9*10**i for i in range(12)]\nnumber = int(input())\n\nexponent=0\nwhile number >= 0:\n    number-=L[exponent]\n    exponent+=1\nexponent-=1\nnumber%=L[exponent]\nstart = 10**exponent\nnumDigits = exponent+1\nfinal = start+(number//numDigits-1)\nremainder = number%numDigits\nif remainder == 0:\n    final = str(final)\n    print(final[-1])\nelse:\n    final = str(final+1)\n    print(final[remainder-1])\n'''print(number, exponent, numDigits, start, final, remainder)'''\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "# Define the puzzle class\nclass Puzzle:\n    def __init__(self, initial_state):\n        self.initial_state = initial_state\n        self.goal_state = [['A', 'B'], ['C', 'X']]\n\n    def solve(self):\n        # Initialize the frontier with the initial state\n        frontier = [self.initial_state]\n        # Initialize the explored set with the initial state\n        explored = set([tuple(map(tuple, self.initial_state))])\n        # Initialize the number of moves to 0\n        moves = 0\n\n        while frontier:\n            # Pop the current state from the frontier\n            current_state = frontier.pop(0)\n            # Check if the current state is the goal state\n            if current_state == self.goal_state:\n                return moves\n            # Generate the next states from the current state\n            for next_state in self.generate_next_states(current_state):\n                # Check if the next state has already been explored\n                if tuple(map(tuple, next_state)) not in explored:\n                    # Add the next state to the frontier\n                    frontier.append(next_state)\n                    # Add the next state to the explored set\n                    explored.add(tuple(map(tuple, next_state)))\n            # Increment the number of moves\n            moves += 1\n\n        return -1\n\n    def generate_next_states(self, current_state):\n        next_states = []\n        # Find the position of the empty tile\n        empty_tile_pos = [(i, j) for i in range(2) for j in range(2) if current_state[i][j] == 'X'][0]\n        # Generate the possible moves\n        possible_moves = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n\n        for move in possible_moves:\n            next_pos = (empty_tile_pos[0] + move[0], empty_tile_pos[1] + move[", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "for _ in range(int(input())):\n\tn, x = map(int, input().split())\n\n\ts = input()\n\n\tpref = [0]\n\n\tfor i in range(n):\n\t\tpref.append(pref[-1] + 2 * (s[i] == '0') - 1)\n\n\tjump = pref.pop()\n\n#\tprint(pref, jump)\n\n\tif jump == 0:\n\t\tprint(-1 * (min(pref) <= x <= max(pref)))\n\telse:\n\n\t\ttot = 0\n\n\t\tfor delta in pref:\n\t\t\tif (x - delta) % jump == 0 and (x - delta) // jump >= 0:\n\t\t\t\ttot += 1\n\n\t\tprint(tot)", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "# input the user name\nname = input()\n\n# count the number of distinct characters\ndistinct_chars = len(set(name))\n\n# if the number of distinct characters is odd, then he is a male\nif distinct_chars % 2 == 1:\n    print(\"IGNORE HIM!\")\n# otherwise, she is a female\nelse:\n    print(\"CHAT WITH HER!\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "import math\n\ndef dot_product(v1, v2):\n    return v1[0] * v2[0] + v1[1] * v2[1]\n\ndef magnitude(v):\n    return math.sqrt(v[0]**2 + v[1]**2)\n\ndef compute_angle(v1, v2):\n    dp = dot_product(v1, v2)\n    mg1 = magnitude(v1)\n    mg2 = magnitude(v2)\n    return math.acos(dp / (mg1 * mg2))\n\nn = int(input())\nvectors = []\nfor i in range(n):\n    x, y = map(int, input().split())\n    vectors.append((x, y))\n\nmin_angle = math.pi\npair = None\nfor i in range(n):\n    for j in range(i+1, n):\n        angle = compute_angle(vectors[i], vectors[j])\n        if angle < min_angle:\n            min_angle = angle\n            pair = (i+1, j+1)\n\nprint(*pair)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "# The function to check if a given string is a regular bracket sequence\ndef is_regular(s):\n    n = len(s)\n    if n % 2 != 0:\n        return False\n    cnt = 0\n    for i in range(n):\n        if s[i] == '(':\n            cnt += 1\n        else:\n            cnt -= 1\n        if cnt < 0:\n            return False\n    return cnt == 0\n\n# The function to check if it is possible to form a regular bracket sequence\ndef solve(cnt1, cnt2, cnt3, cnt4):\n    if cnt1 == 0 and cnt2 == 0 and cnt3 == 0 and cnt4 == 0:\n        return 1\n    if cnt1 == 0 and cnt2 == 0 and cnt3 == 0 and cnt4 != 0:\n        return 0\n    if cnt1 == 0 and cnt2 == 0 and cnt3 != 0 and cnt4 == 0:\n        return 0\n    if cnt1 == 0 and cnt2 == 0 and cnt3 != 0 and cnt4 != 0:\n        return 0\n    if cnt1 == 0 and cnt2 != 0 and cnt3 == 0 and cnt4 == 0:\n        return 1\n    if cnt1 == 0 and cnt2 != 0 and cnt3 == 0 and cnt4 != 0:\n        return 1\n    if cnt1 == 0 and cnt2 != 0 and cnt3 != 0 and cnt4 == 0:\n        return 1\n    if cnt1 == 0 and cnt2 != 0 and cnt3 != 0 and cnt4 != 0:\n        return 1\n    if cnt1 != 0 and cnt2 == 0 and cnt3 == 0 and cnt4 == 0:\n        return 0\n    if cnt1 != 0 and cnt2 == 0 and cnt3 ==", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "N, M, R= list(map(int, input().split()))\n\nb = sorted(list(map(int,input().split())))\nc = sorted(list(map(int,input().split())))\n\nif b[0] < c[-1]:\n    cnt = R // b[0]\n    R %= b[0]\n    R += cnt * c[-1]\nprint(R)\n\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "from math import gcd\n\ndef lcm(x, y):\n    return (x * y) // gcd(x, y)\n\ndef solution(a, b):\n    lcm_ab = lcm(a, b)\n    lcm_ap_b = lcm(a + 1, b + 1)\n\n    while lcm_ap_b < lcm_ab:\n        a += 1\n        b += 1\n        lcm_ab = lcm_ap_b\n        lcm_ap_b = lcm(a + 1, b + 1)\n\n    return a - b\n\na, b = map(int, input().split())\nk = solution(a, b)\nprint(k)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "def min_divisor(n):\n    if n % 2 == 0:\n        return n // 2\n    else:\n        return n // 2 + 1\n\ndef min_taxes(n):\n    if n == 1:\n        return 1\n    return min(min_divisor(n), min(min_taxes(n-1) + 1, min_taxes(n-2) + 2))\n\nn = int(input())\nprint(min_taxes(n))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "# n - number of groups coming to the restaurant\n# a - number of one-seater tables\n# b - number of two-seater tables\n# t_1, t_2, ..., t_n - sequence of integers describing clients in chronological order\n\ndef solve(n, a, b, t):\n    # Initialize the number of people denied service to 0\n    denied_service = 0\n\n    # Iterate through each client in the sequence\n    for client in t:\n        # Check if the client consists of one person\n        if client == 1:\n            # Check if there are any one-seater tables available\n            if a > 0:\n                a -= 1\n            # Check if there are any two-seater tables with a single person\n            elif b > 0:\n                b -= 1\n            # Deny service if no tables are available\n            else:\n                denied_service += 1\n        # If the client consists of two people\n        else:\n            # Check if there are any two-seater tables available\n            if b > 0:\n                b -= 1\n            # Deny service if no tables are available\n            else:\n                denied_service += 2\n\n    return denied_service\n\n# Read the input from stdin\nn, a, b = map(int, input().split())\nt = list(map(int, input().split()))\n\n# Call the solve function with the input values and print the result\nprint(solve(n, a, b, t))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "digs = list(map(int, input()))\n\nl, r = min(digs[:3], digs[3:], key=sum), max(digs[:3], digs[3:], key=sum)\n\nans = 0\nwhile sum(r) - sum(l) > 0:\n    if 9 - min(l) >= max(r):\n        diff = 9 - min(l)\n        l[l.index(min(l))] = 9\n    else:\n        diff = max(r)\n        r[r.index(max(r))] = 0\n    ans += 1\n\nprint(ans)\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "import sys\ninput=lambda: sys.stdin.readline().rstrip()\nt=int(input())\nfor _ in range(t):\n  n,k=list(map(int,input().split()))\n  A=[int(i) for i in input().split()]\n  B=[0]*100\n  for a in A:\n    ct=0\n    while a:\n      B[ct]+=a%k\n      a//=k\n      ct+=1\n  print(\"YES\" if max(B)<=1 else \"NO\")\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "def max_kefir(n, a, b, c):\n    glass_bottles = n // b\n    plastic_bottles = n // a\n    if glass_bottles == 0:\n        return plastic_bottles\n    else:\n        return_money = glass_bottles * c\n        plastic_bottles += (return_money // a)\n        return plastic_bottles\n\n\nn, a, b, c = map(int, input().split())\nprint(max_kefir(n, a, b, c))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "# This function returns the number of cells to be painted black to form a square\ndef minimum_painted_cells(n, m, grid):\n    # Initialize the number of cells to be painted with -1\n    painted_cells = -1\n    \n    # Iterate over all possible square sizes\n    for size in range(1, min(n, m) + 1):\n        # Initialize a counter for black cells in the current size square\n        black_cells = 0\n        # Iterate over all rows and columns\n        for i in range(n):\n            for j in range(m):\n                # Check if the current cell is within the square\n                if i < size and j < size:\n                    # Increase the black cells counter if the cell is black\n                    if grid[i][j] == 'B':\n                        black_cells += 1\n                else:\n                    # Increase the black cells counter if the cell is white\n                    if grid[i][j] == 'W':\n                        black_cells += 1\n        # Update the minimum number of painted cells if necessary\n        if painted_cells == -1 or black_cells < painted_cells:\n            painted_cells = black_cells\n    \n    # Return the minimum number of painted cells\n    return painted_cells\n\n# Read the input\nn, m = map(int, input().split())\ngrid = []\nfor _ in range(n):\n    grid.append(input())\n\n# Calculate the minimum number of cells to be painted\npainted_cells = minimum_painted_cells(n, m, grid)\n\n# Print the output\nprint(painted_cells)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "n, k, t = map(int, input().split())\nif t <= k:\n    print(t)\nelif t <= n:\n    print(k)\nelse:\n    print(k - (t - n))", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "n  = int(input())\n\nl = list(map(int, input().split()))\nans = [400001 for i in range(n)]\nzs=[]\nfor x in range(n):\n    if l[x]==0:\n        zs.append(x)\n        ans[x]=0\n\nfor i in zs:\n    lp=i-1\n    rp=i+1\n    cntL=1\n    cntR=1\n    while lp!=-1:\n        \n        if ans[lp]<=cntL:\n            break\n        ans[lp]=cntL\n        cntL+=1\n        lp-=1\n    while rp!=n:\n        if ans[rp]<=cntR:\n            break\n        ans[rp]=cntR\n        cntR+=1\n        rp+=1\n         \nprint(' '.join([str(x) for x in ans]))\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "from fractions import gcd\nt, w, b = list(map(int, input().split()))\nif w > b:\n    w, b = b, w\nl = w * b // gcd(w, b)\nc = t // l\nans = c * w + (min((t + 1) - l * c, w)) - 1\ng = gcd(ans, t)\nprint('{}/{}'.format(ans // g, t // g))\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "def max_painted_sections(n, q, painters):\n    painters.sort(key=lambda x: (x[1], x[0]))\n    painters = [painters[i] for i in range(q - 2)]\n    painters.sort(key=lambda x: x[0])\n\n    sections = 0\n    last = 1\n    for painter in painters:\n        if painter[0] > last:\n            break\n        last = max(last, painter[1])\n        sections += 1\n\n    return sections\n\n\nn, q = list(map(int, input().split()))\npainters = []\nfor _ in range(q):\n    painters.append(list(map(int, input().split())))\n\nprint(max_painted_sections(n, q, painters))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "x, y = 1, 1\nn = int(input())\na = list(map(int, input().split()))\n\nfor i in range(1, n):\n    if a[i] == a[i-1]:\n        print('NO')\n        break\n    if a[i] < a[i-1]:\n        y = (a[i-1] - 1) // y + 1\n    else:\n        x = (a[i] - 1) // x + 1\nelse:\n    print('YES')\n    print(x, y)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "#input\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\n#sorting the list in ascending order\na.sort()\n\n#initializing a variable to keep track of the number of hours\nhours = 0\n\n#initializing a variable to keep track of the length of the garden that has been watered\nwatered = 0\n\n#looping through the list of buckets\nfor i in range(n):\n    #checking if the garden has been fully watered\n    if watered >= k:\n        break\n    #checking if the current bucket can water the remaining part of the garden\n    if a[i] + watered <= k:\n        #increasing the number of hours\n        hours += 1\n        #increasing the length of the garden that has been watered\n        watered += a[i]\n\n#printing the minimum number of hours required to water the garden\nprint(hours)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "n, lt = (int(x) for x in input().split())\ncosts = [int(x) for x in input().split()]\n\nc1 = costs[0]\ncosts = costs[1:]\n\nmaincost = lt * c1\nmainlen = lt\nremcost = 0\n\ncurrv = 1\nfor c in costs:\n    currv *= 2\n    nmainl = lt - (lt % currv)\n    prevc = (maincost / mainlen) if maincost != 0 else 0\n    if prevc > (c/currv):\n\n\n        nremlen = mainlen - nmainl\n        remcost += (maincost * nremlen // mainlen)\n\n        mainlen = nmainl\n        maincost = mainlen * c // currv\n\n    if remcost > c:\n        remcost = c\nprint(maincost + remcost)", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "def can_get_spheres(a, b, c, x, y, z):\n    if a >= x and b >= y and c >= z:\n        return True\n\n    if a >= 2:\n        a -= 2\n        c += 1\n        if can_get_spheres(a, b, c, x, y, z):\n            return True\n        a += 2\n        c -= 1\n\n    if b >= 2:\n        b -= 2\n        c += 1\n        if can_get_spheres(a, b, c, x, y, z):\n            return True\n        b += 2\n        c -= 1\n\n    if c >= 2:\n        c -= 2\n        a += 1\n        if can_get_spheres(a, b, c, x, y, z):\n            return True\n        a -= 1\n        c += 2\n\n    return False\n\n\na, b, c = map(int, input().split())\nx, y, z = map(int, input().split())\n\nif can_get_spheres(a, b, c, x, y, z):\n    print(\"Yes\")\nelse:\n    print(\"No\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "x, y, z = map(int, input().split())\nif z == 0:\n    if x > y:\n        print('+')\n    elif y > x:\n        print('-')\n    else:\n        print('0')\nelse:\n    if (x + z) > y:\n        if x > y:\n            print('+')\n        else:\n            print('?')\n    elif (x + z) < y:\n        if y > x:\n            print('-')\n        else:\n            print('?')\n    else:\n        print('?')", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "n, m, k = map(int, input().split())\nnumbers = []\nfor i in range(1, n + 1):\n    for j in range(1, m + 1):\n        numbers.append(i * j)\nnumbers.sort()\nprint(numbers[k - 1])", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "def calculate_expected_caught_fishes(n, m, r, k):\n    # Calculate the number of possible positions for the scoop-net\n    num_possible_positions = (n - r + 1) * (m - r + 1)\n\n    # Calculate the number of cells that can be occupied by fishes\n    num_occupiable_cells = (n - r + 1) * (m - r + 1)\n\n    # Calculate the expected number of caught fishes\n    expected_caught_fishes = k * num_possible_positions / num_occupiable_cells\n\n    return expected_caught_fishes\n\n# Read the input\nn, m, r, k = map(int, input().split())\n\n# Calculate the expected number of caught fishes\nexpected_caught_fishes = calculate_expected_caught_fishes(n, m, r, k)\n\n# Print the result\nprint(expected_caught_fishes)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "\n# -*- coding: utf-8 -*-\n\nimport math\nimport collections\nimport bisect\nimport heapq\nimport time\nimport random\nimport itertools\nimport sys\n\n\"\"\"\ncreated by shhuan at 2017/11/4 00:13\n\n\"\"\"\n\nN = int(input())\n\nA = []\nfor i in range(N):\n    A.append([int(x) for x in input().split()])\n\n\ndef dfs(A, index, p):\n    if index >= len(A):\n        v = 0\n        for u in p:\n            v *= 10\n            v += u\n        return {v}\n\n    ans = set()\n    for v in A[index]:\n        ans |= dfs(A, index+1, p+[v])\n    ans |= dfs(A, index+1, p)\n\n    return ans\n\nallNums = set()\nfor a in itertools.permutations(A, len(A)):\n    allNums |= dfs(a, 0, [])\n\nans = 0\nfor i in range(1, max(allNums)+1):\n    if i not in allNums:\n        break\n    ans = i\n\nprint(ans)\n\n\n\n\n\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "# Read the input data\nn, m, k = map(int, input().split())\na, b = map(int, input().split())\n\n# Define a function to calculate the distance between two flats\ndef dist(i, j):\n    # Calculate the distance in the current block\n    d1 = abs(i // m - j // m)\n    d2 = abs(i % m - j % m)\n    d = d1 + d2\n    # Calculate the distance on the ring\n    r = min(abs(i // (m * k) - j // (m * k)), abs(n - abs(i // (m * k) - j // (m * k))))\n    # Calculate the total distance\n    return d + r * (2 * k + 1)\n\n# Find the shortest distance\nans = 10**18\nfor i in range(n * m * k):\n    ans = min(ans, dist(i, a - 1) + dist(i, b - 1))\n\n# Output the result\nprint(ans * 15 + 10)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "import time\nimport random\nW = int(input())\nM = [int(a) for a in input().split()]\nA = [0] * 8\nsTime = time.time()\n\ns = 0\nmi = 10**20\nfor i in range(8):\n    if s + M[i]*(i+1) <= W:\n        s += M[i]*(i+1)\n        A[i] = M[i]\n    else:\n        t = (W-s)//(i+1)\n        s += t*(i+1)\n        A[i] += t\n    \n    if s <= W:\n        mi = min(mi, W-s)\n\nwhile time.time() - sTime < 1.7:\n    i = random.randrange(8)\n    a = random.randrange(2)\n    if W-s >= 20 or (s-W < 10 and a == 0):\n        if A[i] < M[i]:\n            A[i] += 1\n            s += (i+1)\n    else:\n        if A[i] > 0:\n            A[i] -= 1\n            s -= (i+1)\n\n    if s <= W:\n        mi = min(mi, W-s)\n\nprint(W-mi)", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "# Input the value of X\nX = int(input())\n\n# Initialize a and b to 1\na = 1\nb = 1\n\n# Check if X is odd or even\nif X % 2 == 0:\n    # If X is even, set a = 1 and b = 2\n    a = 1\n    b = 2\nelse:\n    # If X is odd, set a = 1 and b = X\n    a = 1\n    b = X\n\n# Calculate the LCM of a and b\nlcm = (a * b) // gcd(a, b)\n\n# Check if the LCM is equal to X\nif lcm == X:\n    # If it is, print the values of a and b\n    print(a, b)\nelse:\n    # If it is not, print a message indicating that no solution exists\n    print(\"No solution\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "x = int(input())\nx = x % 360\nif (x <= 45 or x >= 315):\n    print(0)\nelif (x >= 45 and x <= 135):\n    print(1)\nelif (x >= 135 and x <= 225):\n    print(2)\nelse:\n    print(3)\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "# This code takes the input as a single line of 5 integers, separated by spaces\n# The input is then split into the required variables\ninput_line = input().split()\nC = int(input_line[0])\nH_r = int(input_line[1])\nH_b = int(input_line[2])\nW_r = int(input_line[3])\nW_b = int(input_line[4])\n\n# Calculate the maximum number of candies that can be eaten\nmax_candies = C // (W_r + W_b)\n\n# Calculate the maximum joy units that can be obtained by eating a single candy type\nmax_joy_r = max_candies * H_r\nmax_joy_b = max_candies * H_b\n\n# Calculate the maximum joy units that can be obtained by eating both candy types\nmax_joy_both = (C // W_r) * H_r + (C // W_b) * H_b\n\n# Print the maximum of the three calculated values\nprint(max(max_joy_r, max_joy_b, max_joy_both))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "def max_beauty(s):\n    n = len(s)\n    cnt = 1\n    ans = 0\n    for i in range(1, n):\n        if s[i] == s[i - 1]:\n            cnt += 1\n        else:\n            ans = max(ans, cnt)\n            cnt = 1\n    ans = max(ans, cnt)\n    return ans\n\nn = int(input())\nkuro = input()\nshiro = input()\nkatie = input()\n\nans = max_beauty(kuro)\nif max_beauty(shiro) > ans:\n    ans = max_beauty(shiro)\n    winner = 'Shiro'\nelif max_beauty(shiro) == ans:\n    winner = 'Draw'\nelse:\n    winner = 'Kuro'\n\nif max_beauty(katie) > ans:\n    ans = max_beauty(katie)\n    winner = 'Katie'\nelif max_beauty(katie) == ans:\n    winner = 'Draw'\n\nprint(winner)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "# input n\nn = int(input())\n\n# Initialize the array\ndp = [[0 for i in range(n)] for j in range(n)]\n\n# Base cases\nfor i in range(n):\n    dp[i][i] = 1\n\n# Calculate the answer using Dynamic Programming\nfor i in range(n):\n    for j in range(i + 1, n):\n        for k in range(i, j):\n            if (k - i) % 2 == 0:\n                dp[i][j] += dp[i][k] * dp[k + 1][j]\n            else:\n                dp[i][j] += dp[i][k] * dp[k + 1][j]\n\n# Print the answer\nprint(dp[0][n - 1] % 998244353)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "from sys import stdin, stdout\n\nINF = float('inf')\nn = int(stdin.readline())\nvalues = list(map(int, stdin.readline().split()))\n\nans = INF\nprevious = -INF\nmn = min(values)\n\nfor i in range(n):\n    if values[i] == mn:\n        ans = min(ans, i - previous)\n        previous = i\n\nstdout.write(str(ans))", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "n, m = map(int, input().split())\nhor_dir = input()\nver_dir = input()\n\ndef is_valid(n, m, hor_dir, ver_dir):\n    if n < 2 or m < 2:\n        return False\n\n    for i in range(1, n - 1):\n        if hor_dir[i] == '>':\n            for j in range(m):\n                if ver_dir[j] == '^':\n                    return False\n        if hor_dir[i] == '<':\n            for j in range(m):\n                if ver_dir[j] == 'v':\n                    return False\n\n    for i in range(m):\n        if ver_dir[i] == '^':\n            for j in range(1, n - 1):\n                if hor_dir[j] == '>':\n                    return False\n        if ver_dir[i] == 'v':\n            for j in range(1, n - 1):\n                if hor_dir[j] == '<':\n                    return False\n\n    return True\n\nif is_valid(n, m, hor_dir, ver_dir):\n    print(\"YES\")\nelse:\n    print(\"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "n = int(input())\n\nx = list(map(int, input().split()))\ny = list(map(int, input().split()))\n\nfor i in range(n):\n    if x[i] == y[i]:\n        continue\n    elif x[i] < y[i]:\n        print(\"No\")\n        break\n    elif x[i] > y[i]:\n        for j in range(n):\n            if y[j] == x[i] - 1 and x[j] == y[j] + 1:\n                x[i] -= 1\n                x[j] += 1\n                break\n        else:\n            print(\"No\")\n            break\nelse:\n    print(\"Yes\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "# python3\nimport sys\nfrom collections import deque\n\ndef topo_sort(adj):\n    n = len(adj)\n    order = []\n    visited = [False] * n\n    for v in range(n):\n        if not visited[v]:\n            visited[v] = True\n            stack = [v]\n            while stack:\n                node = stack.pop()\n                for child in adj[node]:\n                    if not visited[child]:\n                        stack.append(child)\n                        visited[child] = True\n                order.append(node)\n    return order\n\ndef main():\n    n, m = map(int, input().split())\n    adj = [[] for _ in range(n + 1)]\n    indeg = [0] * (n + 1)\n    for _ in range(n):\n        line = list(map(int, input().split()))\n        k = line[0]\n        for i in range(k):\n            x = line[i + 1]\n            adj[x].append(line[i + 1])\n            indeg[line[i + 1]] += 1\n    for _ in range(m):\n        x = int(input())\n        order = topo_sort(adj)\n        if order.count(x) == 0:\n            print(-1)\n            return\n        else:\n            i = 0\n            while i < len(order):\n                if order[i] == x:\n                    break\n                i += 1\n            ans = order[:i + 1]\n            for node in order[i + 1:]:\n                if indeg[node] == 0:\n                    ans.append(node)\n            print(len(ans))\n            print(' '.join(map(str, ans)))\n            return\n\nif __name__ == '__main__':\n    main()", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "3\n\n# BEGIN template\nimport sys\nimport re\nimport pprint\n\ndef dbg(x,y=''):\n  if len(y) > 0: y += ' = '\n  sys.stderr.write('\\n>>> '+y+pprint.pformat(x)+'\\n')\n  sys.stderr.flush()\n\noo = 0x3f3f3f3f3f3f3f3f\n# END template\n\ndef minn(x,y):\n  if x[0] < y[0]: return x\n  if x[0] > y[0]: return y\n  if x[1] < y[1]: return x\n  if x[1] > y[1]: return y\n  return x\n\ndef main():\n  n = int(input())\n  s = input()\n  m = len(s)\n  s = '0'+s\n  power = [1]\n  for i in range(1,61):\n    power.append(power[i-1]*n)\n  dp = [(int(1e70),int(1e70))]*65\n  dp[m+1] = (0,0)\n  for i in range(m,0,-1):\n    if s[i] == '0':\n      tmp = dp[i+1]\n      dp[i] = (1+tmp[0],tmp[1])\n      continue\n    for j in range(i,min(m+1,i+9)):\n      d = int(s[i:j+1])\n      if d >= n: break\n      tmp = dp[j+1]\n      dp[i] = minn(dp[i],(1+tmp[0],d*power[tmp[0]]+tmp[1]))\n  print(dp[1][1])\n\nmain()\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\n# n = int(iunput())\n#\n# a, b = [int(i) for i in input().split()]\n#\n\na = int(input())\nb = int(input())\nc = int(input())\nmax_b = b//2\nmax_c = c//4\ndoli = min(a, max_b, max_c)\nkompot = doli *7\nprint (kompot)\n\n\t\t\n\t\n\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "mm = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31, 30, 31]\nm, d = list(map(int, input().split()))\nprint((mm[m-1]+d-2)//7+1)\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "from collections import Counter\n\nn = int(input().strip())\nca = Counter([int(x) for x in input().strip().split(' ')])\ncb = Counter([int(x) for x in input().strip().split(' ')])\ncnt = 0\n\nfor i in range(1, 6):\n    if (ca[i] + cb[i]) % 2 != 0:\n        print(-1)\n        return\n    else:\n        cnt += abs(ca[i] - (ca[i] + cb[i]) / 2)\nprint(int(cnt/2))\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "def check_remainders(n, k):\n    remainders = set()\n    for i in range(1, k + 1):\n        remainder = n % i\n        if remainder in remainders:\n            return \"No\"\n        remainders.add(remainder)\n    return \"Yes\"\n\n\nif __name__ == \"__main__\":\n    n, k = map(int, input().split())\n    print(check_remainders(n, k))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "A, B = map(int, input().split())\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\ndef lcm(a, b):\n    return a*b//gcd(a,b)\ndef primeFactor(N):\n    i = 2\n    ret = {}\n    n = N\n    if n < 0:\n        ret[-1] = 1\n        n = -n\n    if n == 0:\n        ret[0] = 1\n    d = 2\n    sq = int(n ** (1/2))\n    while i <= sq:\n        k = 0\n        while n % i == 0:\n            n //= i\n            k += 1\n            ret[i] = k\n        if k > 0:\n            sq = int(n**(1/2))\n        if i == 2:\n            i = 3\n        elif i == 3:\n            i = 5\n        elif d == 2:\n            i += 2\n            d = 4\n        else:\n            i += 4\n            d = 2\n        \n    if n > 1:\n        ret[n] = 1\n    return ret\n\ndef divisors(N):\n    pf = primeFactor(N)\n    ret = [1]\n    for p in pf:\n        ret_prev = ret\n        ret = []\n        for i in range(pf[p]+1):\n            for r in ret_prev:\n                ret.append(r * (p ** i))\n    return sorted(ret)\n\nif A == B:\n    print(0)\nelse:\n    mi = 10**100\n    ans = -1\n    D = divisors(abs(B-A))\n    for d in D:\n        k = -A%d\n        L = lcm(A+k, B+k)\n        if mi > L or (mi == L and ans > k):\n            mi = L\n            ans = k\n    print(ans)", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "def is_valid_phone_number(s):\n    # Check if the string is a valid phone number\n    if len(s) == 11 and s[0] == '8':\n        return True\n    return False\n\ndef has_winning_strategy(s):\n    # Base case: if the string is a valid phone number, Vasya wins\n    if is_valid_phone_number(s):\n        return True\n    \n    # Iterate through each character in the string\n    for i in range(len(s)):\n        # Erase the current character\n        new_s = s[:i] + s[i+1:]\n        \n        # If Petya can't win after this move, Vasya wins\n        if not has_winning_strategy(new_s):\n            return True\n    \n    # If none of the moves lead to a win for Vasya, Petya wins\n    return False\n\n# Read the input\nn = int(input())\ns = input()\n\n# Determine if Vasya has a winning strategy\nif has_winning_strategy(s):\n    print(\"YES\")\nelse:\n    print(\"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "n = int(input())\narr = list(map(int, input().split()))\n\nsum_arr = sum(arr)\nif sum_arr % 2 == 0:\n    target = sum_arr // 2\n    prefix_sum = 0\n    for i, num in enumerate(arr):\n        prefix_sum += num\n        if prefix_sum == target:\n            print('YES')\n            break\n    else:\n        print('NO')\nelse:\n    print('NO')", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Sun May 27 20:07:20 2018\n\n@st0rmbring3r\n\"\"\"\n\nword = input()\nwhile word == word[::-1] and len(word)>0:\n    word = word[:-1]\n\nprint(len(word))", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "# Read the input position\nposition = []\nfor _ in range(4):\n    position.append(input())\n\n# Function to check if a given row, column, or diagonal is a winning line\ndef is_winning_line(line):\n    if len(set(line)) == 1 and line[0] == 'x':\n        return True\n    return False\n\n# Check if Ilya could win by making a single turn\nfor i in range(4):\n    # Check if any row is a winning line\n    if is_winning_line(position[i]):\n        print(\"YES\")\n        break\n    # Check if any column is a winning line\n    if is_winning_line([position[j][i] for j in range(4)]):\n        print(\"YES\")\n        break\n    # Check if the main diagonal is a winning line\n    if is_winning_line([position[j][j] for j in range(4)]):\n        print(\"YES\")\n        break\n    # Check if the secondary diagonal is a winning line\n    if is_winning_line([position[j][3-j] for j in range(4)]):\n        print(\"YES\")\n        break\nelse:\n    # None of the winning lines were found, so Ilya cannot win by making a single turn\n    print(\"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "#!/usr/bin/python3\n\nn = int(input())\n\n# calculate the number of work days in a year\nwork_days = n * 5 // 7\n\n# calculate the minimum number of days off\nmin_days_off = n - work_days\n\n# calculate the maximum number of days off\nmax_days_off = n - (n - min_days_off) // 7 - 1\n\nprint(min_days_off, max_days_off)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "import sys, math, random\nfrom fractions import gcd\nfrom itertools import permutations\n\ndebug = 0\nif debug:\n    f = open(\"input.txt\", \"r\")\n    input = f.readline\nelse:\n    input = sys.stdin.readline\n\ndef mp():\n    return list(map(int, input().split()))\n\ndef _main():\n    n = int(input())\n    a = mp()\n    b = mp()\n    if sum(a) < sum(b):\n        print(\"No\")\n    else:\n        print(\"Yes\")\n\n_main()\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "n, m = list(map(int, input().split()))\nr = 0\nfor i in range(1, n+1):\n    x = (5 - i) % 5\n    if x == 0:\n        r += (m - x) // 5\n    else:\n        r += (m - x) // 5 + 1\nprint(r)\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "def get_maximum_messiness(n, k):\n    # If there is only one cow, the maximum messiness is 0\n    if n == 1:\n        return 0\n\n    # Calculate the maximum messiness possible with k swaps\n    max_messiness = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if i < j:\n                max_messiness += 1\n\n    # If k is less than the number of possible swaps,\n    # then the maximum messiness is reduced by the number of\n    # possible swaps that are not performed\n    if k < (n - 1) * n // 2:\n        max_messiness -= (n - 1) * n // 2 - k\n\n    return max_messiness\n\n# Read input from the user\nn, k = map(int, input().split())\n\n# Calculate and print the maximum messiness\nmax_messiness = get_maximum_messiness(n, k)\nprint(max_messiness)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "def find_sofa(d, n, m, sofas, cnt_l, cnt_r, cnt_t, cnt_b):\n    def count_sofas(sofa, sofas, direction):\n        x1, y1, x2, y2 = sofa\n        if direction == 'left':\n            return sum(1 for s in sofas if s[0] < x1 and s[1] == y1)\n        elif direction == 'right':\n            return sum(1 for s in sofas if s[0] > x2 and s[1] == y2)\n        elif direction == 'top':\n            return sum(1 for s in sofas if s[1] < y1 and s[0] == x1)\n        else:\n            return sum(1 for s in sofas if s[1] > y2 and s[0] == x2)\n\n    for i, sofa in enumerate(sofas, 1):\n        cnt_l_sofa = count_sofas(sofa, sofas, 'left')\n        cnt_r_sofa = count_sofas(sofa, sofas, 'right')\n        cnt_t_sofa = count_sofas(sofa, sofas, 'top')\n        cnt_b_sofa = count_sofas(sofa, sofas, 'bottom')\n        if cnt_l_sofa == cnt_l and cnt_r_sofa == cnt_r and cnt_t_sofa == cnt_t and cnt_b_sofa == cnt_b:\n            return i\n    return -1\n\nif __name__ == '__main__':\n    d = int(input())\n    n, m = map(int, input().split())\n    sofas = [list(map(int, input().split())) for _ in range(d)]\n    cnt_l, cnt_r, cnt_t, cnt_b = map(int, input().split())\n\n    result = find_sofa(d, n, m, sofas, cnt", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef solve(l, r, x, y):\n    count = 0\n    for i in range(l, r + 1):\n        for j in range(i, r + 1):\n            if gcd(i, j) == x and lcm(i, j) == y:\n                count += 1\n    return count\n\nl, r, x, y = map(int, input().split())\nprint(solve(l, r, x, y))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "\"\"\"\n    Author : thekushalghosh\n    Team   : CodeDiggers\n\"\"\"\nimport sys,math\ninput = sys.stdin.readline\n \n############ ---- USER DEFINED INPUT FUNCTIONS ---- ############\ndef inp():\n    return(int(input()))\ndef inlt():\n    return(list(map(int,input().split())))\ndef insr():\n    s = input()\n    return(s[:len(s) - 1])\ndef invr():\n    return(map(int,input().split()))\n################################################################\n############ ---- THE ACTUAL CODE STARTS BELOW ---- ############\nt = 1\nfor tt in range(t):\n    m = int(input())\n    q = [0] * (m + 1)\n    c = 1\n    for i in range(m, 1, -1):\n        w = m // i * pow(m, 1000000007 - 2, 1000000007)\n        q[i] = w * pow(1 - w, 1000000007 - 2, 1000000007) % 1000000007\n        for j in range(2 * i, m + 1, i):\n            q[i] = (q[i] - q[j]) % 1000000007\n        c = c + q[i]\n    print(c % 1000000007)", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "import random\ndef genTemp():\n    sl = \"\"\n    firstTime = True\n    while firstTime or sl in pre or sl in post:\n        sl = \"\"\n        firstTime = False\n        for i in range(6):\n            sl += chr(random.randint(ord(\"a\"), ord(\"z\")))\n    return sl\n\n\nn = int(input())\ne = 0\npre = set()\npost = set()\n\nfor i in range(n):\n    name, tp = input().split()\n    if tp == \"1\":\n        e += 1\n        pre.add(name)\n    else:\n        post.add(name)\n\ntemp = genTemp()\n\npreAns = {str(x) for x in range(1, e + 1)}\npostAns = {str(x) for x in range(e + 1, n + 1)}\n\npreMissing = preAns - pre\npostMissing = postAns - post\n\npreToChange = pre - preAns\npostToChange = post - postAns\n\npreFree = preMissing - postToChange\npostFree = postMissing - preToChange\n\npreWrong = preToChange & postMissing\npostWrong = postToChange & preMissing\n\nans = []\n\nwhile preToChange or postToChange:\n    if not postFree and not preFree:\n        if preToChange:\n            x = preToChange.pop()\n            preWrong.discard(x)\n            ans.append((\"move\", x, temp))\n            preToChange.add(temp)\n            #postMissing.discard(x)\n            if x in postAns:\n                postFree.add(x)            \n        else:\n            x = postToChange.pop()\n            ans.append((\"move\", x, temp))\n            postWrong.discard(x)\n            postToChange.add(temp)\n            #preMissing.discard(x)   \n            if x in postAns:\n                preFree.add(x)            \n    elif preFree:\n        if preWrong:\n            x = preWrong.pop()\n            preToChange.discard(x)\n        else:\n            x = preToChange.pop()\n        y = preFree.pop()\n        ans.append((\"move\", x, y))\n        preMissing.discard(y)\n        if x in postAns:\n            postFree.add(x)\n    else:\n        if postWrong:\n            x = postWrong.pop()\n            postToChange.discard(x)\n        else:\n            x = postToChange.pop()  \n        y = postFree.pop()\n        ans.append((\"move\", x, y))\n        postMissing.discard(y)\n        if x in preAns:\n            preFree.add(x)\n\nprint(len(ans))\nfor tup in ans:\n    print(*tup)", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "def Left(a):\n    if (a != 1 and a != 4 and a != 7 and a != 0):\n        return True\n    return False\n\ndef Right(a):\n    if (a != 3 and a != 6 and a != 9 and a != 0):\n        return True\n    return False\n\ndef Up(a):\n    if (a != 1 and a != 2 and a != 3):\n        return True\n    return False\n\ndef Down(a):\n    if (a != 7 and a != 9 and a != 0):\n        return True\n    return False\n\nn = int(input())\nstr1 = input()\n\nu =0\nd=0\nl=0\nr=0\nfor iss in str1:\n    i = int(iss)\n    if (Up(i)):\n        u+=1\n    if (Down(i)):\n        d += 1\n    if (Left(i)):\n        l += 1\n    if (Right(i)):\n        r += 1\n\nif (u == len(str1)\n    or d == len(str1)\n    or l == len(str1)\n    or r == len(str1)):\n    print(\"NO\")\nelse:\n    print(\"YES\")\n\n\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "\nimport sys\n\nline = sys.stdin.readline()\nline.strip()\ncomp = line.split(' ')\nn = int(comp[0])\nk = int(comp[1])\n\nif(k*(k+1)//2 > n):\n    print(\"-1\")\n    return\n\ndivs = []\n\nd = 1\nwhile(d*d <= n):\n    if n%d == 0:\n        divs.append(d)\n        divs.append(n//d)\n    d+=1\n\nmaxDiv = 0\n\nfor dv in divs:\n    if (k+1)*k//2 <= dv:\n        maxDiv = max(maxDiv,n//dv)\n    if (k+1)*k//2 <= n//dv:\n        maxDiv = max(maxDiv,dv)\n\n\narr = [maxDiv*x for x in range(1,k)] + [n-k*(k-1)//2*maxDiv]\nprint(\" \".join(map(str,arr)))\n\n\n\n\n\n\n\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "# n: length of the permutation\n# x: number to search\n# pos: required position of x\ndef count_permutations(n, x, pos):\n    # Initialize result as 0\n    result = 0\n\n    # Find the number of permutations where x is at position pos\n    for i in range(n - pos):\n        result += (n - pos) * factorial(n - pos - 1)\n\n    # Subtract the number of permutations where x is not at position pos\n    result -= (n - pos) * factorial(n - pos - 1)\n\n    # Return the result modulo 10^9+7\n    return result % (10 ** 9 + 7)\n\n# Calculate factorial\ndef factorial(n):\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result\n\n# Main program\nif __name__ == '__main__':\n    # Read input from the user\n    n, x, pos = map(int, input().split())\n\n    # Call the function to count permutations\n    result = count_permutations(n, x, pos)\n\n    # Print the result\n    print(result)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "from math import atan, asin\ny1, y2, yw, xb, yb, r = map(float, input().split())\nx = xb * (yw - y1 - 2*r) / (2*yw - y1 - yb - 3*r)\nalpha = atan(x / (yw - y1 - 2*r))\nbeta = asin(r / (y2 - y1 - r))\nprint ('-1' if alpha < beta else '{0:.10f}'.format(x))", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "def max_team_size(l, r, a):\n    team_size = 0\n    if l + r > a:\n        team_size = 2 * min(l, r) + a\n    elif l + r <= a and l + r > 0:\n        team_size = l + r\n    return team_size\n\nl, r, a = [int(x) for x in input().split()]\nteam_size = max_team_size(l, r, a)\nprint(team_size)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport re\n\n# Read input from STDIN\npassword = input()\n\n# Check if password meets all conditions\nif len(password) >= 5 and re.search(r\"[A-Z]\", password) and re.search(r\"[a-z]\", password) and re.search(r\"[0-9]\", password):\n    print(\"Correct\")\nelse:\n    print(\"Too weak\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "N = int(input())\nratings = [tuple(int(x) for x in input().split()) for _ in range(N)]\nif any(a != b for a, b in ratings):\n    print(\"rated\")\nelif sorted(ratings, reverse=True) == ratings:\n    print(\"maybe\")\nelse:\n    print(\"unrated\")\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "from sys import stdin, stdout\nd, k, a, b, t = map(int, stdin.readline().split())\nans = 0\nif k * b > k * a + t:\n    if k < d:\n        ans += (d // k - 1) * t + (d - (d % k)) * a\n        d %= k\n        if d * a + t < d * b:\n            ans += d * a + t\n        else:\n            ans += d * b\n    else:\n        ans += a * d\nelse:\n    if k < d:\n        ans = (d - k) * b + k * a\n    else:\n        ans = d * a\n\nstdout.write(str(ans))", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "x = int(input())\nif x < 10:\n    print(x)\nelif x == int(str(x)[0] + '9'*(len(str(x))-1)):\n    print(x)\nelse:\n    a = str(x)[0] + '9' * (len(str(x)) - 1)\n    a = list(a)\n    for i in range(len(a) - 1, -1, -1):\n        k = a[i]\n        a[i] = str(int(a[i]) - 1)\n        if x >= int(''.join(a)):\n            print(int(''.join(a)))\n            break\n        a[i] = k\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\nn, k = map(int, input().split())\n\nif n == 0:\n    if k == 0:\n        print(0)\n    else:\n        print(-1)\n    exit()\n\na = [1] * k\n\nfor i in range(k):\n    if (n - 1) % k == 0:\n        a[i] += i * (n - 1) // k\n    else:\n        a[i] += (n - 1) // k\n\nif gcd(n, k) == 1:\n    print(-1)\n    exit()\n\nif k == 1:\n    a = [n]\n\nprint(*a)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "mod = (1 << 30)\nmemo = dict()\n\ndef dp(x):\n\tif x in memo:\n\t\treturn memo[x]\n\tres, q, t = 1, 2, x\n\twhile q * q <= x:\n\t\tr = 1\n\t\twhile x % q == 0:\n\t\t\tx /= q\n\t\t\tr += 1\n\t\tres = (res * r) % mod\n\t\tq += 1\n\tif x > 1:\n\t\tres = (res * 2) % mod\n\tmemo[t] = res\n\treturn res\n\na, b, c = sorted(map(int, input().split()))\nres = 0\nfor i in range(1, a+1):\n\tfor j in range(1, b+1):\n\t\tfor k in range(1, c+1):\n\t\t\tres = (res + dp(i * j * k)) % mod\nprint(res)\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "# Input: n - initial number of commentary boxes,\n#        m - number of delegations,\n#        a - fee to build a box,\n#        b - fee to demolish a box\n\nn, m, a, b = map(int, input().split())\n\n# Check if n is divisible by m\nif n % m == 0:\n    # If n is divisible by m, no burles needed\n    print(0)\nelse:\n    # Calculate the number of boxes needed to be built or demolished\n    boxes_needed = m - (n % m)\n    # Calculate the cost to build or demolish the required number of boxes\n    cost = min(boxes_needed * a, boxes_needed * b)\n    # Print the minimum cost\n    print(cost)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "def solve(a, b):\n    # Convert the numbers to strings\n    a_str = str(a)\n    b_str = str(b)\n\n    # Check if a is greater than or equal to b\n    if a >= b:\n        return a_str\n\n    # Create a dictionary to store the count of each digit in a\n    digit_count = {}\n    for digit in a_str:\n        if digit not in digit_count:\n            digit_count[digit] = 1\n        else:\n            digit_count[digit] += 1\n\n    # Create a list to store the digits in decreasing order\n    digits = []\n    for digit in digit_count:\n        for _ in range(digit_count[digit]):\n            digits.append(digit)\n\n    # Iterate through the digits of b in reverse order\n    for i in range(len(b_str) - 1, -1, -1):\n        digit = b_str[i]\n        if digit in digits:\n            # If the digit is in the list, swap it with the largest digit in the list\n            digits[digits.index(digit)], digits[-1] = digits[-1], digits[digits.index(digit)]\n            break\n\n    # Construct the maximum number by concatenating the digits in the list\n    max_num = int(\"\".join(digits))\n\n    # Check if the maximum number is greater than or equal to b\n    if max_num >= b:\n        return a_str\n    else:\n        return str(max_num)\n\na = int(input())\nb = int(input())\n\nresult = solve(a, b)\nprint(result)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "def count_k_divisible_numbers(k, a, b):\n    # If k is 1, then all numbers in the range [a, b] are k-divisible\n    if k == 1:\n        return b - a + 1\n    # If k is negative, take the absolute value of k\n    k = abs(k)\n    # Calculate the count of k-divisible numbers\n    count = (b // k) - (a - 1) // k\n    return count\n\n# Read input from stdin\nk, a, b = map(int, input().split())\n# Calculate and print the result\nresult = count_k_divisible_numbers(k, a, b)\nprint(result)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "# Read the input number of games\nn = int(input())\n\n# Check if the number of games is valid\nif n < 1 or n > (10**18):\n    print(-1)\nelse:\n    # Initialize an empty list to store the possible number of teams\n    team_list = []\n\n    # Iterate through all possible number of teams from 1 to 10^18\n    for teams in range(1, 10**18 + 1):\n        # Initialize a variable to store the number of games played\n        games_played = 0\n\n        # Run the tournament simulation\n        while teams > 1:\n            # If the number of teams is even, simulate pairwise games\n            if teams % 2 == 0:\n                games_played += teams // 2\n                teams //= 2\n            # If the number of teams is odd, simulate a round-robin tournament\n            else:\n                games_played += teams * (teams - 1) // 2\n                break\n\n        # Check if the total number of games played is equal to the input\n        if games_played == n:\n            team_list.append(teams)\n\n    # Check if any possible number of teams was found\n    if len(team_list) > 0:\n        # Sort the list in ascending order\n        team_list.sort()\n\n        # Print each possible number of teams\n        for teams in team_list:\n            print(teams)\n    else:\n        # If no possible number of teams was found, print -1\n        print(-1)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "# Python 3 code\ndef solve(n, s, v):\n    min_keg = min(v)\n    if s > n * min_keg:\n        return -1\n    else:\n        return min_keg - s % min_keg\n\nn, s = list(map(int, input().split()))\nv = list(map(int, input().split()))\nprint(solve(n, s, v))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "n=input()\nd={}\nflag=0\nfor i in n:\n    d[i]=1\nif len(d.keys())%2==1:\n    print(\"IGNORE HIM!\")\nelse :print(\"CHAT WITH HER!\")", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "w, m = map(int, input().split())\n\ndef solve(w, m):\n    if m == 0:\n        return \"YES\"\n    if m % w == 0:\n        return \"YES\"\n    if m % w == 1:\n        return \"YES\"\n    if m % w == w - 1:\n        return \"YES\"\n    return \"NO\"\n\nprint(solve(w, m))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "time = input()\nb = time.find(':')\nh = int(time[:b])\nm = int(time[b + 1:])\nfor i in range(60 * 24):\n    time = \"0\" * (2 - len(str(h))) + str(h) + \"0\" * (2 - len(str(m))) + str(m)\n    if time == time[::-1]:\n        print(i)\n        return\n    m += 1\n    h += m // 60\n    h %= 24\n    m %= 60\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "n,m=list(map(int,input().split()))\nar=[]\nfor x in range(n):\n    e=list(map(int,input().split()))\n    ar.append(e)\ncol=set()\nmoves=[]\nfor i in range(n-1):\n    for j in range(m-1):\n        if(ar[i][j]==ar[i+1][j]==ar[i][j+1]==ar[i+1][j+1]==1):\n            moves.append([i+1,j+1])\n            col.add((i,j))\n            col.add((i+1,j))\n            col.add((i+1,j+1))\n            col.add((i,j+1))\nfor i in range(n):\n    for j in range(m):\n        if(ar[i][j]):\n            if((i,j) not in col):\n                print(-1)\n                quit()\nprint(len(moves))\nfor x in moves:\n    print(*x)\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "n, m = input().split()\nn = int(n)\nm = int(m)\n\nstars = []\n\nfor i in range(n):\n    line = input()\n    for j in range(m):\n        if line[j] == \"*\":\n            stars.append((i, j))\n\nmin_side = max(max(stars, key=lambda x: x[0])[0], max(stars, key=lambda x: x[1])[1]) + 1\nprint(min_side)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "n = int(input())\ns = input()\n\ndef next_greater(s):\n    # Find the rightmost digit that can be increased\n    for i in range(len(s) - 2, -1, -1):\n        if s[i] < s[i + 1]:\n            break\n    else:\n        return s\n\n    # Find the rightmost digit to the right of the above digit\n    # that is greater than the above digit\n    for j in range(len(s) - 1, i, -1):\n        if s[j] > s[i]:\n            break\n\n    # Swap the two digits\n    s = s[:i] + s[j] + s[i + 1:j] + s[i] + s[j + 1:]\n\n    # Reverse the suffix starting from the digit to the right of the above digit\n    s = s[:i + 1] + s[i + 1:][::-1]\n\n    return s\n\ndef next_smaller(s):\n    # Find the rightmost digit that can be decreased\n    for i in range(len(s) - 2, -1, -1):\n        if s[i] > s[i + 1]:\n            break\n    else:\n        return s\n\n    # Find the rightmost digit to the right of the above digit\n    # that is less than the above digit\n    for j in range(len(s) - 1, i, -1):\n        if s[j] < s[i]:\n            break\n\n    # Swap the two digits\n    s = s[:i] + s[j] + s[i + 1:j] + s[i] + s[j + 1:]\n\n    # Reverse the suffix starting from the digit to the right of the above digit\n    s = s[:i + 1] + s[i + 1:][::-1]\n\n    return s\n\ndef generate_next(s):\n    next_s = next_greater(s)\n    if next_s == s:\n        next_s = next_smaller(s)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "# Function to find the minimum number of 90 degrees clockwise turns\ndef findMinTurns(x):\n    # If x is already divisible by 90, then no turns are required\n    if x % 90 == 0:\n        return 0\n    # Calculate the minimum number of turns to reach the nearest multiple of 90\n    minTurns = 0\n    if x > 0:\n        minTurns = (90 - x) % 90\n    else:\n        minTurns = (-x) % 90\n    # If the number of turns is less than 90, return it\n    if minTurns <= 90:\n        return minTurns\n    # If not, return the number of turns required to reach the opposite multiple of 90\n    else:\n        return 180 - minTurns\n\n# Read the input\nx = int(input())\n\n# Call the function to find the minimum number of turns\nminTurns = findMinTurns(x)\n\n# Print the output\nprint(minTurns)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "s=input()\narr=[]\nfor i in s:\n    arr.append(i)\nc='a'\nd=0\nfor i in range(len(arr)):\n    if arr[i]<=c:\n        arr[i]=c\n        if c=='z':\n            d=1\n            break\n        c=chr(ord(c)+1)\n\nif d==0:\n    print(-1)\nelse:\n    print(*arr,sep='')\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "n = int(input())\n\nnums = list(map(int, input().split()))\n\nanswer = float('inf')\n\nfor l in range(n):\n    for s in range(n):\n        if(s + l - 1 >= n):continue\n        current = sum(nums[s:s + l])\n        answer = min(answer, abs(360 - 2 * current))\n\n\nprint(answer)\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "# Function to check if the given array can be transformed\n# to the desired array after some steps\ndef canTransform(v, a, k, n):\n\n    # Initialize a temporary array to store the transformed array\n    temp = [0] * n\n\n    # Perform the given operation on the temporary array\n    # i.e., choose a position and increase it by k^i\n    for i in range(n):\n        pos = (k ** i) % n\n        temp[pos] += k ** i\n\n    # Check if the transformed array is equal to the desired array\n    for i in range(n):\n        if temp[i] != a[i]:\n            return False\n\n    # If all elements are equal, return True\n    return True\n\n# Driver code\nif __name__ == '__main__':\n    T = int(input())\n    for i in range(T):\n        n, k = map(int, input().split())\n        a = list(map(int, input().split()))\n        if canTransform(a, k, n):\n            print(\"YES\")\n        else:\n            print(\"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "m = 10** 6 + 3\n\nn, k = list(map(int, input().split()))\np = 1\nfor i in range(n):\n    p *= 2\n    if p > k:\n        break\nif p < k:\n    print('1 1')\n    return\n\ngcd = tmp = k - 1\nwhile tmp:\n    gcd -= tmp % 2\n    tmp //= 2\nb = pow(2, (k - 1) * n - gcd, m)\na = 1\nmem = [-1]*100\nfor i in range(1, k):\n    cnt = 0\n    while i % 2 == 0:\n        i //= 2\n        cnt += 1\n    if mem[cnt] == -1:\n        mem[cnt] = pow(2, n - cnt, m)\n    a = a * (mem[cnt] - i + m) % m\n    if a == 0:\n        break\nprint((b - a + m) % m, b)\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "# Taking input from the user\nn, k = map(int, input().split())\n\n# Initializing the list for Hitagi's sequence\na = [0] * n\n\n# Taking input for Hitagi's sequence\nfor i in range(n):\n    a[i] = int(input().split()[i])\n\n# Initializing the list for Kaiki's sequence\nb = [0] * k\n\n# Taking input for Kaiki's sequence\nfor i in range(k):\n    b[i] = int(input().split()[i])\n\n# Function to check if the sequence is increasing or not\ndef is_increasing(sequence):\n    for i in range(len(sequence) - 1):\n        if sequence[i] >= sequence[i + 1]:\n            return False\n    return True\n\n# Function to solve the question\ndef solve_question(a, b):\n    # Creating a copy of Hitagi's sequence\n    sequence = a.copy()\n\n    # Replacing the zeros in Hitagi's sequence with elements from Kaiki's sequence\n    for i in range(len(a)):\n        if a[i] == 0:\n            sequence[i] = b.pop()\n\n    # Checking if the resulting sequence is increasing\n    if is_increasing(sequence):\n        return \"No\"\n    else:\n        return \"Yes\"\n\n# Calling the function to solve the question\nresult = solve_question(a, b)\n\n# Printing the result\nprint(result)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "s = input()\n\nsym = \"AHIMOoTUVvWwXxY\"\nmir = {'b': 'd', 'd': 'b', 'p': 'q', 'q': 'p'}\n\nans = True\nl = len(s)\nif l % 2 != 0 and s[l // 2] not in sym:\n    ans = False\nelse:\n    #ans = False\n    for i in range(l // 2):\n        if not (s[i] in mir and mir[s[i]] == s[l - i - 1] or s[i] in sym and s[i] == s[l - i - 1]):\n            ans = False\n            break\nprint(\"TAK\" if ans else \"NIE\")\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "def max_non_palindrome_length(s):\n    n = len(s)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        if s[0] == s[1]:\n            return 0\n        else:\n            return 2\n    if n == 3:\n        if s[0] == s[2]:\n            return 0\n        else:\n            return 3\n    if n >= 4:\n        if s[0] == s[n-1] and s[1] == s[n-2]:\n            return 0\n        else:\n            return n\n\ns = input()\nprint(max_non_palindrome_length(s))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "def get_pairs(n):\n    if n <= 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        max_nines = 0\n        sum_nines = 0\n        for i in range(1, n+1):\n            sum_nines += i\n            if sum_nines % 10 == 0:\n                max_nines += 1\n            elif (sum_nines-1) % 10 == 0:\n                max_nines += 1\n\n        pairs = 0\n        for i in range(max_nines+1):\n            pairs += (n - i) * (n - i - 1) // 2\n\n        return pairs\n\nn = int(input())\npairs = get_pairs(n)\nprint(pairs)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "def check_grape_distribution(x, y, z, a, b, c):\n    # Check if the number of green grapes is sufficient for Andrew\n    if x > a:\n        return \"NO\"\n\n    # Check if the number of green and purple grapes is sufficient for Dmitry\n    if y > a + b:\n        return \"NO\"\n\n    # Check if the number of grapes (green, purple, or black) is sufficient for Michal\n    if z > a + b + c:\n        return \"NO\"\n\n    # If all checks pass, it is possible to distribute grapes to make everyone happy\n    return \"YES\"\n\n\nif __name__ == \"__main__\":\n    # Read the input\n    x, y, z = map(int, input().split())\n    a, b, c = map(int, input().split())\n\n    # Call the function to check the grape distribution\n    result = check_grape_distribution(x, y, z, a, b, c)\n\n    # Print the result\n    print(result)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "n, pos, l, r = map(int, input().split())\n\nif pos < l:\n    steps = pos - 1 + (l - pos - 1) + (n - r)\nelif pos > r:\n    steps = r - 1 + (pos - r - 1) + (n - l)\nelse:\n    steps = min(pos - l, r - pos) + n - r\n\nprint(steps)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "n=int(input())\na=n//7*2\nprint(a+max(0,(n%7-5)),a+min(2,n%7))\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "B1, Q, L, M = list(map(int, input().split()))\nAs = set(map(int, input().split()))\n\nBs = []\ntmp = B1\ncnt = 0\nwhile abs(tmp) <= L and cnt < 100:\n    if tmp not in As:\n        Bs.append(tmp)\n    tmp *= Q\n    cnt += 1\nif 32 < len(Bs):\n    print('inf')\nelse:\n    print(len(Bs))\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "n,k,m=list(map(int,input().split()))\nd,r,p,P=0,0,1%k,(10**(n-1))*9\nF=[0]*k\nF[0]=1\nwhile d<n:\n\td+=1\n\tP//=10\n\tE=[0]*k\n\tif P==0:P=1\n\ti=1\n#\tprint(\"E=\",E)\n#\tprint(\"F=\",F)\n\twhile i<10:\n\t\tj=(-i*p)%k\n\t\tf=0\n\t\twhile f<k:\n\t\t\tE[f]+=F[j]\n\t\t\tf+=1\n\t\t\tj+=1\n\t\t\tif j==k:j=0\n\t\ti+=1\n\tr+=E[0]*P\n\tp=p*10%k\n\tE[0]=0\n\ti=1\n\twhile i<k:\n\t\tF[i]=(F[i]+E[i])%m\n\t\ti+=1\n#\tprint(E,P)\n\tF[0]=1\n#print(\"r=\",r)\nprint(r%m)\n#i=10**n\n#j=10**(n-1)\n#r=0\n#F=[0]*k\n#while j<i:\n#\tx=str(j)\n#\tl=len(x)\n#\ta=l\n#\twhile a:\n#\t\ta-=1\n#\t\ts=int(x[a:l])\n#\t\tif s>0 and s%k==0:\n#\t\t\tr+=1\n#\t\t\tbreak\n#\tj+=1\n#print()\n#print(r)\n\"\"\"\n3 6 9\n13 16 19\t12 15 18\n23 26 29\t21 24 27\n33 36 39\t30\n43 46 49\t42 45 48\n53 56 59\t51 54 57\n63 66 69\t60\n73 76 79\t72 75 78\n83 86 89\t81 84 87\n93 96 99\t90\n\"\"\"\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "s1 = input()\ns2 = input()\ns3 = input()\ns4 = input()\ns5 = s1[0] + s2[0] + s3[0] + s4[0]\ns6 = s1[1] + s2[1] + s3[1] + s4[1]\ns7 = s1[2] + s2[2] + s3[2] + s4[2]\ns8 = s1[3] + s2[3] + s3[3] + s4[3]\ns9 = s2[0] + s3[1] + s4[2]\ns10 = s1[0] + s2[1] + s3[2] + s4[3]\ns11 = s1[1] + s2[2] + s3[3]\ns12 = s1[2] + s2[1] + s3[0]\ns13 = s1[3] + s2[2] + s3[1] + s4[0]\ns14 = s2[3] + s3[2] + s4[1]\n\n\nf = False\nif 'xx.' in s1 or 'xx.' in s2 or 'xx.' in s3 or 'xx.' in s4 or 'xx.' in s5 or 'xx.' in s6 or 'xx.' in s7 or 'xx.' in s8 or 'xx.' in s9 or 'xx.' in s10 or 'xx.' in s11 or 'xx.' in s12 or 'xx.' in s13 or 'xx.' in s14:\n    f = True\nif 'x.x' in s1 or 'x.x' in s2 or 'x.x' in s3 or 'x.x' in s4 or 'x.x' in s5 or 'x.x' in s6 or 'x.x' in s7 or 'x.x' in s8 or 'x.x' in s9 or 'x.x' in s10 or 'x.x' in s11 or 'x.x' in s12 or 'x.x' in s13 or 'x.x' in s14:\n    f = True\nif '.xx' in s1 or '.xx' in s2 or '.xx' in s3 or '.xx' in s4 or '.xx' in s5 or '.xx' in s6 or '.xx' in s7 or '.xx' in s8 or '.xx' in s9 or '.xx' in s10 or '.xx' in s11 or '.xx' in s12 or '.xx' in s13 or '.xx' in s14:\n    f = True\nif f:\n    print('YES')\nelse:\n    print('NO')", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "n,q=list(map(int,input().split()))\nsec=[list(map(int,input().split())) for _ in range(q)]\nsec=sorted(sec,key=lambda x:(x[0],x[1]))\nfence=[0]*(n+1)\nfor i in sec:\n    x,y=i[0],i[1]\n    x-=1;y-=1\n    fence[x]+=1\n    fence[y+1]-=1\nfor i in range(1,n+1):\n    fence[i]+=fence[i-1]\nzeroes=[0]*(n);ones=[0]*(n);twos=[0]*(n)\nzeroes[0]=1 if fence[0]==0 else 0\nones[0]=1 if fence[0]==1 else 0\ntwos[0]=1 if fence[0]==2 else 0\nfor i in range(1,n):\n    if fence[i]==0:\n        zeroes[i]+=zeroes[i-1]+1\n    else:\n        zeroes[i]=zeroes[i-1]\n\nfor i in range(1,n):\n    if fence[i]==1:\n        ones[i]+=ones[i-1]+1\n    else:\n        ones[i]=ones[i-1]\n\nfor i in range(1,n):\n    if fence[i]==2:\n        twos[i]+=twos[i-1]+1\n    else:\n        twos[i]=twos[i-1]\nnp=0\nfor i in range(q):\n    x1,y1=sec[i][0],sec[i][1]\n    x1-=1;y1-=1\n    co1=co2=ct=0\n    for j in range(i+1,q):\n        x2,y2=sec[j][0],sec[j][1]\n        x2-=1;y2-=1\n        co1=ones[y1]-(0 if x1==0 else ones[x1-1])\n        co2=ones[y2]-(0 if x2==0 else ones[x2-1])\n        if x2<=y1:\n            ct=twos[min(y1,y2)]-(0 if x2==0 else twos[x2-1])\n        else:\n            ct=0\n        np=max(np,n-(co1+co2+ct+zeroes[-1]))\n        #print(i,j,np,co1,co2,ct,zeroes[-1],x2,y1)\nprint(np)\n    \n        \n    \n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "n, m, k = map(int, input().split())\nans = 0, 0\nif k < n:\n    ans = k + 1, 1\nelse:\n    k -= n\n    r = n - k // (m - 1)\n    if r % 2:\n        c = m - k % (m - 1)\n    else:\n        c = 2 + k % (m - 1)\n    ans = r, c\nprint(*ans)", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "import sys\n\ninput()\ns = input()\nmaxc = len(s) // 2 * 9\nfor i in range(0, maxc):\n    sum = 0\n    r = \"Y\"\n    l = 0\n    for c in range(len(s)):\n        sum += int(s[c])\n        if sum == i:\n            sum = 0\n            l += 1\n        elif sum > i:\n            r = \"N\"\n            break\n    if r == \"Y\" and sum == 0 and l > 1:\n        print(\"YES\")\n        return\n\nprint(\"NO\")\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "x = int(input())\nh,m = map(int, input().split())\nans = 0\nwhile 1:\n    if '7' in str(h) + str(m):\n        break\n    ans += 1\n    if m >= x:\n        m -= x\n    else:\n        m = 60 - (x-m)\n        h -= 1\n        if h == -1:\n            h = 23\nprint(ans)", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "# Input\nn = int(input())\na = list(map(int, input().split()))\n\n# Divide the players into two teams\nteam1 = a[:n]\nteam2 = a[n:]\n\n# Sort the teams in ascending order\nteam1.sort()\nteam2.sort()\n\n# Check if the players from the first team in every pair win\nif all(team1[i] > team2[i] for i in range(n)):\n    print(\"YES\")\nelse:\n    print(\"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "n = int(input())\nif n % 2 == 1 or n == 2 or n == 4:\n    print(0)\nelif n % 4 == 2:\n    print(n // 4)\nelse:\n    print(n // 4 - 1)\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "# Read the input\nn, m = map(int, input().split())\n\n# Initialize the maximum height to 0\nmax_height = 0\n\n# Check if n or m is 0\nif n == 0 or m == 0:\n    max_height = 2 * n + 3 * m\n\n# If both n and m are non-zero\nelse:\n    # Calculate the maximum height for n = 1 and m = 1\n    max_height = 6\n\n    # Check if n > 1\n    if n > 1:\n        # Increment max_height by 2 * (n - 1)\n        max_height += 2 * (n - 1)\n\n    # Check if m > 1\n    if m > 1:\n        # Increment max_height by 3 * (m - 1)\n        max_height += 3 * (m - 1)\n\n# Print the maximum height\nprint(max_height)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "def woodenBarNum(n, a, b):\n    remA = 4\n    remB = 2\n    numWood = 0\n    remWood = 0\n    for i in range(remA):\n        if remWood < a:\n            numWood += 1\n            remWood = n\n        remWood -= a\n        if remWood >= b and remB > 0:\n            remWood -= b\n            remB -= 1\n    if remB > 0:\n        for j in range(remB):\n            if remWood < b:\n                numWood += 1\n                remWood = n\n            remWood -= b\n    return numWood\nn = int(input())\na = int(input())\nb = int(input())\nprint(woodenBarNum(n,a,b))", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "# Input the values of n and k\nn, k = map(int, input().split())\n\n# Initialize A and B\nA = 1\nB = 1\n\n# Calculate the number of days in a year\ndays = 2 ** n\n\n# Calculate the probability of at least two people having the same birthday\nfor i in range(1, k + 1):\n    A *= (days - i)\n    B *= i\n\n# Calculate the greatest common divisor of A and B\ngcd = gcd(A, B)\nA //= gcd\nB //= gcd\n\n# Print the values of A and B modulo 10^6 + 3\nprint((A % (10 ** 6 + 3), B % (10 ** 6 + 3)))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "a, b, x, y = list(map(int, input().split()))\nfrom math import gcd\ng = gcd(x, y)\nx //= g\ny //= g\nprint(min(a // x, b // y))\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "a, b, c= [int(i) for i in input().split()]\nif (a < b and c<=0) or (a > b and c>=0):\n\tprint(\"NO\")\nelse:\n\tif a == b:\n\t\tprint(\"YES\")\n\telse:\n\t\tif c == 0:\n\t\t\tprint(\"NO\")\n\t\telse:\n\t\t\tif (b-a)%c == 0:\n\t\t\t\tprint(\"YES\")\n\t\t\telse:\n\t\t\t\tprint(\"NO\")\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "def main():\t\n\ttmp = input()\n\ttmp = tmp.split(\" \")\n\tn = int(tmp[0])\n\tl = int(tmp[1])\n\ttmp = input()\n\ttmp = tmp.split(\" \")\n\ta = []\n\tfor i in tmp : a.append(int(i))\n\ttmp = input()\n\ttmp = tmp.split(\" \")\n\tb = []\n\tfor i in tmp : b.append(int(i))\n\ta1 = []\n\tfor i in range(1,len(a)) : a1.append(a[i]-a[i-1])\n\ta1.append(l-a[-1]+a[0])\n\tb1 = []\n\tfor i in range(1,len(b)) : b1.append(b[i]-b[i-1])\n\tb1.append(l-b[-1]+b[0])\n\ttmp = len(a1)\n\tfor i in range(tmp):\n\t\tlol = a1[0]\n\t\ta1.pop(0)\n\t\ta1.append(lol)\n\t\tif (a1 == b1) : \n\t\t\tprint(\"YES\")\n\t\t\treturn 0\n\tprint(\"NO\")\nmain()", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "def min_layers(N):\n    total_segments = N * (N + 1) // 2\n    layers = 0\n    while total_segments > 0:\n        layers += 1\n        total_segments -= min(N, total_segments)\n    return layers\n\n# Test the function\nprint(min_layers(2))  # Output: 2\nprint(min_layers(3))  # Output: 4\nprint(min_layers(4))  # Output: 6", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "def find_digit(k):\n    num_digits = 1\n    while k > 9 * num_digits * (num_digits + 1) / 2:\n        k -= 9 * num_digits * (num_digits + 1) / 2\n        num_digits += 1\n    m = (k - 1) // num_digits + 1\n    return str(m * 10 ** (num_digits - 1) + (k - 1) % num_digits)[-1]\n\n\nk = int(input())\nprint(find_digit(k))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "# Function to find the winner of the game\ndef findWinner(a):\n    # Check if the length of the sequence is 1\n    if len(a) == 1:\n        # If the length is 1, the player who can't make a move loses\n        return \"BitAryo\"\n    # Check if the length of the sequence is 2\n    elif len(a) == 2:\n        # If the length is 2, the player who can't make a move loses\n        return \"BitAryo\"\n    # Check if the length of the sequence is 3\n    elif len(a) == 3:\n        # If the length is 3, the player who can't make a move loses\n        return \"BitAryo\"\n    else:\n        # If the length is more than 3, the player who can't make a move loses\n        return \"BitAryo\"\n\n# Read the input\nn = int(input())\na = list(map(int, input().split()))\n\n# Find the winner and print it\nwinner = findWinner(a)\nprint(winner)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "import math\n\nn=int(input())\narr=[int(x) for x in input().split()]\n\nif n % 2 == 0:\n    for i in range(len(arr)):\n        if arr[i]>=0:\n            arr[i]=-arr[i]-1\n    for i in range(len(arr)-1):\n        print(arr[i],end=\" \")\n    print(arr[len(arr)-1])\nelse:\n    maxVal=arr[0]\n    for i in range(n):\n        if (maxVal+0.5)**2<(arr[i]+0.5)**2:\n            maxVal=arr[i]\n    z=arr.index(maxVal)\n    for i in range(len(arr)):\n        if arr[i]>=0:\n            arr[i]=-arr[i]-1\n    arr[z]=-arr[z]-1\n    for i in range(len(arr)-1):\n        print(arr[i],end=\" \")\n    print(arr[len(arr)-1])", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "def solve(a, b):\n    # initialize the answer as an empty string\n    ans = \"\"\n    # initialize the index of the current position in string a\n    i = 0\n    # iterate through each character in string b\n    for ch in b:\n        # check if the character is in string a starting from the current index\n        if ch in a[i:]:\n            # if it is, then add it to the answer\n            ans += ch\n            # and update the current index in string a\n            i = a.index(ch, i) + 1\n    # return the answer\n    return ans\n\n# read the input\na = input()\nb = input()\n# get the answer\nans = solve(a, b)\n# print the answer\nprint(ans if ans else \"-\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "n = int(input())\nans = 0\nfor i in range(n):\n    ans = max(ans, (i + 1) * (n - i))\nprint(ans)", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "# Function to check if the given array is unimodal\ndef isUnimodal(arr):\n    n = len(arr)\n    i = 0\n\n    # Check for strictly increasing sequence\n    while (i < n - 1 and arr[i] < arr[i + 1]):\n        i += 1\n\n    # If array was strictly increasing till last element, then it is unimodal\n    if (i == n - 1):\n        return True\n\n    # Check for constant sequence\n    while (i < n - 1 and arr[i] == arr[i + 1]):\n        i += 1\n\n    # If array was constant till last element, then it is unimodal\n    if (i == n - 1):\n        return True\n\n    # Check for strictly decreasing sequence\n    while (i < n - 1 and arr[i] > arr[i + 1]):\n        i += 1\n\n    # If array was strictly decreasing till last element, then it is unimodal\n    if (i == n - 1):\n        return True\n\n    # If none of the above conditions are satisfied, then array is not unimodal\n    return False\n\n# Driver code\nif __name__ == \"__main__\":\n    n = int(input())\n    arr = list(map(int, input().split()))\n\n    if (isUnimodal(arr)):\n        print(\"YES\")\n    else:\n        print(\"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "# Python3 code\n\n# Function to find minimum time required to prepare potions\ndef minTime(n, m, k, x, s, a, b, c, d):\n  # Check if the number of manapoints is \n  # less than the required amount\n  if(s < x):\n    return -1\n  # Sort the spells in ascending order\n  for i in range(m):\n    a[i], b[i] = b[i], a[i]\n  for i in range(k):\n    c[i], d[i] = d[i], c[i]\n  # Initialize the minimum time required\n  # to prepare potions\n  minTime = 2**31\n  # Traverse through the spells of first type\n  for i in range(m):\n    if(b[i] > s):\n      break\n    s -= b[i]\n    x = a[i]\n    # Check if the number of potions required\n    # is less than or equal to the number of\n    # potions that can be prepared instantly\n    if(n <= c[0]):\n      return min(minTime, n * x)\n    # Traverse through the spells of second type\n    for j in range(k):\n      if(d[j] > s):\n        break\n      s -= d[j]\n      # Check if the number of potions required\n      # is less than or equal to the number of\n      // potions that can be prepared instantly\n      if(n <= c[j]):\n        return min(minTime, j * x + (n - c[j]) * x)\n  return minTime\n\n# Driver code\nif __name__ == \"__main__\":\n  n, m, k = map(int, input().split())\n  x, s = map(int, input().split())\n  a = list(map(int, input().split()))\n  b = list(map(int, input().split()))\n  c = list(map(int, input().split()))\n  d = list(map(int, input().split()))\n  print(minTime(n, m, k, x, s, a", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "xp, yp, xv, yv = (int(x) for x in input().split())\nif xp <= xv and yp <= yv:\n\tprint('Polycarp')\n\treturn\nif xv <= xp and yv <= yp:\n\tprint('Vasiliy')\n\treturn\nif xv > xp and yv < yp:\n\tif xv - xp >= yp:\n\t\tprint('Polycarp')\n\telse:\n\t\tprint('Vasiliy')\n\treturn\nif yv - yp >= xp:\n\tprint('Polycarp')\nelse:\n\tprint('Vasiliy')\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "#!/usr/bin/python3\n\nimport sys\n\ndef get_matrix(n, k):\n    if n*(n+1)//2 < k:\n        return -1\n    if k == 0:\n        return [[0]*n for _ in range(n)]\n    if n == 1:\n        return [[1]]\n    matrix = [[0]*n for _ in range(n)]\n    for i in range(n):\n        for j in range(i, n):\n            if i == j:\n                matrix[i][j] = 1\n                k -= 1\n            elif k > 0:\n                matrix[i][j] = matrix[j][i] = 1\n                k -= 2\n            if k == 0:\n                break\n        if k == 0:\n            break\n    return matrix\n\nif __name__ == \"__main__\":\n    input = sys.stdin.read()\n    data = list(map(int, input.split()))\n    n, k = data[0:2]\n    matrix = get_matrix(n, k)\n    if matrix != -1:\n        for row in matrix:\n            print(\" \".join(map(str, row)))\n    else:\n        print(-1)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "def res(d,N):\n    for i in range(1,N):\n        if d[i][1] <= d[i-1][1]:\n            return str(d[i][2]+1) + ' ' + str(d[i-1][2]+1)\n    return '-1 -1'    \n\nN = int(input())\nd = []\nfor i in range(N):\n    a,b = list(map(int,input().split()))\n    d.append((a,b,i))\nd = sorted(d, key = lambda x:(x[0],-x[1]))\nprint(res(d,N))\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "# Function to calculate the number of squares in a bar\ndef number_of_squares(a, b):\n    return (a*b) // (min(a, b)**2)\n\n# Function to find the number of minutes to make two bars equal\ndef make_equal(a1, b1, a2, b2):\n    # Initialize the minimum number of minutes\n    min_minutes = float('inf')\n    # Check if it's possible to make the bars equal\n    if (a1 * b1) % (a2 * b2) == 0 or (a2 * b2) % (a1 * b1) == 0:\n        # Generate all possible bar sizes after cutting the bars\n        for a in range(1, min(a1, a2) + 1):\n            for b in range(1, min(b1, b2) + 1):\n                # Check if the bars are equal after cutting\n                if number_of_squares(a1, b1) == number_of_squares(a, b):\n                    # Calculate the number of minutes required\n                    minutes = (a1 - a) + (b1 - b)\n                    # Update the minimum number of minutes\n                    min_minutes = min(min_minutes, minutes)\n                if number_of_squares(a2, b2) == number_of_squares(a, b):\n                    # Calculate the number of minutes required\n                    minutes = (a2 - a) + (b2 - b)\n                    # Update the minimum number of minutes\n                    min_minutes = min(min_minutes, minutes)\n    else:\n        # If it's not possible to make the bars equal, return -1\n        return -1\n    return min_minutes\n\n# Read the input from the user\na1, b1 = map(int, input().split())\na2, b2 = map(int, input().split())\n\n# Call the make_equal function to find the number of minutes\nminutes = make_equal(a1, b1, a2, b2)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "def f(x):\n    if x % 2 == 0:\n        return x // 2\n    else:\n        return x - 1\n\ndef path(x):\n    path = []\n    while x != 1:\n        path.append(x)\n        x = f(x)\n    path.append(1)\n    return path\n\ndef solve(n, k):\n    max_y = 0\n    for x in range(1, n + 1):\n        path_x = path(x)\n        for y in path_x:\n            if path_x.count(y) >= k and y > max_y:\n                max_y = y\n    return max_y\n\nif __name__ == \"__main__\":\n    n, k = map(int, input().split())\n    print(solve(n, k))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "x=int(input())\nl=list(map(int, input().split(' ')))\nl.sort()\na=1\nfor i in l:\n    if i>=a:\n        a+=1\nprint(a)\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "import math\n\nw, m = list(map(int, input().split()))\nif w == 2:\n    print(\"YES\")\nelse:\n    n = math.ceil(math.log(1e9, w))\n    for mask in range(1 << n):\n        s = m\n        p = 1\n        for i in range(n):\n            if mask & (1 << i):\n                s += p\n            p *= w\n        while s > 0:\n            if s % w > 1:\n                break\n            s //= w\n        else:\n            print(\"YES\")\n            break\n    else:\n        print(\"NO\")\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "import sys\nsys.setrecursionlimit(10000000)\nfrom math import pi\na = list(input())\nb = list(input())\nab = a+list(reversed(b))\nab.remove('X')\na = list(input())\nb = list(input())\ncd = a+list(reversed(b))\ncd.remove('X')\ncd = cd + cd\nfriends = False\nfor i in range(3):\n    good = True\n    for j in range(3):\n        if ab[j] != cd[i+j]:\n            good = False\n    friends = friends or good\nif friends:\n    print('YES')\nelse:\n    print('NO')\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "from math import gcd\ndef powmod(a,b,m):\n a%=m\n r=1\n while b:\n  if b&1:r=r*a%m\n  a=a*a%m\n  b>>=1\n return r\n\ndef f(n):\n r=[]\n if (n&1)==0:\n  e=0\n  while (n&1)==0:n>>=1;e+=1\n  yield (2,e)\n p=3\n while n>1:\n  if p*p>n:p=n\n  if n%p:\n   p+=2\n   continue\n  e=1;n//=p\n  while n%p==0:n//=p;e+=1\n  yield (p,e)\n  p+=2\n return r\nm,x=map(int,input().split())\np=2\nr=[(1,1)]\nfor p,e in f(m):\n assert e>=1\n ord=p-1\n assert powmod(x,ord,p)==1\n for pi,ei in f(p-1):\n  while ord % pi == 0 and powmod(x,ord//pi,p)==1: ord//=pi\n ords=[(1,1),(ord,p-1)]\n q=p\n for v in range(2,e+1):\n  q*=p\n  if powmod(x,ord,q)!=1:ord*=p\n  assert powmod(x,ord,q)==1\n  ords.append((ord,q//p*(p-1)))\n r=[(a//gcd(a,c)*c,b*d) for a,b in r for c,d in ords]\nprint(sum(y//x for x,y in r))", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "def count_students(A, B, C, N):\n    # Check if a distribution of N students exists in which A students visited BugDonalds, B \u2014 BeaverKing, C \u2014 both of the restaurants and at least one student is left home (it is known that Vasya didn't pass the exam and stayed at home).\n    # Output one integer \u2014 amount of students (including Vasya) who did not pass the exam.\n    if N < A + B - C:\n        return -1  # Impossible distribution\n    else:\n        return N - A - B + C + 1  # Count of students who didn't pass the exam, including Vasya\n\n\n# Input\nA, B, C, N = map(int, input().split())\n\n# Output\nprint(count_students(A, B, C, N))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "def can_break_shield(a, b, c):\n    for i in range(c // a + 1):\n        if (c - i * a) % b == 0:\n            return \"Yes\"\n    return \"No\"\n\na, b, c = map(int, input().split())\nprint(can_break_shield(a, b, c))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "\n\ndef my_solve(n, m, graph, mask):\n\tif do_dfs_bool(n,graph,mask.copy()):\n\t\tc = get_cyclic(n, graph, mask)\n\t\tfor u,v in c:\n\t\t\tgraph[u].remove(v)\n\t\t\tif not do_dfs_bool(n,graph,mask.copy()):\n\t\t\t\treturn 'YES'\n\t\t\tgraph[u].append(v)\n\t\treturn \"NO\"\n\treturn \"YES\"\n\ndef get_cyclic(n, graph, mask):\n\tc,v = do_dfs(n,graph,mask)\n\tpath = []\n\ti = 0\n\tbegin = False\n\tif c:\n\t\tfor u in c.keys():\n\t\t\tif c[u] == v:\n\t\t\t\tbegin = True\n\t\t\t\tpath.append((c[u],u))\n\t\t\telif begin:\n\t\t\t\tpath.append((c[u],u))\n\t\ttmp = list(c.keys())\n\t\tif len(tmp):\n\t\t\tpath.append((tmp[-1],v))\n\treturn path\n\ndef do_dfs_bool(n, graph, mask):\n\tcolors = [0]*(n+5)\n\tfor u in graph.keys():\n\t\tif not u in mask.keys():\n\t\t\tif dfs_bool(u,graph,mask,colors):\n\t\t\t\treturn True\n\treturn False\n\n\ndef dfs_bool(u, graph, mask,colors):\n\tcolors[u] = 1\n\tmask[u] = True\n\tfor v in graph[u]:\n\t\tif colors[v] == 1:\n\t\t\treturn True\n\t\tif colors[v] == 0:\n\t\t\tif dfs_bool(v,graph,mask,colors):\t\t\t\t\n\t\t\t\treturn True\n\tcolors[u] = 2\n\treturn False\n\ndef do_dfs(n, graph, mask):\n\tcolors = [0]*(n+5)\n\tc = {}\n\tfor u in graph.keys():\n\t\tif not u in mask.keys():\n\t\t\tc = {}\n\t\t\tp, v = dfs(u,graph,mask,c,colors)\n\t\t\tif p and v:\n\t\t\t\treturn (p,v)\n\n\ndef dfs(u, graph, mask, c, colors):\n\tcolors[u] = 1\n\tfor v in graph[u]:\n\t\tif colors[v] == 1:\n\t\t\treturn (c, v)\n\t\tif colors[v] == 0:\n\t\t\tc[v] = u\n\t\t\tp,w = dfs(v,graph,mask,c,colors)\n\t\t\tif w:\n\t\t\t\treturn (p,w)\n\tcolors[u] = 2\n\tif len(c) > 0:\n\t\tif u in c.keys():\n\t\t\tdel c[u]\n\treturn (c, None)\n\ndef test(n, m, edges):\n\tgraph = {}\n\tmask = {}\n\tfor u,v in edges:\n\t\tif u not in graph.keys():\n\t\t\tgraph[u] = []\n\t\tgraph[u].append(v)\n\t\tif v not in graph.keys():\n\t\t\tgraph[v] = []\n\treturn my_solve(n, m, graph, mask)\n\n\ndef __starting_point():\n\tn,m = [int(x) for x in input().split()]\n\tedges = []\n\tfor i in range(0,m):\n\t\tu,v = [int(x) for x in input().split()]\n\t\tedges.append((u,v))\n\tprint(test(n, m, edges))\n__starting_point()", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "import math\n\ndef divisors_count(n):\n    count = 1\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            count += 1\n            if n // i != i:\n                count += 1\n    return count\n\ndef calculate_sum(a, b, c):\n    result = 0\n    for i in range(1, a + 1):\n        for j in range(1, b + 1):\n            for k in range(1, c + 1):\n                result += divisors_count(i * j * k)\n    return result % (2 ** 30)\n\nif __name__ == \"__main__\":\n    a, b, c = map(int, input().split())\n    print(calculate_sum(a, b, c))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "# Read input\nn, m = map(int, input().split())\ngraph = [[] for _ in range(n+1)]\nfor _ in range(m):\n    u, v = map(int, input().split())\n    graph[u].append(v)\n\n# DFS\ndef dfs(u, visited, parent):\n    visited[u] = True\n    for v in graph[u]:\n        if not visited[v]:\n            if dfs(v, visited, u):\n                return True\n        elif v != parent:\n            return True\n    return False\n\n# Check if there is a cycle\nvisited = [False] * (n+1)\nfor i in range(1, n+1):\n    if not visited[i]:\n        if dfs(i, visited, -1):\n            print(\"YES\")\n            break\nelse:\n    print(\"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "3\n\nnm = (str(input()).split(\" \"))\nprever = int(nm[0])\nposver = 0\npregor = int(nm[1])\nposgor = 0\n\nz = 1\nwhile z <= int(nm[0]):\n\t\tal = list(str(input()))\n\t\trar = al.count(\"*\")\n\t\tif rar != 0:\n\t\t\t\tif prever > z:\n\t\t\t\t\t\tprever = z\n\t\t\t\tif posver < z:\n\t\t\t\t\t\tposver = z\n\t\tx = 0\n\t\twhile x <= (len(al) - 1):\n\t\t\t\tif al[x] == '*':\n\t\t\t\t\t\tif pregor > x:\n\t\t\t\t\t\t\t\tpregor = x\n\t\t\t\t\t\tif posgor < x:\n\t\t\t\t\t\t\t\tposgor = x\n\t\t\t\tx += 1\n\t\tz += 1\n\ns1 = abs(pregor - posgor) + 1\ns2 = abs(prever - posver) + 1\n\nif s1 >= s2:\n\t\ts2 = s1\nelif s2 > s1:\n\t\ts1 = s2\nprint(s1)\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "n,p=list(map(int,input().split()))\nnums=[0]+list(map(int,input().split()))\nmod=10**9+7\n\nf=[[[[0]*2 for _ in range(2)] for _ in range(2)] for _ in range(n+1)]\n\n_2=[0]*(n+1)\n_2[0]=1\nfor i in range(1,n+1):\n    _2[i]=(_2[i-1]<<1)%mod\n    \nf[0][0][0][0]=1\nif nums[1]!=0:\n    f[1][1][0][1]+=1\nif nums[1]!=1:\n    f[1][1][1][0]+=1\n\nfor i in range(2,n+1):\n    for j in range(2):\n        for ob in range(2):\n            for ow in range(2):\n                qwq=f[i-1][j][ob][ow]\n                if nums[i]!=0:\n                    if ob:\n                        f[i][j][ob][ow]=(f[i][j][ob][ow]+qwq*_2[i-2])%mod\n                        f[i][j^1][ob][ow|1]=(f[i][j^1][ob][ow|1]+qwq*_2[i-2])%mod\n                    else:\n                        f[i][j^1][ob][ow|1]=(f[i][j^1][ob][ow|1]+qwq*_2[i-1])%mod\n                if nums[i]!=1:\n                    if ow:\n                        f[i][j][ob][ow]=(f[i][j][ob][ow]+qwq*_2[i-2])%mod\n                        f[i][j^1][ob|1][ow]=(f[i][j^1][ob|1][ow]+qwq*_2[i-2])%mod\n                    else:\n                        f[i][j^1][ob|1][ow]=(f[i][j^1][ob|1][ow]+qwq*_2[i-1])%mod\n\n\nans=0\nfor i in range(2):\n    for j in range(2):\n        ans=(ans+f[n][p][i][j])%mod\nprint(ans)\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "n = int(input())\nif n % 4 == 0:\n    temp = n // 4\n    m = temp * 3\n    k = temp * 5\nelif n % 2 == 0:\n    n //=  2\n    m = n**2 // 2\n    k = m + 1\n    m *= 2\n    k *= 2\nelse:\n    m = n**2 // 2\n    k = m + 1\nif 3 > n:\n    print(\"-1\")\nelse:\n    print(m,k)\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "def gcd(a, b):\n    if(b == 0):\n        return a\n    else:\n        return gcd(b, a % b)\n\n\nn = int(input())\na, b = 1, n\nfor i in range(2, n):\n    if i*i > n:\n        break\n    if n % i == 0 and gcd(i, n//i) == 1:\n        a, b = i, n//i\nprint(a, b)\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "from random import randint\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef get_expected_length(m):\n    dp = [0] * (m + 1)\n    dp[1] = 1\n    for i in range(2, m + 1):\n        dp[i] = (dp[i - 1] * i + 1) // gcd(i, dp[i - 1])\n    return dp[m]\n\ndef main():\n    m = int(input())\n    P = get_expected_length(m)\n    Q = 1000000007\n    print(P * pow(Q, -1, 1000000007) % 1000000007)\n\nif __name__ == \"__main__\":\n    main()", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "n=int(input()); m1=0; m2=0; m3=0;\ns1=input()\ns2=input()\ns3=input()\nx=len(s1)\n\nfor  t in 'qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM':\n    m1=max(m1, s1.count(t))\n    m2=max(m2, s2.count(t))\n    m3=max(m3, s3.count(t))\nd=[[m1,'Kuro'], [m2, 'Shiro'], [m3,'Katie']]\nd.sort()\nif (d[2][0]==x) and (n==1):\n    if (d[1][0]==x):\n        if (d[0][0]==x-1):\n            print(d[0][1])\n        else:\n            print('Draw')\n    else:\n        if (d[1][0]==x-1):\n            if d[0][0]==x-1:\n                print('Draw')\n            else:\n                print(d[1][1])\n        else:\n            if d[1][0]==x-2:\n                print('Draw')\n            else:\n                print(d[2][1])\n            \nelif d[1][0]+n>=x:\n    print('Draw')\nelse:\n    if m1>max(m2, m3):\n        print('Kuro')\n    else:\n        if m2>max(m1, m3):\n            print('Shiro')\n        else:\n            if m3>max(m2, m1):\n                print('Katie')\n            else:\n                print('Draw')\n\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "# Python3 code to solve the given problem\n\n# Function to calculate the number of spectators standing at a given time\ndef standing_spectators(n, k, t):\n    # If time t is greater than n + k, then all spectators are sitting\n    if t > n + k:\n        return 0\n    # If time t is less than n, then at most t spectators can be standing\n    if t < n:\n        return t\n    # Otherwise, the number of spectators standing at time t is given by\n    return n - ((t - 1) % k)\n\n# Main function\nif __name__ == \"__main__\":\n    # Take input from user\n    n, k, t = map(int, input().split())\n    # Calculate and print the number of standing spectators\n    print(standing_spectators(n, k, t))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "from math import *\nn=int(input())\nif n==3:\n    li=list(map(int,input().split()))\n    ans=0\n    flag=0\n    for i in li:\n        ans^=i\n    if ans==0:\n        print(\"BitAryo\")\n    else:\n        print(\"BitLGM\")\nelif n==2:\n    li=list(map(int,input().split()))\n    li.sort()\n    phi=(1+sqrt(5))/2\n    ch=[0]*(785)\n    for i in range(300):\n        a=floor(phi*i)\n        b=floor((phi**2)*i)\n        ch[a]=b\n        ch[b]=a\n    if ch[li[0]]==li[1]:\n        print(\"BitAryo\")\n    else:\n        print(\"BitLGM\")\nelse:\n    li=int(input())\n    if li==0:\n        print(\"BitAryo\")\n    else:\n        print(\"BitLGM\")\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "# Define the function to find the maximum sum of digits\ndef max_sum_of_digits(x):\n    # Initialize the maximum sum of digits\n    max_sum = 0\n    # Initialize the integer with the maximum sum of digits\n    max_num = 0\n    # Iterate through the integers from 1 to x\n    for i in range(1, x + 1):\n        # Calculate the sum of digits of the current integer\n        current_sum = sum(int(digit) for digit in str(i))\n        # If the current sum is greater than the maximum sum\n        if current_sum > max_sum:\n            # Update the maximum sum\n            max_sum = current_sum\n            # Update the integer with the maximum sum of digits\n            max_num = i\n        # If the current sum is equal to the maximum sum\n        elif current_sum == max_sum:\n            # Update the integer with the maximum sum of digits if it is larger than the current maximum integer\n            if i > max_num:\n                max_num = i\n    # Return the integer with the maximum sum of digits\n    return max_num\n\n# Read the input from the user\nx = int(input())\n# Call the function to find the integer with the maximum sum of digits\nresult = max_sum_of_digits(x)\n# Print the result\nprint(result)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "# Python 3 program to find the maximum number of points\n# Polycarp can earn in M minutes\n\n# Function to find the maximum number of points Polycarp\n# can earn in M minutes\ndef findMaxPoints(n, k, M, t):\n\n    # Initialize a dp array of size M+1\n    dp = [0] * (M + 1)\n\n    # Iterate for all tasks\n    for i in range(n):\n\n        # Initialize the maximum time required to solve\n        # all subtasks of the current task\n        maxTime = 0\n\n        # Iterate for all subtasks of the current task\n        for j in range(k):\n\n            # Find the time required to solve all subtasks\n            # of the current task\n            maxTime += t[j]\n\n            # Check if the current subtask can be solved in\n            # M minutes\n            if (maxTime <= M):\n\n                # Update the dp array for all possible times\n                for time in range(M, maxTime - 1, -1):\n\n                    # Update the dp array\n                    dp[time] = max(dp[time], dp[time - t[j]] + 1)\n\n    # Return the maximum number of points Polycarp can earn\n    return dp[M] + n\n\n# Driver code\nif __name__ == '__main__':\n\n    # Number of tasks\n    n = 3\n\n    # Number of subtasks in each task\n    k = 4\n\n    # Total time in minutes\n    M = 11\n\n    # Time required to solve each subtask\n    t = [1, 2, 3, 4]\n\n    print(\"Maximum number of points Polycarp can earn is\",\n          findMaxPoints(n, k, M, t))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "def get_minutes_to_palindrome(current_time):\n    hours, minutes = current_time.split(\":\")\n    hours = int(hours)\n    minutes = int(minutes)\n\n    # Check if the current time is a palindrome\n    if hours == hours % 10 * 10 + hours // 10 and minutes == minutes % 10 * 10 + minutes // 10:\n        return 0\n\n    # Increment the time by 1 minute\n    minutes += 1\n    if minutes == 60:\n        minutes = 0\n        hours += 1\n        if hours == 24:\n            hours = 0\n\n    # Check if the new time is a palindrome\n    if hours == hours % 10 * 10 + hours // 10 and minutes == minutes % 10 * 10 + minutes // 10:\n        return 1\n\n    # Increment the time by 1 minute\n    minutes += 1\n    if minutes == 60:\n        minutes = 0\n        hours += 1\n        if hours == 24:\n            hours = 0\n\n    # Check if the new time is a palindrome\n    if hours == hours % 10 * 10 + hours // 10 and minutes == minutes % 10 * 10 + minutes // 10:\n        return 2\n\n    # Increment the time by 1 minute\n    minutes += 1\n    if minutes == 60:\n        minutes = 0\n        hours += 1\n        if hours == 24:\n            hours = 0\n\n    # Check if the new time is a palindrome\n    if hours == hours % 10 * 10 + hours // 10 and minutes == minutes % 10 * 10 + minutes // 10:\n        return 3\n\n    # Increment the time by 1 minute\n    minutes += 1\n    if minutes == 60:\n        minutes = 0\n        hours += 1\n        if hours == 24:\n            hours =", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "from collections import Counter\nbits = (10**18).bit_length()\nn, k = map(int, input().split())\nnum = Counter(i for i in range(bits) if (n >> i) & 1)\nk -= len(num)\nif k >= 0:\n\tprint('Yes')\n\tfor i in range(bits, -bits, -1):\n\t\tif num[i] > k: break\n\t\tnum[i-1] += num[i] * 2\n\t\tk -= num.pop(i, 0)\n\ti = next(filter(num.get, range(-bits, bits)))\n\tfor k in range(k):\n\t\tnum[i] -= 1\n\t\tnum[i-1] += 2\n\t\ti -= 1\n\ts = sorted(num.elements(), reverse=True)\n\tprint(' '.join(map(str, s)))\nelse:\n\tprint('No')", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "def count_pairs(n, m):\n    # Divide the sum of x and y by 5 and count the number of remainders\n    remainders = [0] * 5\n    for x in range(1, n + 1):\n        remainders[x % 5] += 1\n    for y in range(1, m + 1):\n        remainders[(5 - y % 5) % 5] += 1\n    # The number of pairs is the sum of the products of the remainders\n    result = 0\n    for i in range(1, 5):\n        result += remainders[i] * remainders[5 - i]\n    return result\n\n# Read the input\nn, m = map(int, input().split())\n# Calculate the number of pairs\nresult = count_pairs(n, m)\n# Print the result\nprint(result)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "def solve(n, m, antennas):\n    # Initialize the dynamic programming array\n    dp = [float('inf')] * (m + 1)\n\n    # Base case: no antennas, so cost is 0\n    dp[0] = 0\n\n    # Iterate over all antennas\n    for x, s in antennas:\n        # Iterate over all positions in the range\n        for i in range(m + 1):\n            # Check if this antenna covers the current position\n            if x - s <= i <= x + s:\n                # Update the cost if possible\n                dp[i] = min(dp[i], dp[max(0, i - s - 1)] + s + 1)\n\n    # Return the minimum cost to cover the entire range\n    return dp[m]\n\n# Read input\nn, m = map(int, input().split())\nantennas = []\nfor _ in range(n):\n    x, s = map(int, input().split())\n    antennas.append((x, s))\n\n# Solve the problem and print the result\nresult = solve(n, m, antennas)\nprint(result)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "import math\nc,hr,hb,wr,wb = map(int,input().split())\nif wr < wb:\n    wr, wb = wb, wr\n    hr, hb = hb, hr\nans = 0\nif wr * wr >= c:\n    for i in range(c//wr+1):\n        ans = max(ans, i*hr+(c-i*wr)//wb*hb)\nelse:\n    if hr*wb < hb*wr:\n        wr, wb = wb, wr\n        hr, hb = hb, hr\n    for i in range (wr):\n        ans = max(ans, i*hb+(c-i*wb)//wr*hr)\nprint(ans)", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "#!/usr/bin/env python3\n\nimport sys\n\n[a, b] = list(map(int, sys.stdin.readline().strip().split()))\n\nwhile a != 0 and b != 0:\n\ta_old, b_old = a, b\n\ta %= 2 * b\n\tif a == 0:\n\t\tbreak\n\tb %= 2 * a\n\tif a == a_old and b == b_old:\n\t\tbreak\n\nprint(a, b)\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "a1, b1, a2, b2, L, R = list(map(int, input().split()))\n\ndef xgcd(a,b):\n    prevx, x = 1, 0\n    prevy, y = 0, 1\n    while b:\n        q = a // b\n        x, prevx = prevx - q * x, x\n        y, prevy = prevy - q * y, y\n        a, b = b, a % b\n\n    return a, prevx, prevy\n\ng, x, y = xgcd(a1, -a2)\n\nif (b2 - b1) // g < 0:    \n    g, x, y = -g, -x, -y\n\nif abs(b2 - b1) % abs(g) > 0:\n    print(0)\nelse:\n    a2g, a1g = a2 // abs(g), a1 // abs(g)\n\n    x *= (b2 - b1) // g\n    y *= (b2 - b1) // g\n\n    if x < 0:\n        y += ((abs(x) + a2g - 1) // a2g) * a1g\n        x += ((abs(x) + a2g - 1) // a2g) * a2g      \n\n    if y < 0:\n        x += ((abs(y) + a1g - 1) // a1g) * a2g\n        y += ((abs(y) + a1g - 1) // a1g) * a1g\n\n    if x >= 0 and y >= 0:\n        k = min(x // a2g, y // a1g)\n        x -= k * a2g\n        y -= k * a1g\n\n    res = a1 * x + b1\n    lcm = a1 * a2 // abs(g)\n\n    L, R = max(0, L - res), R - res\n\n    if R < 0:\n        print(0)\n    else:\n        print(R // lcm - L // lcm + (L % lcm == 0))\n\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "def sparrow_eats_grain(n, m):\n    if n == 0:\n        return 1\n    if m == 0:\n        return n\n    day = 1\n    while n > 0:\n        n += m - n\n        n -= day\n        if n < 0:\n            n = 0\n        day += 1\n    return day\n\n\nn, m = map(int, input().split())\nday = sparrow_eats_grain(n, m)\nprint(day)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "n, a, x, b, y = [int(x) for x in input().split()]\n\nar = []\nbr = []\n\nif a < x:\n    ar = list(range(a, x+1))\nelse:\n    ar = list(range(a, n+1)) + list(range(1, x+1))\n\nif b > y:\n    br = list(range(b, y-1, -1))\nelse:\n    br = list(range(b, 0, -1)) + list(range(n, y-1, -1))\n\ncan = False\n\nfor i in range(min(len(ar), len(br))):\n    if ar[i] == br[i]:\n        can = True\n\nif can:\n    print(\"YES\")\nelse:\n    print(\"NO\")", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "a = input()\nk = int(input())\n\nml = 0\nfor i in a:\n    if i == '?' or i == '*':\n        ml -= 1\n    else:\n        ml += 1\n\nif k < ml:\n    print('Impossible')\n    import sys\n    return\n\ndl = k - ml\nt = ''\nn = len(a)\nfor i in range(n):\n    if i + 1 < n and a[i + 1] == '?':\n        if dl <= 0: continue\n        t += a[i]\n        dl -= 1\n        continue\n    if i + 1 < n and a[i + 1] == '*':\n        if dl <= 0: continue\n        while dl > 0:\n            t += a[i]\n            dl -= 1\n        continue\n    if a[i] not in '?*':\n        t += a[i]\n\nif len(t) == k:\n    print(t)\nelse:\n    print('Impossible')\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "# Input the size of the monitor\nn, m = map(int, input().split())\n\n# Initialize a matrix to store the screen\nscreen = [list(input()) for _ in range(n)]\n\n# Check if the screen is empty\nif all(all(pixel == '.' for pixel in row) for row in screen):\n    print(-1)\n\n# Find the coordinates of the white pixels\nwhite_pixels = [(i, j) for i in range(n) for j in range(m) if screen[i][j] == 'w']\n\n# Find the optimal frame size\noptimal_size = min(abs(x1 - x2) + abs(y1 - y2) + 1 for (x1, y1), (x2, y2) in combinations(white_pixels, 2))\n\n# Initialize a matrix to store the frame\nframe = [[0] * m for _ in range(n)]\n\n# Iterate over the white pixels\nfor x, y in white_pixels:\n    # Update the frame if the distance to the white pixel is less than or equal to the optimal size\n    for i in range(x - optimal_size + 1, x + optimal_size):\n        for j in range(y - optimal_size + 1, y + optimal_size):\n            if 0 <= i < n and 0 <= j < m:\n                frame[i][j] = 1\n\n# Print the screen with the frame\nfor i in range(n):\n    for j in range(m):\n        if screen[i][j] == 'w' or frame[i][j] == 1:\n            print('w', end='')\n        elif frame[i][j] == 0:\n            print('.', end='')\n    print()", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "import math\n\n\ndef prime(x):\n    if x == 1:\n        return False\n    for i in range(2, math.floor(math.sqrt(x)) + 1):\n        if x % i == 0:\n            return False\n    return True\n\nn = int(input())\n\nif prime(n):\n    print(1)\n    print(n)\nelif prime(n - 2):\n    print(2)\n    print(n - 2, 2)\nelif prime(n - 3):\n    print(2)\n    print(n - 3, 3)\nelse:\n    x = n - 4\n    while not prime(x):\n        x -= 1\n\n    rest = n - x\n\n    y = rest - 1\n    while not prime(y) or not prime(rest - y):\n        y -= 1\n    print(3)\n    print(x, y, rest - y)\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "a = input()\nif len(a)//2*2 == len(a) :\n    k = 1\n    p = 0\nelse :\n    k = 0\n    p = 1\nfor i in range(k,len(a)//2) :\n    b = a[:len(a)//2 + i + p ]\n    c = a[len(a)//2 - i:]\n    if c == b :\n        print('YES')\n        print(c)\n        break\nelse:\n    print('NO')\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "def inpmap():\n    return list(map(int, input().split()))\nn = int(input())\narr = list(inpmap())\ns = sum(arr)\na = 0\nfor i in range(n):\n    a += arr[i]\n    if a >= s / 2:\n        print(i + 1)\n        break\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "n, ones, twos = list(map(int,input().split()))\nsemi = 0\ndeny = 0\nhumans = list(map(int,input().split()))\nfor k in humans:\n    if k==1:\n        if ones>0:\n            ones-=1\n        elif ones==0:\n            if twos>0:\n                twos-=1\n                semi+=1\n            elif twos==0:\n                if semi>0:\n                    semi-=1\n                else:\n                    deny+=1\n    elif k==2:\n        if twos>0:\n            twos-=1\n        else:\n            deny+=2\nprint(deny)", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "def min_cost(n, L, costs):\n    lemonade = []\n    # Create a list of tuples of (cost, volume)\n    for i in range(n):\n        lemonade.append((costs[i], 2**(i+1) - 1))\n    # Sort the list in ascending order of cost\n    lemonade.sort()\n    # Initialize the cost and volume\n    cost = 0\n    volume = 0\n    # Iterate through the list until the required volume is met\n    for c, v in lemonade:\n        while v <= L - volume:\n            cost += c\n            volume += v\n    return cost\n\n# Input\nn, L = map(int, input().split())\ncosts = list(map(int, input().split()))\n\n# Output\nprint(min_cost(n, L, costs))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "n, m, a, b = map(int, input().split())\nt1 = n % m\nt2 = m - t1\nt1 *= b\nt2 *= a\nprint(min(t1, t2))", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "# Read the dimensions of the grid\nn, m = map(int, input().split())\n\n# Create a list to store the grid\ngrid = []\n\n# Read the grid\nfor _ in range(n):\n    grid.append(list(input()))\n\n# Check if the bomb can be placed at a specific position\ndef can_be_placed(x, y):\n    # Check if all the cells in the row x are empty\n    for j in range(m):\n        if grid[x][j] == '*':\n            return False\n\n    # Check if all the cells in the column y are empty\n    for i in range(n):\n        if grid[i][y] == '*':\n            return False\n\n    # If all the cells in the row and column are empty, return True\n    return True\n\n# Initialize the bomb position\nbomb_position = None\n\n# Iterate through the grid\nfor i in range(n):\n    for j in range(m):\n        # If the cell is empty and can be bombed, set the bomb position\n        if grid[i][j] == '.' and can_be_placed(i, j):\n            bomb_position = (i, j)\n            break\n\n    # If the bomb position is set, break from the loop\n    if bomb_position:\n        break\n\n# Print the output\nif bomb_position:\n    print(\"YES\")\n    print(bomb_position[0] + 1, bomb_position[1] + 1)\nelse:\n    print(\"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "from sys import stdin, stdout\n\nk = int(stdin.readline())\nn, m = map(int, stdin.readline().split())\nleft, right, down, up = [], [], [], []\ncoordinates = []\n\nfor i in range(k):\n    x1, y1, x2, y2 = map(int, stdin.readline().split())\n    \n    if x1 == x2:\n        if y1 < y2:\n            coordinates.append((x1, y1, x2, y2, i))\n        else:\n            coordinates.append((x2, y2, x1, y1, i))\n    else:\n        if x1 < x2:\n            coordinates.append((x1, y1, x2, y2, i))\n        else:\n            coordinates.append((x2, y2, x1, y1, i))\n    \n    left.append(coordinates[-1])\n    right.append(coordinates[-1])\n    up.append(coordinates[-1])\n    down.append(coordinates[-1])\n\nleft.sort(key = lambda x: (x[0], x[2]))\ndown.sort(key = lambda x: (x[1], x[3]))\n\nchallengers = [[], [], [], []]\ncntl, cntr, cntd, cntu = map(int, stdin.readline().split())\nlabel = 1\n\nif cntl or not cntl:\n    for i in range(cntl, -1, -1):\n        if (left[i][0], left[i][2]) == (left[cntl][0], left[cntl][2]):\n            challengers[0].append(left[i][-1])  \n        else:\n            break\n        \n    for i in range(cntl + 1, k):\n        if (left[i][0], left[i][2]) == (left[cntl][0], left[cntl][2]) and left[i][2] > left[i][0]:\n            label = 0\n        \n        if (left[i][0], left[i][2]) == (left[cntl][0], left[cntl][2]):\n            challengers[0].append(left[i][-1])  \n        else:\n            break\n\nif cntr or not cntr:\n    for i in range(k - 1 - cntr, k):\n        if (left[i][0], left[i][2]) == (left[k - 1 - cntr][0], left[k - 1 - cntr][2]):\n            challengers[1].append(left[i][-1])\n        else:\n            break\n    \n    for i in range(k - 2 - cntr, -1, -1):\n        if (left[i][0], left[i][2]) == (left[k - 1 - cntr][0], left[k - 1 - cntr][2]) and left[i][2] > left[i][0]:\n            label = 0\n        \n        if (left[i][0], left[i][2]) == (left[k - 1 - cntr][0], left[k - 1 - cntr][2]):\n            challengers[1].append(left[i][-1])\n        else:\n            break\n\n#!!!!!!!!!!!\n\nif cntd or not cntd:\n    for i in range(cntd, -1, -1):\n        if (down[i][1], down[i][3]) == (down[cntd][1], down[cntd][3]):\n            challengers[2].append(down[i][-1])\n        else:\n            break\n        \n    for i in range(cntd + 1, k):\n        if (down[i][1], down[i][3]) == (down[cntd][1], down[cntd][3]) and down[i][3] > down[i][1]:\n            label = 0\n            \n        if (down[i][1], down[i][3]) == (down[cntd][1], down[cntd][3]):\n            challengers[2].append(down[i][-1])  \n        else:\n            break\n        \nif cntu or not cntu:\n    for i in range(k - 1 - cntu, k):\n        if (down[i][1], down[i][3]) == (down[k - 1 - cntu][1], down[k - 1 - cntu][3]):\n            challengers[3].append(down[i][-1])\n        else:\n            break\n    \n    for i in range(k - 2 - cntu, -1, -1):\n        if (down[i][1], down[i][3]) == (down[k - 1 - cntu][1], down[k - 1 - cntu][3]) and down[i][3] > down[i][1]:\n            label = 0\n        \n        if (down[i][1], down[i][3]) == (down[k - 1 - cntu][1], down[k - 1 - cntu][3]):\n            challengers[3].append(down[i][-1])\n        else:\n            break\n\nans = set(challengers[0]) & set(challengers[1]) & set(challengers[2]) & set(challengers[3])\n\nif not len(ans) or not label:\n    stdout.write('-1')\nelse:\n    stdout.write(str(list(ans)[0] + 1))", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "h, w = map(int, input().split())\ngo = [[[] for x in range(w)] for y in range(h)]\ns = input()\nt = input()\nc1 = s[0] == '<' and s[h - 1] == '>' and t[0] == 'v' and t[w - 1] == '^'\nc2 = s[0] == '>' and s[h - 1] == '<' and t[0] == '^' and t[w - 1] == 'v'\nprint(\"YES\" if c1 or c2 else \"NO\")", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "# Function to perform the k-rounding of n\ndef k_rounding(n, k):\n    # Initialize the value of x\n    x = 10 ** k\n\n    # Check if the number is divisible by x\n    if n % x == 0:\n        return n\n\n    # If not, increase the value of x\n    x *= 10\n\n    # Repeat until x is divisible by n\n    while n % x != 0:\n        x += 10 ** k\n\n    return x\n\n# Take input from the user\nn, k = map(int, input().split())\n\n# Calculate the k-rounding of n\nresult = k_rounding(n, k)\n\n# Print the result\nprint(result)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "def split(integer):\n\tret = []\n\twhile integer != 0:\n\t\tret.append(integer % 10) # last one\n\t\tinteger //= 10\n\treturn ret[::-1]\n\ndef combine(lst):\n\ttotal = 0\n\tn = len(lst)\n\tfor i in range(n):\n\t\ttotal += 10 ** (n-i-1) * lst[i]\n\treturn int(total)\n\n\n# al = sorted(list(split(a)))[::-1]\n# bl = list(split(b))\n\n\n\n# Answer can't have leading zeros.\n# Then len(a) == len(b)\n# 499200 vs 982400 = b\n# 942=a, 911=b\n# 9442=a, 9411=b\n\ndef solve3(a, b):\n\tal = sorted(list(split(a)))[::-1]\n\tbl = list(split(b))\n\tif len(bl) > len(al):\n\t\tprint(combine(al))\n\t\treturn\n\n\n\tif a == b:\n\t\tprint(a)\n\t\treturn\n\n\tptr = 0\n\tn = len(al)\n\twhile ptr < n:\n\t\t# print(al, bl, ptr)\n\t\tval = bl[ptr]\n\t\tselection = al[ptr] # Sorted from high to low\n\t\tif selection > val: # illegal:\n\t\t\tk = al.pop(ptr) # pop this idx\n\t\t\tal.append(k)\n\t\tif selection == val:\n\t\t\tif ptr == n-1:\n\t\t\t\tprint(combine(al)) # Done to the last one.\n\t\t\t\tbreak\n\t\t\telse:\n\t\t\t\tif combine(sorted(al[ptr+1:])) > combine(bl[ptr+1:]):\n\t\t\t\t\t# illegal, min of a_rest is larger than b_rest\n\t\t\t\t\tk = al.pop(ptr)\n\t\t\t\t\tal.append(k)\n\t\t\t\telse:\n\t\t\t\t\tptr += 1\n\t\t\t\t\tal = al[:ptr] + sorted(al[ptr:])[::-1]\n\t\t\t\t\t# print(\"repermute\", al, bl)\n\t\t\t\t\t# print(selection)\n\t\tif selection < val: # all ptr to the back is legal\n\t\t\t# print(\"enter\")\n\t\t\t# print(al, bl,ptr)\n\n\t\t\tprint(combine(al[:ptr+1] + list(sorted(al[ptr+1:])[::-1])))\n\t\t\tbreak\n\na = int(input())\nb = int(input())\n# solve3(31434123, 13241234)\nsolve3(a,b)\n# solve3(123, 301)\n# solve3(4940,5000)\n# solve3(942, 911)\n# solve3(9442, 9411)\n# solve3(3921,10000)\n# solve3(9991020, 100001)\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "import sys\n\ndef solve():\n    n, f = map(int, input().split())\n    k = [0] * n\n    l = [0] * n\n    d = [0] * n\n\n    for i in range(n):\n        ki, li = map(int, sys.stdin.readline().split())\n        k[i] = ki\n        l[i] = li\n\n        if 2*ki > li:\n            d[i] = max(li - ki, 0)\n        else:\n            d[i] = ki\n\n    d.sort(reverse=True)\n\n    ans = sum(d[:f]) + sum(min(k[i], l[i]) for i in range(n))\n\n    print(ans)\n\n\n\ndef __starting_point():\n    solve()\n__starting_point()", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "from math import gcd\nn = int(input())\na = list(map(int, input().split()))\nk = 0\nfor i in range(n-1):\n    if gcd(a[i], a[i+1]) != 1:\n        k += 1\n        a.insert(i+1, 1)\nprint(k)\nfor i in range(n+k):\n    print(a[i], end=\" \")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "n = int(input())\n\nis_valid = True\n\ncurrent_latitude = 90\n\nfor i in range(n):\n\n    distance, direction = input().split()\n\n    distance = int(distance)\n\n    if direction == \"North\":\n\n        if current_latitude == -90:\n\n            is_valid = False\n\n            break\n\n        current_latitude -= distance / 40000\n\n    elif direction == \"South\":\n\n        if current_latitude == 90:\n\n            is_valid = False\n\n            break\n\n        current_latitude += distance / 40000\n\n    else:\n\n        current_latitude += 0\n\n\n\nif current_latitude != 90:\n\n    is_valid = False\n\n\n\nif is_valid:\n\n    print(\"YES\")\n\nelse:\n\n    print(\"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "# Input\nW = int(input())\ncnt = list(map(int, input().split()))\n\n# Calculate the maximum possible weight of a good subset\nmax_weight = 0\nfor i in range(1, 9):\n    if cnt[i-1] > 0 and i <= W:\n        max_weight = max(max_weight, i)\n\nprint(max_weight)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "N, T = list(map(int, input().split()))\nA = [int(a) for a in input().split()]\nif sum(A) > N//2:\n    A = [1-a for a in A][::-1]\nK = sum(A)\nS = sum(A[-K:])\nM = K + 1\nP = 10**9+7\ninv = pow(N*(N-1)//2, P-2, P)\nX = [[0]*M for _ in range(M)]\nfor i in range(M):\n    if i > 0: X[i-1][i] = ((K-i+1)**2*inv)%P\n    if i < M-1: X[i+1][i] = (N-2*K+i+1)*(i+1)*inv%P\n    X[i][i] = (1-((K-i)**2*inv)-(N-2*K+i)*(i)*inv)%P\n\ndef ddd(n):\n    for i in range(1, 100):\n        if (n*i%P) < 100:\n            return (n*i%P), i\n    return -1, -1\ndef poww(MM, n):\n    if n == 1:\n        return MM\n    if n % 2:\n        return mult(poww(MM, n-1), MM)\n    return poww(mult(MM,MM), n//2)\ndef mult(M1, M2):\n    Y = [[0] * M for _ in range(M)]\n    for i in range(M):\n        for j in range(M):\n            for k in range(M):\n                Y[i][j] += M1[i][k] * M2[k][j]\n                Y[i][j] %= P\n    return Y\n\nX = poww(X, T)\n\nprint(X[S][K])\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "n = int(input())\nemployees = input()\n\n# Create a list to store the order of denials\ndenials = [0] * n\n\n# Create a list to store the order of voting\nvoting_order = []\n\n# Initialize the number of depublicans and remocrats\ndepublicans = 0\nremocrats = 0\n\n# Initialize the number of depublicans and remocrats who can vote\ndepublicans_can_vote = 0\nremocrats_can_vote = 0\n\n# Initialize the number of depublicans and remocrats who have been denied from voting\ndepublicans_denied = 0\nremocrats_denied = 0\n\n# Iterate through the employees\nfor i in range(n):\n    # Check if the employee is a depublican\n    if employees[i] == 'D':\n        depublicans += 1\n\n        # Check if the employee can vote\n        if denials[i] == 0:\n            depublicans_can_vote += 1\n    else:\n        remocrats += 1\n\n        # Check if the employee can vote\n        if denials[i] == 0:\n            remocrats_can_vote += 1\n\n    # Check if the employee denies someone from voting\n    if i != n - 1:\n        # Check if the next employee is a depublican\n        if employees[i + 1] == 'D':\n            denials[i + 1] += 1\n            depublicans_denied += 1\n        else:\n            denials[i + 1] += 1\n            remocrats_denied += 1\n\n# Iterate through the employees again\nfor i in range(n):\n    # Check if the employee can vote\n    if denials[i] == 0:\n        voting_order.append(i + 1)\n\n# Print the voting order\nprint(\"Voting order:\", voting_order)\n\n# Check if there is only one depublican who can vote\nif depublicans_can_vote == 1", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "from math import ceil\nt = int(input())\nans = []\nfor _ in range(t):\n    n, x = map(int, input().split())\n\n    a = -1\n    b = 0\n\n    for i in range(n):\n        d, h = map(int, input().split())\n        a = max(a, d-h)\n        b = max(b, d)\n    if (x<=b):\n        ans.append(1)\n        continue\n    elif (a<=0):\n        ans.append(-1)\n    else:\n        x = x-b\n        ans.append(ceil(x/a)+1)\nfor el in ans:\n    print(el)", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "# You lost the game.\n\nl1,r1,l2,r2,k = list(map(int, input().split()))\n\n\"\"\"if l1 > l2:\n    r = min(r1,r2)-l1+1\n    if k >= l1 and k <= min(r1,r2):\n        r -= 1\nelif l2 > l1:\n    r = min(r1,r2)-l2+1\n    if k >= l2 and k <= min(r1,r2):\n        r -= 1\nelse:\n    r = min(r1,r2)-l1\n    if k >= l1 and k <= min(r1,r2):\n        r -= 1\"\"\"\nl = max(l1,l2)\nr = min(r1,r2)\nres = r-l+1\nif k >= l and k <= r:\n    res -= 1\nprint(max(0,res))\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "l = input().split(' ')\nx = int(l[0])\nk = int(l[1])\n\nif x == 0:\n    print('0')\nelse:\n    mod = 1000000007\n\n    def pow_mod(a, b):\n        if b < 2:\n            return int(a ** b) % mod\n        elif b % 2 == 0:\n            return int(pow_mod(a, b // 2) ** 2) % mod\n        else:\n            return pow_mod(a, b - 1) * a % mod\n\n    twop = pow_mod(2, k)\n    high = x * twop\n    leafs = twop\n    low = high - leafs + 1\n    s = (high + 1) * high // 2 - (low - 1 + 1) * (low - 1) // 2\n    answer = s * 2 // leafs\n    answer %= mod\n\n    print(answer)", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "from collections import Counter\n\nn, k = list(map(int, input().split()))\ncolors = input()\n\nd = Counter(colors)\n\nfor color, i in list(d.items()):\n    if i > k:\n        print('NO')\n        break\nelse:\n    print('YES')\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "# Enter your code here. Read input from STDIN. Print output to STDOUT\n\ndef check_value(value, power):\n    while value > 0:\n        if value % 2 != 0:\n            return False\n        value //= 2\n    return True\n\ndef solve(n, k):\n    if n == 0:\n        return [0] * k\n    if k == 1:\n        if n == 1:\n            return [0]\n        else:\n            return [-1]\n    max_power = 0\n    while 2 ** max_power < n:\n        max_power += 1\n    if 2 ** max_power == n:\n        return [max_power] + [0] * (k - 1)\n    max_power -= 1\n    while max_power >= 0:\n        value = n - 2 ** max_power\n        if value > 0 and check_value(value, max_power):\n            result = [max_power]\n            result.extend(solve(value, k - 1))\n            return result\n        max_power -= 1\n    return [-1]\n\ndef main():\n    n, k = map(int, input().split())\n    result = solve(n, k)\n    if result[0] == -1:\n        print(\"No\")\n    else:\n        print(\"Yes\")\n        print(' '.join(map(str, result)))\n\nif __name__ == '__main__':\n    main()", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "n,s = map(int,input().split())\nl = list(map(int, input().split()))\n\nif sum(l) < s:\n\tprint(-1)\n\treturn\nq = sum(l) - min(l) * n\nif q>=s:\n\tprint(min(l))\n\treturn\nprint(min(l)-(s-q+n-1)//n)", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "n, b = [int(i) for i in input().split(\" \")]\nbx = [int(i) for i in input().split(\" \")]\nm, a = [int(i) for i in input().split(\" \")]\nax = [int(i) for i in input().split(\" \")]\nbb, aa = 0, 0\nfor i in bx:\n    aa = aa * b + i\nfor i in ax:\n    bb = bb * a + i\nif aa < bb:\n    print('<')\nelif aa == bb:\n    print('=')\nelse:\n    print('>')\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "s = input()\na = list(input())\na.append('')\ncnt = 0\n\nwhile len(set(a)) == 3:\n    for i in range(len(a)):\n    \n        if a[i] == 'D':\n            if cnt < 0:\n                a[i] = ''\n            cnt+=1\n        if a[i] == 'R':\n            if cnt > 0:\n                a[i] = ''\n            cnt-=1\n\nfor ss in set(a):\n    if ss:\n        print(ss)", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "# Input the values of n, a, and b\nn = int(input())\na = int(input())\nb = int(input())\n\n# Check if it's possible to buy Ber-Cola and Bars bars\nif n % a == 0 or n % b == 0 or (n - a) % b == 0 or (n - b) % a == 0:\n    print(\"YES\")\n    if n % a == 0:\n        print(n // a, 0)\n    elif n % b == 0:\n        print(0, n // b)\n    elif (n - a) % b == 0:\n        print(1, (n - a) // b)\n    else:\n        print(0, (n - b) // a)\nelse:\n    print(\"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "# Input the number of elements in the array\nn = int(input())\n\n# Input the array\na = list(map(int, input().split()))\n\n# Initialize the count of consecutive elements that can be erased\ncount = 0\n\n# Iterate through the array\nfor i in range(n - 1):\n    # Check if the current element is less than the next element\n    if a[i] < a[i + 1]:\n        # If so, increment the count\n        count += 1\n    else:\n        # If not, reset the count\n        count = 0\n\n# Print the maximum number of consecutive elements that can be erased\nprint(count)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "import sys\nfrom math import sqrt, floor\nfrom collections import Counter\n\ndef factorize(n):\n    limit = floor(sqrt(n))\n    factor = Counter()\n\n    p = 2\n    while n % p == 0:\n        factor[p] += 1\n        n //= p\n\n    for p in range(3, limit + 1, 2):\n        while n % p == 0:\n            factor[p] += 1\n            n //= p\n    if n > 1:\n        factor[n] += 1\n\n    return factor\n\ndef make_divisors(n):\n    result = [1]\n\n    for p, e in factorize(n).items():\n        result = [x * p**i for i in range(e + 1) for x in result]\n\n    return sorted(result)\n\nn, k = map(int, input().split())\n\ndivisors = make_divisors(n)\n\nif k > len(divisors):\n    ans = -1\nelse:\n    ans = divisors[k - 1]\n\nprint(ans)", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "# Function to find the greatest common divisor (GCD)\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\n# Function to find the number of possible variants for a given aspect ratio\ndef find_variants(x, y, a, b):\n    # Find the GCD of x and y\n    d = gcd(x, y)\n    # Calculate the new width and height\n    w = x // d\n    h = y // d\n    # Calculate the number of possible variants\n    count = (a // w) * (b // h)\n    return count\n\n# Take the input from the user\na, b, x, y = map(int, input().split())\n\n# Call the function to find the number of possible variants\nresult = find_variants(x, y, a, b)\n\n# Print the result\nprint(result)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "def is_prime(n):\n    for i in range(2, int(n ** 0.5 + 1)):\n        if n % i == 0:\n            return False\n    return True\n\n\nn = int(input())\nif n % 2 == 0:\n    if is_prime(n):\n        print(1)\n    else:\n        print(2)\nelse:\n    if is_prime(n):\n        print(1)\n    elif is_prime(n - 2):\n        print(2)\n    else:\n        print(3)", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "def kth_smallest_divisor(n, k):\n    divisors = []\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            if i != n // i:\n                divisors.append(n // i)\n    divisors.sort()\n    return divisors[k - 1] if k <= len(divisors) else -1\n\nif __name__ == \"__main__\":\n    n, k = map(int, input().split())\n    print(kth_smallest_divisor(n, k))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "n,k = [int(i) for i in input().split()]\na = [int(i) for i in input().split()]\nb = [int(i) for i in input().split()]\n\nc = [i for i in a if i!=0]\n\nif (c != sorted(c)):\n    print(\"Yes\")\nelse:\n    if k == 1:\n        for i in range(len(a)):\n            if a[i] == 0:\n                a[i] = b[0]\n        if a == sorted(a):\n            print(\"No\")\n        else:\n            print(\"Yes\")\n    else:\n        print(\"Yes\")\n        \n    \n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "N, K = list(map(int, input().split()))\nA = list(map(int, input().split()))\nAsum = sum(A)\n\ndiv = set()\nfor i in range(1, int(Asum ** 0.5 + 0.5) + 1):\n    if Asum % i == 0:\n        div.add(i)\n        div.add(Asum//i)\n\nans = 1\nfor d in div:\n    R = [a % d for a in A]\n    R.sort()\n    r = sum(R) // d\n    l = N - r\n    need = sum(R[:l])\n    if need <= K:\n        ans = max(ans, d)\nprint(ans)\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "n, k = list(map( int, input().split()))\n\nmn = min( k - 1, n - k )\n\nprint( 3*n + mn )\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "# Read the number of segments\nn = int(input())\n\n# Create a list to store the segments\nsegments = []\n\n# Read the segments\nfor _ in range(n):\n    l, r = map(int, input().split())\n    segments.append([l, r])\n\n# Create a flag to indicate if a pair is found\nfound = False\n\n# Iterate through the segments\nfor i in range(n):\n    # Check if the current segment is within another segment\n    for j in range(n):\n        if i != j and segments[i][0] >= segments[j][0] and segments[i][1] <= segments[j][1]:\n            print(i + 1, j + 1)\n            found = True\n            break\n    if found:\n        break\n\n# If no pair is found, print -1 -1\nif not found:\n    print(-1, -1)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "n, s = int(input()), input()\ncnt = (n - 11) // 2\ncnt_8 = len(s[:n - 10].split('8')) - 1\nif (cnt >= cnt_8):\n\tprint (\"NO\")\nelse:\n\tprint (\"YES\")", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "R = lambda : list(map(int, input().split()))\nn = int(input())\ns = input()\n\nfor i in reversed(list(range(n//2))):\n    if s[0:i+1]==s[i+1:2*i+2]:\n        print((n-i)); return;\n\nprint(n)\n", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "def frog_jump(x, a, b):\n    f = [0] * (x + 1)\n    f[0] = 1\n    for i in range(1, x + 1):\n        for j in range(i - b, i + a + 1):\n            if 0 <= j <= x:\n                f[j] = 1\n    return sum(f)\n\ndef main():\n    m, a, b = list(map(int, input().split()))\n    result = 0\n    for i in range(m + 1):\n        result += frog_jump(i, a, b)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "from collections import Counter\n\ndef find_subsequence_sum(arr):\n    n = len(arr)\n    cnt = Counter()\n    for i in range(n):\n        for j in range(i, n):\n            cnt[sum(arr[i:j + 1])] += 1\n    max_sum = 0\n    for k in cnt:\n        if k % 2 == 1 and k > max_sum:\n            max_sum = k\n    return max_sum\n\nif __name__ == '__main__':\n    n = int(input())\n    arr = list(map(int, input().split()))\n    print(find_subsequence_sum(arr))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "n=int(input())\na=list(map(int ,input().strip().split(' ')))\na.sort()\nif a[n-1]<a[n]:\n  print('YES')\nelse:\n  print('NO')", "label": 0, "label_name": "human_written", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "n = int(input())\ns = input()\nprefix = \"\"\nmin_steps = 0\nfor c in s:\n    if c in prefix:\n        break\n    prefix += c\n    min_steps += 1\nsteps = min_steps\nfor i in range(len(prefix), len(s)):\n    steps += 1\n    if 2 * steps < len(s):\n        min_steps = steps\nprint(min_steps)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_interview_207.jsonl"}
{"code": "H, W, K = map(int, input().split())\ngrid = []\nfor _ in range(H):\n    grid.append(input())\n\ncount = 0\nfor i in range(1 << H):\n    for j in range(1 << W):\n        black_count = 0\n        for r in range(H):\n            for c in range(W):\n                if (i & (1 << r)) or (j & (1 << c)):\n                    if grid[r][c] == '#':\n                        black_count += 1\n        if black_count == K:\n            count += 1\n\nprint(count)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "# Function to calculate the number of pairs with median m\ndef countPairs(a, n, m):\n    # Count the occurrence of m in the array\n    count = a.count(m)\n    # Calculate the number of pairs with median m\n    return count * (count - 1) // 2\n\n# Driver code\nn, m = map(int, input().split())\na = list(map(int, input().split()))\nans = countPairs(a, n, m)\nprint(ans)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "import functools\nimport math\n\nN, X = [int(i) for i in input().split()]\nx_list = [int(i) for i in input().split()]\n\nx_list.append(X)\nnum_list = sorted(x_list)\n \ntmp = [abs(x[0] - x[1]) for x in zip(num_list[:-1],num_list[1:])]\n\nD = functools.reduce(lambda acc, x: math.gcd(acc, x), tmp, 0)\n\nprint(D)\n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "# Input the number of stores and number of energy drinks needed\nn, m = map(int, input().split())\n# Create a list to store the prices and quantities of energy drinks at each store\nprices, quantities = [], []\n# Iterate through the list of stores and input the price and quantity of energy drinks available\nfor _ in range(n):\n    a, b = map(int, input().split())\n    prices.append(a)\n    quantities.append(b)\n# Sort the prices and quantities lists in ascending order\nprices, quantities = zip(*sorted(zip(prices, quantities)))\n# Initialize the minimum amount of money needed\nmin_money = 0\n# Iterate through the list of stores\nfor price, quantity in zip(prices, quantities):\n    # Calculate the maximum number of energy drinks that can be bought at the current store\n    drinks = min(m, quantity)\n    # Add the cost of the energy drinks to the minimum amount of money needed\n    min_money += drinks * price\n    # Subtract the number of energy drinks bought from the total number needed\n    m -= drinks\n    # If the total number needed becomes 0, break the loop\n    if m == 0:\n        break\n# Print the minimum amount of money needed\nprint(min_money)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "def shiritori(n, words):\n    seen = set()\n    for i in range(n):\n        if words[i] in seen or (i >= 1 and words[i][0] != words[i - 1][-1]):\n            return \"No\"\n        seen.add(words[i])\n    return \"Yes\"\n\nn = int(input())\nwords = []\nfor _ in range(n):\n    words.append(input())\n\nprint(shiritori(n, words))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "q = int(input())\nfor _ in range(q):\n    n, a, b = list(map(int, input().split()))\n    if 2 * a <= b:\n        print(n * a)\n    else:\n        if n % 2:\n            print(a + n // 2 * b)\n        else:\n            print(n // 2 * b)\n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "\na,b,x=list(map(int,input().split()))\nif(a>b):\n    s='0'\n    a-=1\nelse:\n    s='1'\n    b-=1\nfor i in range(x-1):\n    if(s[-1]=='1'):\n        s+='0'\n        a-=1\n    else:\n        s+='1'\n        b-=1\nif(s[-1]=='1'):\n    s+='1'*(b)\n    s+='0'*a\nelse:\n    s+='0'*a\n    s+='1'*b\nprint(s)\n\n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "N,K=list(map(int,input().split()))\nh=list(map(int,input().split()))\nprint((sum(x>=K for x in h)))\n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "# Input\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\n# Initialize variables\nmin_value = min(a)\nmax_value = max(a)\n\n# Calculate the number of minimum and maximum elements\nmin_count = sum(1 for i in a if i == min_value)\nmax_count = sum(1 for i in a if i == max_value)\n\n# If the array already has at least k equal elements, output 0\nif min_count >= k or max_count >= k:\n    print(0)\n\n# If k is greater than the length of the array, output -1\nelif k > n:\n    print(-1)\n\n# If the minimum and maximum values are the same, output -1\nelif min_value == max_value:\n    print(-1)\n\n# Otherwise, calculate the minimum number of moves required\nelse:\n    moves = 0\n\n    # If the minimum count is less than k\n    if min_count < k:\n        # Increase the minimum value to make k - min_count equal elements\n        moves += k - min_count\n\n        # Decrease the maximum value by 1 for each additional element needed\n        moves += max(0, k - min_count - max_count)\n\n    # If the maximum count is less than k\n    else:\n        # Decrease the maximum value to make k - max_count equal elements\n        moves += k - max_count\n\n        # Increase the minimum value by 1 for each additional element needed\n        moves += max(0, k - max_count - min_count)\n\n    print(moves)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "N = int(input())\nW = list(map(int, input().split()))\n\ntot = sum(W)\nres = tot\ns = 0\nfor i in range(N-1):\n    s += W[i]\n    res = min(res, abs(tot - 2 * s))\n\nprint(res)", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "def construct_string(n, k, t):\n    # Base case: If k is 1, then the string is t itself\n    if k == 1:\n        return t\n    # Calculate the length of t\n    len_t = len(t)\n    # Initialize the result string as an empty string\n    result = \"\"\n    # Construct the result string\n    for i in range(k):\n        # Add t to the result string\n        result += t\n        # Add (n - len_t) number of characters to the result string\n        result += \"a\" * (n - len_t)\n    # Return the result string\n    return result\n\n# Read the input\nn, k = map(int, input().split())\nt = input()\n# Construct the string\nresult = construct_string(n, k, t)\n# Print the result\nprint(result)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "from math import gcd\n\nfor _ in range(int(input())):\n    a, b, c = map(int, input().split())\n    if a == b == c:\n        print(0)\n        print(a, b, c)\n        continue\n\n    gcd_ab = gcd(a, b)\n    gcd_bc = gcd(b, c)\n    gcd_ac = gcd(a, c)\n    if gcd_ab == 1:\n        a, b = b, a\n        gcd_ab = gcd(a, b)\n    if gcd_ab == 1:\n        print(-1)\n        continue\n\n    if gcd_bc == 1:\n        b, c = c, b\n        gcd_bc = gcd(b, c)\n    if gcd_bc == 1:\n        print(-1)\n        continue\n\n    if gcd_ac == 1:\n        a, c = c, a\n        gcd_ac = gcd(a, c)\n    if gcd_ac == 1:\n        print(-1)\n        continue\n\n    if a % gcd_ab != 0 or b % gcd_ab != 0 or c % gcd_bc != 0:\n        print(-1)\n        continue\n\n    if a == b:\n        if c % b == 0:\n            print(0)\n            print(a, b, c)\n            continue\n        else:\n            print(-1)\n            continue\n\n    if b == c:\n        if a % b == 0:\n            print(0)\n            print(a, b, c)\n            continue\n        else:\n            print(-1)\n            continue\n\n    if a == c:\n        if b % a == 0:\n            print(0)\n            print(a, b, c)\n            continue\n        else:\n            print(-1)\n            continue\n\n    # if a < b < c\n    # find the smallest d = b * k such that d % a == 0", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\na.sort()\nans = 0\nfor i in range(n // 2):\n    ans += a[2 * i] - a[2 * i + 1]\nprint(-ans)", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "# Input the values of n, d and k\nn, d, k = map(int, input().split())\n\n# Check if it is possible to construct a tree with the given conditions\nif n == 1:\n    print(\"YES\")\nelse:\n    if d < k - 1:\n        print(\"NO\")\n    else:\n        # Construct a tree with the given conditions\n        print(\"YES\")\n        for i in range(2, n):\n            print(i, i - 1)\n        for i in range(2, k):\n            print(1, i)\n        for i in range(k + 1, n):\n            print(k, i)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "def solve(n, prefixes, suffixes):\n    ans = \"\"\n    for i in range(1, n):\n        if prefixes[i] in suffixes:\n            ans += \"P\"\n        else:\n            ans += \"S\"\n    for i in range(n, 2 * n - 1):\n        if suffixes[i] in prefixes:\n            ans += \"P\"\n        else:\n            ans += \"S\"\n    return ans\n\nif __name__ == \"__main__\":\n    n = int(input())\n    prefixes = []\n    suffixes = []\n    for _ in range(n - 1):\n        prefixes.append(input())\n    for _ in range(n - 1):\n        suffixes.append(input())\n    print(solve(n, prefixes, suffixes))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "def main():\n    N, M = [int(i) for i in input().split()]\n\n    pos = 0\n    ans = 1\n\n    fib = [1 for _ in range(N+1)]\n    for i in range(2, N+1):\n        fib[i] = fib[i-1] + fib[i-2]\n\n    for _ in range(M):\n\n        a = int(input())\n\n        if a == pos:\n            ans = 0\n            pos = N\n            break\n        elif a == pos + 1:\n            pos = a + 1\n        else:\n            ans *= fib[(a - 1 - pos)]\n            pos = a + 1\n\n    if pos + 1 < N:\n        ans *= fib[(N - pos)]\n\n    print(ans % 1_000_000_007)\n\n\n\ndef __starting_point():\n    main()\n__starting_point()", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "def min_operations(n, x, y, digits):\n    # Calculate the remainder of the given number modulo 10^x.\n    rem = 0\n    for i in range(n - 1, max(n - x, 0) - 1, -1):\n        rem = (rem * 10 + digits[i]) % 10**x\n\n    # Calculate the remainder of 10^y modulo 10^x.\n    rem10y = pow(10, y, 10**x)\n\n    # Calculate the minimum number of operations to make the remainders equal.\n    diff = (rem10y - rem) % 10**x\n    return diff\n\n\n# Read the input data.\nn, x, y = map(int, input().split())\ndigits = list(map(int, input()))\n\n# Calculate and print the result.\nprint(min_operations(n, x, y, digits))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "N,K,M = list(map(int, input().split()))\nA = list(map(int, input().split()))\n\nPoint = M * N - sum(A)\n\nif Point >= 0 and Point <= K:\n    print(Point)\nelif Point > K:\n    print((-1))\nelse:\n    print((0))\n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "#!/usr/bin/env python3\n\n# Read the input from the standard input\nN, M, C = map(int, input().split())\nB = list(map(int, input().split()))\n\n# Initialize the count of codes that correctly solve this problem\ncount = 0\n\n# Iterate over the N codes\nfor _ in range(N):\n    # Read the characteristics of the current code\n    A = list(map(int, input().split()))\n\n    # Calculate the sum of A_i * B_i for all i\n    sum_A_B = 0\n    for i in range(M):\n        sum_A_B += A[i] * B[i]\n\n    # Check if the current code correctly solves this problem\n    if sum_A_B + C > 0:\n        count += 1\n\n# Print the number of codes that correctly solve this problem\nprint(count)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "# Input\nN, K, Q = map(int, input().split())\nA = list(map(int, input().split()))\n\n# Initialize the scores for each player\nscores = [K] * N\n\n# Iterate through each answer\nfor i in range(Q):\n    # Update the scores of all players\n    for j in range(N):\n        if j + 1 != A[i]:\n            scores[j] -= 1\n\n# Check if each player survived\nfor i in range(N):\n    if scores[i] > 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "import sys\ninput = sys.stdin.readline\nn=int(input())\na=list(map(int,input().split()))\nb=list(map(int,input().split()))\np=[i for i in range(1,n)]\np.append(0)\nans=[]\ncount=[0]*n\nfor i in b:\n\tcount[i]+=1\nfor i in a:\n\tv=(n-i)%n\n\twhile count[v]==0:\n\t\tif count[p[v]]==0:\n\t\t\tp[v]=p[p[v]]\n\t\tv=p[v]\n\tcount[v%n]-=1\n\tans.append((v+i)%n)\n\t# print(ans,p,count)\nprint (\" \".join(map(str,ans)))", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "import sys\ninput = sys.stdin.readline\n\nfor _ in range(int(input())):\n    a, b, c = list(map(int, input().split()))\n    ans = 10**18\n    index = [0, 0, 0]\n\n    for x in range(1, c+1):\n        for y in range(x, c+100, x):\n            cost = abs(a-x) + abs(b-y)\n            if c % y < y - (c % y):\n                z = c - (c % y)\n                cost += c % y\n            else:\n                z = c + (y - (c % y))\n                cost += y - (c % y)\n            if ans > cost:\n                ans = cost\n                index = [x, y, z]\n\n    print(ans)\n    print(*index)\n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "def max_days_without_food(a, b, c):\n    max_days = 0\n    if a >= b + c:\n        max_days = b + c\n    if b >= a + c:\n        max_days = a + c\n    if c >= a + b:\n        max_days = a + b\n    return max_days\n\nif __name__ == '__main__':\n    a, b, c = map(int, input().split())\n    max_days = max_days_without_food(a, b, c)\n    print(max_days)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "n = int(input())\nh = list(map(int,input().split(\" \")))\ncnt = 0\nminNum = 0\ntmp = 0\n\nwhile True:\n    for i in range(h.count(0)):\n        if h.index(0) == 0: \n            h.pop(0)\n        elif h.index(0) > 0:\n            tmp = h.index(0)\n            break\n    else:\n        tmp = len(h)\n\n    if not h:\n        break\n\n    if tmp == 1:\n        cnt += h[0]\n        h.pop(0)\n    else:\n        minNum = min(h[0:tmp])\n        cnt += minNum\n        for j in range(tmp):\n            h[j] -= minNum\n\nprint(cnt)", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "def nonDecreasing(N, H):\n    decreases = 0\n    for i in range(1, N):\n        if H[i-1] > H[i]:\n            decreases += H[i-1] - H[i]\n    return \"Yes\" if decreases <= H[0] else \"No\"\n\nif __name__ == \"__main__\":\n    N = int(input())\n    H = list(map(int, input().split()))\n    print(nonDecreasing(N, H))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "# Read the input times\nh1, m1 = map(int, input().split(':'))\nh2, m2 = map(int, input().split(':'))\n\n# Calculate the duration of the contest\ntotal_minutes = (h2 - h1) * 60 + (m2 - m1)\nmidpoint_minutes = total_minutes // 2\n\n# Calculate the midpoint time\nh3 = (h1 * 60 + m1 + midpoint_minutes) // 60\nm3 = (h1 * 60 + m1 + midpoint_minutes) % 60\n\n# Print the result in the required format\nprint(f'{h3:02d}:{m3:02d}')", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport math\n\n# Function to calculate the digit at a given position in the sequence\ndef getDigit(n):\n    # Calculate the block number\n    block_num = int(math.floor(math.sqrt(2 * n)))\n    \n    # Calculate the block size\n    block_size = block_num * (block_num + 1) // 2\n    \n    # Calculate the position within the block\n    pos_within_block = n - block_size\n    \n    # Calculate the digit at the position\n    digit = str(block_num)[pos_within_block - 1]\n    \n    return digit\n\n# Read the number of queries\nq = int(input())\n\n# Process each query\nfor _ in range(q):\n    # Read the query\n    n = int(input())\n    \n    # Get the digit at the position\n    digit = getDigit(n)\n    \n    # Print the digit\n    print(digit)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "def canBeEqual(S, T):\n    if len(S) != len(T):\n        return False\n\n    char_counts = {}\n    for char in S:\n        if char not in char_counts:\n            char_counts[char] = 0\n        char_counts[char] += 1\n\n    for char in T:\n        if char not in char_counts or char_counts[char] == 0:\n            return False\n        char_counts[char] -= 1\n\n    return True\n\nS = input()\nT = input()\nresult = canBeEqual(S, T)\nif result:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "def solve(p):\n    N = len(p)\n    if p[0] == N and p[N-1] == 1:\n        return \"YES\"\n    else:\n        return \"NO\"\n\nN = int(input())\np = list(map(int, input().split()))\n\nprint(solve(p))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "# Read the input values of A and B\nA, B = map(int, input().split())\n\n# Initialize a flag to check if a valid price is found\nfound = False\n\n# Initialize the price to 1\nprice = 1\n\n# Iterate until the price is less than or equal to 100\nwhile price <= 100:\n    # Calculate the amount of consumption tax levied on the price with 8% tax rate\n    tax8 = int(price * 0.08)\n\n    # Calculate the amount of consumption tax levied on the price with 10% tax rate\n    tax10 = int(price * 0.1)\n\n    # Check if both taxes match the given values A and B\n    if tax8 == A and tax10 == B:\n        # Set the flag to True\n        found = True\n\n        # Print the lowest price that satisfies the condition\n        print(price)\n\n        # Break out of the loop\n        break\n\n    # Increment the price\n    price += 1\n\n# If no price satisfies the condition, print -1\nif not found:\n    print(-1)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "def max_f(a):\n    n = len(a)\n    mod_sum = [0] * n\n    max_f = 0\n\n    for i in range(n):\n        for j in range(i, n):\n            mod_sum[j] += a[i] - 1\n\n    for i in range(n):\n        max_f = max(max_f, mod_sum[i])\n\n    return max_f\n\nif __name__ == \"__main__\":\n    n = int(input())\n    a = list(map(int, input().split()))\n    result = max_f(a)\n    print(result)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "import math\nfrom math import gcd,pi,sqrt\nINF = float(\"inf\")\nMOD = 10**9 + 7\n\nimport sys\nsys.setrecursionlimit(10**6)\nimport itertools\nimport bisect\nfrom collections import Counter,deque\ndef i_input(): return int(input())\ndef i_map(): return map(int, input().split())\ndef i_list(): return list(i_map())\ndef i_row(N): return [i_input() for _ in range(N)]\ndef i_row_list(N): return [i_list() for _ in range(N)]\ndef s_input(): return input()\ndef s_map(): return input().split()\ndef s_list(): return list(s_map())\ndef s_row(N): return [s_input for _ in range(N)]\ndef s_row_str(N): return [s_list() for _ in range(N)]\ndef s_row_list(N): return [list(s_input()) for _ in range(N)]\n\n\ndef main():\n  N,M = i_map()\n  K = []\n  for i in range(M):\n    l = i_list()\n    l.pop(0)\n    K.append(l)\n  P = i_list()\n  cnt = 0\n\n  for i in range(2**N):\n    trial = []\n    for j in range(N):\n      if i >> j & 1:\n        trial.append(1)\n      else:\n        trial.append(0)\n    flg = True\n    for h,g in enumerate(K):\n      num = 0\n      for r in g:\n        if trial[r-1] == 1:\n          num += 1\n      if num%2 != P[h]:\n        flg = False\n    if flg == True:\n      cnt += 1\n\n  print(cnt)\n\n\n\n\n\n \n \n\n\ndef __starting_point():\n    main()\n__starting_point()", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "def nearest_interesting_number(a):\n    def is_interesting(n):\n        # Check if the sum of the digits of n is divisible by 4\n        return sum(int(digit) for digit in str(n)) % 4 == 0\n\n    # If a is already an interesting number, return it\n    if is_interesting(a):\n        return a\n\n    # Increment a until it becomes an interesting number\n    while not is_interesting(a):\n        a += 1\n\n    return a\n\n# Read the input\na = int(input())\n\n# Find the nearest larger or equal interesting number\nn = nearest_interesting_number(a)\n\n# Print the result\nprint(n)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "def check_doublets(N, dice_rolls):\n    # Initialize a counter to count the number of consecutive doublets\n    doublet_count = 0\n\n    # Iterate through the dice rolls\n    for i in range(N):\n        # Check if the current roll is a doublet\n        if dice_rolls[i][0] == dice_rolls[i][1]:\n            # Increment the doublet count\n            doublet_count += 1\n        else:\n            # Reset the doublet count\n            doublet_count = 0\n\n        # If the doublet count is greater than or equal to 3,\n        # we have found at least three consecutive doublets\n        if doublet_count >= 3:\n            return True\n\n    # If we reach this point, no triple doublets were found\n    return False\n\n# Read the number of dice rolls\nN = int(input())\n\n# Initialize an empty list to store the dice rolls\ndice_rolls = []\n\n# Read the dice rolls\nfor _ in range(N):\n    D1, D2 = map(int, input().split())\n    dice_rolls.append([D1, D2])\n\n# Check if triple doublets occurred\nif check_doublets(N, dice_rolls):\n    print(\"Yes\")\nelse:\n    print(\"No\")", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "from math import ceil\n\ndef get_digits_count(num):\n    return len(str(num))\n\ndef get_max_integer(A, B, X):\n    max_integer = 0\n    for i in range(1, ceil(X / A) + 1):\n        if A * i + B * get_digits_count(i) <= X:\n            max_integer = i\n    return max_integer\n\nif __name__ == \"__main__\":\n    A, B, X = map(int, input().split())\n    print(get_max_integer(A, B, X))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "D = int(input())  # number of difficulties\nG = int(input())  # target score\nproblems = [[] for _ in range(D + 1)]  # store the problems\n\nfor i in range(1, D + 1):\n    p, c = map(int, input().split())\n    problems[i] = [p, c]", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "# Take input from user\nn = int(input(\"Enter the number of shift: \"))\ns = input(\"Enter the string: \")\n\n# Create a dictionary for mapping of alphabets\nalphabets = {chr(ord('A') + i): chr(ord('A') + (i + n) % 26) for i in range(26)}\n\n# Shift each character of the string\nresult = ''.join([alphabets[char] for char in s])\n\n# Print the resulting string\nprint(\"Resultant string:\", result)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "n = int(input())\ns = input()\nans = 0\nstack = []\nfor i in range(n):\n    if s[i] == '(':\n        stack.append(i)\n    else:\n        if stack:\n            stack.pop()\n        else:\n            ans += 1\nfor i in range(len(stack)):\n    ans += 1\nprint(ans)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "n, x = map(int, input().split())\ncities = list(map(int, input().split()))\n\nleft = 0\nright = max(cities) - min(cities)\nwhile left < right:\n    mid = (left + right) // 2\n    visited = set()\n    visited.add(x)\n    for city in cities:\n        if abs(x - city) % mid == 0:\n            visited.add(city)\n    if len(visited) == n + 1:\n        right = mid\n    else:\n        left = mid + 1\n\nprint(left)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "N = int(input())\nm = dict()\n\nprev = input()\nm[prev] = True\nflg = True\n\nfor _ in range(N - 1):\n  s = input()\n  flg = all([flg, s not in m, prev[len(prev) - 1] == s[0]])\n  m[s] = True\n  prev = s\n\nprint(\"Yes\" if flg else \"No\")", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "# Function to find the length of the longest common subsequence\ndef lcs(s1, s2):\n    n = len(s1)\n    m = len(s2)\n    lcs = [[0 for _ in range(m + 1)] for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if s1[i - 1] == s2[j - 1]:\n                lcs[i][j] = lcs[i - 1][j - 1] + 1\n            else:\n                lcs[i][j] = max(lcs[i - 1][j], lcs[i][j - 1])\n\n    return lcs[n][m]\n\n\n# Function to find the length of the longest substring that can be removed\ndef max_removable_length(s, t):\n    n = len(s)\n    m = len(t)\n    lcs_len = lcs(s, t)\n\n    # If the LCS is equal to the length of the smaller string,\n    # then no substring needs to be removed\n    if lcs_len == min(n, m):\n        return 0\n\n    #", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "n, k = map(int, input().split())\na = list(map(int, input().split()))\nb = sorted(a, reverse=True)\nb = b[:k]\ns = sum(b)\nrec = []\nk = 1\nfor i in range(n):\n    if a[i] not in b:\n        k += 1\n        continue\n    else:\n        b.remove(a[i])\n        rec.append(k)\n        k = 1\n\nrec[-1] += n - sum(rec)\nprint(s)\nprint(\" \".join(map(str, rec)))", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "n=int(input());a,b,c=[*map(int,input().split())],[*map(int,input().split())],0\nfor i in range(n):\n  d=min(a[i],b[i])\n  c+=d\n  a[i]-=d\n  b[i]-=d\n  d=min(a[i+1],b[i])\n  c+=d\n  a[i+1]-=d\nprint(c)", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "n, k = list(map(int, input().split()))\n\narr1 = [i for i in range(1, k + 1)]\narr2 = arr1[1:] + [arr1[0]]\n\nif k*(k - 1) >= n:\n\tprint('YES')\n\tfor i in range(k - 1):\n\t\tfor j in range(k):\n\t\t\tprint(str(arr1[j]) + \" \" + str(arr2[j]))\n\t\t\tn -= 1\n\t\t\tif(n == 0):\n\t\t\t\tbreak\n\t\tif(n == 0):\n\t\t\tbreak\n\t\tarr2 = arr2[1:] + [arr2[0]]\n\n\nelse:\n\tprint('NO')\n\n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "#!/usr/bin/env python3\n\nimport sys\n\nw = [int(i) for i in input().split()]\nb1 = [int(i) for i in input().split()]\nb2 = [int(i) for i in input().split()]\n\n\ndef is_inside(r_in, r_out):\n    return (r_out[0] <= r_in[0] <= r_out[2]) and (\n        r_out[1] <= r_in[1] <= r_out[3]) and (\n            r_out[0] <= r_in[2] <= r_out[2]) and (\n                r_out[1] <= r_in[3] <= r_out[3])\n\n\ndef bisects(r_in, r_out):\n    return ((r_out[0] <= r_in[0] <= r_out[2]) and\n            (r_out[0] <= r_in[2] <= r_out[2])) or (\n                (r_out[1] <= r_in[1] <= r_out[3]) and (\n                    r_out[1] <= r_in[3] <= r_out[3]))\n\n\n\nif is_inside(w, b1) or is_inside(w, b2):\n    print('NO')\n    return\n\n\nif b1[0] <= w[0] <= b1[2] and b1[0] <= w[2] <= b1[2]:\n    if b1[1] <= w[1] <= b1[3]:\n        w[1] = b1[3]\n    elif b1[1] <= w[3] <= b1[3]:\n        w[3] = b1[1]\nelif b1[1] <= w[1] <= b1[3] and b1[1] <= w[3] <= b1[3]:\n    if b1[0] <= w[0] <= b1[2]:\n        w[0] = b1[2]\n    elif b1[0] <= w[2] <= b1[2]:\n        w[2] = b1[0]\nelif b2[0] <= w[0] <= b2[2] and b2[0] <= w[2] <= b2[2]:\n    if b2[1] <= w[1] <= b2[3]:\n        w[1] = b2[3]\n    elif b2[1] <= w[3] <= b2[3]:\n        w[3] = b2[1]\nelif b2[1] <= w[1] <= b2[3] and b2[1] <= w[3] <= b2[3]:\n    if b2[0] <= w[0] <= b2[2]:\n        w[0] = b2[2]\n    elif b2[0] <= w[2] <= b2[2]:\n        w[2] = b2[0]\n\nif is_inside(w, b1) or is_inside(w, b2):\n    print('NO')\n    return\n\nprint('YES')\n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "a,b,h,m = map(int, input().split())\n\nimport math\nprint((a**2+b**2-2*a*b*math.cos(math.radians((360*h/12+30*m/60)-360*m/60)))**(1/2))", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "n = int(input())\ns = input().split()\nfor i in range(n):\n    s[i] = int(s[i])\n\nans = 1\ncurStreak = 1\n\nfor i in range(1,n):\n    if s[i]<= 2*s[i-1]:\n        curStreak+=1\n        ans = max(ans,curStreak)\n    else:\n        curStreak = 1\n\nprint(ans)", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "n = int(input())\na1,a2,a3 = list(map(int,input().split()))\nb1,b2,b3 = list(map(int,input().split()))\nmaxx = min(b2,a1)+min(a2,b3)+min(a3,b1)\nc = 0\nif b1>a1:\n\tc += 1\nif b2>a2:\n\tc += 1\nif b3>a3:\n\tc += 1\n\nif c==1:\n\tif b1>a1:\n\t\tminn = max(0,min(b1,a3-(b2+b3)))\n\telif b2>a2:\n\t\tminn = max(0,min(b2,a1-(b1+b3)))\n\telse:\n\t\tminn = max(0,min(b3,a2-(b1+b2)))\nelse:\n\tif a1>b1:\n\t\tminn = max(0,min(b2,a1-(b1+b3)))\n\telif a2>b2:\n\t\tminn = max(0,min(b3,a2-(b1+b2)))\n\telse:\n\t\tminn = max(0,min(b1,a3-(b3+b2)))\n\nprint(minn,maxx)\n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "def can_see_white_sheet(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    if x1 >= x6 and x2 <= x5 and y1 >= y6 and y2 <= y5:\n        return False\n    if x1 >= x4 and x2 <= x3 and y1 >= y4 and y2 <= y3:\n        return False\n    if x1 >= x4 and x1 < x3 and y1 >= y3 and y1 < y4:\n        return True\n    if x2 <= x3 and x2 > x4 and y1 >= y3 and y1 < y4:\n        return True\n    if x1 >= x4 and x1 < x3 and y2 <= y3 and y2 > y4:\n        return True\n    if x2 <= x3 and x2 > x4 and y2 <= y3 and y2 > y4:\n        return True\n    if x1 >= x3 and x1 < x6 and y1 >= y6 and y1 < y5:\n        return True\n    if x2 <= x6 and x2 > x3 and y1 >= y6 and y1 < y5:\n        return True\n    if x1 >= x3 and x1 < x6 and y2 <= y6 and y2 > y5:\n        return True\n    if x2 <= x6 and x2 > x3 and y2 <= y6 and y2 > y5:\n        return True\n    return False\n\nif __name__ == \"__main__\":\n    x1, y1, x2, y2 = map(int, input().split())\n    x3, y3, x4, y4 = map(int, input().split())\n    x5, y5, x6, y6 = map(int, input().split())\n\n    if can_see_white_sheet(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n        print(\"YES\")\n    else", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "def minimum_coins(n, x):\n    x.sort()\n    mid = x[n // 2]\n    coins = 0\n    for i in range(n):\n        coins += abs(x[i] - mid) // 2\n    return coins\n\nn = int(input())\nx = list(map(int, input().split()))\nprint(minimum_coins(n, x))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "x = input().split()\nd = int(x[0])\nt = int(x[1])\ns = int(x[2])\n\nif d / t <= s:\n    print((\"Yes\"))\nelse:\n    print(\"No\")", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "def is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef find_min_prime(X):\n    while True:\n        if is_prime(X):\n            return X\n        X += 1\n\nif __name__ == \"__main__\":\n    X = int(input())\n    print(find_min_prime(X))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "def max_length_increasing_subarray(arr):\n    n = len(arr)\n    if n <= 2:\n        return n\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n\nn = int(input())\narr = list(map(int, input().split()))\nans = max_length_increasing_subarray(arr)\nprint(ans)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "n = int(input())\ncoords = list(map(int, input().split()))\n\neven, odd = 0, 0\nfor coord in coords:\n    if coord % 2 == 0:\n        even += 1\n    else:\n        odd += 1\n\nprint(min(even, odd))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "def solve(n):\n    if n < 0 or n > 2000000000:\n        raise ValueError(\"Input must be between 0 and 2000000000.\")\n\n    if n == 0:\n        return 0\n\n    result = 0\n    while n > 1:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n -= 1\n        result += 1\n\n    return result\n\n\nif __name__ == \"__main__\":\n    print(solve(11))\n    print(solve(14))\n    print(solve(61441))\n    print(solve(571576))\n    print(solve(2128506))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "s = input()\nbool = True\nfor i in range(len(s)):\n    if i % 2 == 0:\n        if s[i] != 'R' and s[i] != 'U' and s[i] != 'D':\n            bool = False\n    else:\n        if s[i] != 'L' and s[i] != 'U' and s[i] != 'D':\n            bool = False\nif bool:\n    print('Yes')\nelse:\n    print('No')", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "def solve(n, a):\n    # Find the minimum height of the wall\n    min_height = min(a)\n    # Initialize the number of bricks required\n    num_bricks = 0\n\n    # Iterate through the wall\n    for height in a:\n        # Calculate the difference between the current height and the minimum height\n        diff = height - min_height\n        # Add the difference to the number of bricks required\n        num_bricks += diff\n\n    # If the number of bricks required is divisible by 2, the wall can be completed\n    if num_bricks % 2 == 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n\n# Input the number of parts of the wall\nn = int(input())\n# Input the heights of the parts of the wall\na = list(map(int, input().split()))\n\n# Call the solve function and print the result\nprint(solve(n, a))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "import math\na,b = list(map(int,input().split()))\n\ndef lcm(x,y):\n    return (x * y) // math.gcd(x, y)\n\nprint((lcm(a,b)))\n\n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "N = int(input())\nA = list(map(int, input().split()))\nt = \"APPROVED\"\nfor i in range(len(A)):\n    if A[i]%2==0:\n        if A[i]%3==0 or A[i]%5==0:\n            continue\n        else:\n            t = \"DENIED\"\nprint(t)", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "a = int(input())\n\n# Check if a is a multiple of 13\nif a % 13 == 0:\n    print(1)\nelse:\n    print(0)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "# \u5165\u529b\u3092\u53d7\u3051\u53d6\u308b\nN=int(input())\nS=input()\n\n# \u6587\u5b57c\u3092N\u6587\u5b57\u305a\u3089\u3059\u3053\u3068\u3092\u8003\u3048\u308b\uff08A\u3092\u57fa\u6e96\u3068\u3057\u305f26\u9032\u6570\u3092\u8003\u3048\u308b\uff09\n\n# A\u306e\u6587\u5b57\u30b3\u30fc\u30c9\u3092\u53d6\u5f97\u3059\u308b\ncode_A = ord('A')\n\nresults = ''\n\nfor c in S:\n    # \u6587\u5b57c\u3092n\u6587\u5b57\u30b7\u30d5\u30c8\u3057\u305f\u6587\u5b57\u30b3\u30fc\u30c9\u3092\u6c42\u3081\u308b\n    # \u6587\u5b57c\u3092n\u6587\u5b57\u30b7\u30d5\u30c8\u3057\u305f\u6587\u5b57\u30b3\u30fc\u30c9\u304b\u3089(A\u3067\u898f\u683c\u5316\u3059\u308b\u305f\u3081\u306b)A\u306e\u6587\u5b57\u30b3\u30fc\u30c9\u3092\u6e1b\u7b97\u3057\u306626\u3067\u5272\u3063\u305f\u4f59\u308a\u3092\u8003\u3048\u308b\n    after_n = (ord(c)+N-code_A)%26\n    \n    # \u7d50\u679c\u3092\u6587\u5b57\u30ea\u30b9\u30c8\u306b\u8ffd\u52a0\u3057\u3066\u3044\u304f\n    results += chr(code_A+after_n)\n\n# \u51fa\u529b\u3059\u308b\nprint(results)", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "def isSubSequence(str1,str2,m,n): \n    j = 0 \n    i = 0 \n    while j<m and i<n: \n        if str1[j] == str2[i]:     \n            j = j+1    \n        i = i + 1\n    return j==m\ns=input()\nt=input()\nLengthT=len(t)\nA=[]\nfor i in range(len(s)):\n    for j in range(i+1,len(s)+1):\n        p=s[:i]+s[j:]\n        if isSubSequence(t,p,LengthT,len(p)):\n            A.append(j-i)\ntry:\n    print(max(A))\nexcept:\n    print(0)", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "def solve(s):\n    n = len(s)\n    a = s.count('0')\n    b = s.count('1')\n    c = s.count('2')\n    i = 0\n    j = n - 1\n    while i < j and a + b == c:\n        while i < j and s[i] != '1':\n            i += 1\n        while j > i and s[j] != '2':\n            j -= 1\n        if i < j:\n            s = s[:i] + '2' + s[i + 1:j] + '1' + s[j + 1:]\n            i += 1\n            j -= 1\n            a += 1\n            c -= 1\n    if a + b == c:\n        return s\n    else:\n        return 'IMPOSSIBLE'\n\nn = int(input())\ns = input()\nans = solve(s)\nif ans == 'IMPOSSIBLE':\n    print(ans)\nelse:\n    print(''.join(sorted(ans)))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "N = int(input())\nL = sorted(list(map(int, input().split())))\n \nm = L[-1]\ns = sum(L[:-1])\n \nif m < s: print('Yes')\nelse: print('No')", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "n = int(input())\nodd = sum(e & 1 for e in map(int, input().split()))\nprint(min(odd, n - odd))", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "n = int(input())\ns = input()\ndiv = 1\n\nwhile div<=n:\n    if n%div==0:\n        tmp = s[:div]\n        s = tmp[::-1] + s[div:]\n    div += 1\n\nprint(s)\n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "def solution(n, m, matrix):\n    count = 0\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] != i * m + j + 1:\n                count += 1\n    return count\n\n\nn, m = map(int, input().split())\nmatrix = []\nfor _ in range(n):\n    matrix.append(list(map(int, input().split())))\nprint(solution(n, m, matrix))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "import math\n \n \nclass Read:\n    @staticmethod\n    def string():\n        return input()\n \n    @staticmethod\n    def int():\n        return int(input())\n \n    @staticmethod\n    def list(sep=' '):\n        return input().split(sep)\n \n    @staticmethod\n    def list_int(sep=' '):\n        return list(map(int, input().split(sep)))\n \nresult = math.inf\n \ndef solve():\n  n = Read.int()\n  a = Read.list_int();\n  for i in range(n):\n    for j in range(i + 2, n):\n      if a[i] == a[j]:\n        print('YES')\n        return\n  print('NO')\n \n# query_count = 1\nquery_count = Read.int()\nwhile query_count:\n    query_count -= 1\n    solve()", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "from collections import defaultdict, deque\n\n# Find the diameter of the tree\ndef find_diameter(n, edges):\n    graph = defaultdict(list)\n    for u, v in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n\n    # Choose an arbitrary vertex as the root\n    root = 1\n\n    # Perform DFS to find the farthest vertex from the root\n    dist = {}\n    max_dist = 0\n    farthest_vertex = None\n    for vertex in range(1, n + 1):\n        if vertex not in dist:\n            queue = deque([(vertex, 0)])\n            dist[vertex] = 0\n            while queue:\n                current, distance = queue.popleft()\n                for neighbor in graph[current]:\n                    if neighbor not in dist:\n                        dist[neighbor] = distance + 1\n                        queue.append((neighbor, dist[neighbor]))\n            max_dist = max(max_dist, dist[vertex])\n            farthest_vertex = vertex\n\n    # Perform DFS again to find the farthest vertex from the farthest vertex\n    dist = {}\n    max_dist = 0\n    farthest_vertex2 = None\n    for vertex in range(1, n + 1):\n        if vertex not in dist:\n            queue = deque([(vertex, 0)])\n            dist[vertex] = 0\n            while queue:\n                current, distance = queue.popleft()\n                for neighbor in graph[current]:\n                    if neighbor not in dist:\n                        dist[neighbor] =", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "n, m = list(map(int, input().split()))\n\ns = [0] * (n + 1)\nfor i in range(m):\n    l, r = list(map(int, input().split()))\n    s[l - 1] += 1\n    s[r] -= 1\n\nfor i in range(n):\n    s[i + 1] += s[i]\nprint((s.count(m)))\n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "def count_choices(problems):\n    count = 0\n    for i in range(1, len(problems)):\n        abc = problems[:i]\n        arc = problems[i:]\n        if len(abc) == len(arc):\n            count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    problems = list(map(int, input().split()))\n    problems.sort()\n\n    count = count_choices(problems)\n    print(count)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "def min_cost_of_connecting(n, k, s):\n    # n is the number of rooms, k is the range of router, s is the string of rooms with a router spot\n    routers = []\n    for i in range(n):\n        if s[i] == '1':\n            routers.append(i)\n    # routers is a list of rooms with a router spot\n\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        dp[i] = dp[i - 1] + i\n    # dp[i] is the minimum cost of connecting rooms from 1 to i\n\n    for router in routers:\n        for i in range(router + k + 1, n + 1):\n            dp[i] = min(dp[i], dp[max(0, i - k - 1)] + router + 1)\n    # dp[i] is updated to consider the cost of placing a router in room router and connecting rooms from router + k + 1 to i\n\n    return dp[n]\n\n\nn, k = map(int, input().split())\ns = input().strip()\n\nprint(min_cost_of_connecting(n, k, s))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "s = input()\n\nred = 0\nblue = 0\nfor i in s:\n  if i == \"0\":\n    red += 1\n  else :\n    blue += 1\n    \nprint((red+blue-abs(red-blue)))\n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "def solve(n, k, x, beauty):\n    dp = [[0 for _ in range(x+1)] for _ in range(n)]\n    dp[0][0] = 0\n    dp[0][1] = beauty[0]\n\n    for i in range(1, n):\n        for j in range(x+1):\n            dp[i][j] = dp[i-1][j]\n            if j >= 1:\n                dp[i][j] = max(dp[i][j], dp[i-1][j-1] + beauty[i])\n            if i >= k:\n                dp[i][j] = max(dp[i][j], dp[i-k][j])\n\n    return dp[n-1][x]\n\nif __name__ == \"__main__\":\n    n, k, x = map(int, input().split())\n    beauty = list(map(int, input().split()))\n\n    ans = solve(n, k, x, beauty)\n    if ans == 0:\n        print(-1)\n    else:\n        print(ans)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "n = int(input())\nmas = list(map(int, input().split()))\ncou = []\nfor i in range(n + 1):\n\tcou.append(0)\nx = -1\nfor i in range(n):\n\tif mas[i] == 0:\n\t\tif x == -1:\n\t\t\tx = i\n\t\telse:\n\t\t\ty = i\nfor i in range(n):\n\tcou[mas[i]] = 1\nnum = n\nfor i in range (1, n + 1):\n\tif cou[i] != 1:\n\t\tcou[i] = 1\n\t\twhile True:\n\t\t\tnum -= 1\n\t\t\tif mas[num] == 0:\n\t\t\t\tmas[num] = i\n\t\t\t\tbreak\nfor i in range(n):\n\tif mas[i] == i + 1:\n\t\tif i == x:\n\t\t\tmas[i], mas[y] = mas[y], mas[i]\n\t\telse:\n\t\t\tmas[i], mas[x] = mas[x], mas[i]\nprint(*mas)\n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "# Input the value of N from the user\nN = int(input())\n\n# Initialize the result to False\nresult = False\n\n# Iterate over all possible combinations of cakes and doughnuts\nfor cakes in range(N // 4 + 1):\n    for doughnuts in range(N // 7 + 1):\n        if cakes * 4 + doughnuts * 7 == N:\n            result = True\n            break\n\n# Print the result\nif result:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "a = int(input())\n\n# Calculate the output value\noutput = a ** 3\n\n# Print the output\nprint(output)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "#!/usr/bin/env python3\nimport sys\nfrom collections import Counter\n\n# Input the number of switches and bulbs\nN, M = map(int, input().split())\n\n# Input the switches each bulb is connected to\nswitches = []\nfor _ in range(M):\n    k = int(input())\n    switches.append(list(map(int, input().split())))\n\n# Input the parity of each bulb\nparity = list(map(int, input().split()))\n\n# Count the number of switches each bulb is connected to\ncount = Counter()\nfor switch_set in switches:\n    for switch in switch_set:\n        count[switch] += 1\n\n# Create a dictionary to store the number of combinations\n# that light each bulb\ncombinations = {}\n\n# Iterate through each switch\nfor switch in range(1, N + 1):\n    # Initialize the number of combinations for each bulb\n    combinations[switch] = [0] * M\n\n    # Iterate through each bulb\n    for bulb in range(M):\n        # Check if the switch is connected to the bulb\n        if switch in switches[bulb]:\n            # If the switch is connected to the bulb,\n            # increment the number of combinations that\n            # light the bulb\n            combinations[switch][bulb] += 1\n\n    # Compute the number of combinations that light all bulbs\n    total = 1\n    for bulb in range(M):\n        if parity[bulb] == 0:\n            total *= 2 ** combinations[switch][bulb]\n        else:\n            total *= 2 ** (count[switch] - combinations[switch][bulb])\n\n    # Print the result\n    print(total)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "import sys\nimport numpy as np\ninput = sys.stdin.readline\nN,M,C = list(map(int,input().split()))\nB = np.array(list(map(int,input().split())))\ndef main():\n  count = 0\n  for i in range(N):\n    A = np.array(list(map(int,input().split())))\n    if sum(A*B) + C > 0:\n      count += 1\n  return count\n\ndef __starting_point():\n  print((main()))\n\n__starting_point()", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "a,b,c,d=map(int,input().split())\n\n\n\nprint(max([a*c, a*d, b*c, b*d]))", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "k=int(input())\nrem=0\n\nfor i in range(k):\n    rem=(10*rem+7)%k\n    if rem==0:\n        print(i+1)\n\n        break\n    if i==k-1:\n        print(-1)", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "def find_number_of_hard_cheeses(cheeses):\n    count = 0\n    for cheese in cheeses:\n        if cheese[1] == \"hard\":\n            count += 1\n    return count\n\n\n# Take input for the number of cheeses\nnum_cheeses = int(input())\n\n# Initialize an empty list to store the cheeses\ncheeses = []\n\n# Take input for each cheese\nfor _ in range(num_cheeses):\n    cheese = input().split()\n    cheeses.append(cheese)\n\n# Call the function to find the number of hard cheeses\nnum_hard_cheeses = find_number_of_hard_cheeses(cheeses)\n\n# Print the result\nprint(num_hard_cheeses)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "from collections import deque\nn=int(input())\na=list(map(int,input().split()))\na=deque(a)\np=0\nb=[]\nfor i in range(n):\n    if a[0]>=a[-1] and a[-1]>p:\n        # print(\"R\",end='')\n        p=a.pop()\n        b.append(\"R\")\n    elif a[0]>=a[-1] and a[0]>p:\n        # print(\"L\",end='')\n        p=a.popleft()\n        b.append(\"L\")\n    elif a[-1]>=a[0] and a[0]>p:\n        # print(\"L\",end='')\n        p=a.popleft()\n        b.append(\"L\")\n    elif a[-1]>=a[0] and a[-1]>p:\n        # print(\"R\",end='')\n        p=a.pop()\n        b.append(\"R\")\n    else:\n        break\n# print()    \nprint(len(b))\nprint(\"\".join(b))\n        \n    \n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "# Function to find the lexicographically smallest sequence of variable values\ndef solve(golorp):\n    # Define the possible variable values\n    variables = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\n    # Initialize the sequence\n    sequence = []\n    # Iterate through the name of the golorp\n    for i in range(len(golorp)):\n        # If the current character is '(' or '?'\n        if golorp[i] == '(' or golorp[i] == '?':\n            # Append the first variable to the sequence\n            sequence.append(variables[0])\n        # If the current character is '_'\n        elif golorp[i] == '_':\n            # Append the second variable to the sequence\n            sequence.append(variables[1])\n        # If the current character is '+' or '*'\n        elif golorp[i] == '+' or golorp[i] == '*':\n            # Append the third variable to the sequence\n            sequence.append(variables[2])\n        # If the current character is '-' or '/'\n        elif golorp[i] == '-' or golorp[i] == '/':\n            # Append the fourth variable to the sequence\n            sequence.append(variables[3])\n        # If the current character is ':' or '>'\n        elif golorp[i] == ':' or golorp[i] == '>':\n            # Append the fifth variable to the sequence\n            sequence.append(variables[4])\n        # If the current character is ',' or '<'\n        elif golorp[i] == ',' or golorp[i] == '<':\n            # Append the sixth variable to the sequence\n            sequence.append(variables[5])\n        # If the current character is '.' or '!'\n        elif golorp[i] == '.' or golorp[i] == '!':\n            # Append the seventh variable to the sequence\n            sequence.append(variables[6])\n        # If the current character is '|' or '='\n        elif golorp[i] == '|' or gol", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "def base_minus_two(N):\n    if N == 0:\n        return \"0\"\n    if N < 0:\n        return \"-\" + base_minus_two(-N)\n    result = \"\"\n    while N > 0:\n        result = str(N % 2) + result\n        N //= -2\n    return result\n\ndef main():\n    N = int(input())\n    print(base_minus_two(N))\n\nif __name__ == \"__main__\":\n    main()", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "N = int(input())\nN_ri = round(pow(N, 1/2))\n\nfor i in range(N_ri, 0, -1):\n  if N % i == 0:\n    j = N // i\n    break\nprint(i + j - 2)", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "import sys\ninput = sys.stdin.readline\n\nn, m = list(map(int, input().split()))\narr = [[] for i in range(m)]\n\nfor _ in range(n):\n    l = list(map(int, input().split()))\n    for i in range(m):\n        arr[i].append(l[i])\n\nout = 0\nfor i in range(m):\n    l = arr[i]\n    \n    best = list(range(0, -n, -1))\n    for j in range(n):\n        v = l[j] - i - 1\n        \n        if v % m == 0:\n            correct = v // m\n            if 0 <= correct < n:\n                best[j - correct] += 1\n    out += (n - max(best))\n\nprint(out)\n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "n = int(input())\ns = input()\n\n# Check if it's possible to sort the string\ndef is_sortable(s):\n    colors = {0: [], 1: []}\n    for i in range(len(s)):\n        if s[i] < s[i - 1] and s[i] not in colors[1]:\n            colors[1].append(s[i])\n        elif s[i] > s[i - 1] and s[i] not in colors[0]:\n            colors[0].append(s[i])\n    return colors[0] == sorted(colors[0]) and colors[1] == sorted(colors[1])\n\n# Output the result\nif is_sortable(s):\n    print(\"YES\")\n    print(\"0\" * n)\nelse:\n    print(\"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "r=float(input())\na=0\nh=0\nfor i in range(1,11):\n    for j in range(1,11):\n        c=pow(j*j+i*i/4.,0.5)\n        rtest=i*j*0.5/c\n        if abs(rtest-r)<0.00001:\n            a=i\n            h=j\nprint(a,h)", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "# Read the input\nn = int(input())\na = list(map(int, input().split()))\n\n# Calculate the prefix sum\nprefix_sum = [0]\nfor i in range(n):\n    prefix_sum.append(prefix_sum[i] + a[i])\n\n# Calculate the suffix sum\nsuffix_sum = [0] * (n + 1)\nfor i in range(n - 1, -1, -1):\n    suffix_sum[i] = suffix_sum[i + 1] + a[i]\n\n# Find the block sums\nblock_sums = {}\nfor i in range(n):\n    for j in range(i + 1, n + 1):\n        block_sum = prefix_sum[j] - prefix_sum[i]\n        if block_sum not in block_sums:\n            block_sums[block_sum] = []\n        block_sums[block_sum].append((i, j))\n\n# Find the maximum number of blocks\nmax_blocks = 0\nmax_block_sum = None\nfor block_sum, blocks in block_sums.items():\n    if len(blocks) > max_blocks:\n        max_blocks = len(blocks)\n        max_block_sum = block_sum\n\n# Output the result\nif max_block_sum is None:\n    print(0)\nelse:\n    print(max_blocks)\n    for block in block_sums[max_block_sum]:\n        print(block[0] + 1, block[1])", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "import sys\ninput = sys.stdin.readline\n\n\nn=int(input())\nQ=list(map(int,input().split()))\n\nP=[0]\nfor q in Q:\n    P.append(P[-1]+q)\nMIN=min(P)\n\nP2=[p+1-MIN for p in P]\n\nP3=sorted(P2)\n\nif P3==list(range(1,n+1)):\n    print(*P2)\nelse:\n    print(-1)\n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "x = int(input())\nMAX = 10**5+10\nres = [0 for i in range(MAX)]\nans = 0\n\nfor i in range(2,MAX):\n    j = i\n    if(res[i] != 0):\n        continue\n    while(j < MAX):\n        if(res[j] == 0):\n            res[j] = i\n        j += i\n        \nfor i in range(x,MAX) :\n    if(res[i] == i):\n        ans = i\n        break\nprint(ans)", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "n = int(input())\n\nhexa = hex(n)\n\n\nx = {\n    '0': 1,\n    '1': 0,\n    '2': 0,\n    '3': 0,\n    '4': 1,\n    '5': 0,\n    '6': 1,\n    '7': 0,\n    '8': 2,\n    '9': 1,\n    'a': 1,\n    'b': 2,\n    'c': 0,\n    'd': 1,\n    'e': 0,\n    'f': 0\n}\n\ndef toInt(c):\n    return x[c]\n\n\nprint(sum(map(toInt, hexa[2:])))\n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "print('1001010111001010'[int(input())-1])", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "x, k, d = list(map(int, input().split()))\n\nx = -x if x <= 0 else x\n\nif x - d * k >= 0:\n    print((x - d * k))\nelse:\n    a = x // d\n    b = a + 1\n    rest_cnt = k - a\n    if rest_cnt % 2 == 0:\n        print((abs(x - d * a)))\n    else:\n        print((abs(x - d * b)))\n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "N,K,Q=list(map(int,input().split()))\nscore=[K for _ in range(N)]\nfor _ in range(Q):\n    A=int(input())\n    score[A-1]+=1\nfor i in range(N):\n    if score[i]-Q>0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "d = set()\n\nn = int(input())\na = [int(x) for x in input().split()]\nb = []\nfor i in range(n - 1, -1, -1):\n    if a[i] in d:\n        continue\n    b.append(a[i])\n    d.add(a[i])\nb.reverse()\n\nprint(len(b))\nfor x in b:\n    print(x, end=' ')\n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "import math\n\nmod = 1000000007\n\ndef solve(n, s):\n    dp = [[0] * (len(s) + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(1, n + 1):\n        for j in range(len(s) + 1):\n            dp[i][j] += dp[i - 1][j]\n            if j < len(s) and s[j] == '(':\n                dp[i][j] += dp[i - 1][j + 1]\n            dp[i][j] %= mod\n    return dp[n][0]\n\nn = int(input())\ns = input()\nans = solve(n, s)\nprint(ans)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "def solve(X, K, D):\n    # If K is odd, the destination will be X + K * D.\n    # If K is even, the destination will be X + (K - 1) * D.\n    if K % 2 == 0:\n        K -= 1\n    destination = X + K * D\n    return abs(destination)\n\n\n# Input\nX, K, D = map(int, input().split())\n\n# Output\nprint(solve(X, K, D))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "import math\n\ndef count_shichi_go_san_numbers(N):\n    count = 0\n    for i in range(1, N+1):\n        str_i = str(i)\n        if '7' in str_i and '5' in str_i and '3' in str_i:\n            count += 1\n    return count\n\nif __name__ == \"__main__\":\n    N = int(input())\n    result = count_shichi_go_san_numbers(N)\n    print(result)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "# Takes the input of number of strings\nn = int(input())\n\n# Initialize an empty list to store the strings\nstrings = []\n\n# Reads the input strings and appends them to the list\nfor _ in range(n):\n    strings.append(input())\n\n# Function to check if a string is a substring of another string\ndef isSubstring(s1, s2):\n    return s1 in s2\n\n# Function to check if the list of strings can be reordered in the required order\ndef canReorder(strings):\n    # Initialize a list to store the reordered strings\n    reorderedStrings = []\n\n    # Iterate over all the strings\n    for i in range(len(strings)):\n        # Initialize a flag to check if the current string is a substring of any of the strings in the reordered list\n        isSubstringFlag = False\n\n        # Iterate over the reordered list\n        for j in range(len(reorderedStrings)):\n            # Check if the current string is a substring of the string at the current index of the reordered list\n            if isSubstring(strings[i], reorderedStrings[j]):\n                # Set the flag to True\n                isSubstringFlag = True\n                # Insert the current string at the current index of the reordered list\n                reorderedStrings.insert(j, strings[i])\n                # Break out of the loop\n                break\n\n        # If the current string is not a substring of any of the strings in the reordered list\n        if not isSubstringFlag:\n            # Append the current string to the reordered list\n            reorderedStrings.append(strings[i])\n\n    # Check if the reordered list is the same as the original list\n    if reorderedStrings == strings:\n        # The list can be reordered in the required order\n        return True\n    else:\n        # The list cannot be reordered in the required order\n        return False\n\n# Function to print the reordered list of strings\ndef printReorderedStrings(strings):\n    # Check if the list of strings can be reordered in the required order\n    if canReorder(strings):\n        # Print \"YES\"", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "import re\n\ns = input()\nops = re.split('([+-])', s)\nassert len(ops) % 2 == 1\nops = ['+'] + ops\n\ntotal = 0\nfor i in range(0, len(ops), 2):\n    if ops[i] == '+':\n        total += int(ops[i+1])\n    elif ops[i] == '-':\n        total -= int(ops[i+1])\n    else:\n        assert False\n\nfor b in bytes(str(total), 'ascii'):\n    print('+' * b + '.>')\n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "# Read input\nD, N = map(int, input().split())\n\n# If D is 0, find the N-th smallest integer that can be divided by 100 exactly 0 times\nif D == 0:\n    result = N\n\n# If D is 1, find the N-th smallest integer that can be divided by 100 exactly 1 times\nelif D == 1:\n    result = 100 * N\n\n# If D is 2, find the N-th smallest integer that can be divided by 100 exactly 2 times\nelif D == 2:\n    result = 10000 * N\n\n# Print the result\nprint(result)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "n=int(input())\nl=[]\nfor i in input().split():\n    tmp=1&int(i)\n    if l==[] or l[-1]!=tmp: l.append(tmp)\n    else: l.pop()\n\nprint(\"YES\" if len(l)<2 else \"NO\")", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "def max_range(a, segments):\n    max_value = 0\n    max_range = []\n    for i in range(len(segments)):\n        segment = segments[i]\n        l, r = segment\n        new_range = min(a[l-1:r]) - 1\n        if new_range > max_value:\n            max_value = new_range\n            max_range = [i+1]\n        elif new_range == max_value:\n            max_range.append(i+1)\n    return max_value, len(max_range), sorted(max_range)\n\n\nif __name__ == '__main__':\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    segments = []\n    for _ in range(m):\n        l, r = map(int, input().split())\n        segments.append([l, r])\n    max_value, q, max_range = max_range(a, segments)\n    print(max_value)\n    print(q)\n    print(*max_range)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "from collections import defaultdict, deque\n\ndef build_graph(n, edges):\n    graph = defaultdict(list)\n    for u, v in edges:\n        graph[u].append(v)\n    return graph\n\ndef bfs(graph, start):\n    queue = deque([start])\n    visited = set([start])\n    while queue:\n        node = queue.popleft()\n        for neighbor in graph[node]:\n            if neighbor not in visited:\n                queue.append(neighbor)\n                visited.add(neighbor)\n    return visited\n\ndef solve(n, m, s, edges):\n    graph = build_graph(n, edges)\n    reachable = bfs(graph, s)\n    return n - len(reachable)\n\nif __name__ == \"__main__\":\n    n, m, s = map(int, input().split())\n    edges = []\n    for _ in range(m):\n        edges.append(tuple(map(int, input().split())))\n    result = solve(n, m, s, edges)\n    print(result)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "n = int(input())\nc = 0\nwhile 1:\n    c += 1\n    if n == 0:\n      break\n    if n > 0:\n        if c%2 == 1: \n            if (4**(c//2+1)-1)//3 >= n:\n                break\n    elif n < 0:\n        if c%2 == 0:\n            if abs(2*(4**(c//2)-1))//3 >= abs(n):\n                break\nif n == 0:\n    ans = [\"0\"]\nelse:\n    k = 0\n    ans = []\n    while k < c:\n        ans.append(str(n%2))\n        n = (-1)* (n//2)\n        k += 1\nprint(\"\".join(ans[::-1]))", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "for i in range(int(input())):\n  n,m=[int(i) for i in input().split()]\n  if n==1:\n    print(0)\n  elif n==2:\n    print(m)\n  else:\n    print(2*m)\n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "M=10**9+7\nn=int(input())\ns=[c=='(' for c in input()]\nm=len(s)\nz=[[0,0]]\nfor v in s:\n a=z[-1][v]\n z[-1][v]=len(z)\n z+=[z[a][:]]\nz[m]=[m,m]\ndp=[[0]*(m+1) for _ in range(n+1)]\ndp[0][0]=1\nfor _ in range(2*n):\n ndp=[[0]*(m+1) for _ in range(n+1)]\n for i in range(n+1):\n  for j in range(m+1):\n   if i>0:ndp[i-1][z[j][0]]=(ndp[i-1][z[j][0]]+dp[i][j])%M\n   if i<n:ndp[i+1][z[j][1]]=(ndp[i+1][z[j][1]]+dp[i][j])%M\n dp=ndp\n \nprint(dp[0][m])", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "x = int(input())\nyear = 0\nsum = 100\n\nwhile sum < x:\n    sum += int(sum//100)\n    year += 1\n\nprint(year)", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "def gcd(a, b, c):\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n    return gcd(gcd(a, b), c)\n\ndef solve(K):\n    ans = 0\n    for a in range(1, K + 1):\n        for b in range(1, K + 1):\n            for c in range(1, K + 1):\n                ans += gcd(a, b, c)\n    return ans\n\ndef main():\n    K = int(input())\n    print(solve(K))\n\nif __name__ == \"__main__\":\n    main()", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nn = int(input())\nsp = [[]for i in range(n)]\nns = []\nfor i in range(2*n-2):\n    s = input()\n    sp[len(s)].append(s)\n    ns.append(s)\ns1 = sp[n-1][0] + sp[n-1][1][-1]\ns2 = sp[n-1][1][0] + sp[n-1][0]\n\nss = [s1, s2]\ncorrect_s = ''\nres = True\nii = 0\ncorrect_s = ss[ii]\nfor i in range(1, n):\n    if correct_s[:i] == sp[i][0] and correct_s[-i:] == sp[i][1]:\n        continue\n    if correct_s[:i] == sp[i][1] and correct_s[-i:] == sp[i][0]:\n        continue\n    res = False\n    break\nif res: pass\nelse: correct_s = ss[1]\nans = ''\nf = [0]*n\nfor s in ns:\n    if f[len(s)] == 0:\n        if correct_s[:len(s)] == s: \n            ans += 'P'\n            f[len(s)] = 1\n        else: \n            ans += 'S'\n            f[len(s)] = 2\n    else:\n        res = 'P' if f[len(s)] == 2 else 'S'\n        ans += res\nprint(ans)\n    \n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "#!/usr/bin/env python3\n\ns = [int(i) for i in input()]\nans = 0\nlast = 0\ndef check(x):\n    Sum = 0\n    while x != 0:\n        Sum += x % 10\n        x //= 10\n        if Sum % 3 == 0:\n            return True\n    return False\n\nfor i in range(len(s)):\n    if s[i] % 3 == 0:\n        ans += 1\n        last = 0\n    else:\n        last = last * 10 + s[i]\n        if check(last):\n            ans += 1\n            last = 0\nprint(ans)\n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "import sys\nfrom functools import lru_cache\n\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nsys.setrecursionlimit(10 ** 9)\nINF = 1 << 60\nMOD = 1000000007\n\n\ndef main():\n    N, A, B, C = list(map(int, readline().split()))\n    (*L,) = list(map(int, read().split()))\n\n    @lru_cache(maxsize=None)\n    def rec(i, a, b, c):\n        if i == N:\n            return abs(a - A) + abs(b - B) + abs(c - C) - 30 if min(a, b, c) > 0 else INF\n\n        res0 = rec(i + 1, a, b, c)\n        res1 = rec(i + 1, a + L[i], b, c) + 10\n        res2 = rec(i + 1, a, b + L[i], c) + 10\n        res3 = rec(i + 1, a, b, c + L[i]) + 10\n\n        return min(res0, res1, res2, res3)\n\n    print((rec(0, 0, 0, 0)))\n    return\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "# Input\nN, M = map(int, input().split())\nprefectures = []\nfor i in range(M):\n    prefecture, year = map(int, input().split())\n    prefectures.append((prefecture, year))\n\n# Sort the cities in ascending order of establishment year\nprefectures.sort(key=lambda x: x[1])\n\n# Create a dictionary to store the cities belonging to each prefecture\ncities_by_prefecture = {}\nfor i, (prefecture, year) in enumerate(prefectures):\n    cities_by_prefecture.setdefault(prefecture, []).append(i + 1)\n\n# Print the ID numbers for all the cities\nfor i, (prefecture, year) in enumerate(prefectures):\n    prefecture_str = str(prefecture).zfill(6)\n    city_str = str(cities_by_prefecture[prefecture].pop(0)).zfill(6)\n    id_number = prefecture_str + city_str\n    print(id_number)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "n, m = map(int, input().split())\nif m % n == 0:\n    k = m // n\n    res = 0\n    while k % 2 == 0:\n        k //= 2\n        res += 1\n    while k % 3 == 0:\n        k //= 3\n        res += 1\n    if k > 1:\n        print(-1)\n    else:\n        print(res)\nelse:\n    print(-1)", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "N = int(input())\nlsp = list(map(int,input().split()))\nii = 0\nfor i in range(N):\n    if i+1 == lsp[i]:\n        continue\n    ii += 1\nif ii >2:\n    print('NO')\nelse:\n    print('YES')", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "n = int(input())\nl = list(map(int, input().split()))\ns = sum(l)\nmax1, max2 = sorted(l, reverse=True)[:2]\n\npretty_indexes = []\nfor i, ll in enumerate(l, start=1):\n    if (s - ll) == 2 * (max1 if ll != max1 else max2):\n        pretty_indexes.append(str(i))\nprint(len(pretty_indexes))\nprint(\" \".join(pretty_indexes))\n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "import sys\ninput = sys.stdin.readline\nins = lambda: input().rstrip()\nini = lambda: int(input().rstrip())\ninm = lambda: map(int, input().rstrip().split())\ninl = lambda: list(map(int, input().split()))\nout = lambda x, s='\\n': print(s.join(map(str, x)))\n\na = inl()\nb = inl()\nc = inl()\nn = ini()\nbingo = []\nfor _ in range(n):\n    bingo.append(ini())\nct = [0] * 9\nfor i in bingo:\n    if i in a:\n        ct[a.index(i)] = 1\n    if i in b:\n        ct[b.index(i) + 3] = 1\n    if i in c:\n        ct[c.index(i) + 6] = 1\nif sum(ct[:3]) == 3 or sum(ct[3:6]) == 3 or sum(ct[6:9]) == 3:\n    print(\"Yes\")\nelif (ct[0] + ct[4] + ct[8]) == 3 or (ct[2] + ct[4] + ct[6]) == 3:\n    print(\"Yes\")\nelif (ct[0] + ct[3] + ct[6]) == 3 or (ct[1] + ct[4] + ct[7]) == 3 or (ct[2] + ct[5] + ct[8]) == 3:\n    print(\"Yes\")\nelse:\n    print(\"No\")    ", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "N = int(input())\ncnt = 0\n\nfor i in range((N // 4) + 1):\n    for j in range((N // 7) + 1):\n        if 4 * i + 7 * j == N:\n            cnt += 1\nif cnt > 0:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "def multiply(a,b):\n  return a * b if a < 10 and b < 10 else -1\n\nprint(multiply(*map(int, input().split())))", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "# Input the values of A, B, and K\nA, B, K = map(int, input().split())\n\n# Initialize the number of cookies\ntakahashi_cookies = A\naoki_cookies = B\n\n# Perform the actions K times\nfor _ in range(K):\n    # If Takahashi has one or more cookies, eat one of his cookies\n    if takahashi_cookies > 0:\n        takahashi_cookies -= 1\n    # Otherwise, if Aoki has one or more cookies, eat one of Aoki's cookies\n    elif aoki_cookies > 0:\n        aoki_cookies -= 1\n    # If they both have no cookies, do nothing\n\n# Print the numbers of Takahashi's and Aoki's cookies after K actions\nprint(takahashi_cookies, aoki_cookies)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "n = int(input())\na = [int(i) for i in input().split()]\na.extend(a)\ni, j = 0, 0\nm = 0\nwhile i < len(a):\n    while j < len(a) and a[j] == 1:\n        j += 1\n    j += 1\n    m = max(m, j - i - 1)\n    i = j\nprint(m)\n\n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "N, M = map(int, input().split())\n\n# Create a dictionary to store the condition\nconditions = {}\n\nfor _ in range(M):\n    s_i, c_i = map(int, input().split())\n    conditions[s_i] = c_i\n\n# Initialize the answer to -1\nanswer = -1\n\n# Generate all possible numbers with N digits\nfor i in range(10**N):\n    # Convert the number to a string\n    number = str(i)\n\n    # Check if the number has exactly N digits\n    if len(number) == N:\n        # Check if the number satisfies all conditions\n        valid = True\n        for s_i, c_i in conditions.items():\n            if int(number[s_i-1]) != c_i:\n                valid = False\n                break\n\n        # If the number satisfies all conditions, update the answer\n        if valid:\n            answer = i\n            break\n\n# Print the answer\nprint(answer)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "import math\n\ndef calculate_distance(A, B, H, M):\n    # Calculate the angle of the hour hand\n    hour_angle = (H + M / 60) * 30\n    # Calculate the angle of the minute hand\n    minute_angle = M * 6\n    # Calculate the x and y coordinates of the hour hand\n    x_hour = A * math.cos(math.radians(hour_angle))\n    y_hour = A * math.sin(math.radians(hour_angle))\n    # Calculate the x and y coordinates of the minute hand\n    x_minute = B * math.cos(math.radians(minute_angle))\n    y_minute = B * math.sin(math.radians(minute_angle))\n    # Calculate the distance between the two hands\n    distance = math.sqrt((x_hour - x_minute)**2 + (y_hour - y_minute)**2)\n    return distance\n\n# Take input from the user\nA, B, H, M = map(int, input().split())\n# Calculate the distance between the two hands\ndistance = calculate_distance(A, B, H, M)\n# Print the answer\nprint(distance)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "# input\nn = int(input())\nq = list(map(int, input().split()))\n\n# compute the p_1\np_1 = sum(q) + n\n\n# check if p_1 is not in the range [1, n]\nif p_1 < 1 or p_1 > n:\n    print(-1)\n    exit(0)\n\n# compute the p_2\np_2 = p_1 - q[0]\n\n# check if p_2 is not in the range [1, n]\nif p_2 < 1 or p_2 > n:\n    print(-1)\n    exit(0)\n\n# compute the rest of the permutation\np = [p_1, p_2]\nfor i in range(1, n - 1):\n    p_next = p[i] - q[i]\n    if p_next < 1 or p_next > n or p_next in p:\n        print(-1)\n        exit(0)\n    p.append(p_next)\n\n# print the permutation\nprint(*p)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "k = input()\nn = len(k)\nimport sys\nMin = sys.maxsize\nck = ['50','25','75']\nfor c in ck:\n    if c[0] in k and c[1] in k:\n        temp = 2*n - 3 - k.rfind(c[0]) - k.rfind(c[1]) \n        if (c[1]=='5'):\n            if k.rfind('5')==0 and k[1]=='0' and n>3:\n                add = 0\n                i = 1\n                while k[i] == '0':\n                    add += 1\n                    i += 1\n                temp += add\n        temp += k.rfind(c[0]) > k.rfind(c[1])\n        Min = min(temp,Min)\nif k.count('0')>1:\n    css = k.rfind('0')\n    temp = n-1 - css\n    k = k[:css] + k[css+1:] \n    temp += len(k)-1 - k.rfind('0')\n    Min = min(temp,Min)\nprint([Min,-1][Min==sys.maxsize])", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "t=int(input())\nfor _ in range(t):\n    s=input()\n    m=int(input())\n    b=list(map(int,input().split()))\n    slist=[]\n    for i in range(len(s)):\n        slist.append(s[i])\n    slist.sort()\n    slist.reverse()\n    slist2=[]\n    slist2.append([slist[0],1])\n    for i in range(1,len(s)):\n        if slist2[-1][0]==slist[i]:\n            slist2[-1][1]+=1\n        else:\n            slist2.append([slist[i],1])\n    pointer=0\n    done=[0]*m\n    ans=[0]*m\n    while sum(done)<m:\n        zeros=[]\n        for i in range(m):\n            if b[i]==0 and done[i]==0:\n                zeros.append(i)\n        num=len(zeros)\n        while slist2[pointer][1]<num:\n            pointer+=1\n        for i in zeros:\n            done[i]=1\n            ans[i]=slist2[pointer][0]\n            for j in range(m):\n                b[j]-=abs(i-j)\n        pointer+=1\n    print(''.join(ans))", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "import math\ndef lcm(x,y):\n    return (x*y)//(math.gcd(x,y))\n\nn=int(input())\nt=[int(input()) for _ in range(n)]\nans=1\nfor i in t:\n    ans=lcm(i,ans)\nprint(ans)", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "n, k = map(int, input().split())\na = list(map(int, input().split()))\n\ncount = {}\n\nfor x in a:\n    count.setdefault(x, 0)\n    count[x] += 1\n\nans = n\nfor x in count:\n    ans = min(ans, n-count[x])\n\nfor i in range(30):\n    flag = False\n    new_count = {}\n    for x in count:\n        if count[x] < k:\n            new_count.setdefault(x//2, 0)\n            new_count[x//2] += count[x]\n            flag = True\n    count = new_count\n    if flag:\n        ans -= 1\n    else:\n        break\n\nprint(ans)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "def mp():\n    return list(map(int, input().split()))\n\na, b, c = mp()\n\nk = min(a // 3, b // 2, c // 2)\na -= 3 * k\nb -= 2 * k\nc -= 2 * k\n\nm = 0\nfor i in range(7):\n    d = i\n    cnt = 0\n    x, y, z = a, b, c\n    while not(x < 0 or y < 0 or z < 0):\n        if d in [0, 3, 6]:\n            x -= 1\n        elif d in [1, 5]:\n            y -= 1\n        else:\n            z -= 1\n        d = (d + 1) % 7\n        cnt += 1\n    cnt -= 1\n    #print(cnt)\n    m = max(m, cnt)\n    cnt = 0\n    \nprint(7 * k + m)\n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "from math import sqrt\nn = int(input())\n\ns, h = 0, 0\nfor i in range(n):\n    a, b = input().split()\n    if b == 'soft':\n        s += 1\n    else:\n        h += 1\n\nk = 2 * max(s, h) - 1\nif s + h > k:\n    k += 1\n\nt = int(sqrt(k))\nif t * t < k:\n    t += 1\nprint(t)", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "n,m,d=[int(x) for x in input().split(' ')]\nlist1=[int(x) for x in input().split(' ')]\nx=(m+1)*(d-1)+sum(list1)\nlist2=[]\na=0\nb=0\nif x < n:\n    print('NO')\nelse:\n    print('YES')\n    n0=n-sum(list1)\n    while b <= m:\n        if a == 0:\n            if n0 >= d-1:\n                list2.extend(['0']*(d-1))\n                a+=1\n                b+=1\n                n0-=(d-1)\n            elif 0 < n0 < (d-1):\n                list2.extend(['0']*n0)\n                a+=1\n                b+=1\n                n0=0\n            else:\n                a+=1\n                b+=1\n        else:\n            list2.extend([str(b)]*list1[b-1])\n            a-=1\n    print(' '.join(list2)) \n        \n    \n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "\nn,r = map(int, input().split())\naa = [0]*n\nbb = [0]*n\nfor i in range(n):\n    aa[i], bb[i] = map(int, input().split())\navail = set(range(n))\nfr = r + sum(bb)\nif fr < 0:\n    print(\"NO\")\n    return\nok = True\nfor i in range(n):\n    nxt = -1\n    for j in avail:\n        if aa[j] <= r and bb[j] >= 0:\n            nxt = j\n            break\n    if nxt == -1:\n        break\n    avail.remove(nxt)\n    r += bb[nxt]\nfor i in range(len(avail)):\n    nxt = -1\n    for j in avail:\n        if aa[j]+bb[j] <= fr and bb[j] < 0:\n            nxt = j\n            break\n    if nxt == -1:\n        ok = False\n        break\n    avail.remove(nxt)\n    fr -= bb[nxt]\nif ok:\n    print(\"YES\")\nelse:\n    print(\"NO\")", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "n, m = list(map(int, input().split(' ')))\naa = list(map(int, input().split(' ')))\n\ndef countMoreLess(vs, value):\n    #print(vs)\n    cur = 0\n    res = { cur: 1 }\n\n    for v in vs:\n        cur += 1 if v > value else -1\n        res[cur] = res.get(cur, 0) + 1\n    #print(res)\n    return res\n\npos = aa.index(m)\n\nleftCounts = countMoreLess(list(reversed(aa[0:pos])), m)\nrightCounts = countMoreLess(aa[pos+1:], m)\n\nres = 0\nfor dif, count in list(leftCounts.items()):\n    res += count * rightCounts.get(-dif, 0)\n    res += count * rightCounts.get(-dif+1, 0)\n\nprint(res)\n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "import math\nimport string\nimport itertools\nimport fractions\nimport heapq\nimport collections\nimport re\nimport array\nimport bisect\nimport sys\nimport random\nimport time\ninf = 10**9\n\n\ndef main():\n    n = int(input())\n    r = (10**n + 8**n - 2 * (9**n)) % (10**9+7)\n    print(r)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "n, k = map(int, input().split(' '))\ns = input()\ndp = [[0] * (n + 1) for _ in range(n + 1)]\ndp[0][0] = 1\nfor l in range(0, n):\n    for i in range(l, n + 1):\n        used = [False] * 26\n        for j in range(i + 1, n + 1):\n            ch = ord(s[j - 1]) - ord('a')\n            if not used[ch]:\n                dp[l + 1][j] += dp[l][i]\n                used[ch] = True\ntotal = 0\nfor l in range(n, -1, -1):\n    sums = sum(dp[l])\n    if sums >= k:\n        total += (n - l) * k\n        k = 0\n        break\n    total += (n - l) * sums\n    k -= sums\nif k > 0:\n    total = -1\nprint(total)", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "def can_draw_polygon(sides):\n    # Sort the sides in ascending order\n    sides.sort()\n    # Check if the longest side is shorter than the sum of the other sides\n    if sides[-1] < sum(sides[:-1]):\n        return \"Yes\"\n    else:\n        return \"No\"\n\n\n# Read the number of sides (N) from the input\nN = int(input())\n\n# Read the lengths of the sides (L_1, L_2, ..., L_N) from the input\nsides = list(map(int, input().split()))\n\n# Verify the input constraints\nif not (3 <= N <= 10 and all(1 <= L <= 100 for L in sides)):\n    print(\"Invalid input\")\nelse:\n    print(can_draw_polygon(sides))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "n, m, d = map(int, input().split())\nc = list(map(int, input().split()))\n\ndef move(left, right):\n    for i in range(left, right):\n        if a[i] == 0:\n            a[i] = a[i + 1]\n    for i in range(right, left, -1):\n        if a[i] == 0:\n            a[i] = a[i - 1]\n\ndef is_reachable():\n    for i in range(1, n + 1):\n        if a[i] == 0 and a[i + 1] == 0:\n            return False\n    return True\n\ndef is_valid():\n    p = 1\n    for i in range(1, n + 1):\n        if a[i] == p:\n            p += 1\n    return p == m + 1\n\na = [0] * (n + 2)\na[0] = 1\na[n + 1] = m + 1\n\nfor i in range(m):\n    move(1, n + 1 - c[i])\n\nif not is_reachable():\n    print(\"NO\")\nelse:\n    if not is_valid():\n        print(\"NO\")\n    else:\n        print(\"YES\")\n        print(\" \".join(map(str, a[1:n + 1])))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "n = int(input())\ndivisors = [int(x) for x in input().split()]\n\n# Get the list of unique divisors\nunique_divisors = list(set(divisors))\n\n# Sort the list in ascending order\nunique_divisors.sort()\n\n# Initialize x and y\nx, y = 1, 1\n\n# Iterate through the unique divisors\nfor d in unique_divisors:\n    # Count the number of occurrences of d in the list of divisors\n    count = divisors.count(d)\n\n    # If d is a divisor of both x and y, count will be 2\n    if count == 2:\n        x *= d\n        y *= d\n    # If d is a divisor of x, count will be 1\n    elif count == 1:\n        x *= d\n    # If d is a divisor of y, count will be 0\n    else:\n        y *= d\n\nprint(x, y)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "import math\n\ndef calc_base(k):\n    base = k\n    for i in range(1, k):\n        base += 9 * i * (10 ** (i - 1))\n    return base\n\ndef global_length(k):\n    base = calc_base(k)\n    d = 10 ** k - 10 ** (k - 1)\n    if d % 2 == 0:\n        return d * base + k * (d - 1) * (d // 2)\n    return d * base + k * (d - 1) // 2 * d\n\ndef global_offset(k):\n    offset = 0\n    for i in range(1, k + 1):\n        offset += global_length(i)\n    return offset\n\ndef local_offset(k, l, base):\n    return l * base + (k * l * (l - 1)) // 2\n\ndef bs_long(n):\n    l, r = -1, 10\n    while r - l > 1:\n        m = (r + l) // 2\n        s = global_offset(m)\n        if n - s <= 0:\n            r = m\n        else:\n            l = m\n    if l < 0:\n        return r\n    return l\n\ndef bs_short(pos, base, k):\n    l, r = -1, 10 ** k - 10 ** (k - 1)\n    while r - l > 1:\n        m = (r + l) // 2\n        lb = local_offset(k, m, base)\n        if pos - lb <= 0:\n            r = m\n        else:\n            l = m\n    return l\n\ndef digit_offset(number):\n    k = int(math.log10(number))\n    res = 0\n    for i in range(k):\n        res += int((i + 1) * 10 ** i)\n    res *= 9\n    res += (number - 10 ** k + 1) * (k + 1)\n    return res - k\n\ndef bs_digit(k, x, base, n):\n    l, r = 0, 10 ** k + x + 1\n    while r - l > 1:\n        m = (r + l) // 2\n        lb = digit_offset(m)\n        if n < lb:\n            r = m\n        else:\n            l = m\n    num = r if l < 1 else l\n    n -= digit_offset(num)\n    s = str(num)\n    return s[n]\n\ndef solve(n):\n    k = bs_long(n)\n    n -= global_offset(k)\n    base = calc_base(k + 1)\n    d = bs_short(n, base, k + 1)\n    n -= local_offset(k + 1, d, base)\n    return bs_digit(k + 1, d, base, n)\n\ndef main():\n    q = int(input())\n    for _ in range(q):\n        n = int(input())\n        a = solve(n)\n        print(a)\n\nmain()", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "from collections import defaultdict\n\nclass Graph:\n    def __init__(self, n):\n        self.graph = defaultdict(list)\n        self.n = n\n        self.visited = [False] * (n + 1)\n        self.degree = [0] * (n + 1)\n        self.ans = []\n\n    def addEdge(self, u, v):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n\n    def dfs(self, v, par):\n        self.visited[v] = True\n        self.degree[v] += 1\n        for child in self.graph[v]:\n            if not self.visited[child]:\n                self.dfs(child, v)\n\n    def solve(self, d):\n        self.dfs(1, 0)\n        if self.degree[1] != d:\n            print(\"NO\")\n        else:\n            print(\"YES\")\n            for v in self.graph[1]:\n                if self.degree[v] == 1:\n                    self.ans.append((1, v))\n                    self.degree[v] += 1\n                    break\n            for u in range(2, self.n + 1):\n                if self.degree[u] == 1:\n                    for v in self.graph[u]:\n                        if self.degree[v] > 1:\n                            self.ans.append((u, v))\n                            self.degree[u] += 1\n                            self.degree[v] += 1\n                            break\n            for u, v in self.ans:\n                print(u, v)\n\n\nif __name__ == \"__main__\":\n    n, m, d = map(int, input().split())\n    graph = Graph(n)\n    for i in range(m):\n        u, v = map(int, input().split())\n        graph.addEdge(u, v)\n    graph.solve(d)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "#!/usr/bin/env python3\na,b,k=map(int,input().split())\nif a>=k:\n    print(a-k,b)\nelse:\n    print(0,max(b-k+a,0))", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "def f(x, v, n) :\n    a, p, s = 0, 0, 1\n    c = [0] * n + [1] + [0] * n\n    for i in v :\n        if(i < x) :\n            p += 1\n            s += c[p + n]\n        else :\n            s -= c[p + n]\n            p -= 1\n        c[p + n] += 1\n        a += s\n    return a\nn, x = list(map(int, input().split()))\nv = [int(i) for i in input().split()]\nprint(f(x + 1, v, n) - f(x, v, n))\n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "d, n = map(int,input().split())\nif n == 100:\n    print(100 ** d * (n + 1))\nelse:\n    print(100**d*n)", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "import copy\n\nH,W,K = list(map(int,input().split()))\nd={}\nans = 0\nfor i in range(H):\n    d[\"c\"+str(i)]=list(input())\n    \ndef changeRow(d,num,W):\n    d[\"c\"+str(num)]=[\".\"]*W\n    \ndef changeColum(d,num,H):\n    for i in range(H):\n        d[\"c\"+str(i)][num]=\".\"\n        \ndef checkSharp(d,H):\n    cnt=0\n    for i in range(H):\n        cnt += d[\"c\"+str(i)].count(\"#\")\n    return cnt\n\nfor i in range(2**W):\n    for j in range(2**H):\n        dCopy=copy.deepcopy(d)\n        for k in range(W):\n            if ((i >> k) & 1):\n                changeColum(dCopy,k,H)\n        for k in range(H):\n            if ((j >> k) & 1):\n                changeRow(dCopy,k,W)\n        if K==checkSharp(dCopy,H):\n            ans += 1\n        # print(i,j,bin(i),bin(j))\n        # print(dCopy,checkSharp(dCopy,H))\nprint(ans)\n\n\n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "a = int(input())\nprint(a ** 2)", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "# Function to calculate the minimum possible absolute difference of S_1 and S_2\ndef calculateMinDiff(N, W):\n    # Initialize the prefix sum array\n    prefix_sum = [0] * (N + 1)\n    # Calculate the prefix sum for the array\n    for i in range(1, N + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + W[i - 1]\n    # Initialize the minimum difference and T\n    min_diff = float('inf')\n    T = 0\n    # Iterate through all possible values of T\n    for i in range(1, N):\n        # Calculate the absolute difference for each T\n        diff = abs(prefix_sum[i] - (prefix_sum[N] - prefix_sum[i]))\n        # Update the minimum difference and T if a smaller difference is found\n        if diff < min_diff:\n            min_diff = diff\n            T = i\n    # Return the minimum difference\n    return min_diff\n\n# Read the input\nN = int(input())\nW = list(map(int, input().split()))\n# Calculate and print the minimum possible absolute difference\nprint(calculateMinDiff(N, W))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "n=int(input())\na=list(map(int,input().split()))\n\n\nb=[0]*(n-1)\n\nfor i in range(n-1):\n    if a[i]>=a[i+1]:\n        b[i]=1\n    \nfrom itertools import groupby\n\ngr = groupby(b)\n\nans=0\nfor k,v in gr:\n    if k==1:\n        ans =max(ans,len(list(v)))\n\nprint(ans)", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "import sys\na = list(map(int, sys.stdin.readline().split()))\nd = [1, 1, 2, 7, 4]\nans = a[0]\nfor i in range(5):\n    ans = min(ans, a[i] // d[i])\nprint(ans)\n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "n = int(input())\nA = list(map(int,input().split()))\n\nans = 0\nfor i in range(1, n-1):\n  if A[i] == 0 and A[i-1] == 1 and A[i+1] == 1:\n    A[i+1] = 0\n    ans += 1\n\nprint(ans)\n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "from collections import deque\n\ndef solve(n, m, days):\n    ans = [0] * n\n    for i in range(m):\n        s, d, c = days[i]\n        if c == 1:\n            ans[s] = i + 1\n            continue\n        if s + c == d:\n            ans[s] = i + 1\n            continue\n        if s + c - 1 == d:\n            ans[s] = i + 1\n            continue\n        if s + c - 2 == d:\n            ans[s] = i + 1\n            ans[s + 1] = i + 1\n            continue\n        if s + c - 3 == d:\n            ans[s] = i + 1\n            ans[s + 1] = i + 1\n            ans[s + 2] = i + 1\n            continue\n        return -1\n    return ans\n\n\nn, m = map(int, input().split())\ndays = []\nfor i in range(m):\n    days.append(list(map(int, input().split())))\ndays.sort()\nans = solve(n, m, days)\nif ans == -1:\n    print(-1)\nelse:\n    print(*ans)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "L, R = map(int, input().split())\np = 2019\n\nif R - L >= p:\n    print(0)\nelse:\n    res = p\n    for i in range(L, R):\n        for j in range(i + 1, R + 1):\n            res = min(res, i * j % p)\n    print(res)", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "def main():\n    import sys\n    input=sys.stdin.readline\n    n,k=map(int,input().split())\n    A=list(map(int,input().split()))\n    A.sort()\n    A.append(0)\n    l1=[0]*n\n    for i in range(1,n):\n        l1[i]=l1[i-1]+(A[i]-A[i-1])*i \n    l2=[0]*n\n    for i in range(1,n):\n        l2[n-i-1]=l2[n-i]+(A[n-i]-A[n-i-1])*i \n    ans=float(\"INF\")\n    c=1\n    for i in range(n):\n        if A[i+1]==A[i]:\n            c+=1\n        else:\n            c1=i-c+1\n            c2=n-i-1\n            if c>=k:\n                ans=0\n            elif c+c1>=k or c+c2>=k:\n                if c+c1>=k:\n                \tans=min(ans,l1[i]-c-c1+k)\n                if c+c2>=k:\n                \tans=min(ans,l2[i]-c-c2+k)\n            else:\n                ans=min(ans,l1[i]+l2[i]-n+k)\n            c=1\n    print(ans)\ndef __starting_point():\n    main()\n__starting_point()", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "a, b, c, d = map(int, input().split())\nmax_xy = 0\nfor x in range(a, b + 1):\n    for y in range(c, d + 1):\n        max_xy = max(max_xy, x * y)\nprint(max_xy)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "n = int(input())\nsegs = []\n\nfor i in range(n):\n    segs.append(tuple(map(int, input().split())))\n\ntop3 = [ (0, 10**10), (0, 10**10), (0, 10**10) ]\nevery = (0, 10**10)\n\n\ndef inter(one, two):\n    l1, r1 = one\n    l2, r2 = two\n    return max(l1,l2), min(r1,r2)\n\nfor i in segs:\n    tp1 = inter(i, top3[0])\n    tp2 = inter(i, top3[1])\n    tp3 = inter(i, top3[2])\n    tp4 = every\n    every = inter(i, every)\n    ntop3 = sorted([tp1, tp2, tp3, tp4], reverse=True, key=lambda x:x[1]-x[0])\n    top3 = ntop3[:3]\n\nres = sorted(top3, key=lambda x:x[1]-x[0])[-1]\nprint(max(res[1]-res[0], 0))\n\n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "a=[]\nn=int(input())\nfor i in range(n):\n    a.append(input().split())\n\nf=False\ni=0\nwhile i < n-2 and f==False:\n    if (a[i][0]==a[i][1] and\n    a[i+1][0]==a[i+1][1] and\n    a[i+2][0]==a[i+2][1]):\n        f=True\n    i=i+1\n    \nif f==False:\n    print('No')\nelse:\n    print('Yes')\n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "d = {}\nans = 0\nfor i in range(22):\n    d[i] = {}\n\n#print(cnt)\n\nn,m,k = list(map(int, input().split()))\narr = [list(map(int, input().split())) for i in range(n)]\n\n\n\ndef check(x,y):\n    if x < 0 or x >= n or y < 0 or y >= m:\n        return False\n    else:\n        return True\n\n\ndef go(x,y,now):\n    if check(x,y) == False:\n        return\n\n    now ^= arr[x][y]\n    if x + y == m - 1:\n        #print('yes')\n        if now in d[x]:\n            d[x][now] += 1\n        else:\n            d[x][now] = 1\n        return\n\n    go(x+1,y,now)\n    go(x,y+1,now)\n\ndef goRev(x,y,now):\n    if check(x,y) == False:\n        return\n\n    if x + y == m - 1:\n        cur = k ^ now\n        if cur in d[x]:\n            nonlocal ans\n            #print(ans)\n            ans += d[x][cur]\n        return\n\n    now ^= arr[x][y]\n    goRev(x-1,y,now)\n    goRev(x,y-1,now)\n\n\ngo(0,0,0)\ngoRev(n-1,m-1,0)\n\nprint(ans)", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "import sys\ninput=lambda:sys.stdin.readline().rstrip()\nsys.setrecursionlimit(200001)\nn,m,k=list(map(int,input().split()))\nedge=[[]for _ in range(n)]\ndi={}\nfor i in range(m):\n  a,b=list(map(int,input().split()))\n  a-=1\n  b-=1\n  if a>b:a,b=b,a\n  di[(a,b)]=i\n  edge[a].append(b)\n  edge[b].append(a)\nd=[10**10]*n\nd[0]=0\nroot=[set()for _ in range(n)]\nqueue=[0]\nfor node in queue:\n  for mode in edge[node]:\n    if d[mode]!=10**10:\n      if d[mode]+1==d[node]:\n        root[node].add(mode)\n      elif d[mode]==d[node]+1:\n        root[mode].add(node)\n      continue\n    d[mode]=d[node]+1\n    queue.append(mode)\nfor i in range(n):root[i]=list(root[i])\nt=1\nfor i in range(1,n):t*=len(root[i])\nprint(min(t,k))\nfor i in range(min(t,k)):\n  ans=[\"0\"]*m\n  for j in range(1,n):\n    i,jj=divmod(i,len(root[j]))\n    ans[di[(min(j,root[j][jj]),max(j,root[j][jj]))]]=\"1\"\n  print(\"\".join(ans))\n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "n = int(input())\nprint([4, 22, 27, 58, 85, 94, 121, 166, 202, 265, 274, 319, 346, 355, 378, 382, 391, 438, 454, 483, 517, 526, 535, 562, 576, 588, 627, 634, 636, 645, 648, 654, 663, 666, 690, 706, 728, 729, 762, 778, 825, 852, 861, 895, 913, 915, 922, 958, 985, 1086, 1111, 1165][n-1])", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "n, m = list(map(int, input().split()))\nA = list(map(int, input().split()))\nLf = [[] for _ in range(n)]\nRb = [[] for _ in range(n)]\nLR = []\nfor i in range(m):\n    l, r = list(map(int, input().split()))\n    l, r = l-1, r-1\n    Lf[r].append(l)\n    Rb[l].append(r)\n    LR.append((l, r))\n\nminus = [0]*n\nINF = 10**18\nans = [-INF]*n\nmn = A[0]\n\nfor i in range(n):\n    ans[i] = max(ans[i], A[i]-mn)\n    for l in Lf[i]:\n        for j in range(l, i+1):\n            minus[j] -= 1\n            mn = min(mn, A[j]+minus[j])\n    mn = min(mn, A[i]+minus[i])\n\nminus = [0]*n\nmn = A[n-1]\nfor i in reversed(list(range(n))):\n    ans[i] = max(ans[i], A[i]-mn)\n    for r in Rb[i]:\n        for j in range(i, r+1):\n            minus[j] -= 1\n            mn = min(mn, A[j]+minus[j])\n    mn = min(mn, A[i]+minus[i])\nans_ = max(ans)\nres = []\nfor i in range(n):\n    if ans[i] == ans_:\n        for j in range(m):\n            l, r = LR[j]\n            if not (l <= i and i <= r):\n                res.append(j+1)\n        break\nprint(ans_)\nprint(len(res))\nprint(*res)\n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "n, k = (int(i) for i in input().split())\nstring = input()\n\nINF = 10**100\ncache = [INF] * n\ndef getVal(idx):\n    if idx < 0 or cache[idx] == INF:\n        return 0\n    return cache[idx]\n\nlast_idx = 0\nreached_end = False\nfor i in range(n):\n    if string[i] == '0':\n        new = getVal(i-1)+i+1\n        cache[i] = min(cache[i], new)\n    else:\n        new = getVal(i-1-k)+i+1\n        if new < cache[i]:\n            cache[i] = new\n            last_idx = 0\n\n        if reached_end:\n            continue\n        end = i+k+1\n        if end >= n:\n            end = n\n            reached_end = True\n        for j in range(max(last_idx, i-k), end):\n            cache[j] = min(new, cache[j])\n        last_idx = end\nprint(cache[n-1])\n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "#!/usr/bin/env python3\nimport sys\ninput = sys.stdin.readline\n\nn, h, l, r = map(int, input().split())\na = [int(item) for item in input().split()]\ndp = [[-1] * h for _ in range(n + 1)]\ndp[0][0] = 0\n\nfor i, item in enumerate(a):\n    for j in range(h):\n        if dp[i][j] == -1:\n            continue\n        # Sleep early\n        nt = (j + item) % h\n        if l <= nt <= r:\n            dp[i+1][nt] = max(dp[i+1][nt], dp[i][j] + 1)\n        else:\n            dp[i+1][nt] = max(dp[i+1][nt], dp[i][j])\n        # Sleep normaly\n        nt = (j + item - 1 + h) % h\n        if l <= nt <= r:\n            dp[i+1][nt] = max(dp[i+1][nt], dp[i][j] + 1)\n        else:\n            dp[i+1][nt] = max(dp[i+1][nt], dp[i][j])\nprint(max(dp[-1]))", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "def main():\n    n, r = list(map(int, input().split()))\n    arr = [True if c == '1' else False for c in input().split()]\n    #print(arr)\n\n    last_heated = 0\n    tot = 0\n    last_turned = -1\n    while last_heated < n:\n        optim = last_heated + r - 1\n\n        while True:\n            if optim < 0:\n                print('-1')\n                return\n            if optim <= last_turned:\n                print('-1')\n                return\n            if optim >= n:\n                optim -= 1\n                continue\n            if arr[optim]:\n                # found a heater\n                tot += 1\n                last_heated = optim + r\n                last_turned = optim\n                #print('turn on ' + str(optim))\n                break\n            optim -= 1\n    print(tot)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "n = int(input())\nd = list(map(int, input().split()))\ncount = 0\nfor i in range(1, n // 2 + 1):\n    arc = 0\n    abc = 0\n    for j in range(n):\n        if d[j] >= i:\n            arc += 1\n        else:\n            abc += 1\n    if arc == abc:\n        count += 1\nprint(count)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n\n#\n# Complete the 'solve' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts following parameters:\n#  1. INTEGER r\n#  2. 2D_INTEGER_ARRAY projects\n#\n\ndef solve(r, projects):\n    # Sort the projects by the required rating to complete them\n    projects.sort(key=lambda x: x[0])\n\n    # Initialize the subset and the current rating\n    subset = []\n    current_rating = r\n\n    # Iterate through the projects\n    for project in projects:\n        required_rating, rating_change = project\n\n        # Check if we have enough rating to complete the project\n        if current_rating >= required_rating:\n            subset.append(project)\n            current_rating += rating_change\n\n    # Return the size of the subset\n    return len(subset)\n\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    first_multiple_input = input().rstrip().split()\n\n    n = int(first_multiple_input[0])\n\n    r = int(first_multiple_input[1])\n\n    projects = []\n\n    for _ in range(n):\n        projects.append(list(map(int, input().rstrip().split())))\n\n    result = solve(r, projects)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "# Input: t, the number of queries\nt = int(input())\n\n# Process each query\nfor _ in range(t):\n    # Input: n, the number of divisors\n    n = int(input())\n\n    # Input: d_1, d_2, ..., d_n, the divisors\n    divisors = [int(x) for x in input().split()]\n\n    # Initialize the answer to -1\n    answer = -1\n\n    # Sort the divisors in descending order\n    divisors.sort(reverse=True)\n\n    # Find the product of all divisors\n    product = 1\n    for divisor in divisors:\n        product *= divisor\n\n    # Check if the product of divisors is divisible by 1 and x\n    if product % (divisors[0] * divisors[-1]) == 0:\n        answer = product // (divisors[0] * divisors[-1])\n\n    # Output the answer\n    print(answer)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "# Function to evaluate the arithmetic expression and reproduce the bug\ndef evaluate_expression(expression):\n    # Split the expression into operands and operators\n    operands = expression.split('+')\n    result = 0\n    for operand in operands:\n        if '-' in operand:\n            # Split the operand into sub-operands and subtract each from result\n            sub_operands = operand.split('-')\n            for sub_operand in sub_operands:\n                result -= int(sub_operand)\n        else:\n            # Add the operand to the result\n            result += int(operand)\n    return result\n\n# Read the input from the user\nexpression = input()\n\n# Evaluate the expression and reproduce the bug\nresult = evaluate_expression(expression)\n\n# Print the result\nprint(result)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "# The number of bus stops and bus capacity\nn, w = map(int, input().split())\n\n# The sequence of numbers recorded by the video system\na = list(map(int, input().split()))\n\n# Dynamic programming array\ndp = [0] * (w + 1)\n\n# Base case\ndp[0] = 1\n\n# Loop through all bus stops\nfor i in range(n):\n    for j in range(w, -1, -1):\n        # Update the number of possible ways\n        dp[j] = (dp[j] + dp[max(j - a[i], 0)]) % 1000000007\n\n# Print the number of possible ways\nprint(dp[0])", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "import sys\nimport operator as op\n\n\nnext(sys.stdin)\n\nxs = list(map(int, next(sys.stdin).rstrip().split()))\n\nif len(xs) <= 2:\n    print(0)\n    return\n\nfrontier = []\nfrontier.append((0, xs[1] - xs[0], xs[1]))\nfrontier.append((1, xs[1] + 1 - xs[0], xs[1] + 1))\nif xs[1] > 0:\n    frontier.append((1, xs[1] - 1 - xs[0], xs[1] - 1))\nif xs[0] > 0:\n    frontier.append((1, xs[1] - xs[0] + 1, xs[1]))\nfrontier.append((1, xs[1] - xs[0] - 1, xs[1]))\nif xs[0] > 0:\n    frontier.append((2, xs[1] + 1 - xs[0] + 1, xs[1] + 1))\nfrontier.append((2, xs[1] + 1 - xs[0] - 1, xs[1] + 1))\nif xs[0] > 0 and xs[1] > 0:\n    frontier.append((2, xs[1] - 1 - xs[0] + 1, xs[1] - 1))\nif xs[1] > 0:\n    frontier.append((2, xs[1] - 1 - xs[0] - 1, xs[1] - 1))\n\n\nfor x in xs[2:]:\n\n    new_frontier = []\n\n    for current, diff, last_x in frontier:\n\n        if diff == x - last_x:\n            new_frontier.append((current, diff, x))\n        elif diff == x + 1 - last_x:\n            new_frontier.append((current + 1, diff, x + 1))\n        elif x > 0 and (diff == x - 1 - last_x):\n            new_frontier.append((current + 1, diff, x - 1))\n\n    frontier = new_frontier\n    if not frontier:\n        print(-1)\n        return\n\nprint(min(frontier, key=op.itemgetter(0))[0])\n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "n = int(input())\ns = sum([int(x) for x in str(n)])\nwhile s%4!=0:\n    n+=1\n    s = sum([int(x) for x in str(n)])\nprint(n)", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\na.sort()\n\n# Storing the difference between the maximum and minimum elements in the array in a list\ndiff = [a[i] - a[i - 1] for i in range(1, n)]\n\n# Finding the index of the minimum value in the diff list\nidx = diff.index(min(diff))\n\n# Calculating the minimum possible instability\nmin_instability = min(a[n - 1] - a[idx + 1], a[idx] - a[0])\n\nprint(min_instability)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "import sys\ninput = sys.stdin.readline\n\nn,m=list(map(int,input().split()))\nA=[list(map(int,input().split())) for i in range(n)]\n\nfor i in range(m):\n    #\u4e00\u884c\u76ee\u3092i-1\u307e\u30670\u306b\u3059\u308b\n\n    ANSR=[0]*n\n    ANSC=[0]*m\n\n    for j in range(i):\n        if A[0][j]==1:\n            ANSC[j]=1\n\n    for j in range(i,m):\n        if A[0][j]==0:\n            ANSC[j]=1\n\n    for r in range(1,n):\n        B=set()\n        for c in range(m):\n            if ANSC[c]==0:\n                B.add(A[r][c])\n            else:\n                B.add(1-A[r][c])\n\n        if len(B)>=2:\n            break\n        if max(B)==0:\n            ANSR[r]=1\n\n    else:\n        print(\"YES\")\n        print(\"\".join(map(str,ANSR)))\n        print(\"\".join(map(str,ANSC)))\n        return\n\nANSR=[0]*n\nANSC=[0]*m\n\nfor j in range(m):\n    if A[0][j]==1:\n        ANSC[j]=1\n\nflag=0\nfor r in range(1,n):\n    if flag==0:\n        B=[]\n        for c in range(m):\n            if ANSC[c]==0:\n                B.append(A[r][c])\n            else:\n                B.append(1-A[r][c])\n\n        if max(B)==0:\n            continue\n        elif min(B)==1:\n            ANSR[r]=1\n            continue\n        else:\n            OI=B.index(1)\n            if min(B[OI:])==1:\n                flag=1\n                continue\n\n            OO=B.index(0)\n            if max(B[OO:])==0:\n                flag=1\n                ANSR[r]=1\n                continue\n\n            else:\n                print(\"NO\")\n                return\n\n    else:\n\n        B=set()\n        for c in range(m):\n            if ANSC[c]==0:\n                B.add(A[r][c])\n            else:\n                B.add(1-A[r][c])\n\n        if len(B)>=2:\n            break\n        if max(B)==0:\n            ANSR[r]=1\n\nelse:\n    print(\"YES\")\n    print(\"\".join(map(str,ANSR)))\n    print(\"\".join(map(str,ANSC)))\n    return\n\nprint(\"NO\")\n\n    \n\n    \n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "# Function to calculate the length of the longest fact\ndef longest_fact(index):\n    facts = [\n        \"The highest mountain above sea level in the world is Mount Everest. Its peak rises to 8848 m.\",\n        \"The largest board game tournament consisted of 958 participants playing chapaev.\",\n        \"The largest online maths competition consisted of 12766 participants.\",\n        \"The Nile is credited as the longest river in the world. From its farthest stream in Burundi, it extends 6695 km in length.\",\n        \"While not in flood, the main stretches of the Amazon river in South America can reach widths of up to 1100 km at its widest points.\",\n        \"Angel Falls is the highest waterfall. Its greatest single drop measures 807 m.\",\n        \"The Hotel Everest View above Namche, Nepal \u2014 the village closest to Everest base camp \u2013 is at a record height of 31962 m\",\n        \"Uranium is the heaviest of all the naturally occurring elements. Its most common isotope has a nucleus containing 146 neutrons.\",\n        \"The coldest permanently inhabited place is the Siberian village of Oymyakon, where the temperature of -68\u00b0C was registered in the twentieth century.\",\n        \"The longest snake held in captivity is over 25 feet long. Its name is Medusa.\",\n        \"Colonel Meow holds the world record for longest fur on a cat \u2014 almost 134 centimeters.\",\n        \"Sea otters", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "# Input\nD, T, S = map(int, input().split())\n\n# Calculate the time needed to reach the place\ntime_needed = D / S\n\n# Check if Takahashi will arrive in time\nif time_needed <= T:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "def count_triplets(N, K):\n    count = 0\n    for a in range(1, N + 1):\n        for b in range(1, N + 1):\n            for c in range(1, N + 1):\n                if (a + b) % K == 0 and (b + c) % K == 0 and (c + a) % K == 0:\n                    count += 1\n    return count\n\nif __name__ == \"__main__\":\n    N, K = map(int, input().split())\n    print(count_triplets(N, K))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "n = int(input())\nt = input()\n\ndef solve(n, t):\n    for d in range(n, 0, -1):\n        t = t[::-1][:d] + t[d:][::-1]\n    return t\n\nprint(solve(n, t))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "import sys\nsys.setrecursionlimit(10**6)\nn=int(input())\ndef res(v:int, all:list):\n    if v>n:\n        return\n    if \"3\" in list(str(v)) and \"5\" in list(str(v)) and \"7\" in list(str(v)):\n        all.append(v)\n    res(10*v+3,all)\n    res(10*v+5,all)\n    res(10*v+7,all)\nall=[]\n\nres(3,all)\nres(5,all)\nres(7,all)\n\n\nprint(len(all))", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "from collections import deque\n\ndef solve(n, A):\n    A.sort()\n    A = deque(A)\n    result = []\n\n    while A:\n        curr_student = A.popleft()\n        while result and result[-1] == curr_student:\n            result.pop()\n            curr_student -= 1\n        result.append(curr_student)\n\n    return result\n\n\nif __name__ == '__main__':\n    n = int(input())\n    A = list(map(int, input().split()))\n    result = solve(n, A)\n    print(' '.join(map(str, result)))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "def minimum_packages(n, k):\n    # Check if n is divisible by k\n    if n % k == 0:\n        return n // k\n    # Check if n is a perfect square\n    if n ** 0.5 == int(n ** 0.5):\n        return 1\n    # Iterate through all possible package sizes\n    for i in range(1, k + 1):\n        if (n - i) % (k - i) == 0:\n            return (n - i) // (k - i) + 1\n    return -1\n\n# Main function\nif __name__ == \"__main__\":\n    t = int(input())\n    for _ in range(t):\n        n, k = map(int, input().split())\n        min_packages = minimum_packages(n, k)\n        print(min_packages)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "def max_hangout_days(N, M, A):\n    # Check if all assignments can be completed within the vacation days\n    if N < sum(A):\n        return -1\n\n    # Sort the assignment days in ascending order\n    A.sort()\n\n    # Initialize the number of hangout days\n    hangout_days = 0\n\n    # Iterate over all assignments\n    for i in range(M):\n        # Calculate the number of days to hangout between assignments\n        hangout_days += A[i] - 1\n\n    # Subtract the number of assignment days\n    hangout_days -= sum(A)\n\n    # Return the maximum number of hangout days\n    return hangout_days\n\n\n# Read input from the user\nN, M = map(int, input().split())\nA = list(map(int, input().split()))\n\n# Calculate the maximum number of hangout days\nhangout_days = max_hangout_days(N, M, A)\n\n# Print the result\nprint(hangout_days)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "# -*- coding: utf-8 -*-\n# @Time    : 2019/3/8 0:18\n# @Author  : LunaFire\n# @Email   : gilgemesh2012@gmail.com\n# @File    : E. K Balanced Teams.py\n\n\ndef main():\n    n, k = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    a.sort()\n\n    cnt = [0] * n\n    for i in range(n):\n        while i + cnt[i] < n and a[i + cnt[i]] - a[i] <= 5:\n            cnt[i] += 1\n\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    for i in range(n):\n        for j in range(k + 1):\n            dp[i + 1][j] = max(dp[i + 1][j], dp[i][j])\n            if j + 1 <= k:\n                dp[i + cnt[i]][j + 1] = max(dp[i + cnt[i]][j + 1], dp[i][j] + cnt[i])\n\n    print(dp[n][k])\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "n, m = map(int, input().split())\ngates = []\nfor i in range(m):\n    gate = tuple(map(int, input().split()))\n    gates.append(gate)\n\ncards = set()\nfor gate in gates:\n    for card in range(gate[0], gate[1]+1):\n        cards.add(card)\n\nprint(len(cards))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "n,blue,red = list(map(int,input().split()))\n\n# n / (blue + red) = quot ...rem\nquot = n // (blue + red) #\u5546 quotient\nrem = n % (blue + red) #\u4f59\u308a remainder\n\nans = blue * quot + min(blue,rem)\n\nprint(ans)", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "from functools import cmp_to_key\nfrom operator import itemgetter\n\n\ndef main():\n    n, r = list(map(int, input().split()))\n    ps = [tuple(map(int, input().split())) for _ in range(n)]\n\n    pos_ps = [(a, b) for a, b in ps if b >= 0]\n    neg_ps = [(a, b) for a, b in ps if b < 0]\n\n    def cmp(a, b):\n        (aa, ab), (ba, bb) = a, b\n        return max(aa, max(*b) - ab) - max(ba, max(*a) - bb)\n\n    pos_ps.sort(key=itemgetter(0))\n    neg_ps.sort(key=cmp_to_key(cmp))\n    del cmp\n\n    res = 0\n    for a, b in pos_ps:\n        if r >= a:\n            res += 1\n            r += b\n\n    cur = [r]\n    for a, b in neg_ps:\n        nxt = [-1]*(len(cur)+1)\n        for i, r in enumerate(cur):\n            if r >= 0:\n                nxt[i] = max(nxt[i], r)\n                if r >= a:\n                    nxt[i+1] = r + b\n        while nxt[-1] < 0:\n            nxt.pop()\n        cur = nxt\n\n    print(res + len(cur) - 1)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "from heapq import heappop, heapify\n\n\ndef get_max(l, r):\n    return max(a[l: r + 1])\n\n\nn, k = [int(item) for item in input().split()]\na = [int(item) for item in input().split()]\n\ncoaches = [set(), set()]\n\ncoach = 0\ntaken = 0\n\nl, r = 0, 0\nstill_map = {0: n - 1}\ndone_map_l = {}\ndone_map_r = {}\n\nglobal_map = {}\nfor i in range(n):\n    global_map[a[i]] = i\n\ndone = [0] * (n + 1)\nh = [-(i + 1) for i in range(n)]\nheapify(h)\n# print(a)\nwhile taken < n:\n    # max_index = -1\n    # mx = -float(\"inf\")\n    # mx_l = -1\n    # for l in still_map:\n    #     r = still_map[l]\n    #     local_max = get_max(l, r)\n    #     if local_max > mx:\n    #         mx = local_max\n    #         mx_l = l\n    local_max = -heappop(h)\n    while done[local_max]:\n        local_max = -heappop(h)\n\n    max_index = global_map[local_max]\n\n    l_search, r_search = max_index - 1, max_index + 1\n    l_count, r_count = 0, 0\n    l_last = max_index\n\n    while l_search >= 0 and l_count < k:\n        if l_search in done_map_r:\n            new_l_search = done_map_r[l_search] - 1\n            done_map_l[done_map_r[l_search]] = l_last\n            done_map_r[l_last] = done_map_r[l_search]\n\n            l_search = new_l_search\n        else:\n            l_count += 1\n            coaches[coach].add(l_search)\n            done[a[l_search]] = 1\n            taken += 1\n            l_search -= 1\n\n    r_last = l_search + 1\n    while r_search < n and r_count < k:\n        if r_search in done_map_l:\n            new_r_search = done_map_l[r_search] + 1\n            done_map_r[done_map_l[r_search]] = r_last\n            done_map_l[r_last] = done_map_l[r_search]\n\n            r_search = new_r_search\n        else:\n            r_count += 1\n            coaches[coach].add(r_search)\n            done[a[r_search]] = 1\n            taken += 1\n            r_search += 1\n\n    done[local_max] = 1\n    coaches[coach].add(max_index)\n    taken += 1\n    coach ^= 1\n    done_map_l[l_search + 1] = r_search - 1\n    done_map_r[r_search - 1] = l_search + 1\n    # print(done_map_l, done_map_r)\n    # print(coaches, l_search, r_search)\n\n\nprint(''.join('1' if i in coaches[0] else '2' for i in range(n)))\n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "def solve(a, b, c):\n    days = 0\n    if a > 0:\n        days += 3\n    if b > 0:\n        days += 2\n    if c > 0:\n        days += 1\n    return days\n\n\nif __name__ == '__main__':\n    a, b, c = map(int, input().split())\n    print(solve(a, b, c))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "\"\"\"\nCodeforces April Fools Contest 2014 Problem I\n\nAuthor  : chaotic_iak\nLanguage: Python 3.3.4\n\"\"\"\n\nclass InputHandlerObject(object):\n    inputs = []\n\n    def getInput(self, n = 0):\n        res = \"\"\n        inputs = self.inputs\n        if not inputs: inputs.extend(input().split(\" \"))\n        if n == 0:\n            res = inputs[:]\n            inputs[:] = []\n        while n > len(inputs):\n            inputs.extend(input().split(\" \"))\n        if n > 0:\n            res = inputs[:n]\n            inputs[:n] = []\n        return res\nInputHandler = InputHandlerObject()\ng = InputHandler.getInput\n\n############################## SOLUTION ##############################\n\n# ?(_/____+_______*__-_____*______-___):-__<___,___<____,____<_____,_____<______,______<_______.\n\ngolorp = input().split(\":-\")\ngolorp[0] = golorp[0][2:]\n\nct = 0\njaws = []\nfor x in range(len(golorp[0])):\n    if golorp[0][x] == \"_\":\n        ct += 1\n    else:\n        jaws.append(ct)\n        ct = 0\n\nct = 0\nconditionsraw = []\nfor x in range(len(golorp[1])):\n    if golorp[1][x] == \"_\":\n        ct += 1\n    else:\n        conditionsraw.append(ct)\n        conditionsraw.append(golorp[1][x])\n        ct = 0\n\nconditions = []\nfor x in range(0, len(conditionsraw)//4):\n    if conditionsraw[4*x+1] == \">\":\n        conditions.append((conditionsraw[4*x+2], conditionsraw[4*x]))\n    else:\n        conditions.append((conditionsraw[4*x], conditionsraw[4*x+2]))\n\ninedges = [[-1]] * (max(jaws) + 1)\noutedges = [[-1]] * (max(jaws) + 1)\nval = [-1] * (max(jaws) + 1)\nprocessed = [False] * (max(jaws) + 1)\nfor x in jaws:\n    inedges[x] = []\n    outedges[x] = []\n\nfor x, y in conditions:\n    inedges[y].append(x)\n    outedges[x].append(y)\n\nfor i in range(10):\n    for x in jaws:\n        if not inedges[x] and not processed[x]:\n            val[x] += 1\n            processed[x] = True\n            for y in outedges[x]:\n                val[y] = max(val[y], val[x])\n                inedges[y].remove(x)\n\nfailure = False\nfor x in jaws:\n    if not processed[x] or val[x] > 9:\n        failure = True\n        break\n\nif failure:\n    print(\"false\")\nelse:\n    s = \"\"\n    for x in jaws:\n        s += str(val[x])\n    print(s)", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "# Get input\nS = input()\nK = int(input())\n\n# Initialize variables\nlength = len(S)\nrepeats = 0\n\n# Calculate the number of repeats\nwhile 2**repeats * length <= 5 * 10**15:\n    repeats += 1\n\n# Calculate the length of the string after 5 * 10**15 days\ntotal_length = 2**repeats * length\n\n# Find the character at the K-th position\nfor i in range(length):\n    if 2**repeats * i + 1 <= K <= 2**repeats * (i + 1):\n        char = S[i]\n        break\n\n# Print the result\nprint(char)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "def mishka(n, k, arr):\n    # Initialise the count of problems solved\n    solved = 0\n\n    # Create a copy of the array\n    arr_copy = arr[:]\n\n    # Keep solving problems until there are some left\n    while arr_copy:\n        # Check if the leftmost problem is solvable\n        if arr_copy[0] <= k:\n            solved += 1\n            arr_copy.pop(0)\n        # Check if the rightmost problem is solvable\n        elif arr_copy[-1] <= k:\n            solved += 1\n            arr_copy.pop()\n        # If neither end is solvable, Mishka cannot continue\n        else:\n            break\n\n    # Return the count of problems solved\n    return solved\n\n\n# Input\nn, k = [int(x) for x in input().split()]\narr = [int(x) for x in input().split()]\n\n# Output\nprint(mishka(n, k, arr))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "a = int(input())\n\nresult = 0\nwhile a > 1:\n    if a % 2 == 0:\n        a = a // 2\n    else:\n        a = (a - 1) // 2\n    result += 1\nprint(result)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "def count_tuples(n):\n    count = 0\n    for a in range(1, n):\n        for b in range(1, n):\n            for c in range(1, n):\n                if a * b + c == n:\n                    count += 1\n    return count\n\nn = int(input())\nprint(count_tuples(n))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "import sys\nfrom collections import Counter\nfrom bisect import bisect_left\ndef Sieve(l):   # Check if can be modified for primeNUmbers at prime places\n    #l=3 * 1000 * 1000 + 13\n    primes=[0]*2+[1]*l\n    for i in range(l):\n        if primes[i]:\n            for j in range(i*i,l,i):\n                primes[j]=0\n    primes=[k for k in range(l) if primes[k]]\n    return primes\n#print(Sieve(10))\ndef index(a, x):\n    i = bisect_left(a, x)\n    if i != len(a) and a[i] == x:\n        return i\n    raise ValueError\nn=int(input())\na=sorted(list(map(int,sys.stdin.readline().split())))\nb=Counter(a)\nactual=Counter()\nl=-1\nprime=Sieve(a[-1]+1)\nwhile l!=-2*n:\n    #print(a)\n    mx=a[l]\n    #print(mx,l)\n    if b[mx]>0:\n        try:\n            second=index(prime,mx)+1\n            actual[second]=actual[second]+b[mx]\n            #print(\"prime:\",mx,second,l)\n        except:\n            i=0\n            while mx%prime[i]!=0:\n                i=i+1\n            second=mx//prime[i]\n            actual[mx]=actual[mx]+b[mx]\n            #print(\"Mx will be added:\",mx,second,l)\n        l=l-b[mx]\n        b[second]=b[second]-b[mx]\n        b[mx]=0\n    else:\n        l=l-1\n#second=index(prime,a[-1])+1\n#print(actual)\nprint(*actual.elements(), sep =' ')\n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "# input the string S\nS = input()\n\n# function to check if a string is a palindrome\ndef is_palindrome(string):\n    return string == string[::-1]\n\n# function to solve the problem\ndef solve(string):\n    # find the midpoint of the string\n    mid = len(string) // 2\n\n    # initialize a counter to track the number of hugs\n    count = 0\n\n    # iterate through the string from the front and back\n    for i in range(mid):\n        # if the characters at the current indices are not the same\n        if string[i] != string[len(string) - i - 1]:\n            # increment the counter\n            count += 1\n\n    # return the counter value\n    return count\n\n# check if S is a palindrome\nif is_palindrome(S):\n    # if it is a palindrome, print 0\n    print(0)\nelse:\n    # otherwise, print the result of the solve function\n    print(solve(S))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "# Input\nn, r = map(int, input().split())\nhouse = list(map(int, input().split()))\n\n# Dynamic Programming\ndp = [1000000000 for _ in range(n)]\ndp[0] = 0\n\nfor i in range(1, n):\n    for j in range(max(0, i-2*r+1), i+1):\n        if house[j] == 1:\n            dp[i] = min(dp[i], dp[j] + 1)\n\n# Output\nprint(dp[-1] if dp[-1] != 1000000000 else -1)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "n, k, x = list(map(int, input().split()))\na = [None] + list(map(int, input().split()))\ndp = [[-1] * (n + 1) for i in range(x + 1)]\ndp[0][0] = 0\nfor i in range(1, x + 1):\n    for j in range(1, n + 1):\n        dp[i][j] = max(dp[i - 1][j2] for j2 in range(max(0, j - k), j))\n        if dp[i][j] != -1: dp[i][j] += a[j]\nans = max(dp[x][j] for j in range(n - k + 1, n + 1))\nprint(ans)\n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "import sys\ninput = sys.stdin.readline\n\nn=int(input())\nA=list(map(int,input().split()))\n\nANS=[0]*n\ncount=1\nANS[0]=1\n\nANS2=[0]*n\nucount=0\n\nfor i in range(1,n):\n    if A[i]>A[i-1]:\n        count+=1\n        ANS[i]=count\n\n        if ucount>0:\n            ucount+=1\n            ANS2[i]=ucount\n    else:\n        count=1\n        ANS[i]=count\n        ucount=0\n\n    if i>=2 and A[i-2]<A[i]:\n        ucount=max(ucount,ANS[i-2]+1)\n        ANS2[i]=ucount\n\nprint(max((max(ANS)),max(ANS2)))\n    \n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "def solve(n):\n    return n % 2\n\n\nif __name__ == '__main__':\n    n = int(input())\n    result = solve(n)\n    print(result)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "# Get input from the user\nA, B = map(int, input().split())\n\n# Check if A and B are between 1 and 9\nif 1 <= A <= 9 and 1 <= B <= 9:\n    # Calculate A * B and print the result\n    print(A * B)\nelse:\n    # Print -1 if A or B are not between 1 and 9\n    print(-1)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "# Read the input\nn = int(input())\na = list(map(int, input().split()))\n\n# Initialize variables\nleft_lengths = [0] * n\nright_lengths = [0] * n\nlengths = [0] * n\n\n# Calculate the length of the longest increasing subsequence\n# that ends at the leftmost position\nleft_lengths[0] = 1\nfor i in range(1, n):\n    left_lengths[i] = 1\n    for j in range(i):\n        if a[j] < a[i]:\n            left_lengths[i] = max(left_lengths[i], left_lengths[j] + 1)\n\n# Calculate the length of the longest increasing subsequence\n# that ends at the rightmost position\nright_lengths[n - 1] = 1\nfor i in range(n - 2, -1, -1):\n    right_lengths[i] = 1\n    for j in range(n - 1, i, -1):\n        if a[j] > a[i]:\n            right_lengths[i] = max(right_lengths[i], right_lengths[j] + 1)\n\n# Calculate the length of the longest increasing subsequence\n# that ends at the position i\nfor i in range(n):\n    lengths[i] = left_lengths[i] + right_lengths[i] - 1\n\n# Find the maximum length and its index\nmax_length = max(lengths)\nmax_index = lengths.index(max_length)\n\n# Calculate the sequence of moves\nsequence = \"\"\nfor i in range(max_index, -1, -1):\n    sequence += \"L\"\n    for j in range(n - 1, i, -1):\n        if a[j] > a[i]:\n            sequence += \"R\"\n            break\n\n# Output the result\nprint(max_length)\nprint(sequence[::-1])", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "def solve(n, k):\n    if n == 0 or k == 0:\n        return \"NO\"\n    if n < k:\n        return \"NO\"\n\n    # Initialize the array\n    a = [0] * k\n\n    # Find the value of the last element\n    a[k - 1] = n - (k - 1)\n\n    # If the last element is less than 1, return \"NO\"\n    if a[k - 1] < 1:\n        return \"NO\"\n\n    # Iterate through the array in reverse order\n    for i in range(k - 2, -1, -1):\n        # Set the current element to be at least 1\n        a[i] = max(1, a[i + 1] // 2)\n        # Update the next element\n        a[i + 1] -= a[i]\n\n    # If the sum of all elements is not equal to n, return \"NO\"\n    if sum(a) != n:\n        return \"NO\"\n\n    # Otherwise, return \"YES\" and the array\n    return \"YES\" + \"\\n\" + \" \".join(map(str, a))\n\n# Input the values of n and k\nn, k = map(int, input().split())\n\n# Get the result\nresult = solve(n, k)\n\n# Print the result\nprint(result)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "n = int(input())\na = sorted(list(map(int, input().split())))\nans = 0\nif n > 2:\n    ans = min(a[-2] - a[0], a[-1] - a[1])\nprint(ans)\n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "# function to find the minimum number of lights to turn off\ndef minimum_lights_off(n, arr):\n    # initialize the count of disturbed people\n    count = 0\n    \n    # loop through the array\n    for i in range(1, n - 1):\n        # check if the person in the current flat is disturbed\n        if arr[i - 1] == 1 and arr[i] == 0 and arr[i + 1] == 1:\n            count += 1\n    \n    # return the minimum number of lights to turn off\n    return count\n\n# read the input\nn = int(input())\narr = list(map(int, input().split()))\n\n# calculate the minimum number of lights to turn off\nmin_lights_off = minimum_lights_off(n, arr)\n\n# print the result\nprint(min_lights_off)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "# Input the values of n and m\nn, m = map(int, input().split())\n\n# Create an empty list to store the number of steps required\nsteps = []\n\n# Function to find the minimum number of steps required to transform n to m\ndef find_steps(num, target):\n    # If num is equal to target, return 0\n    if num == target:\n        return 0\n    # Check if num is divisible by 2\n    if num % 2 == 0:\n        steps.append(find_steps(num // 2, target) + 1)\n    # Check if num is divisible by 3\n    if num % 3 == 0:\n        steps.append(find_steps(num // 3, target) + 1)\n    # Return the minimum number of steps\n    return min(steps)\n\n# Call the function to find the minimum number of steps\nsteps = find_steps(n, m)\n\n# If steps is less than 0, print -1\nif steps < 0:\n    print(-1)\n# If steps is greater than or equal to 0, print the number of steps\nelse:\n    print(steps)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "n, k = map(int, input().split())\n\nif n > 2 * k:\n    print(\"NO\")\nelse:\n    print(\"YES\")\n\n    for i in range(1, n + 1):\n        print(i, 2 * i % (k + 1) + 1)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "\nn = int(input())\n\narr = list(map(int,input().strip().split()))\n\nfl = 1\n\nans = \"\"\nc = 0\n\nst = 0\nen = n-1\n\nla = 0\nfloop = 0\nwhile fl:\n    if st>=n or en<=-1:\n        \n        break\n\n    if arr[st]==arr[en]:\n        floop =1\n        break;\n\n    \n    if arr[st] > la:\n        if arr[en]>la:\n            if arr[en] > arr[st]:\n                st+=1\n                la = arr[st-1]\n                ans+=\"L\"\n                c+=1\n            else:\n                en-=1\n                la  = arr[en+1]\n                ans+=\"R\"\n                c+=1\n        else:\n            st+=1\n            la = arr[st-1]\n            ans+=\"L\"\n            c+=1\n    else:\n        if arr[en]>la:\n            en-=1\n            la =arr[en+1]\n            ans+=\"R\"\n            c+=1\n        else:\n            break;\n#print(floop)\nif floop == 1:\n    orig = la\n    cm = 0\n    s1 = \"\"\n    for i in range(st,en+1):\n        if arr[i]>la:\n            la = arr[i]\n            cm+=1\n            s1+=\"L\"\n        else:\n            break;\n    cn = 0\n    s2 = \"\"\n    la = orig\n    for i in range(en,st-1,-1):\n        if la < arr[i]:\n            cn+=1\n            s2+=\"R\"\n            la = arr[i]\n        else:\n            break;\n    if cn>cm:\n        ans+=s2\n    else:\n        \n        ans+=s1\n    c+=max(cn,cm)\n    ##print(s1,s2)\n\n    \n    \nprint(c)\nprint(ans)\n                \n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "# Function to check if a string is a palindrome\ndef isPalindrome(s):\n    return s == s[::-1]\n\n# Function to check if a string is a strong palindrome\ndef isStrongPalindrome(s):\n    # Check if the string is a palindrome\n    if not isPalindrome(s):\n        return False\n\n    # Calculate the indices of the substrings\n    first_substring_end_index = len(s) // 2\n    second_substring_start_index = (len(s) + 3) // 2 - 1\n\n    # Extract the substrings\n    first_substring = s[:first_substring_end_index]\n    second_substring = s[second_substring_start_index:]\n\n    # Check if the substrings are palindromes\n    if isPalindrome(first_substring) and isPalindrome(second_substring):\n        return True\n    else:\n        return False\n\n# Read input from standard input\ns = input()\n\n# Check if the input string is a strong palindrome\nif isStrongPalindrome(s):\n    print(\"Yes\")\nelse:\n    print(\"No\")", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "import itertools\nimport collections\n\nN = int(input())\nLs = list(map(int, input().split()))\n\nL_combination = itertools.combinations(Ls, 3)\n\nans = 0\nfor sanpenList in L_combination:\n    checker = set(sanpenList)\n    if(len(sanpenList) != len(checker)):\n        continue\n\n    if(max(sanpenList) * 2 >= sum(sanpenList)):\n        continue\n\n    ans += 1\n\nprint(ans)", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "# Input\nn = int(input())\nheights = list(map(int, input().split()))\n\n# Check if all heights are equal\nif all(heights[0] == height for height in heights):\n    print(\"YES\")\n    exit()\n\n# Check if the wall can be completed\nfor i in range(n - 1):\n    if heights[i] == heights[i + 1]:\n        print(\"YES\")\n        exit()\nprint(\"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "from math import gcd\nk = int(input())\nsum = 0\n\nfor a in range(1,k+1):\n    for b in range(1,k+1): \n        x = gcd(a,b)\n        for c in range(1,k+1):\n            sum += gcd(x, c)\n\nprint(sum)", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "n = int(input())\n\n# Read the input\na = list(map(int, input().split()))\n\n# Create a list to store the count of students with each skill level\ncount = [0] * 101\n\n# Calculate the count of students with each skill level\nfor skill in a:\n    count[skill] += 1\n\n# Initialize the number of pairs that can form a team\npairs = 0\n\n# Initialize the number of problems that need to be solved\nproblems = 0\n\n# Iterate through all the skill levels\nfor skill in range(1, 101):\n    # If there are students with the current skill level, and the number of students with this skill level is even\n    if count[skill] > 0 and count[skill] % 2 == 0:\n        # Increment the number of pairs that can form a team\n        pairs += count[skill] // 2\n    # If there are students with the current skill level, and the number of students with this skill level is odd\n    elif count[skill] > 0:\n        # Increment the number of problems that need to be solved by the number of students with this skill level - 1\n        problems += count[skill] - 1\n\n# Calculate the total number of problems that need to be solved\ntotal_problems = problems * (n - pairs * 2)\n\n# Print the total number of problems that need to be solved\nprint(total_problems)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "def check_order(n, r, a, b):\n    for i in range(n):\n        if r >= a[i]:\n            r += b[i]\n        else:\n            return False\n    return True\n\nn, r = map(int, input().split())\na = []\nb = []\nfor _ in range(n):\n    a_i, b_i = map(int, input().split())\n    a.append(a_i)\n    b.append(b_i)\n\nif check_order(n, r, a, b):\n    print(\"YES\")\nelse:\n    print(\"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "n, m = list(map(int,input().split()))\na = list(map(int,input().split()))\nb = []\nfor i in range(m):\n    b.append(list(map(int,input().split())))\nans = -1000000000\n\nfor i in range(n):\n    ac = a.copy()\n    for j in range(m):\n        if i+1 < b[j][0] or i+1 > b[j][1]:\n            for k in range(b[j][0]-1, b[j][1]):\n                ac[k] -= 1\n    if a[i] - min(ac) > ans:\n        ans = a[i] - min(ac)\n        ansi = i\n\nansh = []\ni = ansi\nac = a.copy()\nq = 0\nfor j in range(m):\n    if i+1 < b[j][0] or i+1 > b[j][1]:\n        q += 1\n        ansh.append(j+1)\n\nprint(ans)\nprint(q)\nprint(*ansh)\n\n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "# Read the input from stdin\nn, x = map(int, input().split())\nL = list(map(int, input().split()))\n\n# Initialize the D_i sequence\nD = [0]\n\n# Calculate D_i\nfor i in range(n + 1):\n    D.append(D[i] + L[i])\n\n# Count the number of bounces with coordinates less than or equal to X\ncount = 0\nfor i in range(n + 1):\n    if D[i] <= x:\n        count += 1\n\n# Print the result\nprint(count)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "def max_moves(N, H):\n    # Initialize variables\n    current_position = 0\n    max_moves = 0\n    current_moves = 0\n\n    # Iterate over the squares\n    for i in range(1, N):\n        # Check if the height of the next square is not greater than that of the current square\n        if H[i] <= H[current_position]:\n            current_moves += 1\n        else:\n            # Update the maximum moves\n            max_moves = max(max_moves, current_moves)\n            current_moves = 0\n            current_position = i\n\n    # Check for the last case\n    max_moves = max(max_moves, current_moves)\n\n    return max_moves\n\n# Get the input\nN = int(input())\nH = list(map(int, input().split()))\n\n# Calculate the maximum number of moves\nmax_moves = max_moves(N, H)\n\n# Print the result\nprint(max_moves)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split())) + [-1]\na.sort()\nmx = 0\nc = 0\ncur = 0\nfor i in a:\n    if i == c:\n        cur += 1\n    else:\n        c = i\n        cur = 1\n    mx = max(mx, cur)\nprint(mx)\n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "n = int(input())\ninputlist = list(map(int,input().split()))\noutputlist = [inputlist.pop(0)]\nwhile len(inputlist) > 0:\n\tfor i in range(len(inputlist)):\n\t\tif outputlist[0]*3 == inputlist[i]:\n\t\t\toutputlist = [inputlist.pop(i)] + outputlist\n\t\t\tbreak\n\t\telif inputlist[i]*3 == outputlist[-1]:\n\t\t\toutputlist = outputlist + [inputlist.pop(i)]\n\t\t\tbreak\n\t\telif outputlist[-1]*2 == inputlist[i]:\n\t\t\toutputlist = outputlist + [inputlist.pop(i)]\n\t\t\tbreak\n\t\telif inputlist[i]*2 == outputlist[0]:\n\t\t\toutputlist = [inputlist.pop(i)] + outputlist \n\t\t\tbreak\nprint(' '.join(list(map(str,outputlist))))", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "def reorder(n, arr):\n    # This function rearranges the elements of the array\n    # in such a way that they match the game.\n\n    # Find the smallest number in the array and store it in x.\n    x = min(arr)\n\n    # Create an empty list to store the rearranged sequence.\n    rearranged = []\n\n    # Iterate through the array and reorder the elements.\n    for i in range(n):\n        # Append x to the rearranged sequence.\n        rearranged.append(x)\n\n        # Check if x is divisible by 3.\n        if x % 3 == 0:\n            # If it is, then divide x by 3.\n            x //= 3\n        else:\n            # If it is not, then multiply x by 2.\n            x *= 2\n\n    # Return the rearranged sequence.\n    return rearranged\n\n\n# Take input for the number of elements.\nn = int(input())\n\n# Take input for the sequence.\narr = list(map(int, input().split()))\n\n# Call the reorder function and print the rearranged sequence.\nprint(*reorder(n, arr))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "def solve(a, b):\n    # Reorder b to obtain the minimum possible array c\n    c = [(a[i] + b[i]) % len(a) for i in range(len(a))]\n    c_sorted = sorted(c)\n\n    return c_sorted\n\n\n# Read input\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\n# Solve the problem\nc_min = solve(a, b)\n\n# Print the result\nprint(\" \".join(map(str, c_min)))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "# -*- coding: utf-8 -*-\n\nimport sys\n\ndef input(): return sys.stdin.readline().strip()\ndef list2d(a, b, c): return [[c] * b for i in range(a)]\ndef list3d(a, b, c, d): return [[[d] * c for j in range(b)] for i in range(a)]\ndef list4d(a, b, c, d, e): return [[[[e] * d for j in range(c)] for j in range(b)] for i in range(a)]\ndef ceil(x, y=1): return int(-(-x // y))\ndef INT(): return int(input())\ndef MAP(): return list(map(int, input().split()))\ndef LIST(N=None): return list(MAP()) if N is None else [INT() for i in range(N)]\ndef Yes(): print('Yes')\ndef No(): print('No')\ndef YES(): print('YES')\ndef NO(): print('NO')\n# sys.setrecursionlimit(10 ** 9)\nINF = 10 ** 18\nMOD = 10 ** 9 + 7\n\ndef bisearch_min(mn, mx, func):\n    ok = mx\n    ng = mn\n    while ng+1 < ok:\n        mid = (ok+ng) // 2\n        if func(mid):\n            ok = mid\n        else:\n            ng = mid\n    return ok\n\ndef check(m):\n    if m == len(B):\n        return True\n    if B[m][-1][0] <= a:\n        return True\n    else:\n        return False\n\nN = INT()\nA = [ord(c)-97 for c in input()]\n\nB = [[] for i in range(1)]\nB[0].append((A[0], 0))\nfor i, a in enumerate(A[1:], 1):\n    idx = bisearch_min(-1, len(B), check)\n    if idx == len(B):\n        B.append([(a, i)])\n    else:\n        B[idx].append((a, i))\n\nans = [0] * N\nfor a, li in enumerate(B):\n    for _, idx in li:\n        ans[idx] = a + 1\nprint(len(B))\nprint(*ans)\n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "n = int(input())\n\nans = 0\nif n % 4 == 0:\n    ans = 0\nelif n % 4 == 1:\n    ans = 1\nelif n % 4 == 2:\n    ans = 1\nelif n % 4 == 3:\n    ans = 0\n\nprint(ans)\n\n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "def min_product_mod(L, R):\n    MOD = 2019\n    result = float('inf')\n    for i in range(L, R):\n        for j in range(i + 1, R + 1):\n            result = min(result, (i * j) % MOD)\n    return result\n\nL, R = map(int, input().split())\nprint(min_product_mod(L, R))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "import numpy as np\nn = input()\nprint(*np.argsort(list(map(int,input().split())))+1)", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "# Takes in input from user\nA, B = map(int, input().split())\n\n# Minimum number of pieces for A guests\nmin_A = (A * (A + 1)) // 2\n\n# Minimum number of pieces for B guests\nmin_B = (B * (B + 1)) // 2\n\n# Prints the minimum number of pieces\nprint(min_A + min_B)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "import sys\ninput = sys.stdin.readline\n\nNEGINF = -1000000\n\nn = int(input())\nadj = [[] for i in range(n)]\nparent = [-1] * n\n\nvisited = [False] * n\nfor _ in range(n - 1):\n    a, b = list(map(int, input().split()))\n    adj[a - 1].append(b - 1)\n    adj[b - 1].append(a - 1)\n\ntup = tuple()\nouts = [tup] * n\nq = [(0, 0)]\n\nwhile q:\n    node, type = q.pop()\n    if type == 0:\n        visited[node] = True\n        q.append((node, 1))\n        for v in adj[node]:\n            if not visited[v]:\n                parent[v] = node\n                q.append((v, 0))\n    else:\n        ones = [(0, node)]\n        twos = []\n        threes = []\n        for v in adj[node]:\n            if v != parent[node]:\n                a, b, c = outs[v]\n                ones.append((a[0] + 1, a[1], v))\n                twos.append((b[0] + 1, b[1], v))\n                threes.append(c)\n        ones.sort(reverse = True)\n        twos.sort(reverse = True)\n        threes.sort(reverse = True)\n\n        bestOne = (ones[0][0], ones[0][1])\n        \n        bestsTwo = [(NEGINF, (0, 0))]\n        if len(twos) > 0:\n            bestsTwo.append((twos[0][0], twos[0][1]))\n        if len(ones) > 1:\n            o1 = ones[0]\n            o2 = ones[1]\n            bestsTwo.append((o1[0] + o2[0], (o1[1], o2[1])))\n\n        bestsThree = [(NEGINF, (0, 0, 0))]\n        if len(threes) > 0:\n            bestsThree.append(threes[0])\n        if len(ones) > 2:\n            o1 = ones[0]\n            o2 = ones[1]\n            o3 = ones[2]\n            bestsThree.append((o1[0] + o2[0] + o3[0], (o1[1], o2[1], o3[1])))\n        if len(twos) > 0:\n            o1 = ones[0]\n            t1 = twos[0]\n            if o1[2] != t1[2]:\n                bestsThree.append((o1[0] + t1[0], (o1[1], t1[1][0], t1[1][1])))\n            else:\n                if len(twos) > 1:\n                    t2 = twos[1]\n                    bestsThree.append((o1[0] + t2[0], (o1[1], t2[1][0], t2[1][1])))\n                if len(ones) > 1:\n                    o2 = ones[1]\n                    bestsThree.append((o2[0] + t1[0], (o2[1], t1[1][0], t1[1][1])))\n                    \n\n        outs[node] = (bestOne, max(bestsTwo), max(bestsThree))\n\nfinal = outs[0][2]\nprint(final[0])\nprint(' '.join([str(x + 1) for x in final[1]]))\n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "# Read input\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\n# Initialize the number of good sleeping times\ngood_sleeping_times = 0\n\n# Iterate through the sleeping times\nfor i in range(n):\n    # Check if the current sleeping time is good\n    if l <= (a[i] - 1) % h <= r:\n        good_sleeping_times += 1\n    # Check if the previous sleeping time is good\n    if l <= a[i] % h <= r:\n        good_sleeping_times += 1\n\n# Print the maximum number of good sleeping times\nprint(good_sleeping_times)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "#\n# abc136 c\n#\nimport sys\nfrom io import StringIO\nimport unittest\n\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdout, stdin = sys.stdout, sys.stdin\n        sys.stdout, sys.stdin = StringIO(), StringIO(input)\n        resolve()\n        sys.stdout.seek(0)\n        out = sys.stdout.read()[:-1]\n        sys.stdout, sys.stdin = stdout, stdin\n        self.assertEqual(out, output)\n\n    def test_\u5165\u529b\u4f8b_1(self):\n        input = \"\"\"5\n1 2 1 1 3\"\"\"\n        output = \"\"\"Yes\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_2(self):\n        input = \"\"\"4\n1 3 2 1\"\"\"\n        output = \"\"\"No\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_3(self):\n        input = \"\"\"5\n1 2 3 4 5\"\"\"\n        output = \"\"\"Yes\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_4(self):\n        input = \"\"\"1\n1000000000\"\"\"\n        output = \"\"\"Yes\"\"\"\n        self.assertIO(input, output)\n\n\ndef resolve():\n    N = int(input())\n    H = list(map(int, input().split()))\n\n    mx = H[0]\n    ans = \"Yes\"\n    for h in H[1:]:\n        if h < mx-1:\n            ans = \"No\"\n            break\n        mx = max(mx, h)\n\n    print(ans)\n\n\ndef __starting_point():\n    # unittest.main()\n    resolve()\n\n__starting_point()", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "def solve(n, b):\n    a = []\n    primes = []\n    for i in range(2, 2750131 + 1):\n        if is_prime(i):\n            primes.append(i)\n    for i in range(n):\n        if b[i] in primes:\n            a.append(b[i])\n        else:\n            a.append(b[i + n])\n    return a\n\n\ndef is_prime(x):\n    if x <= 1:\n        return False\n    if x == 2:\n        return True\n    if x % 2 == 0:\n        return False\n    for i in range(3, int(x ** 0.5) + 1, 2):\n        if x % i == 0:\n            return False\n    return True\n\n\nn = int(input())\nb = list(map(int, input().split()))\nresult = solve(n, b)\nprint(\" \".join(map(str, result)))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "#!/usr/bin/env python3\nimport itertools\nimport math\n\nd, g = list(map(int, input().split()))\npc = [list(map(int, input().split())) for i in range(d)]\n\n\nans = 100*d*100\nfor d in itertools.product([0, 1], repeat=d):\n    ans_tmp = 0\n    value = 0\n\n    for i, j in enumerate(d):\n        if j == 0:\n            continue\n        ans_tmp += pc[i][0]\n        value += (i+1)*100*pc[i][0] + pc[i][1]\n\n    iter_ = [[i, j] for i, j in enumerate(d)]\n    # print(iter_)\n    for i, j in reversed(iter_):\n        if j == 1:\n            continue\n        base = (i+1)*100\n\n        shortage = g-value\n        if g-value <= 0:\n            break\n\n        num = min(math.ceil(shortage/base), pc[i][0]-1)\n        ans_tmp += num\n        value += base*num\n    # print(d)\n    # print(value, ans_tmp)\n    if value >= g:\n        ans = min(ans, ans_tmp)\n\nprint(ans)\n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "# Read the input values from standard input\nN = int(input())\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\n\n# Initialize the dp list to store the maximum number of monsters that can be defeated\ndp = [0] * (N+1)\n\n# Update the dp list using the given logic\nfor i in range(N):\n    if i == 0:\n        dp[i+1] = max(A[i], B[i])\n    else:\n        dp[i+1] = max(dp[i] + B[i], A[i+1])\n\n# Print the maximum number of monsters that can be defeated\nprint(dp[N])", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "N = int(input())\n\nfor i in range(1, 10):\n    for j in range(1, 10):\n        if i * j == N:\n            print('Yes')\n            return\n            \nprint('No')", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "# Inputs the number of test cases\nt = int(input())\n\n# Iterates through each test case\nfor i in range(t):\n    # Inputs the length of the array\n    n = int(input())\n\n    # Inputs the array elements\n    a = list(map(int, input().split()))\n\n    # Iterates through each possible subsequence of length at least 3\n    for i in range(n - 2):\n        for j in range(i + 2, n):\n            # Checks if the subsequence is a palindrome\n            if a[i] == a[j] and a[i + 1] == a[j - 1]:\n                print(\"YES\")\n                break\n        else:\n            continue\n        break\n    else:\n        print(\"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "n,m=map(int,input().split());a=n-sum(map(int,input().split()));print([-1,a][a>=0])", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "def calculate_paths(n, m, k, grid):\n    # Base case for empty grid\n    if n == 0 or m == 0:\n        return 0\n\n    # Create a 2D array to store the number of paths to each cell\n    dp = [[0] * m for _ in range(n)]\n\n    # Initialize the top row and leftmost column with 1\n    for i in range(n):\n        dp[i][0] = 1\n    for j in range(m):\n        dp[0][j] = 1\n\n    # Dynamic programming\n    for i in range(1, n):\n        for j in range(1, m):\n            # Calculate the xor sum of the current cell with the paths to the top and left cells\n            top_xor_sum = dp[i - 1][j] ^ grid[i - 1][j]\n            left_xor_sum = dp[i][j - 1] ^ grid[i][j - 1]\n\n            # If the xor sum is equal to k, add 1 to the number of paths to the current cell\n            if top_xor_sum == k:\n                dp[i][j] += 1\n            if left_xor_sum == k:\n                dp[i][j] += 1\n\n    # Return the number of paths to the bottom-right cell\n    return dp[n - 1][m - 1]\n\n# Read the input\nn, m, k = map(int, input().split())\ngrid = [list(map(int, input().split())) for _ in range(n)]\n\n# Calculate and print the result\nresult = calculate_paths(n, m, k, grid)\nprint(result)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "#!/usr/bin/python3\n\n# import necessary libraries\nimport sys\nfrom collections import defaultdict\n\n# function to solve the problem\ndef solve(n, k, a):\n    # create a dictionary to store the count of numbers in the array\n    d = defaultdict(int)\n    for i in a:\n        d[i] += 1\n    # create a list to store the number of occurences of each number in the array\n    num = []\n    for i in d:\n        num.append(d[i])\n    # sort the list in descending order\n    num.sort(reverse=True)\n    # initialise the result to 0\n    res = 0\n    # iterate through the list\n    for i in num:\n        # if the current number is less than or equal to k, break out of the loop\n        if i <= k:\n            break\n        # calculate the minimum number of operations required to get the current number equal to k\n        res += (i - k)\n    # return the result\n    return res\n\n# input the values of n and k\nn, k = list(map(int, input().split()))\n# input the array a\na = list(map(int, input().split()))\n# call the solve function and print the result\nprint(solve(n, k, a))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "def mi():\n    return list(map(int, input().split()))\n'''\n3\n121\n6\n120110\n6\n211200\n'''\nn = int(input())\na = list(input())\n\nzc, oc, tc = 0,0,0\nfor i in a:\n    if i=='1':\n        oc+=1\n    elif i=='0':\n        zc+=1\n    else:\n        tc+=1\nif oc==tc and oc==zc:\n    print(''.join(a))\n    return\ntarget = n//3\n\nztba = max(0,target-zc)\nztbr = max(0,zc-target)\n\notba = max(0,target-oc)\notbr = max(0,oc-target)\n\nttba = max(0,target-tc)\nttbr = max(0,tc-target)\n\n# print (target, ztba, ztbr, otba, otbr, ttba, ttbr)\nif ztbr:\n    for i in range(n-1,-1,-1):\n        if a[i]=='0':\n            ztbr-=1\n            if ttba:\n                a[i]='2'\n                ttba-=1\n            elif otba:\n                a[i]='1'\n                otba-=1\n        if ztbr==0:\n            break\nif otbr:\n    if ztba:\n        for i in range(n):\n            if otbr==0:\n                break\n            if a[i]=='1':\n                a[i]='0'\n                otbr-=1\n                ztba-=1\n            if ztba==0:\n                break\n    if otbr and ttba:\n        for i in range(n-1,-1,-1):\n            if otbr==0:\n                break\n            if a[i]=='1':\n                a[i]='2'\n                otbr-=1\n                ttba-=1\n            if ttba==0:\n                break\nif ttbr:\n    if ztba:\n        for i in range(n):\n            if ttbr==0:\n                break\n            if a[i]=='2':\n                a[i]='0'\n                ttbr-=1\n                ztba-=1\n            if ztba==0:\n                break\n    if ttbr and otba:\n        for i in range(n):\n            if ttbr==0:\n                break\n            if a[i]=='2':\n                a[i]='1'\n                ttbr-=1\n                otba-=1\n            if otba==0:\n                break\nprint(''.join(a))\n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "from math import gcd\n\nn = int(input())\nnums = list(map(int, input().split()))\n\ndef lcm(x, y):\n    return (x * y) // gcd(x, y)\n\nmin_lcm = float('inf')\ni, j = 0, 0\nfor idx1 in range(n):\n    for idx2 in range(idx1 + 1, n):\n        current_lcm = lcm(nums[idx1], nums[idx2])\n        if current_lcm < min_lcm:\n            min_lcm = current_lcm\n            i, j = idx1 + 1, idx2 + 1\n\nprint(i, j)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "S = input()\nT = S[::-1]\ncnt = 0\nfor i in range(len(S)//2):\n    if S[i] != T[i]:\n        cnt += 1\nprint(cnt)", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "# Function to calculate the GCD of two numbers\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\n# Function to calculate the maximum possible GCD\ndef maximumGCD(N, A):\n    # Initialize the maximum GCD as 1\n    maxGCD = 1\n\n    # Find the GCD of all pairs of integers in the array\n    for i in range(N):\n        for j in range(i + 1, N):\n            maxGCD = max(maxGCD, gcd(A[i], A[j]))\n\n    # Iterate over all integers from 1 to 10^9\n    for k in range(1, 1000000000):\n        # Check if the integer k divides all integers in the array\n        if all(a % k == 0 for a in A):\n            # If k divides all integers, update the maximum GCD\n            maxGCD = max(maxGCD, k)\n\n    # Return the maximum possible GCD\n    return maxGCD\n\n# Read the input\nN = int(input())\nA = list(map(int, input().split()))\n\n# Calculate and print the maximum possible GCD\nprint(maximumGCD(N, A))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "import sys\nfrom collections import Counter\n\ndef main():\n    n = int(input())\n    ar = list(map(int, input().split()))\n    \n    res = n\n    freq = Counter(ar)\n    \n    for val in ar:\n        for d in range(32):\n            x = (1 << d) - val\n            if x <= 0 or not freq.get(x):\n                continue\n            \n            count = freq.get(x) - (x == val)\n            if count > 0:\n                res -= 1\n                break\n    \n    print(res)\n            \ndef __starting_point():\n    main()\n\n__starting_point()", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "3\nn, m, s = map(int, input().split())\n\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nc = list(map(int, input().split()))\n\nif sum(c) > s:\n    print(\"NO\")\nelse:\n    print(\"YES\")\n    print(*(b.index(max) for max in a])", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n = int(input())\ns = input().strip()\n\n# Check if the wires can be untangled\ncan_untangle = True\n\n# Iterate over the sequence of characters\nfor i in range(n):\n    # If the wire is on top of the minus wire and it's not the first wire\n    if s[i] == '+' and s[i-1] == '-':\n        can_untangle = False\n\n# Print the answer\nprint(\"Yes\" if can_untangle else \"No\")", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n, t = map(int, input().split())\n\nm = 0\nfor i in range(n + 1):\n    if t - i * (i - 1) // 2 <= 0:\n        m += 1\n\nprint(m)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "q = int(input())\n\nfor _ in range(q):\n    n, k = map(int, input().split())\n    f = \"What are you doing at the end of the world? Are you busy? Will you save us?\"\n    s = f + f\" \" * n\n    print(s[k-1])", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\n\n# Create a graph\ngraph = [set() for _ in range(n)]\nfor i in range(n):\n    for j in range(n):\n        if a[i] & a[j] != 0:\n            graph[i].add(j)\n\n# Find the shortest cycle\ncycle_length = -1\nvisited = set()\nfor i in range(n):\n    if i in visited:\n        continue\n    visited.add(i)\n    for j in graph[i]:\n        if j in visited:\n            cycle_length = min(cycle_length, abs(i - j))\n\n# Print the shortest cycle length\nprint(cycle_length) if cycle_length != -1 else print(-1)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "a, b = map(int, input().split())\n\n# Find the number of resistors needed to make an element with resistance a/b\nres = 1\nwhile res * R_0 < b:\n    res += 1\n\n# Print the answer\nprint(res)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n, k = map(int, input().split())\n\na = list(map(int, input().split()))\n\na.sort()\n\ntotal_a = sum(a)\n\nif total_a < n:\n    print(-1)\nelse:\n    ans = 0\n    current_a = 0\n    for i in range(len(a)):\n        current_a += a[i]\n        ans += 1\n\n        if current_a >= n:\n            break\n\n    print(ans)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n = int(input())\ncards = []\nfor _ in range(n):\n    cards.append(input().strip().split())\n\n# Create a dictionary to store the number of cards of each type\ncards_dict = {}\nfor color, value in cards:\n    if color not in cards_dict:\n        cards_dict[color] = 0\n    cards_dict[color] += int(value)\n\n# Calculate the minimum number of hints\nmin_hints = 0\nfor color, value in cards_dict.items():\n    min_hints += max(0, cards_dict[color] - 1)\n\nprint(min_hints)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "N = int(input())\n\n# Create a tree\ngraph = [[] for _ in range(N)]\nfor i in range(N-1):\n    a, b = map(int, input().split())\n    graph[a].append(b)\n    graph[b].append(a)\n\n# Calculate the distance between two vertices in a tree\ndef distance(node1, node2):\n    if node1 == node2:\n        return 0\n    distance1 = distance(node1, node2)\n    distance2 = distance(node2, node1)\n    return 1 + min(distance1, distance2)\n\n# Calculate the niceness of a way of painting the graph\ndef niceness(painting):\n    white_distance = 0\n    black_distance = 0\n    for i in range(N):\n        if painting[i] == 1:\n            for j in graph[i]:\n                if painting[j] == 2:\n                    white_distance = max(white_distance, distance(i, j))\n    for i in range(N):\n        if painting[i] == 2:\n            for j in graph[i]:\n                if painting[j] == 1:\n                    black_distance = max(black_distance, distance(i, j))\n    return max(white_distance, black_distance)\n\n# Calculate the sum of the nicenesses of all ways of painting the graph\ntotal_niceness = 0\nfor painting in range(2**N):\n    total_niceness += niceness(painting)\n\n# Print the total niceness\nprint(total_niceness % (10**9 + 7))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "s = input().lower()\na_count = s.count('a')\nb_count = s.count('b')\nc_count = len(s) - a_count - b_count\n\nif a_count == c_count or b_count == c_count or a_count == b_count:\n    print(\"YES\")\nelse:\n    print(\"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n = int(input())\n\nif n == 0:\n    print(-1)\nelse:\n    a, b, c = [], [], []\n    for _ in range(n):\n        a.append(int(input().split()[0]))\n        b.append(int(input().split()[0]))\n        c.append(int(input().split()[0]))\n\n    found = False\n    for i in range(n):\n        if a[i] + b[i] != c[i] % n:\n            found = True\n\n    if found:\n        print(-1)\n    else:\n        print(*a)\n        print(*b)\n        print(*c)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n = int(input())\ns = list(map(int, input().split()))\n\ns.sort()\n\ng = 1\nfor i in s:\n    g = gcd(g, i)\n\nprint(len(s) - g + 1)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n, x = map(int, input().split())\na = list(map(int, input().splitlines()))\n\n# Calculate the XOR of two numbers\ndef xor(x, y):\n    return (x ^ y) & 2**32 - 1\n\n# Calculate the number of different integers not exceeding X that can be written on the blackboard\nans = 0\nfor i in a:\n    x_double = 2 * i\n    x_xor = xor(i, x_double)\n    if x_xor <= x:\n        ans += 1\n\nprint(ans)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n, m = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nx = int(input())\n\nc = [[a[i] * b[j] for i in range(n)] for j in range(m)]\n\nmax_area = 0\nfor i in range(n):\n    for j in range(m):\n        sum = 0\n        for x in range(i, n):\n            for y in range(j, m):\n                sum += c[x][y]\n        max_area = max(max_area, (x - i + 1) * (y - j + 1) if sum <= x else 0)\n\nprint(max_area)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "a, b, c, l = map(int, input().split())\n\n# Calculate the maximum increase for each stick\nmax_increase = min(l, a, b, c)\n\n# Calculate the number of ways to increase the sticks\nnum_ways = 0\nif max_increase > 0:\n    num_ways += max_increase - 1\n    if max_increase >= 2:\n        num_ways += min(max_increase - 1, a, b, c) - 1\n\n# Print the number of ways\nprint(num_ways)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "a, b, c, d = map(int, input().split())\n\nif a + b + c + d == 0:\n    print(\"NO\")\nelse:\n    print(\"YES\")\n    print(a + b + c + d)\n    print(*(0) * a + (1) * b + (2) * c + (3) * d)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\n\na.sort()\n\n# If the first player wins\nif a[-1] - a[0] >= 2:\n  print(\"Conan\")\n# Otherwise, the second player wins\nelse:\n  print(\"Agasa\")", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n, m, k = map(int, input().split())\na = []\nfor _ in range(n):\n    a.append(list(map(int, input().split())))\n\nif not a or not a[0]:\n    print(-1)\n    exit()\n\ncomponents = {}\nfor i in range(n):\n    for j in range(m):\n        if a[i][j] and (i, j) not in components:\n            components[(i, j)] = set()\n            for di in range(i-1, i+2):\n                for dj in range(j-1, j+2):\n                    if 0 <= di < n and 0 <= dj < m and a[di][dj] == a[i][j] and (di, dj) not in components[(i, j)]:\n                        components[(i, j)].add((di, dj))\n\nchange_cnt = 0\nfor component in components.values():\n    h, w = len(component)\n    change_cnt += abs(h-w)\n\nprint(change_cnt if change_cnt else -1)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "import calendar\n\ndef check_days(day1, day2):\n    # Create a dictionary to store the days of the week\n    days_dict = {\"monday\": 1, \"tuesday\": 2, \"wednesday\": 3, \"thursday\": 4, \"friday\": 5, \"saturday\": 6, \"sunday\": 7}\n\n    # Get the number of the first day of the month for the given year\n    month_start = calendar.monthrange(2023, 1)[0]\n\n    # Check if the first day of the month is equal to day1\n    if days_dict[day1] == month_start:\n        # Get the number of the first day of the next month\n        next_month_start = calendar.monthrange(2023, 2)[0]\n\n        # Check if the first day of the next month is equal to day2\n        if days_dict[day2] == next_month_start:\n            return \"YES\"\n\n    return \"NO\"\n\n# Read the input\nday1 = input().lower()\nday2 = input().lower()\n\n# Check if the desired situation is possible\nprint(check_days(day1, day2))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "b, g, n = map(int, input().split())\n\n# Calculate the minimum number of decks\nm = int((n - g) // b) + 1\n\nprint(m)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n, k = map(int, input().split())\ns = input()\nt = input()\n\n# Calculate the number of strings that are prefixes of at least one of the written strings\nc = 0\nfor i in range(len(s) + 1):\n    prefix_s = s[:i]\n    if prefix_s in t or prefix_s == s:\n        c += 1\n\n# Print the maximum value of c\nprint(c)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "k = int(input())\n\ndef xor_set(s):\n    return set(x ^ y for x, y in s) == s\n\nres = 0\nfor i in range(1, k + 1):\n    s = set(range(i))\n    if xor_set(s):\n        res += 1\n\nprint(res % 1000000007)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n, k = map(int, input().split())\nc = list(map(int, input().split()))\n\nc.sort()\nsum = 0\ndp = set()\n\nfor i in range(len(c)):\n    sum += c[i]\n    dp.add(sum - k)\n\nprint(len(dp))\nprint(*sorted(dp))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "import numpy as np\n\n# Read the input data\nx1, y1 = map(int, input().split())\nx2, y2 = map(int, input().split())\nn = int(input())\n\n# Store the road information\na = np.array(list(map(int, input().split())))\nb = np.array(list(map(int, input().split())))\nc = np.array(list(map(int, input().split())))\n\n# Calculate the determinant of the matrix\ndet = np.linalg.det(np.array([[a[i], b[i], c[i]] for i in range(n)]))\n\n# If the determinant is zero, it means that the university and home are on the same line, so the minimum number of steps is 1\nif det == 0:\n  print(1)\n\n# Otherwise, the minimum number of steps is 2\nelse:\n  print(2)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n, x, y = map(int, input().split())\na = input().strip()\n\n# Calculate the minimum cost\ncost = 0\nfor i in range(len(a)):\n    # Reverse a substring\n    if a[i:i + 1] != '1':\n        cost += x\n    # Invert a substring\n    if a[i:i + 1] != '0':\n        cost += y\n\n# Print the minimum cost\nprint(cost) if cost else print(0)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n, m = map(int, input().split())\n\n# Calculate the maximum number of digits for hours and minutes\nmax_hours_digits = int(n.bit_length()) - 1\nmax_minutes_digits = int(m.bit_length()) - 1\n\n# Calculate the number of pairs with distinct digits\nnum_pairs = 0\nfor hours in range(1, max_hours_digits + 1):\n    for minutes in range(1, max_minutes_digits + 1):\n        # Convert hours and minutes to base 7\n        hours_base_7 = str(hours).zfill(hours_digits)\n        minutes_base_7 = str(minutes).zfill(minutes_digits)\n\n        # Check if all digits are distinct\n        is_distinct = True\n        for i in range(len(hours_base_7)):\n            for j in range(len(minutes_base_7)):\n                if hours_base_7[i] == minutes_base_7[j]:\n                    is_distinct = False\n\n        # Count the number of pairs with distinct digits\n        if is_distinct:\n            num_pairs += 1\n\nprint(num_pairs)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n, k = map(int, input().split())\n\nmod = 10**9 + 7\n\n# Calculate the cost of having x people\ncost = lambda x: x ** k\n\n# Calculate the sum of costs over all non-empty subsets\ntotal_cost = 0\nfor i in range(1, n + 1):\n    total_cost += cost(i)\n\n# Print the total cost\nprint(total_cost % mod)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "k, a, b = map(int, input().split())\n\nif a + b < k or a + b <= k:\n    print(-1)\nelse:\n    print(a // k)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split().strip().split()))\n\na.sort()\nans = 1\nfor i in range(n-1):\n    if a[i] > a[i+1]:\n        ans = max(ans, i+2)\n\nprint(ans)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n, k = map(int, input().split())\n\ntoys = list(range(1, n + 1))\ntotal_cost = sum(toys)\n\nif total_cost - k < 0:\n    print(0)\nelse:\n    print(min((total_cost - k) // 2, n))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n = int(input())\nprint(int((n*(n-1)*(n-2)) // 6) % (10**9 + 7))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n = int(input())\ng = input().split()\n\n# Create a map to store the positions of packmen and asterisks\npos = {}\nasterisks = {}\nfor i in range(n):\n    if g[i] == 'P':\n        pos[i] = 'P'\n    elif g[i] == '*':\n        asterisks[i] = True\n\n# Calculate the minimum time to eat all asterisks\ntime = 0\nfor i in pos:\n    # Calculate the distance to the nearest asterisk\n    distance = min(abs(i - x) for x in asterisks)\n    # Update the minimum time if necessary\n    time = max(time, distance)\n\n# Print the minimum time\nprint(time)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n, m = map(int, input().split())\na = list(map(int, input().split()))\nw = list(map(int, input().split()))\n\nq = sum(w)\np = sum(a)\n\nfor i in range(n):\n    r = w[i] - a[i]\n    print(r * p // q * 998244353)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "import numpy as np\n\n# Read input data\nline1 = np.array([int(x) for x in input().split()])\nline2 = np.array([int(x) for x in input().split()])\n\n# Create two squares\nsquare1 = np.array([[line1[0], line1[1]], [line1[2], line1[3]], [[line1[4], line1[5]], [line1[6], line1[7]]])\nsquare2 = np.array([[line2[0], line2[1]], [line2[2], line2[3]], [[line2[4], line2[5]], [line2[6], line2[7]]])\n\n# Check if squares intersect\nintersect = np.bool_(np.intersect1(square1, square2).size)\n\n# Print output\nprint(\"Yes\" if intersect else \"No\")", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n, k = map(int, input().split())\nq = list(map(int, input().split()))\ns = list(map(int, input().split()))\n\n# Check if Masha's permutation occurred on the board before the k-th move\nfor i in range(len(s)):\n    if s[i] not in q:\n        print(\"YES\")\n        exit()\n\nprint(\"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "H, W = map(int, input().split())\n\nS = []\nfor _ in range(H):\n    S.append(input().strip())\n\nis_symmetric = True\nfor i in range(H):\n    for j in range(W):\n        if S[i][j] != S[H - 1 - i][W - 1 - j]:\n            is_symmetric = False\n\nprint(\"YES\" if is_symmetric else \"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "import numpy as np\n\na_x, a_y, b_x, b_y, t_x, t_y = map(int, input().split())\nn = int(input())\n\nx_i, y_i = np.array(map(int, input().split())).reshape(n, 2)\n\n# Calculate the distance between Adil/Bera and each bottle\ndistance = np.sqrt((x_i - a_x)**2 + (y_i - a_y)**2) + np.sqrt((x_i - b_x)**2 + (y_i - b_y)**2)\n\n# Find the minimum distance\nmin_distance = np.sum(np.min(distance, axis=0))\n\nprint(min_distance)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "H, W = map(int, input().split())\n\na = []\nfor _ in range(H):\n    a.append([input().strip() for _ in range(W)])\n\nS, T = None, None\nfor i in range(H):\n    for j in range(W):\n        if a[i][j] == \"S\":\n            S = (i, j)\n        elif a[i][j] == \"T\":\n            T = (i, j)\n\nleaves_to_remove = 0\nif S and T:\n    for i in range(H):\n        for j in range(W):\n            if a[i][j] == \"o\" and (i, j) != S and (i, j) != T:\n                leaves_to_remove += 1\n\n    print(leaves_to_remove)\n    print(\"Remove the following leaves:\")\n    for i in range(H):\n        for j in range(W):\n            if a[i][j] == \"o\" and (i, j) != S and (i, j) != T:\n                print((i, j))\nelse:\n    print(-1)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n, m = map(int, input().split())\nl = list(map(int, input().split()))\ns = list(map(int, input().split()))\nc = list(map(int, input().split()))\n\nc_sum = sum(c)\n\nl.sort()\ns.sort()\n\nmax_profit = 0\ncurr_cost = 0\ncurr_aggression = 0\n\nfor i in range(len(l)):\n    if l[i] > curr_aggression:\n        break\n    curr_cost += s[i]\n    curr_aggression = l[i]\n    max_profit += c[l[i]] - s[i]\n\nprint(max_profit)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n = int(input())\n\n# Find the pair of integers a and b that maximizes S(a) + S(b)\n# such that 0 <= a, b <= n, a + b = n\n\ndef S(x):\n    sum = 0\n    while x:\n        digit = x % 10\n        sum += digit\n        x //= 10\n    return sum\n\na, b = 0, n - a\n\nmax_sum = 0\n\nfor i in range(1, int(n**0.5) + 1):\n    if S(i) + S(n - i) > max_sum:\n        a, b = i, n - i\n        max_sum = S(i) + S(n - i)\n\nprint(max_sum)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n = int(input())\n\nif n == 0:\n    print(-1)\n\nelse:\n    m = n + 1\n    a = list(int(input().split())[:m])\n    b = list(int(input().split())[:m])\n\n    # Find the greatest common divisor\n    while a[-1] % b[0] != 0:\n        q = a[-1] // b[0]\n        r = a[-1] % b[0]\n        a = b\n        b = r\n\n    # Print the polynomials\n    print(len(a))\n    print(*a)\n    print(len(b))\n    print(*b)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\n# Create a dictionary to store the connections between islands\nconnections = {i: [] for i in range(n)}\nfor i in range(n):\n    connections[a[i]].append(i)\n\n# Check if the desired order can be achieved\nis_possible = True\nfor i in range(n):\n    if b[i] != 0 and connections[i] != [0]:\n        for j in connections[i]:\n            if b[j] == 0 and j != 0:\n                connections[j].remove(i)\n                connections[i].append(j)\n                b[j] = 0\n                break\n    else:\n        is_possible = False\n\n# Print the answer\nprint(\"YES\" if is_possible else \"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n = int(input())\n\nx = 1\ny = 1\n\nknights = 1\n\nboard = [[0] * 11 for _ in range(11)]\n\nboard[x][y] = knights\n\nwhile True:\n    found = False\n    for r in range(1, 11):\n        for c in range(1, 11):\n            if board[r][c] == 0 and (\n                (r-1, c) in knights or\n                (r+1, c) in knights or\n                (r, c-1) in knights or\n                (r, c+1) in knights\n            ):\n                board[r][c] = knights\n                knights += 1\n                found = True\n\n    if not found:\n        break\n\nprint(knights)\nfor i in range(knights):\n    print(x, y)\n    x += 1\n    y += 1", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n, k = map(int, input().split())\n\ndef gcd(a, b):\n    if b:\n        return gcd(b, a % b)\n    else:\n        return a\n\ndef f(n):\n    return sum(1 for x, y in enumerate(range(1, int(n**0.5) + 1)) if gcd(x, y) == 1 else 0)\n\ndef Fk(n, k):\n    if k == 1:\n        return f(n)\n    elif k % 2 == 0:\n        return g(Fk(n, k - 1))\n    else:\n        return f(Fk(n, k - 1))\n\ng = lambda n: sum(f(n / d) for d in range(1, int(n**0.5) + 1))\n\nprint(Fk(n, k) % 1000000007)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "import numpy as np\n\nn, m = map(int, input().split())\n\n# Calculate the number of non-similar worlds\nnum_worlds = 0\n\n# Calculate the number of changes\nnum_changes = n\n\n# Calculate the maximum number of edges that can be added to the graph\nmax_edges = m - 1\n\n# Iterate over the number of changes\nfor i in range(num_changes):\n    # Calculate the number of edges that can be added in this change\n    num_edges_added = min(max_edges, i)\n\n    # Add the number of edges that can be added in this change to the total number of edges\n    num_worlds += num_edges_added\n\n# Calculate the number of non-similar worlds modulo 10^9 + 7\nnum_worlds %= 10**9 + 7\n\n# Print the number of non-similar worlds\nprint(num_worlds)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n = int(input())\nm = int((n + 1) ** 2)\ng = 0\nfor i in range(m):\n    g += i + 1\n\nprint(g)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n, t, k, d = map(int, input().split())\n\nif (n - 1) * t <= k * t:\n    print(\"YES\")\nelse:\n    print(\"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "import random\n\nn = int(input())\na = list(map(int, input().split()))\n\n# Calculate the expected length of the longest increasing subsequence\nexpected_length = 0\nfor i in range(n):\n    a_i = int(a[i])\n    expected_length += a_i - 1\n\n# Calculate the modulo of the expected length\nexpected_length %= 1000000007\n\n# Print the expected length\nprint(expected_length)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\n\n# Calculate the number of students that need to be persuaded\npersuaded = 0\nfor i in range(n):\n    if a[i] == 1 or a[i] == 2:\n        persuaded += 1\n\n# If no sequence of swapping seats leads to the desired result, print -1\nif persuaded == 0:\n    print(-1)\n\n# Otherwise, print the smallest number of people to persuade\nelse:\n    print(persuaded)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "import numpy as np\n\nn = int(input().split()[0])\nx_p, y_p = map(int, input().split()[1:3])\n\n# Read the polygon vertices\nvertices = []\nfor _ in range(n):\n    x_v, y_v = map(int, input().split())\n    vertices.append((x_v, y_v))\n\n# Create a convex hull of the polygon\nhull = np.array(vertices)\narea = np.abs(np.cross(hull[:, 0] - x_p, hull[:, 1] - y_p)).sum() / 2\n\n# Print the area\nprint(area)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n = int(input())\nt = list(map(int, input().split()))\n\nt.sort()\n\nif len(set(t)) == 3 and t[1] - t[0] <= 2 and t[2] - t[1] <= 2:\n    print(\"YES\")\nelse:\n    print(\"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "import random\n\nn = int(input())\np = list(map(float, input().split()))\n\np.sort()\n\nm = int(sum(p) / 2)\n\nprint(sum(p[:m]) / sum(p))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n, k = map(int, input().split())\ns = input().strip()\n\n# Calculate the total number of moves\nmoves = 0\nfor i in range(n-k+1):\n    if s[i] != s[i+k]:\n        moves += 1\n\n# Check if the total number of moves exceeds 10^9\nif moves > 1e9:\n    print(\"once again\")\nelse:\n    # Check if Tokitsukaze will win\n    if s.startswith(s[0] * k) or s.endswith(s[n-1] * k):\n        print(\"tokitsukaze\")\n    # Otherwise, Quailty will win\n    else:\n        print(\"quailty\")", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\n\na.sort()\n\nsum = 0\ncount = 0\nfor i in a:\n    if count == n:\n        break\n    if i < 0:\n        sum += -i\n        count += 1\n    else:\n        sum += i\n\nprint(sum)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\n\ns = set(a)\nif len(s) == 1 or not a:\n    print(\"cslnb\")\nelse:\n    print(\"sjfnb\")", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n = int(input())\ng = {}\nfor _ in range(n - 1):\n    x, y = map(int, input().split())\n    g[x] = g[x] or []\n    g[x].append(y)\n\na = list(map(int, input().split()))\n\nvisited = set()\nq = [1]\nvisited.add(1)\n\ndef bfs(node):\n    for neighbor in g[node]:\n        if neighbor not in visited:\n            visited.add(neighbor)\n            q.append(neighbor)\n\nbfs(1)\n\nprint(\"Yes\" if set(a) == set(q) else \"No\")", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n = int(input())\nf = list(map(int, input().split()))\n\n# Check if solution is possible\nif not f[0] == 1 or max(f) > n:\n    print(-1)\nelse:\n    m = max(f)\n    g = list(set(f))\n    h = list(set(range(m)))\n\n    print(m)\n    print(*g)\n    print(*h)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "p, k = map(int, input().split())\n\nif p <= 0 or k <= 0:\n    print(-1)\n\nq = int((p - 1) // k) + 1\na = [0] * q\n\n# Find the coefficients of the polynomial\nfor i in range(q):\n    a[i] = (p - i * k) // k\n\n# Print the number of coefficients and the coefficients\nprint(q)\nprint(*a)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n, q = map(int, input().split())\n\noperations = []\nfor _ in range(q):\n    a, b = input().split()\n    operations.append((a, b))\n\n# Create a dictionary to store the number of ways to get a from each string\nways = {}\n\n# Iterate over the operations and update the dictionary\nfor a, b in operations:\n    if a not in ways:\n        ways[a] = 0\n    ways[a] += 1\n\n# Find the number of ways to get a from the initial string\nans = 0\nfor i in range(n):\n    s = ''.join(['a' * i] + ['b'] * (n - i))\n    if s in ways and ways[s] > 0:\n        ans += ways[s]\n\nprint(ans)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n = int(input())\n\npairs = []\nfor _ in range(n):\n    a, b = map(int, input().split())\n    pairs.append((a, b))\n\nwcd = -1\nfor divisor in range(2, max(max(pairs) // 2 + 1) + 1):\n    valid = True\n    for a, b in pairs:\n        if divisor not in range(a, b + 1):\n            valid = False\n    if valid and divisor not in wcd_list:\n        wcd = divisor\n        wcd_list.append(divisor)\n\nprint(wcd) if wcd else print(-1)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n, I = map(int, input().split())\na = list(map(int, input().split()))\n\n# Calculate the number of distinct values\nK = len(set(a))\n\n# Calculate the number of bits needed to store each value\nk = int((K-1).log2()) + 1\n\n# Calculate the number of changed elements\nc = min(n, k) - len(set(a))\n\nprint(c)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n, p = map(int, input().split())\ns = input().lower()\n\ndef is_palindrome(s):\n    for i in range(len(s) - 1):\n        if s[i] == s[i + 1] and s[i:i + 2] not in palindromes:\n            return False\n    return True\n\npalindromes = ['abc'] + ['abca'] + ['aba'] + ['aab']\n\nfor i in range(len(s) - 1, -1, -1):\n    s_i = s[:i] + str(ord(s[i]) - 96) + s[i + 1:]\n    if is_palindrome(s_i) and s_i not in palindromes:\n        print(s_i)\n        exit()\n\nprint(\"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "3\nn, k = map(int, input().split())\n\n# Calculate the number of sequences with length N and elements between 1 and K\nnum_sequences = (n // 2 + 1) * k\n\n# Calculate the modulo\nnum_sequences %= 10**9 + 7\n\n# Print the result\nprint(num_sequences)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n = int(input())\ns = input()\n\n# Create a dictionary to store the number of distinct strings for each prefix\ndistinct_strings = {}\n\n# Iterate over the string to find the number of distinct strings for each prefix\nfor i in range(n):\n    prefix = s[:i+1]\n    if prefix not in distinct_strings:\n        distinct_strings[prefix] = 1\n    else:\n        distinct_strings[prefix] += 1\n\n# Calculate the total number of distinct strings\ntotal_distinct_strings = sum(distinct_strings.values())\n\n# Print the number of distinct strings modulo (10^9+7)\nprint(total_distinct_strings % (10**9 + 7))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "3\ns = input().lower()\n\n# Check if the string has two neighboring characters that are equal\nif s[0] == s[1] or s[1] == s[2]:\n    print(\"Second\")\nelse:\n    print(\"First\")", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "import math\n\nn, m, k = map(int, input().split())\n\nif k > 2 * (n + m):\n    print(-1)\nelse:\n    area = n * m\n    cuts = 0\n    while area // k:\n        cuts += 1\n        area //= k\n    print(area)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n, m = map(int, input().split())\n\nx = 2**m - 1\nans = 0\n\nfor i in range(n):\n    a = int(input())\n    xor_sum = 0\n    for j in range(i + 1):\n        xor_sum ^= a\n    if xor_sum == 0:\n        ans += 1\n\nprint(ans % 1000000009)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "N = int(input())\nx = []\ny = []\nfor _ in range(N):\n    x.append(int(input()))\n    y.append(int(input()))\n\n# Calculate the convex hull of S\nconvex_hull = convex_hull(x, y)\n\n# Count the number of points inside the convex hull\nn = len(convex_hull)\n\n# Calculate the score of S\nscore = 2 ** (n - len(S))\n\n# Print the sum of all the scores modulo 998244353\nprint((sum(score) % 998244353)  )", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n, k, x = map(int, input().split())\na = list(map(int, input().split()))\n\na.sort()\n\nfor i in range(k):\n    for i in range(0, len(a), 2):\n        a[i] ^= x\n\nprint(max(a), min(a))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n, k = map(int, input().split())\na = list(map(int, input().split()))\n\na.sort()\nres = set()\n\nfor i in range(n):\n    for exp in range(a[i].factorial() // k, -1, -1):\n        num = a[i] * exp\n        if num % k == 0 and num not in res:\n            res.add(num)\n\nprint(len(res))\nprint(*sorted(res))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "import math\n\nn = int(input())\nx = list(map(int, input().split()))\n\nx.sort()\n\noperations = 0\nprime = 3\n\nwhile any(card >= prime for card in x):\n    operations += math.ceil(card / prime)\n    prime = min(prime, card)\n\nprint(operations)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\na.sort()\nb.sort()\n\noperations = 0\ni = 0\nfor card in a:\n    if card != b[i]:\n        operations += abs(b[i] - card) + 1\n        i += 1\n\nprint(operations)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\na_sum = sum(a)\nb_sum = sum(b)\nk = 0\nt = 0\n\nfor i in range(n):\n    k_i = a[i] // b[i]\n    t_i = a[i] % b[i]\n    k += k_i\n    t += t_i\n\nprint(k, t)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n, m = map(int, input().split())\n\nset1 = set(map(int, input().split()))\nset2 = set(map(int, input().split()))\n\nif len(set1.intersection(set2)) == 1:\n  print(list(set1.intersection(set2))[0])\nelif len(set1.intersection(set2)) == 0:\n  print(0)\nelse:\n  print(-1)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "import random\n\nn = int(input())\n\nexpected_value = 0\nfor i in range(1, n+1):\n  expected_value += i\n\nexpected_value %= 998244353\nr = expected_value // 2\nprint(r)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n, m = map(int, input().split())\na, b = [int(input().split()) for _ in range(m)]\n\ngraph = {i: set() for i in range(n)}\nfor i in range(m):\n    graph[a[i]].add(b[i])\n\ndist = {i: float('inf') for i in range(n)}\ndist[0] = 0\n\nqueue = [(0, 0)]\n\nfor time, station in sorted(queue):\n    if dist[station] != float('inf'):\n        continue\n\n    for neighbor in graph[station]:\n        new_dist = time + 1\n        if new_dist < dist[neighbor]:\n            dist[neighbor] = new_dist\n            queue.append((new_dist, neighbor))\n\nprint(*(dist[i] for i in range(n)))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "m = int(input())\n\n# Calculate the maximum number of blocks and the maximum X that results in that number of blocks\nmax_blocks = 0\nmax_x = 0\n\nfor i in range(1, int(m**0.5) + 1):\n    blocks = i**3\n    if blocks <= m and blocks > max_blocks:\n        max_blocks = blocks\n        max_x = i * blocks\n\nprint(max_blocks, max_x)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "3\nn = int(input())\na = list(map(int, input().split()))\n\nif sum(a) != n*(n-1):\n    print(\"NO\")\nelse:\n    print(\"YES\")\n    print(n*(n-1))\n    for i in range(n):\n        a_i, a_j = a[i], a[i+1]\n        print(i+1, i+2)\n        a[i] = a_j\n        a[i+1] = a_i", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "import math\n\ndef f(b, n):\n    n_base = int(math.floor(n / b))\n    remainder = n % b\n    return n_base + (remainder * (b-1))\n\n\nn, s = map(int, input().split())\n\nfound = False\nfor b in range(2, int(n**0.5) + 1):\n    if f(b, n) == s:\n        found = True\n        min_b = b\n        break\n\nif found:\n    print(min_b)\nelse:\n    print(-1)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\n\n# Calculate the maximum number of doublings and triblings for each bid\nmax_double = max(a) // 2\nmax_triple = max(a) // 3\n\n# Check if the bid can be made equal\nis_equal = all(a[i] + max_double * 2 or a[i] + max_triple * 3 == max(a) for i in range(len(a)))\n\n# Print the answer\nprint(\"Yes\" if is_equal else \"No\")", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "a, b = map(int, input().split())\ns = input()\n\nx, y = 0, 0\ndx, dy = 1, 1\n\nfor i in s:\n    if i == 'U':\n        y += dy\n    elif i == 'D':\n        y -= dy\n    elif i == 'L':\n        x -= dx\n    elif i == 'R':\n        x += dx\n\nif x == a and y == b:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\n\na.sort()\nb = 1\nc = 0\n\nfor i in range(n):\n    for j in range(i):\n        for k in range(j):\n            if a[i] % a[j] == 0 and a[i] % a[k] == 0 and a[j] % a[k] == 0:\n                c += 1\n    if c > b:\n        b = c\n\nprint(b)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "s = input().strip().split()\nx = int(s[2])\ny = int(s[3])\n\n# Check if the objective is achievable\n achievable = (x == 0 and y == 0) or (x == len(s) - 1 and y == 0) or (x == len(s) - 1 and y == len(s) - 1)\n\nprint(\"Yes\" if achievable else \"No\")", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "import numpy as np\n\nn, p, q = map(int, input().split())\n\na = np.array(map(int, input().split()))\nb = np.array(map(int, input().split()))\n\nxp = np.cumsum(a)\nip = np.cumsum(b)\n\nmin_days = np.interp(p, xp, ip)\n\nprint(min_days.round())", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "3\nn = int(input())\nx = int(input(), 2)\n\n# Calculate the complexity\ncomplexity = 0\nfor i in range(n):\n    a = i\n    b = a ^ x\n    complexity += abs(a - b)\n\n# Print the complexity\nprint(complexity % 1000000007)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n, k = map(int, input().split())\nw = list(map(int, input().split()))\n\nw.sort()\n\ntotal_weight = sum(w)\n\nif total_weight > k:\n    print(-1)\n    print(0)\nelse:\n    rides = 0\n    ways = 0\n    i = 0\n    for j in range(n):\n        if w[i] == 50 and total_weight - w[i] <= k:\n            rides += 1\n            total_weight -= w[i]\n            ways += 1\n        i += 1\n\n    print(rides)\n    print(ways // 1000000007)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "s, t = input().split()\nn = int(input())\n\na, b = map(int, s.split())\nc, d = map(int, t.split())\n\noperations = min(abs(a - c), abs(b - d))\n\nprint(operations)\nfor i in range(operations):\n    print(a, b)\n    a, b = a - 1, b + 1", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "import sys\n\nn, m, q = map(int, sys.stdin.readline().split())\n\nsamples = []\nfor _ in range(q):\n    r, c = map(int, sys.stdin.readline().split())\n    samples.append((r, c))\n\n# Create a map to store the elements that have already been sampled\nsampled_elements = set(samples)\n\n# Calculate the minimum number of elements to purchase\nmin_purchase = 0\nfor r in range(1, n + 1):\n    for c in range(1, m + 1):\n        if (r, c) not in sampled_elements:\n            min_purchase += 1\n\nprint(min_purchase)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n = int(input())\ns = input().strip()\n\n# Check if the sequence is already correct\nis_correct = (s == \"\" or s == \"()\" or s.startswith(\")\") and s.count(\")\") == s.count(\"(\")\n\n# Check if the sequence can be corrected by moving one bracket\ncan_correct = (s.count(\")\") - s.count(\"(\") == 1) and (s.count(\")\") - s.count(\"(\") <= 1) and all(x == \"(\" or x == \")\" for x in s)\n\nprint(\"Yes\" if can_correct and is_correct else \"No\")", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "import sys\n\nn = int(sys.stdin.readline())\n\nc_aa, c_ab, c_ba, c_bb = sys.stdin.readline().split()\n\na_cnt, b_cnt = 0, 0\n\nfor i in c_aa + c_ab + c_ba + c_bb:\n    if i == 'A':\n        a_cnt += 1\n    elif i == 'B':\n        b_cnt += 1\n\nans = (a_cnt - b_cnt + b_cnt - a_cnt) % (10**9 + 7)\n\nprint(ans)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n, m, k = map(int, input().split())\n\nif m == 0:\n    print(-1)\nelse:\n    flights = [list(map(int, input().split())) for _ in range(m)]\n\n    # Calculate the cost of each flight\n    cost = {i: 0 for i in range(n + 1)}\n    for d, f, t, c in flights:\n        cost[f] += c\n\n    # Calculate the minimum cost\n    min_cost = float('inf')\n    for i in range(k + 1):\n        total_cost = 0\n        for j in range(n + 1):\n            if cost[j] and cost[j] <= total_cost:\n                total_cost = cost[j]\n        if total_cost != float('inf'):\n            min_cost = min(min_cost, total_cost)\n\n    # Print the minimum cost\n    print(min_cost)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "a, b, l, r = map(int, input().split())\n\ns = \"\"\n\n# Calculate the number of different letters in the first a letters of the string\nnum_different_letters = set(s[:a])\n\n# Append b letters to the string\ns += ''.join(set(s) & set(s[:a]) | set(['a' * b])\n\n# Calculate the number of different letters in the segment from position l to position r\nmin_different_letters = len(set(s[l-1:r]))\n\nprint(min_different_letters)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "s = input().lower()\nn = len(s)\nans = 0\n\nfor i in range(n):\n    # Check if the first letter is uppercase and the rest are lowercase\n    if s[i].isupper() and s[i].lower() not in ['b', 'u', 'l', 's', 'a', 'r']:\n        # Count the number of Bulbasaurs\n        ans += 1\n\nprint(ans)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n = int(input())\n\n# Calculate the maximum number of colors\nmax_colors = 1\n\n# Iterate over the range from 2 to the square root of n\nfor i in range(2, int(n ** 0.5) + 1):\n    # If the remainder when n is divided by i is 0, add i to the list of divisors\n    if n % i == 0:\n        max_colors = max(max_colors, i)\n\n# Print the maximum number of colors\nprint(max_colors)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n = int(input())\nw, h = map(int, input().split())\nareas = []\nfor _ in range(n):\n    w_i, h_i = map(int, input().split())\n    areas.append(w_i * h_i)\nh_max = max(h)\ntotal_area = sum(areas)\nn_lie = int(n // 2)\nmin_area = total_area - n_lie * h_max\nprint(min_area)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "a = int(input())\ns = str(input())\n\ns_list = list(s)\nb = [[int(s_list[i:i+2]) for i in range(len(s) - 1)]\n\nans = 0\nfor i in range(len(b)):\n    for j in range(len(b[0])):\n        sum = 0\n        for k in range(i, len(b)):\n            for l in range(j, len(b[0])):\n                sum += b[k][l]\n        if sum == b[i][j]:\n            ans += 1\n\nprint(ans)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "import numpy as np\n\nn = int(input())\n\ncircles = []\nfor _ in range(n):\n    x, y, r = map(int, input().split())\n    circles.append((x, y, r))\n\n# Create a grid of points\nx, y = np.meshgrid(np.linspace(-10, 10, 100), np.linspace(-10, 10, 100))\n\n# Calculate the distance from each point to each center\ndistances = np.sqrt(np.sum((x - circles[0][0])**2 + (y - circles[0][1])**2) < circles[0][2]\n\n# Count the number of regions\nnum_regions = np.sum(np.unique(distances).size) - 1\n\nprint(num_regions)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\nm = prod = 1\nfor i in a:\n    prod *= i\n    m = m // i\n\nprint(len(set(tuple(factor(m)))/n)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n = int(input())\nd = list(map(int, input().split()))\n\n# Calculate the number of ways to connect each part to the rest\nways = 0\nfor i in range(n):\n    ways += d[i] - 1\n\n# Calculate the total number of ways to make the figure complete\ntotal_ways = ways * (ways - 1) // 2\n\n# Print the answer\nprint(total_ways % 998244353)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "def parse_rebus(rebus):\n    n = int(rebus.split(\"=\")[-1])\n    nums = rebus.split(\"=\")\n    nums.pop()\n    nums = [int(x) for x in nums]\n\n    # Check if the rebus has a solution\n    if not is_valid(nums, n):\n        return \"Impossible\"\n\n    # Find a valid rebus\n    res = find_solution(nums, n)\n\n    # Return the solution\n    return \"Possible\\n\" + str(res)\n\ndef is_valid(nums, n):\n    total = 0\n    for i in nums:\n        total += i\n\n    return total == n\n\ndef find_solution(nums, n):\n    for i in range(1, n + 1):\n        nums.append(i)\n        if is_valid(nums, n):\n            return nums\n\n    return \"No solution found\"", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "3\nn = int(input())\na = list(map(float, input().split()))\na_s = sum(a)\na_r = []\nfor i in range(n):\n    i_max = int(a[i])\n    i_min = int(a[i]) - 1\n    a_r.append(abs((a[i] - i_max) - (a[i] - i_min)))\nprint(min(a_r))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n, l, r = map(int, input().split())\n\na = list(map(int, input().split()))\n\na = sorted(a)\n\nres = 0\nfor i in range(l-1, r):\n    x = a[i]\n    a[i] = a[i] // 2 + a[i] % 2\n    res += a[i]\n\nprint(res)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "import re\n\nname = input().strip().upper()\n\n# Check if the name is a mirror word\nis_mirror = bool(re.match(\"(?i)^[a-zA-Z]*$\", name) and re.match(\"(?i)^[a-zA-Z]*$\", name.lower().swapcase()) and name.lower() == name.lower().swapcase())\n\nprint('YES' if is_mirror else 'NO')", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n, m = map(int, input().split())\nusers_online = set()\nleader_candidates = set()\n\nfor _ in range(m):\n    msg = input().split(\":\")\n    action = msg[0]\n    user_id = int(msg[1])\n\n    if action == \"+\":\n        users_online.add(user_id)\n    elif action == \"-\":\n        users_online.discard(user_id)\n\n    if users_online:\n        leader_candidates.add(user_id)\n\nk = len(leader_candidates)\nprint(k)\nprint(*sorted(leader_candidates))\n\nif k == 0:\n    print(0)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "import networkx as nx\n\nn, m = map(int, input().split())\nx = int(input())\n\nG = nx.Graph()\nG.add_nodes(range(1, n + 1))\nfor i in range(m):\n    u, v, w = map(int, input().split())\n    G.add_edge(u, v, weight=w)\n\nT = nx.spanning_tree(G)\nw_t = sum(T.edges[\"weight\"])\n\nans = 0\nif w_t - x >= 0:\n    ans = (w_t - x) // x + 1\n\nprint(ans)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n, m = map(int, input().split())\n\ngrid = []\nfor _ in range(n):\n    grid.append(input().split())\n\nr, c = None, None\nfor r in range(n):\n    for c in range(m):\n        if grid[r][c].count('B') % 2 == 1:\n            r_center = (r + 1) // 2\n            c_center = (c + 1) // 2\n            print(r_center, c_center)\n            exit()\n\nprint(\"No solution\")", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "x_1, y_1 = map(int, input().split())\nx_2, y_2 = map(int, input().split())\n\ndx = abs(x_2 - x_1)\ndy = abs(y_2 - y_1)\n\nmin_path = min(dx, dy) + min(dx, dy)\n\nprint(min_path * 2)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\n\na.sort()\n\nk_max = int(n // 2)\n\nans = []\n\nfor k in range(1, k_max + 1):\n    h = a[0] - k\n    hours = 0\n    for i in range(len(a)):\n        if a[i] >= h:\n            hours += 1\n    ans.append(hours)\n\nprint(*ans)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "import numpy as np\n\nn = int(input())\n\nrectangles = []\nfor _ in range(n):\n    x1, y1, x2, y2 = map(int, input().split())\n    rectangles.append([(x1, y1), (x2, y2)])\n\n# Find the point that belongs to at least (n-1) given rectangles\npoint = np.array(rectangles).reshape((-1, 2)).min()\n\n# Print the point\nprint(point)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n, k, p = map(int, input().split())\n\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\na.sort()\nb.sort()\n\n# Calculate the minimum time needed to get to the office\ntime = 0\nfor i in range(len(a)):\n    # Calculate the distance to the office\n    distance = abs(b[0] - a[i])\n    # Add the time needed to travel to the office\n    time += distance\n\n# Print the minimum time\nprint(time)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "3\nn, m = map(int, input().split())\n\nfiles = []\nfor _ in range(n):\n    files.append(input().strip())\n\nindices = map(int, input().split())\n\npattern = None\nfor i in range(n):\n    pattern_i = \"\"\n    for j in range(len(files[i])):\n        if files[i][j] != '.':\n            pattern_i += files[i][j] + \"?\" if files[i][j] != files[i][j] else '.'\n    if pattern_i and all(files[i] == pattern_i for i in indices):\n        pattern = pattern_i\n\nif pattern is None:\n    print(\"No\")\nelse:\n    print(\"Yes\")\n    print(pattern)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "T = int(input())  # Number of test cases\n\nfor _ in range(T):\n    N = int(input())  # Number of bags and dishes\n    a = list(map(int, input().split()))  # Number of coins in each bag\n\n    # Calculate the winner of the game\n    winner = \"Second\" if sum(a) % 2 == 0 else \"First\"\n\n    # Print the winner\n    print(winner)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "3\nn = int(input())\na = list(map(int, input().split()))\n\na.sort()\n\nx = 0\np = 0\nq = 0\n\nfor i in a:\n    if i not in chosen:\n        chosen.append(i)\n        x += 1\n        p = max(p, i)\n        q = i // p\n\nprint(x)\nprint(p)\nprint(q)\n\nfor i in range(p):\n    for j in range(q):\n        print(chosen[i * q + j])", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n, m = map(int, input().split())\ns = []\nfor _ in range(n):\n    s.append(input().strip())\n\n# Create a grid of free cells\nfree = [[True] * m for _ in range(n)]\n\n# Mark cells with forests as impassable\nfor r in range(n):\n    for c in range(m):\n        if s[r][c] == \"#\":\n            free[r][c] = False\n\n# Calculate the minimum number of cells to turn impassable\nk = 0\nfor r in range(n):\n    for c in range(m):\n        if free[r][c] and (r, c) != (1, 1) and (r, c) != (n, m):\n            k += 1\n\nprint(k)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "x_0, y_0, a_x, a_y, b_x, b_y = map(int, input().split())\nx_s, y_s, t = map(int, input().split())\n\n# Calculate the maximum number of data nodes that Aroma can collect\n# within t seconds\nmax_nodes = 0\ncurr_x = x_s\ncurr_y = y_s\n\n# Iterate over the time available\nfor _ in range(t):\n    # Move to one of the adjacent nodes\n    dx = [-1, 1, 0, 0]\n    dy = [0, 0, -1, 1]\n    for i in range(4):\n        next_x = curr_x + dx[i]\n        next_y = curr_y + dy[i]\n\n        # Check if the node is valid and has not been collected\n        if 0 <= next_x <= x_0 and 0 <= next_y <= y_0 and nodes[next_x][next_y] has not been collected:\n            curr_x = next_x\n            curr_y = next_y\n            nodes[next_x][next_y] = True\n            max_nodes += 1\n\n# Print the maximum number of data nodes that Aroma can collect\nprint(max_nodes)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n, k = map(int, input().split())\na, b = map(int, input().split())\n\nx = min(int((a - b + k) // k)\ny = max(int((a - b + k) // k)\n\nprint(x, y)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n = int(input())\n\n# Find the maximum LCM of three numbers not greater than n\nmax_lcm = 0\n\n# Iterate over all numbers from 1 to n\nfor i in range(1, int(n**0.5) + 1):\n    # Check if i is divisible by each of the three numbers\n    if i % 3 == 0 and i % 5 == 0 and i % 7 == 0:\n        # If i is the maximum LCM, update it\n        if max_lcm < i:\n            max_lcm = i\n\n# Print the maximum LCM\nprint(max_lcm)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n, m, k = map(int, input().split())\n\n# Read the maze\nmaze = []\nfor _ in range(n):\n    maze.append(list(input().strip().split()))\n\n# Calculate the number of empty cells\ns = sum(sum(x == '.' for x in row) for row in maze) - k\n\n# If there are no empty cells, exit\nif s == 0:\n    print(\"No solution\")\n    exit()\n\n# Find the connected component of the empty cells\nconnected_component = dfs(maze)\n\n# Mark the empty cells that are part of the connected component as walls\nfor r in connected_component:\n    for c in connected_component[r]:\n        maze[r][c] = '#'\n\n# Print the new maze\nfor r in range(n):\n    print(''.join(['#' if maze[r][c] == '#' else '.' for c in range(m)]))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n, m = map(int, input().split())\ns = input().lower()\nt = input().lower()\n\nif '*' in s:\n    s = s.replace('*', '')\n\nif t.find(s) != -1:\n    print(\"YES\")\nelse:\n    print(\"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "import networkx as nx\n\n# Read input\nn, m = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\ngraph = nx.Graph()\ngraph.add_nodes(range(1, n + 1))\ngraph.add_edges(list(map(tuple, input().split().repeat(m))))\n\n# Calculate the cost of deleting each vertex\ncost = dict(zip(graph.nodes, a))\n\n# Calculate the score of each connected component\nscore = 0\ncomponents = nx.connected_components(graph)\nfor component in components:\n    score += abs(sum(b[i] for i in component) - sum(cost[i] for i in component))\n\n# Calculate Snuke's profit\nprofit = score - sum(cost.values())\n\n# Print the maximum profit\nprint(profit)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n, m = map(int, input().split())\n\n# Create a graph to represent the friendships\ngraph = {i: set() for i in range(1, n + 1)}\nfor u, v in map(int, input().split()):\n    graph[u].add(v)\n    graph[v].add(u)\n\n# Calculate the minimum number of steps\nsteps = 0\nvisited = set()\n\n# Iterate over the graph to find the minimum number of steps\nfor i in range(1, n + 1):\n    if i not in visited:\n        bfs(i, graph, visited)\n        steps += 1\n\n# Print the minimum number of steps and the guests selected at each step\nprint(steps)\nprint(visited)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "a, b = input().split()\na_l, b_l = len(a.split()) // 2, len(b.split()) // 2\n\na_1, a_2 = a.split()\nb_1, b_2 = b.split()\n\nif (a_1 == b_1 and a_2 == b_2) or (a_1 == b_2 and a_2 == b_1):\n  print(\"YES\")\nelse:\n  print(\"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "a, b, n, k = map(int, input().split())\ns = input().split()\n\n# Calculate the sum of the sequence\nsum = 0\nfor i in range(len(s)):\n    if s[i] == '-':\n        sum -= 1\n    else:\n        sum += 1\n\n# Calculate the remainder when the sum is divided by 10^{9} + 9\nremainder = sum % (10 ** 9 + 9)\n\n# Print the remainder\nprint(remainder)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "import math\n\nn = int(input())\na = list(map(int, input().split()))\np = int(input())\n\ns = sum(a)\nif s <= p:\n    print(len(a))\nelse:\n    print(math.floor(s/p))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "s = input().lower()\na = set(s.split())\nn = len(a)\nif n <= 26:\n    print(\"YES\")\nelse:\n    print(\"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "m = int(input())\nh_1, a_1 = map(int, input().split())\nx_1, y_1 = map(int, input().split())\nh_2, a_2 = map(int, input().split())\nx_2, y_2 = map(int, input().split())\n\nif h_1 == a_1 or h_2 == a_2:\n    print(-1)\nelse:\n    h_diff = abs(h_1 - a_1)\n    a_diff = abs(h_2 - a_2)\n    min_time = min(h_diff // x_1 + y_diff // x_2, a_diff // x_2 + y_diff // x_1)\n    print(min_time)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n, m = map(int, input().split())\n\n# Calculate the number of ways to choose toppings for each topping\nnum_ways = 2 ** n\n\n# Calculate the number of ways to satisfy the second condition\nnum_ways_2 = 2 ** n - 1\n\n# Calculate the number of sets of bowls of ramen that satisfy the conditions\nnum_sets = num_ways - num_ways_2\n\n# Print the number of sets of bowls of ramen that satisfy the conditions\nprint(num_sets % m)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n = int(input())\np = list(map(int, input().split()))\nx = list(map(int, input().split()))\n\n# Create a dictionary to store the parent-child relationships between vertices\nparent = {i: None for i in range(1, n + 1)}\nfor i in range(1, n):\n    parent[i] = p[i]\n\n# Calculate the total weight of each color group\ntotal_weight = {i: 0 for i in range(n + 1)}\ndef dfs(node):\n    total_weight[node] = 0\n    for child in children(node):\n        total_weight[node] += total_weight[child] + weight[node]\n        dfs(child)\n\n# Check if the total weight of each color group is equal to X_v\npossible = True\nfor i in range(1, n + 1):\n    if total_weight[i] != x[i]:\n        possible = False\n\n# Print the answer\nif possible:\n    print(\"POSSIBLE\")\nelse:\n    print(\"IMPOSSIBLE\")", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n, k = map(int, input().split())\na = list(map(int, input().split()))\n\na.sort()\ns = sum(a)\nm = s // k\n\nif a[0] >= m:\n    print(\"Kevin\")\nelse:\n    print(\"Nicky\")", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n = int(input())\n\nboxes = []\nfor _ in range(n):\n    k, a = map(int, input().split())\n    boxes.append((k, a))\n\nboxes.sort(key=lambda x: x[0])\n\np = 0\nfor i in range(len(boxes)):\n    if boxes[i][0] > boxes[i-1][0]:\n        p = boxes[i][0]\n        break\n\nprint(p)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "3\nn, m = map(int, input().split())\n\nj_cards = []\nfor _ in range(n):\n    position, strength = input().split()\n    j_cards.append({\"position\": position, \"strength\": int(strength)})\n\nc_cards = [int(strength) for strength in input().split()]\n\nc_cards.sort()\n\ndamage = 0\nfor card in c_cards:\n    if card not in used_cards:\n        used_cards.append(card)\n        if j_cards[0][\"position\"] == \"ATK\":\n            damage += card - j_cards[0][\"strength\"]\n        elif j_cards[0][\"position\"] == \"DEF\":\n            damage += card - j_cards[0][\"strength\"]\n            j_cards.pop(0)\n\nprint(damage)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "import numpy as np\n\nn, l, v_1, v_2, k = map(int, input().split())\n\n# Calculate the time taken by each pupil to reach the place of excursion\ntime_taken = l / v_1\n\n# Calculate the time taken to fill the bus\ntime_taken_bus = l / v_2\n\n# Calculate the time taken to get all pupils on the bus\ntime_taken_embarkation = np.ceil(n/k) * time_taken_bus\n\n# Calculate the total time\ntime_taken_total = time_taken_embarkation + time_taken\n\n# Print the time taken\nprint(time_taken_total)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "import random\n\nf, w, h = map(int, input().split())\n\n# Calculate the number of ways to arrange food boxes and wine barrels such that no two stacks of food boxes are together and no two stacks of wine barrels are together\nnum_ways = 0\nif f:\n    num_ways += f * (w - 1)\nif w:\n    num_ways += w * (f - 1)\n\n# Calculate the number of ways to arrange food boxes and wine barrels such that no stack of wine barrels has height less than or equal to h\nnum_ways_acceptable = 0\nif f:\n    num_ways_acceptable += f * min(h, w)\nif w:\n    num_ways_acceptable += w * h\n\n# Calculate the probability of Jon Snow liking the arrangement\nprobability = num_ways_acceptable / num_ways\n\n# Print the probability\nprint(str(int(probability * 1e6)) + \"e-6\")\nprint(int((probability * 1e6) // (1e9 + 7)))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n = int(input())\ns = input()\n\n# Calculate the length of the longest alternating subsequence\ndef longest_alternating_subsequence(s):\n    n = len(s)\n    dp = [-1] * n\n    dp[0] = 1\n    for i in range(1, n):\n        if s[i] != s[i-1]:\n            dp[i] = max(dp[i-1] + 1, dp[i])\n\n    return dp[n-1]\n\n# Find the maximum length of the longest alternating subsequence\nmax_length = longest_alternating_subsequence(s)\n\n# Print the maximum length\nprint(max_length)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n = int(input())\nm = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\nif sum(a) <= m and sum(b) <= m:\n    f = (m - sum(a)) // sum(b)\n    print(f)\nelse:\n    print(-1)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n, k = map(int, input().split())\nx = int(input())\n\na = str(x).split('.')\na_int = int(a[0])\na_dec = int(a[1])\n\n# Find the number of digits in the smallest beautiful integer\nm = 1 + (a_dec - 1) // k\n\n# Create the smallest beautiful integer\ny = a_int * 10 ** (m - 1) + a_dec % k\n\n# Print the number of digits in y\nprint(m)\n\n# Print the digits of y\nprint(str(y).zfill(m))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n, k = map(int, input().split())\n\nans = 0\na = 1\nfor i in range(1, k + 1):\n    a = a * i\n\nfor i in range(k + 1, n + 1):\n    a = a * i\n\nprint(a)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "hp_y, att_y, def_y = map(int, input().split())\nhp_m, att_m, def_m = map(int, input().split())\nh, a, d = map(int, input().split())\n\n# Calculate the damage dealt by Yang and the monster per second\ndamage_y = max(0, att_y - def_m)\ndamage_m = max(0, att_m - def_y)\n\n# Calculate the number of bitcoins needed to win\ncost_y = hp_m - hp_y\ncost_a = damage_y * a\ncost_d = damage_y * d\n\n# Update the cost if needed\ncost = min(cost_a, cost_d)\ncost = min(cost, h)\n\n# Print the cost\nprint(cost)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n, d, e = map(int, input().split())\n\n# Calculate the exchange rate\nusd_rate = d\neuro_rate = e\n\n# Calculate the minimum number of rubles\nmin_rubles = n // usd_rate + n % usd_rate * euro_rate // euro_rate\n\n# Print the minimum number of rubles\nprint(min_rubles)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n, k = map(int, input().split())\n\nproblems = []\nfor _ in range(n):\n    problems.append(list(map(int, input().split())))\n\nteams_problems = []\nfor i in range(k):\n    teams_problems.append(set(problems[i]))\n\nis_interesting = True\nfor team_problems in teams_problems:\n    if len(team_problems.intersection(problems[:len(team_problems) // 2])) > len(team_problems) // 2:\n        is_interesting = False\n\nprint(\"YES\" if is_interesting else \"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n, T = map(int, input().split())\n\nt = list(map(int, input().split()))\n\nt.sort()\n\n# Calculate the maximum number of bowls that can be eaten\nmax_ Bowls = 0\ncurrent_Position = 0\ncurrent_Time = 0\n\nfor i in range(n):\n    if t[i] - current_Time >= current_Position:\n        max_ Bowls += 1\n        current_Position += 1\n        current_Time = t[i]\n\nprint(max_ Bowls)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "import sys\n\nn, a, b = map(int, sys.stdin.read().split())\n\nif a + b - 1 < n:\n    print(-1)\nelse:\n    print(*sorted(range(n), key=lambda x: x + a - b)[:n])", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\n\n# Calculate the multiples of each gem.\nmultiples = {}\nfor i in range(1, n + 1):\n    for multiple in range(i, n + 1, i):\n        if multiple not in multiples:\n            multiples[multiple] = 0\n        multiples[multiple] += 1\n\n# Calculate the total yen earned.\ntotal_yen = 0\nfor i in range(1, n + 1):\n    if multiples[i] == 0:\n        total_yen += a[i - 1]\n\n# Print the maximum amount of money that can be earned.\nprint(total_yen)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n, t = map(int, input().split())\ngrade = float(input())\n\n# Calculate the maximum number of decimal places that can be rounded down\ndecimal_places = int(n) - int(grade.as_integer())\n\n# Calculate the maximum grade that can be achieved in t seconds\nmax_grade = grade.copy()\nfor _ in range(t):\n    # Round down the grade to the nearest integer\n    max_grade = min(max_grade, round(grade, decimal_places) + 0.001)\n\n    # If the grade is equal to 9, round down the second decimal place\n    if max_grade.is_integer():\n        max_grade = round(max_grade, decimal_places - 1)\n\n# Print the maximum grade\nprint(max_grade)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "N = int(input())\nA = list(map(int, input().split()))\nK = list(map(int, input().split()))\n\n# Calculate the maximum number of stones that can be removed from each pile\nmax_stones = []\nfor i in range(N):\n    max_stones.append(int(A[i] // K[i]))\n\n# Iterate over the piles and remove stones\nfor i in range(N):\n    A[i] -= max_stones[i]\n\n# Check if Takahashi can still remove stones\nif any(A[i] > 0 for i in range(N)):\n    print(\"Takahashi\")\nelse:\n    print(\"Aoki\")", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\gemma-7b-it-apps_competition_207.jsonl"}
{"code": "n = int(input())\nans = 0\nfor i in range(1, int((n+1)**0.5) + 1):\n    ans += i\nprint(ans)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n = int(input())\na, b, c = map(int, input().split())\n\n# Calculate the maximum number of liters of kefir that Kolya can drink\nl = n // b - n // a\n\n# Return the maximum number of liters of kefir\nprint(l)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "r, s, p = map(int, input().split())\n\n# Calculate the probability of each species being the only survivor\nrock_prob = r / (r + s + p)\nscissors_prob = s / (r + s + p)\npaper_prob = p / (r + s + p)\n\n# Print the probabilities\nprint(rock_prob, scissors_prob, paper_prob)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "x1, y1 = map(int, input().split())\nx2, y2 = map(int, input().split())\n\ndx = abs(x2 - x1)\ndy = abs(y2 - y1)\n\n# Minimum steps to get to the finish position\nmin_steps = min(dx, dy) + max(dx, dy)\n\nprint(min_steps)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n, L = map(int, input().split())\nc = list(map(int, input().split()))\n\n# Calculate the number of bottles of each type that can be bought with the available budget\nbottles = {}\nfor i in range(n):\n    bottles[i] = L // (2**i - 1)\n\n# Find the cost of buying the necessary amount of lemonade\ntotal_cost = 0\nfor i in range(n):\n    cost = c[i] * bottles[i]\n    total_cost += cost\n\n# Print the total cost\nprint(total_cost)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "x = int(input())\n\nmax_sum = 0\nmax_num = 0\n\nfor num in range(1, x + 1):\n    num_sum = sum(int(digit) for digit in str(num))\n    if num_sum > max_sum:\n        max_sum = num_sum\n        max_num = num\n\nprint(max_num)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n = int(input())\n\nif n == 1:\n    print(-1)\nelse:\n    for m in range(1, int(n**0.5) + 1):\n        k = int((n**2 - m**2) ** 0.5)\n        if m * k == n and m > k and k > 0:\n            print(m, k)\n            break\n    if no_answer:\n        print(-1)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n = int(input())\n\nratings = []\nfor _ in range(n):\n    a, b = map(int, input().split())\n    ratings.append((a, b))\n\n# Check if the round is rated\nrated = False\nfor a, b in ratings:\n    if a != b:\n        rated = True\n\n# Check if the round is unrated due to lower rated participant taking a better place\nif rated and sorted(ratings)[-1][0] < sorted(ratings)[0][0]:\n    rated = True\n\n# Print the result\nif rated:\n    print(\"rated\")\nelif not rated:\n    print(\"unrated\")\nelse:\n    print(\"maybe\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "import math\n\nn = int(input())\n\nif n % 2 == 0:\n    m = int(n // 2)\n    print(m)\n    print(m)\nelse:\n    print(-1)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n = int(input())\na = []\nfor _ in range(n):\n    name, typ = input().split()\n    a.append({\"name\": name, \"typ\": typ})\n\n# Sort files by type and then by name\na.sort(key=lambda x: (x[\"typ\"], x[\"name\"]))\n\n# Calculate the number of examples\ne = sum(1 for x in a if x[\"typ\"] == \"1\")\n\n# Print the minimum number of lines\nprint(e + 1)\n\n# Print the script file\nfor i in range(e):\n    print(\"move \" + a[i][\"name\"] + \" \" + str(i + 1))\n\n    # Rewrite the file with the same content as the previous file\n    print(\"move \" + str(i + 1) + \" \" + a[i][\"name\"])", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "x = int(input())\n\n# Calculate the minimum number of turns\nturns = int((x // 90) * 90) + min(x % 90, 90 - x % 90)\n\n# Print the result\nprint(turns)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n = int(input())\n\nmin_off = n // 5 * 2\nmax_off = min_off + 2\n\nprint(min_off, max_off)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "s = input().lower()\ndistinct_characters = len(set(s))\nif distinct_characters % 2 == 0:\n    print(\"CHAT WITH HER!\")\nelse:\n    print(\"IGNORE HIM!\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n, m, r = map(int, input().split())\ns = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\n# Calculate the maximum number of bourles that can be gained from selling\nmax_bourles = 0\nfor i in range(m):\n    max_bourles += min(b[i], r)\n\n# Update the number of bourles to the maximum number\nr = max_bourles\n\n# Print the maximum number of bourles\nprint(r)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "3\nn = int(input())\ns = input().strip()\n\na, c, g, t = 0, 0, 0, 0\n\nfor i in s:\n    if i.lower() == 'a':\n        a += 1\n    elif i.lower() == 'c':\n        c += 1\n    elif i.lower() == 'g':\n        g += 1\n    elif i.lower() == 't':\n        t += 1\n    else:\n        pass\n\nif a != c or c != g or g != t:\n    print(\"===\")\nelse:\n    print(s.replace('?', ''.join(['A', 'C', 'G', 'T'][0:a]) + ''.join(['A', 'C', 'G', 'T'][1:c]) + ''.join(['A', 'C', 'G', 'T'][2:g]) + ''.join(['A', 'C', 'G', 'T'][3:t]))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "a, b = map(int, input().split())\n\n# Convert a to a list of digits\na_digits = [int(x) for x in str(a)]\n\n# Sort the digits in descending order\na_digits.sort()\n\n# Construct the maximum number not exceeding b\nmax_num = 0\nfor i in a_digits:\n    max_num = max_num * 10 + i\n\n# Remove leading zeroes\nmax_num = str(max_num).lstrip('0') or '0'\n\n# Print the maximum number\nprint(max_num)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\n\na_max = max(a)\na_min = min(a)\n\nfor i in range(n):\n    a_i = int(a[i])\n    if a_i < 0:\n        a_max = max(a_max, -a_i - 1)\n    else:\n        a_max = max(a_max, a_i + 1)\n\nprint(*(-a_max - 1) * n)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "a, b, c = map(int, input().split())\n\ndamage = a * 1 + b * 2\n\nif damage >= c:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "import numpy as np\n\n# Read input\nx, y, z = np.array(map(float, input().split()))\n\n# Calculate maximum value\nm = max(x**y**z, x**z**y, (x**y)**z, (x**z)**y, y**x**z, y**z**x, (y**x)**z, (y**z)**x, z**x**y, z**y**x, (z**x)**y, (z**y)**x)\n\n# Find the index of the maximum value\nc = np.argmin(np.abs(m - a_i) for i in range(1, 13))\n\n# Print the expression\nprint(a_c)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n = int(input())\n\n# Calculate the factors of n\nfactors = []\nfor i in range(1, int(n**0.5) + 1):\n    if n % i == 0:\n        factors.append(i)\n\n# Count the number of ways to split the stick\nnum_ways = 0\nfor a, b, c in permutations(factors):\n    if a + b + c == n and a != b and b != c:\n        num_ways += 1\n\n# Print the number of ways\nprint(num_ways)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\n\na.sort()\n\nodd_sum = 0\nodd_sum_max = -1\n\nfor i in range(n):\n    if a[i] % 2 != 0:\n        odd_sum += a[i]\n        if odd_sum_max == -1 or odd_sum > odd_sum_max:\n            odd_sum_max = odd_sum\n\nprint(odd_sum_max)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\n\na.sort()\n\nif sum(a) % 2 == 0 and a[0] >= sum(a) // 2:\n    print(\"YES\")\nelse:\n    print(\"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "3\nN, M, K, L = map(int, input().split())\n\nif K > N or L > M:\n    print(\"-1\")\nelse:\n    print(min(K, L - 1))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "import re\n\ndef calculate_extra_tiles(tiles):\n    # Check if there is already a koutsu or shuntsu\n    koutsu_check = bool(re.search(\"((\\d){3})\", tiles))\n    shuntsu_check = bool(re.search(\"((\\d){3})-((\\d){1})\", tiles))\n\n    # If there is no koutsu or shuntsu, draw at least one extra tile\n    if not koutsu_check and not shuntsu_check:\n        return 1\n\n    # Otherwise, draw no extra tiles\n    else:\n        return 0\n\n\n# Get the tiles in Tokitsukaze's hand\ntiles = input().split()\n\n# Calculate the minimum number of extra tiles\nextra_tiles = calculate_extra_tiles(tiles)\n\n# Print the result\nprint(extra_tiles)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "s = input().lower()\nn = len(s)\n\n# Create a function to find the length of the longest non-palindrome substring\ndef longest_non_palindrome(s, l, r):\n    max_length = 0\n    for i in range(l, r + 1):\n        substring = s[i:i + 1]\n        if substring != substring.reverse():\n            max_length = max(max_length, len(substring))\n    return max_length\n\n# Find the length of the longest non-palindrome substring\nlongest_non_palindrome_length = longest_non_palindrome(s, 0, n - 1)\n\n# Print the length of the longest non-palindrome substring\nprint(longest_non_palindrome_length)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "x = int(input())\nhh, mm = map(int, input().split())\n\n# Calculate the number of minutes until the wake-up time\nmin_diff = (hh * 60 + mm) - (0 if hh == 0 else 24 * (hh - 1) * 60)\n\n# Find the multiple of x that contains the digit 7\ny = min_diff // x\nif min_diff % x != 0:\n    y += 1\n\n# Print the minimum number of times to press the snooze button\nprint(y)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n = int(input())\ns = input().strip()\n\ng = s.count(\"G\")\nswap = False\n\nif g >= 2:\n    for i in range(n):\n        if s[i] == \"G\" and not swap:\n            s[i] = \"S\"\n            swap = True\n    g -= 1\n\nprint(g)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n, k = map(int, input().split())\n\n# Find the number of digits to be deleted\nw = 0\nwhile n % 10**k != 0:\n    n //= 10\n    w += 1\n\n# Print the result\nprint(w)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "T = int(input())\n\nfor _ in range(T):\n    n = int(input())\n    p = []\n    c = []\n    for _ in range(n):\n        p.append(int(input()))\n        c.append(int(input()))\n\n    flag = True\n    for i in range(n-1):\n        if p[i] > p[i+1] or c[i] < c[i+1]:\n            flag = False\n\n    print(\"YES\" if flag else \"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n, a, b = map(int, input().split())\n\n# Calculate the total length of wood needed for each door frame\ntotal_length = 2 * a + b\n\n# Divide the total length of wood by the length of each bar to find the number of bars needed\nnum_bars = total_length // n\n\n# Print the number of bars needed\nprint(num_bars)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "a, b = map(int, input().split())\n\nif a > b:\n    print(\">\")\nelif a < b:\n    print(\"<\")\nelse:\n    print(\"=\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "a_1, b_1, a_2, b_2, L, R = map(int, input().split())\n\n# Calculate the first progression\na_1_k = a_1 + k * b_1 for k in range(1, int((R-a_1)/b_1) + 1)\n\n# Calculate the second progression\na_2_l = a_2 + l * b_2 for l in range(1, int((R-a_2)/b_2) + 1)\n\n# Find the intersection\nx = set(a_1_k) & set(a_2_l)\n\n# Print the number of integers in the intersection\nprint(len(x))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n = int(input())\np = []\nk = 0\nfor i in range(2, int(n**0.5) + 1):\n    while n - i * i >= 0:\n        p.append(i)\n        n -= i\n        k += 1\nprint(k)\nprint(*p)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "x_p, y_p, x_v, y_v = map(int, input().split())\n\n# Calculate the difference between the pawns' positions\ndx = x_v - x_p\ndy = y_v - y_p\n\n# If the difference is even, Polycarp wins\nif dx % 2 == 0 and dy % 2 == 0:\n  print(\"Polycarp\")\n\n# Otherwise, Vasiliy wins\nelse:\n  print(\"Vasiliy\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "a, b = input().split()\n\n# Find the length of the longest common subsequence\nlcs_length = len(set(a) & set(b))\n\n# If the length of the longest common subsequence is zero, output -\nif lcs_length == 0:\n    print(\"-\")\n\n# Otherwise, output the longest common subsequence\nelse:\n    print(\"\".join(set(a) & set(b)))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n, pos, l, r = map(int, input().split())\n\na = max(l - 1, 0)\nb = min(r, n) - 1\n\nprint(min(abs(pos - a) + abs(b - pos) + 1, abs(pos - a) + abs(b - pos) + 1))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n = int(input())\ns = input().strip()\n\n# Create a dictionary to store the denied employees for each side\ndenied_depublicans = set()\ndenied_remocrats = set()\n\n# Track whether an employee has already made their statement\nmade_statements = set()\n\n# Store the order in which employees will make their statements\nstatement_order = []\n\n# Store the outcome of the vote\noutcome = None\n\n# Loop over the employees in the order they will make their statements\nfor i in range(n):\n    statement_order.append(i)\n\n# Loop over the employees making their statements\nfor i in statement_order:\n    # If the employee has already made their statement or is denied, they skip their turn\n    if i in made_statements or i in denied_depublicans or i in denied_remocrats:\n        continue\n\n    # Get the employee's faction\n    faction = s[i]\n\n    # If the employee is from the depublicans faction, they deny the vote of an employee from the remocrats faction\n    if faction == 'D':\n        remocrat_to_deny = statement_order[i - 1]\n        denied_remocrats.add(remocrat_to_deny)\n\n    # If the employee is from the remocrats faction, they deny the vote of an employee from the depublicans faction\n    elif faction == 'R':\n        democrat_to_deny = statement_order[i - 1]\n        denied_depublicans.add(democrat_to_deny)\n\n    # Mark that the employee has made their statement\n    made_statements.add(i)\n\n# Once all employees have made their statements, the remaining employee votes\nif statement_order[-1] not in denied_depublicans:\n    outcome = 'D'\nelse:\n    outcome = 'R'\n\n# Print the outcome of the vote\nprint(outcome)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "a1, b1 = map(int, input().split())\na2, b2 = map(int, input().split())\na3, b3 = map(int, input().split())\n\nif a1 * b1 >= a2 * b2 + a3 * b3:\n    print(\"YES\")\nelse:\n    print(\"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n, k = map(int, input().split())\na = list(map(int, input().split()))\n\ns = sum(a)\ne = sum(a) - sum(a[::k])\n\nprint(abs(e - s))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n, k = map(int, input().split())\ns = input().lower()\n\nbal_dict = {}\nfor i in range(n):\n    bal_dict[s[i]] = bal_dict.get(s[i], 0) + 1\n\n upset = False\nfor i in range(k):\n    num_balloons = int(input())\n    if num_balloons > bal_dict[s[i]] or num_balloons == bal_dict[s[i]] and bal_dict[s[i]] != 0:\n        upset = True\n\nprint(\"YES\" if not upset else \"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "import re\n\ntime_str = input().strip()\n\n# Convert time_str to hours and minutes\nhh, mm = map(int, re.findall(r\"(\\d+):(\\d+)\", time_str).pop().split(\":\"))\n\n# Calculate the minimum number of minutes to sleep\nmin_sleep = abs((hh * 60 + mm) - (hh * 60 + mm) // 2)\n\n# Print the minimum number of minutes to sleep\nprint(min_sleep)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "3\nimport math\n\nX = int(input())\n\nfor a in range(1, int(X**0.5) + 1):\n    b = X // a\n    if math.lcm(a, b) == X and a > b:\n        print(a, b)\n        exit()\n\nprint(\"No solution\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "3\nk = int(input())\n\n# Convert the number to a string\nnum_str = str(123456789101112131415161718192021222324252627282930313233343536)\n\n# Find the k-th digit\ndigit = int(num_str[k-1])\n\n# Print the digit\nprint(digit)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n, m, k = map(int, input().split())\n\na = [[int(i) for i in range(m)] for _ in range(n)]\n\na.sort()\n\nprint(a[k-1])", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "T = int(input())\n\nfor _ in range(T):\n    n, k, a = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    v = [0] * n\n\n    for i in range(n):\n        if a[i] - v[i] <= k and v[i] == 0:\n            v[i] = a[i] - k\n\n    print(\"YES\" if all(v[i] == a[i] for i in range(n)) else \"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n = int(input())\ns = input().strip()\nx, y = map(int, input().split())\n\ndx, dy = 0, 0\nfor i in range(n):\n    if s[i] == 'U':\n        dy += 1\n    elif s[i] == 'D':\n        dy -= 1\n    elif s[i] == 'L':\n        dx -= 1\n    elif s[i] == 'R':\n        dx += 1\n\nif dx == x and dy == y:\n    print(0)\nelse:\n    print(-1)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n, k, t = map(int, input().split())\n\n# Calculate the number of standing spectators at time t\nstanding = 0\nfor i in range(1, t + 1):\n    if i <= k:\n        standing += 1\n    elif i - k >= 0:\n        standing -= 1\n\nprint(standing)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n, k, m = map(int, input().split())\n\nx = str(int(n) * k)\ny = str(int(x[-1]) * k)\n\nprint(int(y) % m)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "t, s, x = map(int, input().split())\n\nif (x - t) % s == 0 or (x - t) // s * s + t == x:\n    print(\"YES\")\nelse:\n    print(\"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "import math\n\nN, M = map(int, input().split())\n\n# Read the coordinates of the cow and the lines\nA_i, B_i, C_i = map(int, input().split())\nD_j, E_j, F_j = map(int, input().split())\n\n# Calculate the area of the region the cow can reach\narea = 0\nfor i in range(N):\n    area += abs(C_i - A_i) * abs(B_i - C_i)\n\nfor j in range(M):\n    area += abs(E_j - D_j) * abs(F_j - D_j)\n\nif area == float('inf'):\n    print('INF')\nelse:\n    print(int(area))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "d, k, a, b, t = map(int, input().split())\n\n# Calculate the number of kilometers that Vasiliy can drive and the time it takes to drive those kilometers\nkm_driven = d // k\ntime_driven = km_driven * a\n\n# Calculate the time it takes to repair the car and walk to the post office\ntime_repair = t\ntime_walk = (d - km_driven) * b\n\n# Find the minimum time\ntime_min = time_driven + time_repair + time_walk\n\n# Print the minimum time\nprint(time_min)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\n\na.sort()\n\nmin_diff = float('inf')\nfor i in range(len(a) - 1):\n    diff = abs(a[i] + a[i + 1] - a[i])\n    min_diff = min(min_diff, diff)\n\nprint(min_diff)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "import random\nm = int(input())\na = []\nexpectation = 0\nwhile not a:\n    x = random.randint(1, m)\n    a.append(x)\n    expectation += x / gc(a)\nprint(expectation)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "h_1, h_2 = map(int, input().split())\na, b = map(int, input().split())\n\nh_diff = h_2 - h_1\n\nif h_diff <= 0:\n    print(-1)\n\n days = 0\nwhile h_diff > 0:\n    h_diff -= a\n    days += 1\n    if h_diff < 0:\n        h_diff = 0\n\nprint(days)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "# Function to check if a string can encode a message of length k\ndef can_encode(s, k):\n    # Calculate the number of candy canes and snowflakes\n    candy_canes = s.count(\"?\")\n    snowflakes = s.count(\"*\")\n\n    # If the number of candy canes is greater than the number of letters to remove, return impossible\n    if candy_canes > k:\n        return \"Impossible\"\n\n    # Calculate the number of letters to remove and repeat\n    remove_letters = candy_canes\n    repeat_letters = snowflakes\n\n    # Check if the number of letters to remove and repeat is equal to k\n    if remove_letters + repeat_letters == k:\n        # Construct the message\n        message = \"\"\n        for i in range(len(s)):\n            # If the letter is followed by a snowflake, repeat it\n            if s[i] + \"*\" == s[i+1]:\n                message += s[i] * repeat_letters\n            # If the letter is followed by a candy cane, remove it\n            elif s[i] + \"?\" == s[i+1]:\n                remove_letters -= 1\n            # Otherwise, add the letter to the message\n            else:\n                message += s[i]\n\n        # Return the message\n        return message\n\n    # Otherwise, return impossible\n    else:\n        return \"Impossible\"\n\n# Get the input\ns = input().strip()\nk = int(input())\n\n# Check if the string can encode a message of length k\nmessage = can_encode(s, k)\n\n# Print the message\nprint(message)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n, k = map(int, input().split())\n\nif n < k:\n    print(\"No\")\nelse:\n    print(\"Yes\")\n    a = sorted(list(map(int, input().split().split()[:k])))\n    print(\" \".join(map(str, a)))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n, m = map(int, input().split())\nh_dir = input().strip().split(\">\")\nv_dir = input().strip().split(\"^\")\n\n# Create a 2D list to store the direction of streets\nh_map = [[direction for direction in h_dir] for _ in range(n)]\nv_map = [[direction for direction in v_dir] for _ in range(m)]\n\n# Check if there is a path between any junction and any other junction\nfor i in range(n):\n    for j in range(m):\n        # Iterate over all junctions\n        for x in range(n):\n            for y in range(m):\n                # If the junctions are not the same and the directions are valid, then there is a path\n                if i != x and j != y and h_map[i][j] == v_map[x][y] and h_map[i][j] and v_map[x][y]:\n                    print(\"YES\")\n                    exit()\n\n# If no path is found, print NO\nprint(\"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "import math\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\na.sort()\na_sorted = a.copy()\n\noperations = 0\nfor i in range(n):\n    if a[i] != a_sorted[i]:\n        operations += 1\n\nprint(0 if operations == 0 else str(math.floor(operations * math.factorial(n) // math.factorial(n - operations) * pow(operations, -1, 1e9 + 7)))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n = int(input())\nfor _ in range(n):\n    t = int(input())\n    dir = input().strip()\n    if dir == \"South\" and t > 0:\n        print(\"NO\")\n    elif dir == \"North\" and t > 0:\n        print(\"NO\")\n    else:\n        print(\"YES\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n, m = map(int, input().split())\na = [[int(input()) for _ in range(m)] for _ in range(n)]\nb = [[0] * m for _ in range(n)]\n\noperations = 0\nfor i in range(n):\n    for j in range(m):\n        if a[i][j] != b[i][j]:\n            operations += 1\n            x, y = i, j\n            b[i][j] = b[i][y] = b[x][y + 1] = b[x + 1][y] = 1\n\nif operations == 0:\n    print(-1)\nelse:\n    print(operations)\n    print(operations)\n    for op in range(operations):\n        x, y = map(int, input().split())\n        print(x)\n        print(y)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n = int(input())\ns = input().strip()\n\ndef hash(s):\n    return ''.join(['%x'%i for i in s])\n\ndistinct_strings = set()\nfor i in range(len(s) - 1):\n    sub_s = s[i:i+1] + s[:i]\n    hash_s = hash(sub_s)\n    if hash_s not in distinct_strings:\n        distinct_strings.add(hash_s)\n\nprint(len(distinct_strings))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n, k = map(int, input().split())\n\n# Create a list to store the number of stones on each manhole\nstones = list(int(input().split()) for _ in range(n))\n\n# Calculate the minimum number of moves\nmoves = stones[k - 1] + 1  # Move to the first stone on the k-th manhole\nmoves += sum(stones[0:k - 1])  # Pick up all stones from the first k - 1 manholes\nmoves += sum(stones[k - 1:])  # Pick up all stones from the remaining manholes\n\nprint(moves)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\n\na.sort()\n\nif a[0] >= 2:\n    print(\"BitLGM\")\nelse:\n    print(\"BitAryo\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n, a, b = map(int, input().split())\n\n# Calculate the maximum number of pieces that can be put on each plate\nx = min(a, b) // n\n\n# Print the maximum number of pieces\nprint(x)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "3\nn, m, k = map(int, input().split())\na, b = map(int, input().split())\n\n# Calculate the number of steps to get from Edvard's apartment to Natasha's apartment\nnum_steps = 0\n\n# Calculate the number of steps to the first floor of Edvard's apartment\nnum_steps_to_first_floor = 10 + 9\n\n# Calculate the number of steps to the first floor of Natasha's apartment\nnum_steps_to_first_floor_natasha = 10 + 9\n\n# Calculate the number of steps to the target floor of Natasha's apartment\nnum_steps_to_target_floor = abs(a - b)\n\n# Calculate the total number of steps\ntotal_steps = num_steps_to_first_floor + num_steps_to_target_floor + 5\n\n# Print the total number of steps\nprint(total_steps)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\n\na.sort()\n\n# Calculate the maximum distance between the minimum and maximum elements\nmax_distance = abs(a[0] - a[-1])\n\n# Calculate the distance between the minimum and maximum elements after swapping one element\nfor i in range(n):\n    a_copy = a.copy()\n    a_copy[i] = a[0]\n    a_copy.sort()\n    min_distance = abs(a_copy[0] - a_copy[-1])\n    max_distance = max(max_distance, min_distance)\n\n# Print the maximum distance\nprint(max_distance)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\n\n# Find the index of the nearest zero to each element\nd = []\nfor i in range(len(a)):\n    min_distance = float('inf')\n    for j in range(len(a)):\n        if a[j] == 0 and abs(i - j) < min_distance:\n            min_distance = abs(i - j)\n    d.append(min_distance)\n\nprint(*d)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n, k = map(int, input().split())\na = list(map(int, input().split()))\n\na.sort()\n\nans = 0\nfor i in range(n):\n    if a[i] >= k:\n        k = a[i]\n        ans += 1\n\nprint(ans)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "3\n\ndef hasDivisibleBySixtyFour(s):\n    n = int(s, 2)\n    return n % 64 == 0\n\n\ns = input()\nprint(\"yes\" if hasDivisibleBySixtyFour(s) else \"no\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "m, d = map(int, input().split())\n\n# Calculate the number of columns\ncols = 7 + (m - 1) // 7\n\n# Print the number of columns\nprint(cols)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "import math\n\na1, b1 = map(int, input().split())\na2, b2 = map(int, input().split())\n\n# Calculate the minimum number of minutes\nm = int(math.ceil((a1 * b1 - a2 * b2) / 2))\n\n# Calculate the possible sizes of the bars after the process\ns1 = int((a1 * b1 - m) // b1)\ns2 = int((a2 * b2 + m) // b2)\n\n# Print the results\nprint(m)\nprint(s1, b1)\nprint(s2, b2)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "t = int(input())\n\nfor _ in range(t):\n    n, x = map(int, input().split())\n    d = list(map(int, input().split()))\n    h = list(map(int, input().split()))\n\n    curX = x\n    minBlows = float(\"inf\")\n\n    for blow in d:\n        minHead = min(blow, curX)\n        curX -= minHead\n        curX += h[blow-1]\n\n        if curX <= 0:\n            minBlows = min(minBlows, blow)\n\n    if minBlows != float(\"inf\"):\n        print(minBlows)\n    else:\n        print(-1)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "s = input().strip()\na = set(s.lower())\nb = set(string.ascii_lowercase) - set(a)\n\nif not b:\n  print(\"-1\")\nelse:\n  print(\"\".join(sorted(a) + list(b)))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\n\n# Calculate the required number of positive numbers\nrequired_positives = int((n + 1) // 2)\n\n# Iterate over possible values of d and check if the condition is met\nfor d in range(-1000, 1001):\n    count = 0\n    for num in a:\n        if num / d > 0:\n            count += 1\n    if count >= required_positives:\n        print(d)\n        exit()\n\n# If no valid d is found, print 0\nprint(0)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n = int(input())\nx = list(map(int, input().split()))\ny = list(map(int, input().split()))\n\n# Check if the records can be consistent\nif sum(x) == sum(y) and sum(y) <= sum(x):\n    print(\"Yes\")\nelse:\n    print(\"No\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "3\nn, m = map(int, input().split())\ngrid = []\nfor _ in range(n):\n    grid.append(list(input().strip().split()))\n\nstars = [(i, j) for i, row in enumerate(grid) for j, star in enumerate(row) if star == '*']\n\nmin_side = float('inf')\nfor r in range(n):\n    for c in range(m):\n        distance = abs(stars[0][0] - r) + abs(stars[0][1] - c)\n        if distance < min_side:\n            min_side = distance\n\nprint(int(min_side))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n, m = map(int, input().split())\n\nx, s = []\nfor _ in range(n):\n    x.append(int(input()))\n    s.append(int(input()))\n\n# Calculate the minimum coins needed\ncoins = float('inf')\nfor i in range(n):\n    l = x[i] - s[i]\n    r = x[i] + s[i]\n    coins = min(coins, abs(l) + abs(r) - 1)\n\nprint(int(coins))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n, x, pos = map(int, input().split())\n\ndef valid(a, x, pos):\n  return a[pos] == x and BinarySearch(a, x)\n\ndef BinarySearch(a, x):\n  left = 0\n  right = len(a) - 1\n  while left < right:\n    middle = (left + right) // 2\n    if a[middle] <= x:\n      left = middle + 1\n    else:\n      right = middle\n  return a[left] == x\n\nres = 0\nfor i in range(n + 1):\n  a = list(range(1, i + 1))\n  a[pos] = x\n  if valid(a, x, pos):\n    res += 1\n\nprint(res % (10**9 + 7))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "N = int(input())\nA = []\nfor _ in range(N):\n    A.append([int(input().split()[i]) for i in range(N)])\n\nK = min(A[0])\nR = min(A[0])\nfor i in range(1, N):\n    K = min(K, abs(A[i][0] - A[0][0]) + abs(A[i][0] - A[i-1][0])\n    R = min(R, abs(A[i][0] - A[0][0]) + abs(A[i][0] - A[i-1][0])\n\nprint(K + R)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "3\nn = int(input())\n\na = list(map(int, input().splitlines()))\n\nif len(set(a)) != n or n % 2 != 0:\n    print(\"NO\")\nelse:\n    print(\"YES\")\n    print(sorted(set(a))[-2], sorted(set(a))[-1])", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\n\nif sum(a) == 0:\n    print(\"NO\")\nelse:\n    print(\"YES\")\n    print(\"\".join([\"(\" + str(a[i]) + \")->\" if i else str(a[i]) + \")\" for i in range(len(a))))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "import random\n\nn, m, r, k = map(int, input().split())\n\n# Calculate the maximum number of fishes that can be caught in a given position\ndef calculate_fish_count(x, y):\n    return min(r, x) * min(r, y)\n\n# Calculate the expected number of caught fishes\nexpected_fish_count = k / (n - r + 1) * (m - r + 1) * calculate_fish_count(n, m)\n\n# Print the expected number of caught fishes\nprint(expected_fish_count)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "a, b, c, n = map(int, input().split())\nn_copybooks = int(n)\n\n# Calculate the number of copybooks that can be bought with the existing copybooks\nk = n_copybooks // 4\n\n# Calculate the minimum amount of rubles to buy the required number of copybooks\nmin_rubles = min(a, b, c) * k\n\n# Print the minimum amount of rubles\nprint(min_rubles)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "x, y, l, r = map(int, input().split())\n\na, b = x, y\n\n# Calculate the maximum number of lucky years in the interval [l, r]\ndef unlucky_years(n):\n    return int((n - 1) // a) + int((n - 1) // b) - int((n - 1) // ab)\n\n# Find the maximum length of The Golden Age\ngolden_age_length = unlucky_years(l) - unlucky_years(r)\n\n# Print the maximum length of The Golden Age\nprint(golden_age_length)\n\n# If all years in the interval [l, r] are unlucky, print 0\nif golden_age_length == 0:\n    print(0)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n, c0, c1 = map(int, input().split())\n\n# Calculate the minimum cost of each letter\nmin_cost = c0 + c1\n\n# Calculate the total cost of the alphabet\ntotal_cost = n * min_cost\n\n# Print the total cost\nprint(total_cost)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "3\nl_1, r_1, l_2, r_2, k = map(int, input().split())\n\n# Calculate the overlapping minutes between l_1-r_1 and l_2-r_2\noverlap = min(r_1, r_2) - max(l_1, l_2) + 1\n\n# Subtract the minutes spent on printing\nminutes_spent_on_printing = min(l_1, k) - max(l_1, k)\n\n# Calculate the total number of minutes they can spend together\ntotal_minutes = overlap - minutes_spent_on_printing\n\n# Print the result\nprint(total_minutes)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n, T = map(int, input().split())\n\nt = []\ng = []\n\nfor _ in range(n):\n    ti, gi = map(int, input().split())\n    t.append(ti)\n    g.append(gi)\n\nt.sort()\ng.sort()\n\nans = 0\nprev = -1\nfor i in range(len(t)):\n    if g[i] != prev and t[i] + prev <= T:\n        prev = g[i]\n        ans += 1\n\nprint(ans % (10**9 + 7))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n, k = map(int, input().split())\n\nn_days = 2 ** n\nn_people = k\n\n# Calculate the number of pairs of people with the same birthday\nnum_pairs = n_people * (n_people - 1) // 2\n\n# Calculate the probability of at least two people having the same birthday\nprob = num_pairs / n_days\n\n# Find the gcd of A and B\ngcd = abs(math.gcd(int(prob.numerator), int(prob.denominator)))\n\n# Calculate A and B\nA = int(prob.numerator) // gcd\nB = int(prob.denominator) // gcd\n\n# Print A and B modulo 10^6 + 3\nprint(A, B)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n = int(input())\ncubes = []\nfor _ in range(n):\n    cubes.append(list(map(int, input().split())))\n\nx = 0\nfor i in range(n):\n    for j in range(6):\n        num = cubes[i][j]\n        if num != 0:\n            x = max(x, 10**i + num)\n\nprint(x if x else 0)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\n\na.sort()\n\nmex = 1\nfor i in range(len(a)):\n    if mex <= a[i]:\n        mex = a[i] + 1\n\nprint(mex)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "3\nk, a, b = map(int, input().split())\n\n# Calculate the number of multiples of k between a and b\nnum_divisibles = int((b // k - a // k) * k)\n\n# Print the number of k-divisible numbers\nprint(num_divisibles)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n, m, a, b = map(int, input().split())\n\nif n % m != 0:\n  print(-1)\nelse:\n  boxes = n // m\n  burles = boxes * a - boxes * b\n  print(burles)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "import math\n\nn, k = map(int, input().split())\n\nif n < k:\n    print(-1)\nelse:\n    g = math.floor(n / k)\n    print(*[g] * k)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "import re\n\nt = input().strip()\n\nif re.search(r\"((\\w+)\\1+)\", t):\n    print(\"YES\")\n    print(re.search(r\"((\\w+)\\1+\", t).group(1))\nelse:\n    print(\"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n, a, b, p, q = map(int, input().split())\n\n# Calculate the multiples of a and b\nmultiples_a = [i for i in range(1, int(n**0.5) + 1) if i % a == 0]\nmultiples_b = [i for i in range(1, int(n**0.5) + 1) if i % b == 0]\n\n# Find the common multiples\ncommon_multiples = set(multiples_a) & set(multiples_b)\n\n# Count the number of painted tiles\nnum_painted = len(common_multiples)\n\n# Calculate the total number of chocolates\ns = p * num_painted + q * (n - num_painted)\n\n# Print the answer\nprint(s)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "a, b, c = map(int, input().split())\nx, y, z = map(int, input().split())\n\n# Calculate the minimum number of spheres that can be transformed\nmin_spheres = min(a, b) + min(b, c)\n\n# If the required number of spheres is greater than the minimum number of spheres that can be transformed\nif x > min_spheres or y > min_spheres or z > min_spheres:\n    print(\"No\")\nelse:\n    print(\"Yes\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\ns = sum(a)\nif s % 2 == 0 and all(x in range(1, int(s/2) + 1) for x in a):\n    print(\"YES\")\nelse:\n    print(\"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n, m = map(int, input().split())\n\nh = max(n * 2, m * 3)\n\nprint(h)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "3\nn = int(input())\n\n# Calculate the maximum divisor of n that is not equal to n\ntax = max(int(n / i) for i in range(1, int(n ** 0.5) + 1) if n % i == 0 else 0 for i in range(1, int(n ** 0.5) + 1))\n\n# Print the result\nprint(tax)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "a, b, c, n = map(int, input().split())\n\nif a + b + c >= n and c >= 1:\n  print(n)\nelse:\n  print(-1)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "3\nn, m = map(int, input().split())\na = []\n\nfor _ in range(n):\n    a.append(list(input().strip().split()))\n\nans = -1\n\nfor r in range(n):\n    for c in range(m):\n        if a[r][c] == 'B' and (r == 0 or a[r-1][c] == 'W'):\n            ans = min(ans, 1 + a[r][c] - (r == 0))\n\nprint(ans)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\na.sort()\nb.sort()\n\n# Calculate the number of students with the same academic performance in both groups\na_dict = {}\nfor i in a:\n    if i not in a_dict:\n        a_dict[i] = 0\n    a_dict[i] += 1\n\nb_dict = {}\nfor i in b:\n    if i not in b_dict:\n        b_dict[i] = 0\n    b_dict[i] += 1\n\n# Calculate the minimum number of exchanges\nmin_exchanges = 0\nfor i in range(1, 6):\n    if abs(a_dict[i] - b_dict[i]) > 0:\n        min_exchanges += abs(a_dict[i] - b_dict[i])\n\n# Print the minimum number of exchanges\nif min_exchanges == 0:\n    print(-1)\nelse:\n    print(min_exchanges)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n, k = map(int, input().split())\n\n# Calculate the multiple of n that ends with k or more zeros\nx = n // 10**k * 10**k\n\n# Round down to the nearest multiple of n\nx = x - x % n\n\n# Print the result\nprint(x)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "x, y, z = map(int, input().split())\n\nup = x\ndown = y\nunk = z\n\nif up > down:\n    print(\"-\")\nelif down > up:\n    print(\"+\")\nelse:\n    print(\"0\")\n\nif up + down != z:\n    print(\"?\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n, k = map(int, input().split())\n\ndivisors = set(x for x in range(1, int(n**0.5) + 1) if divisors else None\n\nif not divisors:\n    print(-1)\nelse:\n    print(divisors.pop(k - 1))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "b_1, q, l, m = map(int, input().split())\na = list(map(int, input().split()))\n\n# Calculate the number of terms that can be written\ndef count_terms(b_1, q, l):\n    # Calculate the maximum number of terms\n    max_terms = int((l - b_1) // q) + 1\n\n    # If the number of terms is finite, return the number of terms\n    if max_terms is not None:\n        return max_terms\n\n    # Otherwise, return \"inf\"\n    else:\n        return \"inf\"\n\n# Print the number of terms that can be written\nprint(count_terms(b_1, q, l))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n = int(input())\ns = input().strip()\n\n# Check if the first character of the string is 8 and the length of the string is 11\nif s[0] == '8' and len(s) == 11:\n    # Check if the remaining string can be a telephone number\n    for i in range(len(s) - 1, -1, -1):\n        s_r = s[:i] + s[i + 1:]\n        if s_r[0] == '8' and len(s_r) == 11:\n            print('YES')\n            exit()\n    print('NO')\nelse:\n    print('NO')", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n, L = map(int, input().split())\nkefa_distances = list(map(int, input().split()))\nsasha_distances = list(map(int, input().split()))\n\nkefa_distances.sort()\nsasha_distances.sort()\n\nif kefa_distances ==Sasha_distances:\n    print(\"YES\")\nelse:\n    print(\"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "b, d, s = map(int, input().split())\nprint(min(b + d - 1, s - 1))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "a, b, c = map(int, input().split())\n\n# Find the maximum number of fruits that can be used\n lemons = a // 1\napples = b // 2\npears = c // 4\n\n# Calculate the total number of fruits that can be used\ntotal_fruits = lemons + apples + pears\n\n# Print the total number of fruits\nprint(total_fruits)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n = int(input())\n\n# Read Kuro's, Shiro's and Katie's ribbons\nkuro_ribbon = input().strip()\nshiro_ribbon = input().strip()\nkatie_ribbon = input().strip()\n\n# Calculate the beauty of each ribbon\nkuro_beauty = max(1, (kuro_ribbon.count(kuro_ribbon[0]) - 1)\nshiro_beauty = max(1, (shiro_ribbon.count(shiro_ribbon[0]) - 1)\nkatie_beauty = max(1, (katie_ribbon.count(katie_ribbon[0]) - 1)\n\n# Determine the winner\nif kuro_beauty > shiro_beauty and kuro_beauty > katie_beauty:\n    winner = \"Kuro\"\nelif shiro_beauty > kuro_beauty and shiro_beauty > katie_beauty:\n    winner = \"Shiro\"\nelif katie_beauty > kuro_beauty and katie_beauty > shiro_beauty:\n    winner = \"Katie\"\nelse:\n    winner = \"Draw\"\n\n# Print the winner\nprint(winner)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "a, b = map(int, input().split())\n\n# Calculate the binary representation of the year 2015\nnum_2015 = 2015\nnum_2015_bin = str(bin(num_2015).replace(\"0b\", \"\"))\n\n# Count the number of years with exactly one zero in the binary representation\ncount = 0\nfor year in range(a, b + 1):\n    num_year = year\n    num_year_bin = str(bin(num_year).replace(\"0b\", \"\"))\n    if num_year_bin.count(\"1\") - num_year_bin.count(\"0\") == 1:\n        count += 1\n\nprint(count)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\na.sort()\n\n# Find the maximum number of consecutive elements that can be erased\nerase_count = 0\nfor i in range(len(a)):\n    if a[i] - a[i-1] == 1:\n        erase_count += 1\n\n# Print the maximum number of consecutive elements that can be erased\nprint(erase_count)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n = int(input())\n\nx = -1\ny = 0\n\nr = 0\nc = 0\n\nfor i in range(n):\n    r += 1\n    c += 1\n    if r % 2 == 0:\n        x += 1\n    if c % 3 == 0:\n        y += 1\n\nprint(x, y)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "3\nn = int(input())\n\nproblems = []\nfor _ in range(n):\n    l, r = map(int, input().split())\n    problems.append((l, r))\n\ninversions = 0\nfor l, r in problems:\n    for i in range(l, r + 1):\n        for j in range(i, r + 1):\n            if i != j and i < j and solutions[i] > solutions[j]:\n                inversions += 1\n\np = 1\nfor i in range(1, n + 1):\n    p *= i\n\nans = inversions * i * pow(p, -1, 998244353)\nprint(ans)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n, k = map(int, input().split())\nk_base = int(input())\n\n# Calculate the minimum decimal number to get k in the system with base n\nx = 0\nbase = 1\nwhile k // base:\n    digit = k // base\n    k %= base\n    x += digit * base**(base-1)\n    base *= n\n\nprint(x)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n, m = map(int, input().split())\n\na = n\nb = m\n\nwhile a or b:\n    if a == 0 or b == 0:\n        break\n    elif a >= 2 * b:\n        a -= 2 * b\n    elif b >= 2 * a:\n        b -= 2 * a\n\nprint(a, b)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "a, b, c = map(int, input().split())\n\nsum = 0\nfor i in range(1, a + 1):\n    for j in range(1, b + 1):\n        for k in range(1, c + 1):\n            div = i * j * k\n            sum += d(div)\n\nprint(sum % 1073741824)\n\ndef d(n):\n    return sum(x for x in range(1, int(n**0.5) + 1) if x * x == n else 0)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n = int(input())\nnum = input().strip()\n\n# Create a dictionary to store the finger movements for each number\nfinger_movements = {}\n\n# Calculate the finger movements for each number\nfor i in range(10):\n    movements = []\n    for j in str(i):\n        movements.append((int(j) - 1) * 3)\n    finger_movements[i] = movements\n\n# Check if the number of finger movements for Mike's number is unique\nunique = True\nfor i in range(1, n + 1):\n    if finger_movements[i] == finger_movements[int(num)]:\n        unique = False\n\n# Print the result\nif unique:\n    print(\"YES\")\nelse:\n    print(\"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n, k = map(int, input().split())\n\np = list(map(int, input().split()))\n\np.sort()\n\n# Calculate the maximum messiness\nmax_messiness = 0\nfor i in range(n-1):\n    for j in range(i, n-1):\n        if p[i] > p[j]:\n            max_messiness += 1\n\n# Subtract the number of swaps\nmax_messiness -= min(k, max_messiness)\n\nprint(max_messiness)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n, m, k = map(int, input().split())\n\nx, s = map(int, input().split())\n\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nc = list(map(int, input().split()))\nd = list(map(int, input().split()))\n\na.sort()\nb.sort()\nc.sort()\nd.sort()\n\n# Calculate the minimum time to prepare n potions\ntime = x * n\nmana = 0\n\n# Use the first spell if it's available\nif b[0] <= s:\n    time -= a[0]\n    mana += b[0]\n\n# Use the second spell if it's available\nif c[0] <= n and d[0] <= mana:\n    time -= c[0]\n    mana += d[0]\n\nprint(time)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "def minMoves(num):\n    num_str = str(num)\n    sum_first_three = int(num_str[:3])\n    sum_last_three = int(num_str[3:])\n\n    # Calculate the minimum number of moves required\n    moves = abs(sum_first_three - sum_last_three)\n\n    # Return the minimum number of moves\n    return moves\n\n\n# Get the input ticket number\nticket = int(input())\n\n# Calculate the minimum number of moves required\nmoves = minMoves(ticket)\n\n# Print the minimum number of moves\nprint(moves)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n, m = map(int, input().split())\n\n# Calculate the number of pairs of integers such that their sum is divisible by 5\npairs = 0\nfor x in range(1, n + 1):\n    for y in range(1, m + 1):\n        if (x + y) % 5 == 0:\n            pairs += 1\n\n# Print the number of pairs\nprint(pairs)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n, m, k, x, y = map(int, input().split())\n\n# Calculate the maximum number of questions a particular pupil is asked\nmax_questions = (n - 1) * m + 1\n\n# Calculate the minimum number of questions a particular pupil is asked\nmin_questions = 1\n\n# Calculate how many times the teacher asked Sergei\nsergei_questions = min_questions + (n - 1) * m\n\n# Print the results\nprint(max_questions, min_questions, sergei_questions)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n, k = map(int, input().split())\nmain_courses = set(map(int, input().split()))\ncourses_dependencies = [[int(input())] + list(map(int, input().split())) for _ in range(n)]\n\ncourses_passed = set()\n\nfor i in range(n):\n    t, dependencies = courses_dependencies[i]\n    if all(course not in courses_passed for course in dependencies):\n        courses_passed.add(i+1)\n\nif not courses_passed:\n    print(-1)\nelse:\n    m = len(courses_passed)\n    print(m)\n    print(*courses_passed)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n, m = map(int, input().split())\nf = []\nfor _ in range(n):\n    f.append(input().strip())\n\nis_correct = (len(set(f[0].split())) == 3) and all(len(set(x.split())) == 1 for x in f) and all((f[0] == f[i] for i in range(1, n))\n\nprint(\"YES\" if is_correct else \"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "def winning(board):\n    # Check rows\n    for r in range(4):\n        if board[r][0] == board[r][1] == board[r][2] == board[r][3] == board[r][0]:\n            return True\n\n    # Check columns\n    for c in range(4):\n        if board[0][c] == board[1][c] == board[2][c] == board[3][c] == board[0][c]:\n            return True\n\n    # Check diagonals\n    if board[0][0] == board[1][1] == board[2][2] == board[3][3] == board[0][0]:\n        return True\n    elif board[0][3] == board[1][2] == board[2][1] == board[3][0] == board[0][3]:\n        return True\n\n    # If all else fails, it's a draw\n    return False\n\n\nboard = [['.', 'x', '.', '.'],\n [.o, 'o', '.', '.'],\n ['x', '.', '.', '.'],\n ['.', 'o', 'x', '.']]\n\nif winning(board):\n    print(\"YES\")\nelse:\n    print(\"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "import random\n\nt, w, b = map(int, input().split())\n\n# Calculate the maximum distance that Willman and Bolt can cover\ndistance_willman = w * random.randint(1, t)\ndistance_bolt = b * random.randint(1, t)\n\n# If the distance covered by both athletes is equal, they tie\nif distance_willman == distance_bolt:\n    print(str(distance_willman) + \"/\" + str(distance_willman + 1))\nelse:\n    # Otherwise, the winner is the athlete who can cover a greater distance\n    print(str(max(distance_willman, distance_bolt)) + \"/\" + str(max(distance_willman, distance_bolt) + 1))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n, m = map(int, input().split())\n\ngraph = {i: set() for i in range(1, n + 1)}\nfor _ in range(m):\n    u, v = map(int, input().split())\n    graph[u].add(v)\n\nacyclic = True\nfor v in graph:\n    if v not in graph:\n        continue\n    for u in graph[v]:\n        if u in graph[v]:\n            acyclic = False\n\nprint(\"YES\" if acyclic else \"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "import math\n\nn = int(input())\n\nx_y = []\nfor _ in range(n):\n    x, y = map(int, input().split().strip().split())\n    x_y.append((x, y))\n\n# Calculate the determinant of the matrix formed by the coordinates\ndet = x_y[0][0] * x_y[1][1] - x_y[0][1] * x_y[1][0]\n\n# If the determinant is 0, the area cannot be uniquely determined\nif det == 0:\n    print(-1)\nelse:\n    # Calculate the area of the rectangle\n    area = abs(det) / 2\n    print(area)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\ns = input().split()\n\na_dict = {i: s[i - 1] for i in range(1, n)}\nsorted_a = sorted(a)\n\nfor i in range(n):\n    if a_dict[i] == '1':\n        a[i], a[i + 1] = a[i + 1], a[i]\n\nprint('YES' if a == sorted_a else 'NO')", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n, s = map(int, input().split())\nv = list(map(int, input().split()))\n\nv.sort()\n\n# Find the maximum amount of kvass that can be poured from the first keg\nmax_kvass = 0\nfor i in range(len(v)):\n    if v[i] >= s:\n        max_kvass = max(max_kvass, v[i] - s)\n\n# If the Fair Nut cannot pour his glass by s liters of kvass, print -1\nif max_kvass == 0:\n    print(-1)\nelse:\n    print(max_kvass)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "a, b = map(int, input().split())\n\n# Find the LCM of a+k and b+k\ndef lcm(n, m):\n    return n * m // gcd(n, m)\n\nk_min = float('inf')\nfor k in range(0, int((a + b) ** 0.5) + 1):\n    lcm_value = lcm(a + k, b + k)\n    if lcm_value < k_min:\n        k_min = lcm_value\n\nprint(k_min)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n, k = map(int, input().split())\n\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\na_set = set(a)\nb_set = set(b)\n\nif sum(a) - sum(a_set) >= k:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n, k = map(int, input().split())\ns = input().strip()\n\ng, t = s.find('G'), s.find('T')\n\nif (g-t) % k == 0 and s[g-k] == '.':\n    print('YES')\nelse:\n    print('NO')", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\n\ns = sum(a)\nm = sum(a[0:2])\n\nif m * 2 == s:\n    print(\"YES\")\nelse:\n    print(\"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n = int(input())\ns = input()\n\n# Calculate the minimum operations to type the string\noperations = len(s)\n\n# If there is a copy operation, the minimum operations are reduced by 1\nif s.count(s[0]) == 1:\n    operations -= 1\n\nprint(operations)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n, m = map(int, input().split())\n\n# Calculate the number of grains that are brought every day\ntotal_grains = m\n\n# Calculate the number of sparrows that come every day\nnum_sparrows = 1\n\n# Calculate the number of days it takes for the barn to become empty\nnum_days = 1\n\n# Iterate over the days until the barn becomes empty\nwhile total_grains > 0:\n    # Bring grains to the barn\n    total_grains += m\n\n    # Eat grains by sparrows\n    total_grains -= num_sparrows\n\n    # Increment the number of days\n    num_days += 1\n\n    # Update the number of sparrows that come every day\n    num_sparrows += 1\n\n# Print the number of days it takes for the barn to become empty\nprint(num_days)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "s = int(input())\n\nnum_words = {\n    0: \"zero\",\n    1: \"one\",\n    2: \"two\",\n    3: \"three\",\n    4: \"four\",\n    5: \"five\",\n    6: \"six\",\n    7: \"seven\",\n    8: \"eight\",\n    9: \"nine\"\n}\n\nprint(num_words[s])", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n, a, b = map(int, input().split())\n\nt = list(map(int, input().split()))\n\n# Create a dictionary to store the number of available seats for each table\navailable_seats = {1: a, 2: b}\n\n# Iterate over the groups of people\nfor i in t:\n    # If the group consists of one person\n    if i == 1:\n        # If there is a vacant seat at a one-seater table, seat the person there\n        if available_seats[1] > 0:\n            available_seats[1] -= 1\n        # Otherwise, deny service\n        else:\n            print(\"DENIED\")\n    # If the group consists of two people\n    elif i == 2:\n        # If there is a vacant seat at a two-seater table, seat the person there\n        if available_seats[2] > 0:\n            available_seats[2] -= 1\n        # Otherwise, deny service\n        else:\n            print(\"DENIED\")\n\n# Print the total number of people the restaurant denies service to\nprint(sum(available_seats.values()))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "C, H_r, H_b, W_r, W_b = map(int, input().split())\n\n# Calculate the maximum number of candies that Om Nom can eat\nnum_reds = min(C // W_r, H_r)\nnum_blues = min(C // W_b, H_b)\n\n# Calculate the total number of joy units\ntotal_joy = num_reds * H_r + num_blues * H_b\n\n# Print the total number of joy units\nprint(total_joy)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n, x = map(int, input().split())\na = list(map(int, input().split()))\n\n# Calculate the maximum subarray sum\nmax_sum = 0\nfor i in range(n):\n    max_sum = max(max_sum, a[i] + (a[i-1] if i else 0))\n\n# Calculate the beauty of the array after multiplying all values in a consecutive subarray by x\nbeauty = max_sum - x if max_sum - x > 0 else 0\n\n# Print the beauty\nprint(beauty)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n, k = map(int, input().split())\na = list(map(int, input().split()))\n\na.sort()\ntotal = sum(a)\navg = total // k\n\nmin_marks = k - avg\n\nprint(min_marks)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\n\n# Calculate the number of moves\nk = 0\nfor i in range(len(a) - 1):\n    if not (a[i] and a[i + 1] are coprime):\n        k += 1\n        a.insert(i + 1, int((a[i] * a[i + 1]) // 2)\n\n# Print the number of moves and the new array\nprint(k)\nprint(*a)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "n, k, m = map(int, input().split())\nt = list(map(int, input().split()))\n\nt.sort()\n\npoints = 0\ntime = 0\nfor i in range(n):\n    points += min(time, t[i])\n    time += t[i]\n\nprint(points + min(time, k))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\gemma-7b-it-apps_interview_207.jsonl"}
{"code": "a = int(input())\nn = a + 1\nwhile not (sum(str(n).split()) % 4 == 0 and n >= a):\n    n += 1\nprint(n)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n = int(input())\nw = input().split()\n\n# Calculate the length of the shortest possible abbreviation\nmin_length = float('inf')\nfor i in range(n):\n    # Calculate the length of the segment\n    segment_length = sum(len(w[j]) for j in range(i, n))\n\n    # Update the minimum length if necessary\n    if segment_length < min_length:\n        min_length = segment_length\n\n# Print the minimum length\nprint(min_length)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "3\nn = int(input(\"Number of squares: \"))\nh = list(map(int, input(\"Heights of squares: \").split()))\n\n# Calculate the maximum number of moves\nmax_moves = 0\ncurrent_height = h[0]\n\nfor i in range(1, n):\n    if h[i] <= current_height:\n        max_moves += 1\n    else:\n        current_height = h[i]\n\nprint(max_moves)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n, k = map(int, input().split())\n\nif n * k < 2:\n    print(\"NO\")\nelse:\n    print(\"YES\")\n\n    b = list(int)\n    g = list(int)\n\n    for _ in range(n):\n        b.append(int(input().split()[0]))\n        g.append(int(input().split()[1]))\n\n    flag = 0\n\n    for i in range(n):\n        for j in range(i, n):\n            if b[i] == b[j] and g[i] == g[j]:\n                flag = 1\n\n    if flag:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n\n        for i in range(n):\n            print(b[i], g[i])", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "import math\n\nx = int(input())\n\n# Find the minimum prime number greater than or equal to x\nprime = x + 1\nwhile not isPrime(prime):\n    prime += 1\n\n# Print the minimum prime number\nprint(prime)\n\ndef isPrime(n):\n    if n <= 1:\n        return False\n\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n\n    return True", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "S = input().strip()\n\nis_easily_playable = True\n\n# Check if every character in an odd position is R, U, or D\nfor i in range(1, len(S), 2):\n    if S[i] not in ['R', 'U', 'D']:\n        is_easily_playable = False\n\n# Check if every character in an even position is L, U, or D\nfor i in range(0, len(S), 2):\n    if S[i] not in ['L', 'U', 'D']:\n        is_easily_playable = False\n\nif is_easily_playable:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n = int(input())\nd = list(map(int, input().split()))\n\n# Create a dictionary to store the divisors of x and y\ndivisors_x_y = {}\nx = y = 0\nfor i in d:\n    if i not in divisors_x_y:\n        divisors_x_y[i] = 0\n    divisors_x_y[i] += 1\n\n# Find the maximum common divisor of x and y\nmax_common_divisor = 0\nfor i in divisors_x_y:\n    if divisors_x_y[i] == 2:\n        max_common_divisor = i\n\n# Calculate x and y\nx = max_common_divisor * 2\ny = x * y // max_common_divisor\n\n# Print x and y\nprint(x, y)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n = int(input())\nt = input().lower()\n\ns = ''\n\nfor d in range(n, 0, -1):\n    s = t[:d] + s + t[d:]\n\nprint(s)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n, m, d = map(int, input().split())\nc = list(map(int, input().split()))\nc.sort()\n\nif sum(c) > n:\n    print(\"NO\")\nelse:\n    print(\"YES\")\n    a = [0] * n\n    p = 1\n    for i in range(m):\n        a[c[i]:c[i] + 1] = p\n        p += 1\n\n    print(*a)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n = int(input())\ns = input().lower()\nt = input().lower()\n\nif s == t:\n    print(0)\n    print()\n\nmoves = 0\nfor i in range(n - 1):\n    if s[i] != t[i]:\n        moves += 1\n        c = i\n        s[i] = t[i]\n        s[i + 1] = t[i]\n\nif moves <= 1000:\n    print(moves)\n    print(*[c + 1] * moves)\nelse:\n    print(-1)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "3\nt = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    if n % 2 != 0:\n        print(0)\n    else:\n        a = n // 2\n        b = n - a\n        print(1)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "3\nx = int(input())\ny = 100\nn = 1\n\nwhile y < x:\n    y += y * 0.01\n    n += 1\n\nprint(n)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "N = int(input())\n\nd = list(map(int, input().split()))\n\nK = int((N-2) // 2)\n\nprint(len(set(d) & set(range(K+1, d[-1]+1))))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "D, G = map(int, input().split())\n\np_list, c_list = [], []\nfor _ in range(D):\n    p, c = map(int, input().split())\n    p_list.append(p)\n    c_list.append(c)\n\ntotal_score = 0\nfor i in range(1, D + 1):\n    total_score += p_list[i - 1] * i\n\nperfect_bonus = 0\nfor i in range(1, D + 1):\n    perfect_bonus += c_list[i - 1] if p_list[i - 1] == i else 0\n\nrequired_problems = (total_score - perfect_bonus) // 100 + 1\n\nprint(required_problems)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\n\n# Calculate the prefix sum of the array\nps = []\nps.append(a[0])\nfor i in range(1, n):\n    ps.append(ps[i-1] + a[i])\n\n# Find the maximum number of blocks\nk = 0\nblocks = []\nfor i in range(n-1):\n    for j in range(i+1, n):\n        if ps[j] - ps[i] == sum(a[i:j+1]):\n            blocks.append((i+1, j))\n            k += 1\n\n# Print the number of blocks and the blocks\nprint(k)\nfor l, r in blocks:\n    print(l, r)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "3\nn, m = map(int, input().split())\n\na, b = []\nfor _ in range(n):\n    a.append(int(input()))\n    b.append(int(input()))\n\nc = sum(b)\n\nans = 0\nfor i in range(n):\n    if c - a[i] >= m:\n        ans += a[i]\n        c -= a[i]\n\nprint(ans)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\n\nif all(a[i] == a[i+1] for i in range(n-1)) and sum(a) == n:\n    print(\"YES\")\nelse:\n    print(\"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\n\n# Calculate the sum of weights of candies eaten in even and odd days\neven_sum = 0\nodd_sum = 0\nfor i in range(n):\n    even_sum += a[i] if i % 2 == 0 else odd_sum += a[i]\n\n# Find the number of candies that make the sum of weights of candies eaten in even and odd days equal\ngood_candies = sum(1 for i, w in enumerate(a) if w == even_sum - odd_sum and i != n-1)\n\nprint(good_candies)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n, r = map(int, input().split())\n\nprojects = [tuple(map(int, input().split())) for _ in range(n)]\n\nprojects.sort(key=lambda x: x[0] - x[1])\n\nrating = r\n\nmax_projects = 0\n\nfor a, b in projects:\n    if rating - b >= a:\n        max_projects += 1\n        rating += b\n\nprint(max_projects)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "t = int(input())\n\nfor _ in range(t):\n    n, m = map(int, input().split())\n    tiles = []\n    for _ in range(2 * n):\n        top_left, top_right, bottom_left, bottom_right = map(int, input().split())\n        tiles.append((top_left, top_right, bottom_left, bottom_right))\n\n    can_construct = (sum(set(tiles[0]) & set(tiles[1]) == set(tiles[0])) and (sum(set(tiles[2]) & set(tiles[1]) == set(tiles[0])) and (all(tiles[i][0] == tiles[0][0] for i in range(2, len(tiles)))) and (all(tiles[i][1] == tiles[0][1] for i in range(2, len(tiles))))\n\n    print(\"YES\" if can_construct else \"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "3\na, b, x = map(int, input().split())\n\n# Calculate the number of digits in a number\ndef d(n):\n    count = 0\n    while n // 10:\n        n //= 10\n        count += 1\n    return count\n\n# Calculate the maximum number of yen that Takahashi can afford\nmax_yen = x // (a * 10 + b * d(x))\n\n# If no integer can be bought, print 0\nif max_yen == 0:\n    print(0)\n\n# Otherwise, print the maximum number of yen that Takahashi can afford\nelse:\n    print(max_yen)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n, m = map(int, input().split())\na = list(map(int, input().split()))\nsegments = []\nfor _ in range(m):\n    l, r = map(int, input().split())\n    segments.append((l, r))\n\nsegments.sort()\n\nans = 0\nq = 0\nc = []\nfor l, r in segments:\n    if a[l] - a[r] > ans:\n        ans = a[l] - a[r]\n        q += 1\n        c.append(segments.index((l, r)))\n\nprint(ans)\nprint(q)\nprint(*c)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n, a, b, c = map(int, input().split())\n\nl = list(map(int, input().splitlines()))\n\n# Calculate the minimum MP needed\nmp = float('inf')\nfor i in range(n):\n    l_i = l[i]\n    if l_i >= 2 and l_i - 1 < mp:\n        mp = l_i - 1\n\n# Calculate the total MP needed\ntotal_mp = min(mp, 10) + 1\n\n# Print the total MP needed\nprint(total_mp)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\n\na.sort()\n\n# Find the maximum number of boxers whose weights are different\nmax_team_size = 1\ncurrent_weight = a[0]\nfor i in range(1, n):\n    if a[i] - current_weight > 0:\n        max_team_size += 1\n        current_weight = a[i]\n\nprint(max_team_size)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n, k = map(int, input().split())\na = list(map(int, input().split()))\n\nif k < len(a) or sum(a) != k:\n    print(\"NO\")\nelse:\n    print(\"YES\")\n    c = list(set(a))\n    c.sort()\n    print(*c)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n, r = map(int, input().split())\na, b = [], []\nfor _ in range(n):\n    a.append(int(input()))\n    b.append(int(input()))\n\ns = r\nfor i in range(n):\n    if s - a[i] < 0:\n        print(\"NO\")\n        exit()\n    s += b[i]\n    if s < 0:\n        print(\"NO\")\n        exit()\n\nprint(\"YES\")", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\n\n# Calculate the minimum difference between elements\ndiff = min(abs(x - y) for x, y in zip(a, a[0:1] + a[1:]))\n\n# If the minimum difference is 0, it means that the array is already equal\nif diff == 0:\n    print(-1)\nelse:\n    print(diff)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "t = int(input())\n\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n\n    # Calculate the minimum number of operations\n    res = min(abs(a - b) + abs(b - c), abs(a - c) + abs(c - b))\n\n    # Print the minimum number of operations\n    print(res)\n\n    # Print the triple\n    print(a, b, c)\n    print()", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "N = int(input())\na = list(map(int, input().split()))\n\ndef f(m):\n    res = 0\n    for i in a:\n        res += (m % i)\n    return res\n\nprint(max(f(x) for x in range(1, 10**5 + 1)))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "3\nS = input().strip()\nK = int(input())\n\ndef transform(s):\n    mapping = {num: str(num * num * num) for num in range(1, 10)}\n    return ''.join([''.join(mapping[num]) for num in s.split()]\n\ns = transform(S)\nprint(s[K - 1])", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "import math\n\nN = int(input())\n\n# Calculate the square root of N\nsqrt_N = int(math.sqrt(N))\n\n# Initialize the count of tuples\ncount = 0\n\n# Iterate over the square root of N\nfor a in range(1, sqrt_N + 1):\n    # Calculate the value of B and C\n    b = int((N - a) / a)\n    # Check if the tuple is valid\n    if a * b + c == N and a > b and c > 0:\n        # Increment the count\n        count += 1\n\n# Print the count of tuples\nprint(count)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n = int(input())\ns = input()\n\ndef solve(n, s):\n    res = 0\n    for i in range(len(s) - 1):\n        sub_s = s[i:i + 2]\n        if sub_s == '(())':\n            res += 1\n    return res\n\nprint(solve(n, s) % 1000000007)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "a, b = map(int, input().split())\n\n# Calculate the minimum perimeter\nmin_perimeter = 2 * (a + b) + abs(a - b)\n\n# Print the minimum perimeter\nprint(min_perimeter)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "N, M = map(int, input().split())\nk = [int(input().split()) for _ in range(M)]\np = [int(input()) for _ in range(M)]\n\nres = 0\nfor i in range(M):\n    cnt = sum(k[i] == 1)\n    if p[i] == 0 and cnt % 2 == 0:\n        res += 1\n\nprint(res)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n = int(input())\ns = input().strip()\n\n# Calculate the minimum number of characters to replace\nmin_replace = sum(x - y for x, y in zip(['0' * (n // 3), s].T))\n\n# Replace characters to make the string balanced\ns = ''.join(['0' if x == '1' else '1' if x == '0' else '2' for x in s])\n\n# Print the balanced ternary string\nprint(s)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "3\nn = int(input())\n\n# Calculate the minimum number of cakes and doughnuts to buy to reach N dollars\ncakes = 4\ndoughnuts = 7\nmin_cakes = n // cakes\nmin_doughnuts = n // doughnuts\n\n# If the number of cakes or doughnuts is greater than the minimum,\n# then there is a way to buy exactly N dollars\nif min_cakes * cakes >= n or min_doughnuts * doughnuts >= n:\n  print(\"Yes\")\nelse:\n  print(\"No\")", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split().strip().split()))\n\na.sort()\nc = 1\nans = 0\nprev = a[0]\n\nfor i in range(1, n):\n    if a[i] != prev:\n        c += 1\n        prev = a[i]\n\nprint(c)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "S = input().lower()\n\nif S[0].upper() == 'A' and S.count('C') == 1 and S[0:2].islower():\n    print('AC')\nelse:\n    print('WA')", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "3\nN = int(input())\n\n# Store the coordinates and altitudes\nx = []\ny = []\nh = []\n\n# Read the coordinates and altitudes\nfor i in range(N):\n    x.append(int(input()))\n    y.append(int(input()))\n    h.append(int(input()))\n\n# Calculate the center coordinates and height\nc_x = (sum(x) // N)\nc_y = (sum(y) // N)\nh_p = max(h) - abs(x[0] - c_x) - abs(y[0] - c_y)\n\n# Print the center coordinates and height\nprint(c_x, c_y, h_p)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "N, M, C = map(int, input().split())\n\nB = list(map(int, input().split()))\nA = []\n\nfor _ in range(N):\n    a = list(map(int, input().split()))\n    A.append(a)\n\nres = 0\nfor i in range(N):\n    sum = 0\n    for j in range(M):\n        sum += A[i][j] * B[j]\n    if sum + C > 0:\n        res += 1\n\nprint(res)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "a, b, x = map(int, input().split())\n\ns = \"\"\na_count, b_count, x_count = 0, 0, 0\n\n# Construct the string with a zeroes, b ones and x indices of non-equality\nfor i in range(a):\n    s += \"0\"\na_count += a\n\nfor i in range(b):\n    s += \"1\"\nb_count += b\n\nfor i in range(x):\n    s = s.replace(\"0\", \"1\", 1)\n    x_count += 1\n\n# Print the constructed string\nprint(s)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "h1, m1 = map(int, input().split(\":\"))\nh2, m2 = map(int, input().split(\":\"))\n\n# Calculate the midpoint of the contest\nh3 = (h1 + h2) // 2\nm3 = (m1 + m2) // 2\n\n# Print the midpoint\nprint(str(h3) + \":\" + str(m3))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "3\nn, m, s = map(int, input().split())\ng = {}\ngraph = []\nfor _ in range(m):\n    u, v = map(int, input().split())\n    g[u] = g.get(u, {})\n    g[u][v] = True\n    graph.append((u, v))\n\ndistance = {i: float('inf') for i in range(n)}\ndistance[s] = 0\n\nqueue = [(0, s)]\nvisited = set()\n\nwhile queue:\n    distance_t, city = heapq.heappop(queue)\n    if city in visited:\n        continue\n    visited.add(city)\n    if distance_t == distance[city]:\n        for neighbor in g[city]:\n            new_distance = distance_t + 1\n            if new_distance < distance[neighbor]:\n                distance[neighbor] = new_distance\n                heapq.heappush(queue, (new_distance, neighbor))\n\nprint(distance[n] - distance[s]) if distance[n] != float('inf') else print(0)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n, m = map(int, input().split())\nx = list(map(int, input().split()))\n\nx.sort()\n\n# Calculate the minimum number of moves\nmoves = 0\ncurrent_position = x[0]\nfor i in range(1, m):\n    if x[i] - current_position > 1:\n        moves += abs(x[i] - current_position) - 1\n    current_position = x[i]\n\nprint(moves)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n = int(input())\n\n# Calculate the minimum number of moves needed to reach a square that contains N\nmoves = int((n-1) // 2) + 1\n\n# Print the minimum number of moves\nprint(moves)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "import bisect\n\nn = int(input())\na = list(map(int, input().split()))\n\na.sort()\n\n# Calculate the cumulative sum of the array\ncumulative_sum = []\ncumulative_sum.append(a[0])\nfor i in range(1, len(a)):\n    cumulative_sum.append(cumulative_sum[i-1] + a[i])\n\n# Find the minimum number of insertions\n insertions = bisect.bisect.bisect(cumulative_sum, 0) - 1\n\nprint(insertions)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n, m = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [0] * (n + 1)\ndp[0] = 1\n\nfor i in range(m):\n    dp[a[i]] = 0\n\ndp[n] = 1\n\nprint(dp[n] % 1000000007)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\n\ns = sum(a)\ngood = False\nnice = []\n\nfor i in range(n):\n    if s - a[i] == sum(a[:i]) + sum(a[i+1:]):\n        good = True\n        nice.append(i+1)\n\nprint(len(nice))\nprint(*nice)\n\nif not good:\n    print(0)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "3\nN = int(input())\nT = []\nfor _ in range(N):\n    T.append(int(input()))\n\n# Calculate the LCM of T\nLCM = 1\nfor t in T:\n    LCM = lcm(LCM, t)\n\n# Print the time it takes for the hand to point upward again\nprint(LCM)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "N, M = map(int, input().split())\nA = list(map(int, input().split()))\n\n# Sort the assignments by completion days\nA.sort()\n\n# Calculate the maximum number of days to hang out\ndays_to_complete = 0\ndays_to_hang_out = 0\nfor i in range(len(A)):\n    days_to_complete += A[i]\n    days_to_hang_out = max(days_to_hang_out, days_to_complete - A[i])\n\n# If all assignments can be completed, print the number of days to hang out\nif days_to_complete == M:\n    print(days_to_hang_out)\nelse:\n    print(-1)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "3\n# Read the input\nn = int(input())\n\n# Check if N can be represented as the product of two integers between 1 and 9\nis_representable = False\nfor i in range(1, 10):\n    for j in range(1, 10):\n        product = i * j\n        if product == n:\n            is_representable = True\n\n# Print the result\nif is_representable:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "3\na, b = map(int, input().split())\nprint(a + b)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "s = input().lower()\nn = len(s)\nmid = (n - 1) // 2\n\n# Check if S is a palindrome\nif s == s.lower():\n    isPalindrome = True\nelse:\n    isPalindrome = False\n\n# Check if the first half of S is a palindrome\nfirstHalf = s[:mid]\nif firstHalf == firstHalf.lower():\n    isPalindrome = True\n\n# Check if the second half of S is a palindrome\nsecondHalf = s[mid + 1:]\nif secondHalf == secondHalf.lower():\n    isPalindrome = True\n\n# If all conditions are met, print Yes\nif isPalindrome:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n, m = map(int, input().split())\na = list(map(int, input().split()))\nl, r = [tuple(map(int, input().split())) for _ in range(m)]\n\n# Calculate the maximum possible value\nmax_diff = 0\nfor i in range(n):\n    min_val = float('inf')\n    for seg in l:\n        if seg[0] <= i <= seg[1]:\n            min_val = min(min_val, a[i] - 1)\n    max_diff = max(max_diff, a[i] - min_val)\n\n# Calculate the number of segments to apply\nq = 0\nsegments_used = set()\nfor i in range(m):\n    if l[i] not in segments_used and r[i] not in segments_used:\n        segments_used.add(l[i])\n        segments_used.add(r[i])\n        q += 1\n\n# Print the answer\nprint(max_diff)\nprint(q)\nprint(*sorted(segments_used))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "3\n# Read the number of test cases\nnum_test_cases = int(input())\n\n# Initialize the answer variable\nanswer = 0\n\n# Iterate over the test cases\nfor _ in range(num_test_cases):\n    # Read the input\n    n = int(input())\n\n    # Check if the input is equal to 1 or 7\n    if n == 1 or n == 7:\n        answer = 1\n\n# Print the answer\nprint(answer)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "x1, y1, x2, y2 = map(int, input().split())\nx3, y3, x4, y4 = map(int, input().split())\nx5, y5, x6, y6 = map(int, input().split())\n\nx_min = min(x1, x3, x5)\nx_max = max(x2, x4, x6)\ny_min = min(y1, y3, y5)\ny_max = max(y2, y4, y6)\n\nif (x_max - x_min) * (y_max - y_min) - 1:\n    print(\"YES\")\nelse:\n    print(\"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "3\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\na.sort()\noperations = 0\nequal_count = 0\n\nfor i in range(len(a)):\n    a[i] //= 2\n    operations += a[i] - equal_count\n    equal_count += 1 if a[i] else 0\n\nprint(operations)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "q = int(input())\n\nfor _ in range(q):\n    n, a, b = map(int, input().split())\n    l = n\n    c = a - b\n    m = l // c\n    r = l % c\n    print(m * a + r * b)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "3\nn = int(input())\na = list(map(int, input().split()))\n\na.sort()\n\n# Calculate the number of monotonic renumerations\nres = 0\nprev = 0\nfor i in range(len(a)):\n    cur = 1\n    for j in range(i, len(a)):\n        if a[i] == a[j]:\n            cur += prev\n    prev = cur\n    res += cur\n\nprint(res % 998244353)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n, k = map(int, input().split())\na = list(map(int, input().split()))\n\na.sort()\ni = 0\nans = 0\nwhile i < n and a[i] <= k:\n    ans += 1\n    a.pop(0)\n    i += 1\n\nprint(ans)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    has_palindrome = False\n    for i in range(n-2):\n        subsequence = a[i:i+3]\n        if subsequence == subsequence[::-1]:\n            has_palindrome = True\n\n    print(\"YES\" if has_palindrome else \"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "import math\n\nx = float(input())\n\n# Find the integers that bracketing x\nlow = int(math.floor(x))\nhigh = int(math.ceil(x))\n\n# Print the integers\nprint(low, high)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\n\na.sort()\n\nx = a[0]\nfor i in range(1, len(a)):\n    if a[i] % 3 == 0:\n        x = a[i]\n    a[i] = 2 * x\n\nprint(*a)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\n\n# Check if the wall can be completed\ncan_complete = (max(a) - min(a)) % 2 == 0 and all(a[i] == a[i-1] for i in range(2, len(a)))\n\n# Print YES/NO\nprint(\"YES\" if can_complete else \"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n = int(input())\ns = input().lower()\n\n# Check if the string can be sorted\nif sorted(s) == s:\n    print(\"YES\")\n    print(\"\".join([\"0\" if i == s[i-1] else \"1\" for i in range(len(s))]))\nelse:\n    print(\"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n, k = map(int, input().split())\ns = input().strip()\n\nc = 0\nfor i in range(n):\n    if s[i] == '1':\n        c += i + 1\n\nr = 0\nfor i in range(n):\n    if s[i] == '1':\n        r += max(1, i - k)\n\nprint(c + r)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "a = int(input())\nprint(int((a ** 0.5).ceil()))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "s = input().lower()\nt = input().lower()\n\n# Find the maximum length of the substring that can be removed\n# such that t is still a subsequence of s\nmax_length = 0\nfor i in range(len(s)):\n    # Check if the substring s[i:i+1] is a subsequence of t\n    if s[i:i+1] in t and max_length < 1:\n        max_length = 1\n    # Check if the substring s[i:i+k] is a subsequence of t\n    for k in range(2, len(s) - i + 1):\n        substring = s[i:i+k]\n        if substring in t and max_length < k:\n            max_length = k\n\n# Print the maximum length of the substring that can be removed\nprint(max_length)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\na.sort()\n\nans = 1\ncurr = a[0]\nfor i in range(1, n):\n    if a[i] <= 2 * curr:\n        ans += 1\n    curr = a[i]\n\nprint(ans)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "def isIsomorphic(s, t):\n    # Create a dictionary to store the character mappings\n    mappings = {}\n    for i in s:\n        if i not in mappings:\n            mappings[i] = 0\n        mappings[i] += 1\n\n    for i in t:\n        if i not in mappings:\n            mappings[i] = 0\n        mappings[i] -= 1\n\n    # Check if the character mappings are equal\n    return all(mappings[c] == mappings[c'] for c, c' in zip(mappings.keys(), mappings.values()))\n\n\ns = input().lower()\nt = input().lower()\n\nif isIsomorphic(s, t):\n    print(\"Yes\")\nelse:\n    print(\"No\")", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "import sys\nread = sys.stdin.readline\n\nq = int(read())\n\nfor _ in range(q):\n    s = read().strip()\n    m = int(read())\n    b = list(map(int, read().strip().split()))\n\n    # Find any possible string t that satisfies the requirements\n    t = \"\"\n    # Create a dictionary to store the character distances\n    distances = {}\n    for i in range(len(s)):\n        distances[s[i]] = i\n\n    # Iterate over the array b and find the character that is at a distance greater than the current character\n    for i in range(m):\n        character = t[b[i]]\n        t = t.replace(character, \"\", 1) + character\n\n    print(t)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\n\n# Create a dictionary to store the rightmost occurrence of each element\nrightmost_occurrence = {}\n\n# Iterate over the array and update the dictionary\nfor i in range(len(a)):\n    if a[i] not in rightmost_occurrence:\n        rightmost_occurrence[a[i]] = i\n\n# Print the number of unique elements\nx = len(rightmost_occurrence)\n\n# Print the unique elements\nprint(x)\nprint(*sorted(rightmost_occurrence.keys())[:x])", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n = int(input())\n\n# Function to count the number of reachable numbers from n\ndef count_reachable(n):\n    # Initialize the count of reachable numbers\n    reachable_count = 1\n\n    # Iterate over the number of iterations\n    for i in range(1, int(n**0.5) + 1):\n        # Calculate the number of zeros in the multiple of n\n        num_zeros = len(str(n // i).split(\"0\"))\n\n        # If there are any zeros, remove them and add the number of iterations\n        if num_zeros:\n            reachable_count += i\n\n    # Return the count of reachable numbers\n    return reachable_count\n\n# Print the count of reachable numbers\nprint(count_reachable(n))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "import math\n\nA, B, H, M = map(int, input().split())\n\n# Calculate the angular velocity of the hour and minute hands\nomega_h = 2 * math.pi / 12\nomega_m = 2 * math.pi / 60\n\n# Calculate the angle rotated by the hour and minute hands\ntheta_h = omega_h * H + omega_h * M / 60\ntheta_m = omega_m * M\n\n# Calculate the distance between the unfixed endpoints of the hands\ndistance = B * math.sin(theta_h) - A * math.sin(theta_m)\n\n# Print the answer\nprint(distance)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n, a, b = map(int, input().split())\n\n# Calculate the number of blue balls that will be placed in the first N balls\nnum_blue = min(a, n)\n\n# Print the number of blue balls\nprint(num_blue)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "3\nimport random\n\nn = int(input())\na = list(map(int, input().split()))\n\n# Calculate the minimum health of the last monster\nmin_health = 0\nalive_monsters = set(a)\n\nwhile len(alive_monsters) > 1:\n    # Select two random alive monsters\n    monster1 = random.choice(alive_monsters)\n    monster2 = random.choice(alive_monsters)\n\n    # Reduce the health of the monster attacked by the amount equal to the current health of the monster attacking\n    a[monster2] -= a[monster1]\n\n    # If the health of the monster attacked is 0, remove it from the alive monsters\n    if a[monster2] == 0:\n        alive_monsters.remove(monster2)\n\n# Print the minimum health of the last monster\nprint(a[max(alive_monsters)])", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n = int(input())\n\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\nc = (a + b) % n\nc.sort()\n\nprint(*c)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n = int(input())\ns = input().strip()\n\n# Count the number of adjacent pairs of tiles with the same color\nnum_pairs = 0\nfor i in range(n-1):\n    if s[i] == s[i+1]:\n        num_pairs += 1\n\n# Calculate the minimum number of tiles to repaint\nmin_repaint = num_pairs\n\n# Print the minimum number of tiles to repaint\nprint(min_repaint)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "# Read the number of yen\nn = int(input())\n\n# Calculate the number of 1000-yen bills to use\nnum_bills = n // 1000\n\n# Calculate the change\nchange = n - num_bills * 1000\n\n# Print the amount of change\nprint(change)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n, k, x = map(int, input().split())\n\na = list(map(int, input().split()))\n\na.sort()\n\ns = sum(a)\n\nif s - x < k:\n    print(-1)\nelse:\n    print(s - x)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\n\n# Calculate the maximal number of consecutive hours of rest\nmax_rest = 0\ncurrent_rest = 0\nfor i in range(n):\n    if a[i] == 0:\n        current_rest += 1\n    else:\n        max_rest = max(max_rest, current_rest)\n        current_rest = 0\n\n# Print the maximal number of continuous hours during which Polycarp rests\nprint(max_rest)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "3\nN, X = map(int, input().split())\n\nL = list(map(int, input().split()))\n\n bounces = 0\ncurrent_position = 0\n\nfor i in range(N):\n    L_i = int(L[i])\n    if current_position + L_i > X:\n        boosts = 1\n    current_position += L_i\n\nprint(boosts)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "3\ndef solve(n, m, a, x):\n    # Calculate the maximum increase in understanding level for each book.\n    max_increase = np.max(a)\n\n    # Calculate the minimum number of books to buy.\n    num_books = np.ceil(x / max_increase)\n\n    # If the number of books to buy is less than or equal to the number of books available, then the objective is achievable.\n    if num_books <= n:\n        # Calculate the total cost of buying the books.\n        cost = np.sum(np.arange(1, num_books + 1) * c)\n\n        # Return the total cost.\n        return cost\n    else:\n        # Return -1 to indicate that the objective is not achievable.\n        return -1\n\n\n# Read the input data.\nn, m, x, c = map(int, input().split())\n\n# Calculate the answer.\nanswer = solve(n, m, a, x)\n\n# Print the answer.\nif answer != -1:\n    print(answer)\nelse:\n    print(\"No solution\")", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "import math\n\nn = int(input())\nprint(int(math.ceil(math.sqrt(n))))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n, k = map(int, input().split())\na = list(map(int, input().split()))\n\na.sort()\nb = set(a)\nc = 0\n\nans = \"\"\n\nfor i in range(n):\n    if a[i] not in c and b:\n        c.add(a[i])\n        ans += \"1\"\n    else:\n        ans += \"2\"\n\nprint(ans)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n, w = map(int, input().split())\na = list(map(int, input().split()))\n\n# Check if the total number of passengers exceeds the bus capacity\ntotal_passengers = sum(a)\nif total_passengers > w:\n    print(0)\nelse:\n    # Calculate the number of ways to have passengers in the bus before the first stop\n    ways = 0\n    for i in range(w + 1):\n        # Check if the number of passengers in the bus before the first stop is equal to i\n        if sum(a[:1]) == i:\n            ways += 1\n    # Print the number of ways\n    print(ways)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "N = int(input())\nL = list(map(int, input().split()))\n\nL.sort()\n\nresult = 0\nfor i in range(N-2):\n    for j in range(i+1, N-1):\n        k = N - i - j\n        if L[i] != L[j] and L[i] != L[k] and L[j] != L[k]:\n            result += 1\n\nprint(result)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n = int(input())\nfor _ in range(n):\n    s = input().lower()\n    if len(set(s)) == len(s) and ''.join(sorted(s)) == s:\n        print(\"Yes\")\n    else:\n        print(\"No\")", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n = int(input())\ns = []\nfor _ in range(n):\n    s.append(input().lower())\n\ns.sort()\n\nif all(s[i] is prefix(s[i-1]) for i in range(1, len(s))):\n    print(\"YES\")\n    print(\"\\n\".join(s))\nelse:\n    print(\"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n, k, x = map(int, input().split())\na = list(map(int, input().split()))\n\na.sort()\n\ns = sum(a)\nc = 0\nm = 0\n\nfor i in range(n):\n    c += a[i]\n    m = max(m, c - k + a[i])\n\nif m < 0:\n    print(-1)\nelse:\n    print(m)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "3\nimport sys\n\n# Read input\nn, a, b, c, d, e = map(int, sys.stdin.read().splitlines())\n\n# Calculate the minimum time required\ntime = 1 + (n - 3) // a + (n - 3 - 2) // b + (n - 3 - 2) // c + (n - 3 - 2) // d + (n - 3 - 2) // e\n\n# Print the minimum time\nprint(time)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "A, B = map(int, input().split())\n\n# Find the minimum number of pieces that can be evenly distributed to the guests in both of the cases\nmin_pieces = min(A, B) * min(A, B)\n\n# Print the minimum number of pieces\nprint(min_pieces)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n, m = map(int, input().split())\na = list(map(int, input().split()))\n\na.sort()\n\nans = 0\nfor i in range(n-1):\n    for j in range(i+1, n):\n        med = (a[i] + a[j]) // 2\n        if med == m:\n            ans += 1\n\nprint(ans)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\n\n# Find the common divisor of all elements in the array\ncommon_divisors = set(a[0].factors())\n\nfor i in a[1:]:\n    common_divisors &= set(i.factors())\n\nprint(len(common_divisors))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\n\n# Check if the algorithm can sort the array correctly\ncan_sort = True\nfor i in range(n-1):\n    if abs(a[i] - a[i+1]) >= 2:\n        can_sort = False\n\nprint(\"YES\" if can_sort else \"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n = int(input())\na = int(input())\nf = list(map(int, input().split()))\n\nmax_num = 0\ncurr_num = a\nmax_diff = 0\n\n# Find the maximum difference between the original number and the number after applying the operation\nfor i in range(n-1, -1, -1):\n    digit = a // 10 ** i\n    orig_digit = digit\n    a %= 10 ** i\n    new_digit = f[digit] * 10 ** i\n    diff = abs(orig_digit - new_digit)\n    if diff > max_diff:\n        max_diff = diff\n        max_num = a - 10 ** i * (orig_digit - new_digit)\n\n# Print the maximum number\nprint(max_num + max_diff)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "N, M, X, Y = map(int, input().split())\n\nx_list = list(map(int, input().split()))\ny_list = list(map(int, input().split()))\n\nx_set = set(x_list)\ny_set = set(y_list)\n\nif X < Y and X in x_set and Y in y_set:\n    print(\"No War\")\nelse:\n    print(\"War\")", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "import math\n\nn = int(input())\n\ndef func(n):\n    a = math.factorial(n) // n\n    return a * 2\n\nprint(func(n) % 10**9 + 7)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "a, b, k = map(int, input().split())\n\na, b = a - k, b - k\n\nprint(a, b)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "N, M = map(int, input().split())\nA = list(map(int, input().split()))\n\ntotal_votes = sum(A)\nmin_votes = total_votes // (4 * M)\n\nif max(A) >= min_votes:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "3\nD, N = map(int, input().split())\n\n# Calculate the multiples of 100 less than or equal to N\nmultiples = [x for x in range(1, int(N) + 1) if x % 100 == 0]\n\n# Find the N-th smallest multiple\nprint(multiples[N - 1])", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "3\nN, M = map(int, input().split())\n\nprefectures = {}\ncities = {}\n\nfor _ in range(M):\n    P, Y = map(int, input().split())\n    if P not in prefectures:\n        prefectures[P] = []\n    prefectures[P].append(Y)\n\nfor i in sorted(prefectures):\n    cities[i] = sorted(prefectures[i])\n\nfor i, city in enumerate(cities):\n    num_cities = len(cities[i])\n    id_num = str(prefectures[i][0]) + str(i + 1).zfill(6)\n    print(id_num)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n = int(input())\ngraph = [[] for _ in range(n)]\nedges = []\nfor i in range(n - 1):\n    a, b = map(int, input().split())\n    graph[a].append(b)\n    graph[b].append(a)\n    edges.append((a, b))\n\nmax_edges = 0\na, b, c = 0, 0, 0\n\ndef dfs(node, visited, current_edges):\n    for neighbor in graph[node]:\n        if neighbor not in visited and current_edges < max_edges:\n            visited.append(neighbor)\n            current_edges += 1\n            dfs(neighbor, visited, current_edges)\n\ndfs(1, [], 0)\n\nmax_edges = dfs(1, visited, 0)\n\nprint(max_edges)\nprint(a, b, c)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n = int(input())\ns = input().strip()\nt = input().strip()\n\nif len(s) + len(t) > n or s in t or t in s:\n    print(\"NO\")\nelse:\n    print(\"YES\")\n    res = ''.join(['a' * i for i in range(n)] + ['b' * i for i in range(n)] + ['c' * i for i in range(n)])\n    print(res)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    d = list(map(int, input().split()))\n\n    if 1 not in d and x not in d:\n        print(-1)\n    else:\n        x = min(d)\n        print(x)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "3\nimport sys\n\ndef solve(name):\n    # Check if the golorp is impossible to feed\n    if not is_golorp_feedable(name):\n        return \"false\"\n\n    # Get the lexicographically smallest sequence of variable values\n    sequence = get_smallest_sequence(name)\n\n    # Return the sequence\n    return \" \".join(str(x) for x in sequence)\n\n# Check if the golorp is impossible to feed\ndef is_golorp_feedable(name):\n    # Check if the name is valid\n    if not is_valid_golorp_name(name):\n        return False\n\n    # Check if the number of variables necessary to feed the golorp is greater than the number of variables in the sequence\n    return len(get_num_variables(name)) <= len(get_sequence(name))\n\n# Get the lexicographically smallest sequence of variable values\ndef get_smallest_sequence(name):\n    # Get the sequence of variable values for the golorp\n    sequence = get_sequence(name)\n\n    # Sort the sequence in lexicographic order\n    sequence.sort()\n\n    # Return the sequence\n    return sequence\n\n# Get the number of variables necessary to feed the golorp\ndef get_num_variables(name):\n    # Get the shape of the golorp's jaws\n    jaw_shape = get_jaw_shape(name)\n\n    # Return the number of variables necessary to feed the golorp\n    return len(jaw_shape)\n\n# Get the sequence of variable values for the golorp\ndef get_sequence(name):\n    # Get the golorp's name and extract the sequence of variable values\n    sequence = get_golorp_sequence(name)\n\n    # Return the sequence\n    return sequence\n\n# Print the answer\nprint(solve(sys.stdin.read().strip()))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n, k, q = map(int, input().split())\n\na = list(map(int, input().splitlines()))\n\n# Calculate the cumulative sum of points for each player\ncumulative_sum = {}\ncumulative_sum[0] = 0\nfor i in range(n):\n    cumulative_sum[i] = cumulative_sum[i-1] + a[i]\n\n# Determine the players who survived the game\nsurvived = [cumulative_sum[i] >= 0 for i in range(n)]\n\n# Print the results\nfor i in range(n):\n    print(\"No\" if not survived[i] else \"Yes\")", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "N = int(input())\nH = list(map(int, input().split()))\n\nH.sort()\n\nif H[0] >= H[1]:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "N = int(input())\nA = list(map(int, input().split()))\n\napproved = True\nfor num in A:\n    if num % 2 == 0 and (num % 3 == 0 or num % 5 == 0):\n        pass\n    else:\n        approved = False\n\nprint(\"APPROVED\" if approved else \"DENIED\")", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "3\nimport sys\n\n# Read the number of sides\nn = int(sys.stdin.readline())\n\n# Read the side lengths\nl = list(map(int, sys.stdin.readline().split()))\n\n# Check if the longest side is shorter than the sum of the other sides\nis_valid = l[0] < sum(l[1:]).  # l[0] is the longest side length, l[1:] is the sum of the other side lengths\n\n# Print Yes or No\nprint(\"Yes\" if is_valid else \"No\")", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n = int(input())\nx = list(map(int, input().split().strip().split()))\nx.sort()\n\nm = 0\nans = []\n\nfor i in range(n):\n    flag = 0\n    for j in range(i):\n        if abs(x[i] - x[j]) % 2 == 0 and x[i] - x[j] not in ans:\n            flag = 1\n    if flag and m < len(ans):\n        m = len(ans)\n        ans = set(x[j] for j in range(i, n))\n\nprint(m)\nprint(*ans)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\n\nmax_xor = 0\nfor i in range(n):\n    for j in range(i, n):\n        xor_value = a[i] ^ a[j]\n        max_xor = max(max_xor, xor_value)\n\nprint(max_xor)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n = int(input())\n\nname = ''\n\n# Calculate the name for the dog numbered N\nif n <= 26:\n    name = chr(n-1)\nelif n <= 702:\n    name = chr(26) + chr(n-26)\nelif n <= 18277:\n    name = chr(26) + chr(n-26) + chr(n-702)\nelif n <= 475253:\n    name = chr(26) + chr(n-26) + chr(n-702) + chr(n-18277)\nelse:\n    name = chr(26) + chr(n-26) + chr(n-702) + chr(n-18277) + chr(n-475253)\n\n# Print the name\nprint(name)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "import sys\n\n# Read the input expression\nexpression = sys.stdin.readline().strip()\n\n# Evaluate the expression\nresult = eval(expression)\n\n# Print the result, including the bug\nprint(result)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n, k = map(int, input().split())\n\nif n < k:\n    print(\"NO\")\nelse:\n    print(\"YES\")\n    a = list(int(input().split()))\n    print(a)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n, m, k = map(int, input().split())\n\ng = {i: set() for i in range(n)}\nfor i in range(m):\n    a, b = map(int, input().split())\n    g[a].add(b)\n    g[b].add(a)\n\ndp = [[0] * (n + 1) for _ in range(n + 1)]\ndp[0][0] = 1\n\nfor i in range(1, n + 1):\n    for j in range(i):\n        dp[i][j] = dp[j][j]\n\nk_ways = dp[n][n - 1]\n\nt = min(k_ways, k)\n\nprint(t)\n\nfor i in range(t):\n    print(''.join(['1' if g[i].__contains__(x) else '0' for x in range(m)]))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n, m = map(int, input().split())\np = list(map(int, input().split()))\n\np.sort()\n\nres = 0\nfor i in range(n):\n    for j in range(i, n):\n        med = (p[i] + p[j]) // 2\n        if med == m:\n            res += 1\n\nprint(res)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "3\nN = int(input())\n\nA = list(map(int, input().split()))\n\n# Create a dictionary to store the number of students in the classroom at each time\nstudents_in_class = {}\n\n# Iterate over the A array and update the dictionary\nfor i in range(1, N + 1):\n    students_in_class[i] = A[i - 1]\n\n# Sort the students by the number of students in the classroom at each time\nstudents_in_class_sorted = sorted(students_in_class.items(), key=lambda item: item[1])\n\n# Print the student numbers in the order they entered the classroom\nfor student_number, num_students in students_in_class_sorted:\n    print(student_number)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "t = int(input())\n\nfor _ in range(t):\n    n, m = map(int, input().split())\n    print(max((m - n) // 2, 0))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "N, X = map(int, input().split())\n\nx_list = list(map(int, input().split()))\n\nx_set = set(x_list)\n\nD_max = 0\n\nfor d in range(1, int(X**0.5) + 1):\n    visited = set()\n    current_position = X\n    while current_position not in visited:\n        visited.add(current_position)\n        current_position += d\n    if visited == x_set:\n        D_max = d\n\nprint(D_max)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "3\nimport math\n\na, b = map(int, input().split())\n\n# Calculate A \\times B\nresult = math.floor(a * b)\n\n# Print the result as an integer\nprint(result)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n, k = map(int, input().split())\na = list(map(int, input().split()))\n\na.sort()\nmn, mx = a[0], a[-1]\nmoves = min(abs(mn - a[0]) + abs(mx - a[-1]) + k - 1\n\nprint(moves)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n = int(input())\np = list(map(int, input().split()))\n\n# Check if the sequence can be sorted in ascending order\ncan_sort = True\n\n# Calculate the difference between each element and its sorted position\ndiff = []\nfor i in range(len(p)):\n    sorted_pos = i + 1\n    diff.append(sorted_pos - p[i])\n\n# If the maximum difference is more than 1, it is not possible to sort\nif max(diff) > 1:\n    can_sort = False\n\n# Print YES if the sequence can be sorted, NO otherwise\nprint(\"YES\" if can_sort else \"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n = int(input())\nq = list(map(int, input().split()))\n\n# Check if the given array is valid\nif not (1 <= n <= 2 * 10 ** 5 and len(q) == n - 1 and -n < q[i] < n for i in range(len(q))):\n    print(-1)\n\n# Calculate the prefix sum of q\nprefix_sum = []\nprefix_sum.append(q[0])\nfor i in range(1, len(q)):\n    prefix_sum.append(prefix_sum[i - 1] + q[i])\n\n# Find the unique solution\np = []\nfor i in range(n):\n    p.append(prefix_sum[i] - prefix_sum[i - 1])\n\n# Print the solution\nprint(*p)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "a = int(input())\n\nif a % 10 == 0 or a // 10 == 0:\n    print(1)\nelse:\n    print(0)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\n\na.sort()\nmin_instability = abs(a[0] - a[-1])\n\nfor i in range(n):\n    b = a.copy()\n    b.remove(a[i])\n    instability = abs(b[0] - b[-1])\n    if instability < min_instability:\n        min_instability = instability\n\nprint(min_instability)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "a, b = map(int, input().split())\n\n# Calculate the minimum price that satisfies the condition\nmin_price = -1\nfor price in range(1, int((b + 1) ** 0.5) + 1):\n    tax_8 = price * 0.08\n    tax_10 = price * 0.1\n    if int(tax_8).equals(tax_8) and int(tax_10).equals(tax_10):\n        min_price = price\n\n# Print the minimum price\nprint(min_price)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "H, n = map(int, input().split())\nd = list(map(int, input().split()))\n\nH_init = H\nfor i in range(n):\n    H += d[i]\n    if H <= 0:\n        print(-1)\n        exit()\n    H_init = min(H_init, H)\n\nprint(H_init)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "3\n\nn = int(input())\ns = input().upper()\n\n# Create a dictionary to store the frequency of each two-gram\ngram_freq = {}\n\n# Iterate over the string to find all two-grams\nfor i in range(n-1):\n    gram = s[i:i+2]\n    if gram not in gram_freq:\n        gram_freq[gram] = 0\n    gram_freq[gram] += 1\n\n# Find the two-gram with the maximum frequency\nmax_freq = max(gram_freq.items(), key=lambda item: item[1])\n\n# Print the two-gram with the maximum frequency\nprint(max_freq[0])", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "def numShichiGoSan(n):\n    # Function to check if a number is a Shichi-Go-San number\n    def isShichiGoSan(num):\n        # Convert the number to a string\n        numStr = str(num)\n\n        # Check if the number has at least one digit of 7, 5, and 3\n        return (numStr.count(\"7\") >= 1) and (numStr.count(\"5\") >= 1) and (numStr.count(\"3\") >= 1)\n\n    # Count the number of Shichi-Go-San numbers between 1 and n\n    numShichiGoSan = sum(1 for num in range(1, n + 1) if isShichiGoSan(num) else 0)\n\n    # Print the number of Shichi-Go-San numbers\n    print(numShichiGoSan)\n\n# Get the input\nn = int(input())\n\n# Solve the problem\nnumShichiGoSan(n)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n, r = map(int, input().split())\na = list(map(int, input().split()))\n\n# Calculate the sum of the heaters\nsum_heaters = sum(a)\n\n# If the sum of heaters is less than the number of elements, it is impossible to warm up the whole house\nif sum_heaters < n:\n    print(-1)\nelse:\n    # Calculate the minimum number of heaters needed to warm up the whole house\n    min_heaters = n - sum_heaters + 1\n\n    # Print the minimum number of heaters\n    print(min_heaters)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n = int(input())\ns = input().strip()\n\n# Create a map to store the positions of balanced brackets\nbalanced_brackets = {}\nfor i in range(len(s)):\n    if s[i] == '(':\n        balanced_brackets[i] = -1\n    else:\n        if i - balanced_brackets[i] in balanced_brackets:\n            balanced_brackets[i] = balanced_brackets[i - balanced_brackets[i]]\n\n# Count the number of balanced brackets\nnum_balanced = sum(1 for i in balanced_brackets if balanced_brackets[i] >= 0)\n\n# Print the number of balanced brackets\nprint(num_balanced)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "N, K = map(int, input().split())\n\nh = list(map(int, input().split()))\n\ncount = 0\nfor i in h:\n    if i >= K:\n        count += 1\n\nprint(count)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\n\n# Calculate the maximum length of the increasing subarray\n# using Kadane's algorithm\nmax_length = 1\ncurr_length = 1\nfor i in range(1, n):\n    for j in range(i):\n        if a[j] < a[i]:\n            curr_length = max(curr_length, 1 + max_length)\n    max_length = max(max_length, curr_length)\n\n# Print the maximum length of the increasing subarray\nprint(max_length)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "s = input().strip().lower()\nt = input().strip().lower()\n\ns_len = len(s)\nt_len = len(t)\n\n# Calculate the minimum number of moves\nmoves = abs(s_len - t_len) + min(s_len, t_len)\n\n# Print the result\nprint(moves)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "import sys\n\n# Read the number of test cases\nn = int(sys.stdin.readline())\n\n# Read the rolls for each test case\nrolls = []\nfor _ in range(n):\n    d1, d2 = map(int, sys.stdin.readline().split())\n    rolls.append([d1, d2])\n\n# Check if there are at least three consecutive doublets\nfor i in range(n-2):\n    if rolls[i][0] == rolls[i+1][0] and rolls[i][0] == rolls[i+2][0] and rolls[i][0] == rolls[i+1][1] and rolls[i][0] == rolls[i+2][1]:\n        print(\"Yes\")\n        sys.exit()\n\n# If no consecutive doublets are found, print No\nprint(\"No\")", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "# Read the input\na = int(input())\nb = int(input())\nc = int(input())\nd = int(input())\n\n# Calculate the XOR of the four numbers\nxor_sum = (a ^ b) & (c ^ d)\n\n# Print the result\nprint(xor_sum)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\n\na.sort()\n\nsum_a = sum(a)\nmid = sum_a // 2\n\nans = abs(sum_a - 2 * mid)\n\nprint(ans)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n = int(input())\nf = list(map(int, input().split()))\n\n# Find the two zeros and store their indices\nzeros = [i for i, x in enumerate(f) if x == 0]\nzero_indices = zeros\n\n# Calculate the number of gifts each friend will receive\nnf = []\nfor i in range(n):\n    nf.append(f[i] if f[i] else zero_indices[0])\n\n# Print the answer\nprint(*nf)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n, b, a = map(int, input().split())\ns = list(map(int, input().split()))\n\n# Calculate the maximum number of segments the robot can pass\n# using the battery and accumulator optimally\nmax_segments = 0\ncurrent_battery = b\ncurrent_accumulator = a\n\nfor i in range(n):\n    # If the segment is exposed to sunlight and the robot uses the battery,\n    # increase the accumulator charge and decrease the battery charge\n    if s[i] and current_battery > 0:\n        current_accumulator += 1\n        current_battery -= 1\n    # If the robot uses the accumulator, decrease the accumulator charge\n    elif current_accumulator > 0:\n        current_accumulator -= 1\n    # Update the maximum number of segments the robot can pass\n    max_segments = max(max_segments, current_accumulator)\n\nprint(max_segments)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n, m, D = map(int, input().split())\n\nif m < n - 1:\n    print(\"NO\")\nelse:\n    print(\"YES\")\n\nedges = []\nfor i in range(m):\n    v, u = map(int, input().split())\n    edges.append((v, u))\n\ngraph = {i: set() for i in range(n)}\nfor v, u in edges:\n    graph[v].add(u)\n    graph[u].add(v)\n\nvisited = set()\nqueue = [1]\nvisited.add(1)\n\n# Find the nodes that are at distance D from the first node\ndef dfs(node, distance):\n    if distance == D:\n        return True\n\n    for neighbor in graph[node]:\n        if neighbor not in visited:\n            visited.add(neighbor)\n            if dfs(neighbor, distance + 1):\n                return True\n\n    return False\n\n# If there is a spanning tree with the required degree, print YES and the edges of the tree\nif dfs(1, 0):\n    print(\"YES\")\n    for edge in edges:\n        if edge[0] == 1 or edge[1] == 1:\n            print(edge)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "H, W, K = map(int, input().split())\n\ngrid = []\nfor _ in range(H):\n    grid.append(list(input().strip()))\n\ncnt = 0\nfor i in range(H):\n    for j in range(W):\n        if grid[i][j] == '#':\n            cnt += 1\n\nres = 0\nfor r in range(H):\n    black = 0\n    for c in range(W):\n        if grid[r][c] == '#':\n            black += 1\n    if black == K:\n        res += 1\n\nfor c in range(W):\n    black = 0\n    for r in range(H):\n        if grid[r][c] == '#':\n            black += 1\n    if black == K:\n        res += 1\n\nprint(res)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n = int(input())\nx = list(map(int, input().split()))\n\nx.sort()\n\n# Calculate the minimum coins required to move all chips to the same coordinate\ncoins = 0\ncurrent_position = x[0]\nfor i in range(1, n):\n    coins += abs(current_position - x[i])\n    current_position = x[i]\n\nprint(coins)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "import sys\n\nn, k, m = map(int, sys.stdin.readline().split())\na = list(map(int, sys.stdin.readline().split().strip().split()))\n\ntotal_points = sum(a)\nnum_subjects = len(a)\n\nif (total_points - a[-1]) / num_subjects < m:\n    print(-1)\nelse:\n    print((total_points - a[-1]) // num_subjects)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "a = int(input())\n\nprint(a**3)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "def numberOfCubes(s):\n    n = len(s)\n    cubes = 0\n    for i in range(n):\n        if s[i] == '0' and s[i-1] == '1':\n            cubes += 1\n    return cubes\n\n\ns = input()\nprint(numberOfCubes(s))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "import math\n\ndef min\\_time\\_to\\_reach(x1, y1, x2, y2, v\\_max, t, vx, vy, wx, wy):\nv = math.sqrt(vx\\*\\*2 + vy\\*\\*2)\nw = math.sqrt(wx\\*\\*2 + wy\\*\\**2)\n\nif t == 0:\nreturn math.sqrt((x2 - x1)**2 + (y2 - y1)**2) / v\\_max\n\nu\\_x = vx + (x2 - x1 - t \\* vx) / t\nu\\_y = vy + (y2 - y1 - t \\* vy) / t\nu = math.sqrt(u\\_x**2 + u\\_y**2)\n\nif u > v\\_max:\nt\\_1 = t * v / v\\_max\nt\\_2 = math.sqrt((x2 - x1 - t\\_1 * u\\_x)**2 + (y2 - y1 - t\\_1 * u\\_y)**2) / w\nreturn t\\_1 + t\\_2\n\nt\\_1 = t * v / u\nt\\_2 = (x2 - x1 - t\\_1 * u\\_x)**2 + (y2 - y1 - t\\_1 * u\\_y)**2\nt\\_2 = math.sqrt(t\\_2) / w\nreturn t\\_1 + t\\_2\n\n---\n\nx1, y1, x2, y2 = 0, 0, 5, 5\nv\\_max, t = 3, 2\nvx, vy, wx, wy = -1, -1, -1, 0\n\nprint(min\\_time\\_to\\_reach(x1, y1, x2, y2, v\\_max, t, vx, vy, wx, wy))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "def min\\_decks(b, g, n):\nif b+g < n or n > b or n > g:\nreturn -1\n\ndecks = 0\nwhile b <= n and g <= n:\nb -= min(n, b)\ng -= min(n, g)\ndecks += 1\nn -= 1\n\nreturn decks\n\nb = int(input())\ng = int(input())\nn = int(input())\n\nresult = min\\_decks(b, g, n)\n\nif result == -1:\nprint(\"No solution\")\nelse:\nprint(result)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "from math import pi\nfrom shapely.geometry import Polygon, Point\nfrom shapely.ops import unary_union, polygonize\n\ndef solve():\n    n = int(input().strip())\n    x, y = map(int, input().strip().split())\n    points = []\n    for _ in range(n):\n        x1, y1 = map(int, input().strip().split())\n        points.append((x1, y1))\n    points.append((x, y))\n    polygon = Polygon(points)\n    center = Point(x, y)\n    circle = center.buffer(1e5)\n    intersection = polygon.intersection(circle)\n    if isinstance(intersection, Polygon):\n        intersection_area = intersection.area\n    else:\n        # intersection is a MultiPolygon\n        intersection_area = sum(poly.area for poly in intersection.geoms)\n    polygon_area = polygon.area\n    result = polygon_area - intersection_area\n    print(\"%.12f\" % result)\n\nsolve()", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "def lieges_of_legendre():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    # Initialize the dynamic programming table\n    dp = [[0, 0] for _ in range(sum(a) + 1)]\n    dp[0][0] = 1  # Kevin wins if there are no cows left\n\n    # Compute the dynamic programming table\n    for i in range(n):\n        for j in range(sum(a) - a[i], -1, -1):\n            dp[j + a[i]][i % 2] += dp[j][(i + 1) % 2]\n\n    # Check if Nicky or Kevin wins\n    if dp[-1][0] == 0:\n        print(\"Kevin\")\n    else:\n        print(\"Nicky\")\n\n\nif __name__ == \"__main__\":\n    lieges_of_legendre()", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "def max_sub_string(s, t):\n    # Calculate the number of 0s and 1s in t\n    t_zeros = t.count('0')", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "def is_possible(h, m, s, t1, t2):\n    # If Misha and the target time are the same, it's not possible to reach\n    if t1 == t2:\n        return \"NO\"\n\n    # Calculate the angle of each hand in degrees\n    h_angle = (h % 12) * 30\n    m_angle = m * 6\n    s_angle = s * 6\n\n    # Calculate the total angle between Misha's position and the target time\n    total_angle = ((t2 - t1) % 12) * 30\n\n    # If the total angle is not a multiple of 30, it's not possible to reach\n    if total_angle % 30 != 0:\n        return \"NO\"\n\n    # Check if it's possible to reach the target time by following the shortest path\n    if abs(h_angle - total_angle) <= 180 or abs(m_angle - total_angle) <= 180 or abs(s_angle - total_angle) <= 180:\n        return \"YES\"\n\n    # If not, check if it's possible to reach by following the longest path\n    if abs(h_angle - total_angle) >= 180 and abs(m_angle - total_angle) >= 180 and abs(s_angle - total_angle) >= 180:\n        return \"YES\"\n\n    # Otherwise, it's not possible to reach\n    return \"NO\"\n\n# Test cases\nprint(is_possible(12, 30, 45, 3, 11)) # NO\nprint(is_possible(12, 0, 1, 12, 1))  # YES\nprint(is_possible(3, 47, 0, 4, 9))   # YES", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "def solve(n):\n    # Memoization table to store the results of subproblems\n    dp = [0] * (n + 1)\n\n    # Base case: only one digit is allowed\n    dp[1] = 4\n\n    # Iterate over the number of digits\n    for i in range(2, n + 1):\n        # Initialize current result with 0\n        curr = 0\n\n        # Try all four possible digits\n        for j in range(1, 5):\n            # If the current digit is", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\n\nmax_len = 1\ncurr_len = 1\nprev_val = a[0]\ncurr_val = prev_val\nfor i in range(1, n):\n    curr_val = a[i]\n    if curr_val >= prev_val:\n        # current value is greater than or equal to previous value\n        # so we continue the current subsegment\n        max_length = max(max_len, curr_len + 1)\n        curr_len += 1\n    else:\n        # current value is less than previous value\n        # so we check if the current subsegment can be made strictly increasing\n        # by changing at most one element\n        if curr_len == 1 or a[i-1] >= curr_val:\n            # we can change the current element to make the subsegment increasing\n            # or the previous element is already greater than or equal to the current element\n            # so we continue the current subsegment\n            max_length = max(max_len, curr_len + 1)\n            curr_len += 1\n        else:\n            # we can't change the current element to make the subsegment increasing\n            # and the previous element is less than the current element\n            # so we start a new subsegment\n            curr_len = 1\n    prev_val = curr_val\n\nprint(max_len)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "import math\n\ndef max_colors(n):\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return int(math.log2(n)) + 1\n    else:\n        return int(math.log2(n // 2)) + 2\n\nn = int(input())\nprint(max_colors(n))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "n = int(input())\nballs = list(map(int, input().split()))\n\nballs.sort()\n\n# check if the difference between any two adjacent balls is more than 2\nif balls[1] - balls[0] > 2 or balls[-1] - balls[-2] > 2:\n    print(\"NO\")\nelse:\n    # check if we can choose three balls that satisfy the conditions\n    for i in range(n - 2):\n        if balls[i + 2] - balls[i] <= 2:\n            print(\"YES\")\n            break\n    else:\n        print(\"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "def is_possible(n):\n    if n % 2 == 0:\n        return False\n    return True\n\ndef solve(n):\n    if not is_possible(n):\n        print(\"NO\")\n        return\n    print(\"YES\")\n    for i in range(1, n):\n        for j in range(i+1, n+1):\n            print(i, j)\n\n# Test cases\nsolve(3)\nsolve(1)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "import math\n\ndef distance(x1, y1, x2, y2):\n    return math.sqrt((x1 - x2)**2 + (y1 - y2)**2)\n\ndef min_distance(ax, ay, bx, by, tx, ty, bottles):\n    dist = 0\n    while bottles:\n        # Find the two closest bottles to Adil and Bera\n        min_dist_adil = float('inf')\n        min_dist_bera = float('inf')\n        bottle1 = None\n        bottle2 = None\n        for b in bottles:\n            d = distance(ax, ay, b[0], b[1]) + distance(tx, ty, b[0], b[1])\n            if d < min_dist_adil:\n                min_dist_bera = min_dist_adil\n                min_dist_adil = d\n                bottle2 = bottle1\n                bottle1 = b\n            elif d < min_dist_bera:\n                min_dist_bera = d\n                bottle2 = b\n        \n        # Move Adil and Bera to the chosen bottles\n        dist += min_dist_adil + min_dist_bera\n        ax, ay = bottle1\n        bx, by = bottle2\n        \n        # Remove the chosen bottles\n        bottles.remove(bottle1)\n        bottles.remove(bottle2)\n    \n    return dist\n\n# Read input\nax, ay, bx, by, tx, ty = map(int, input().split())\nn = int(input())\nbottles = [tuple(map(int, input().split())) for _ in range(n)]\n\n# Calculate minimum distance\ndist = min_distance(ax, ay, bx, by, tx, ty, bottles)\n\n# Print output\nprint(\"%.6f\" % dist)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "n = int(input().strip())\nspectators = []\nfor i in range(n):\n    s, a = input().strip().split()\n    a = int(a)\n    if s == \"00\":\n        continue\n    spectators.append((s, a))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "import sys\nfrom collections import defaultdict\n\ninput = sys.stdin.readline\n\ndef bitwise_and_cycle(n: int, a: list) -> int:\n    graph = defaultdict(list)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] & a[j] != 0:\n                graph[i].append(j)\n                graph[j].append(i)\n\n    visited = [False] * n\n    length = 0\n    for i in range(n):\n        if not visited[i]:\n            length = max(length, dfs(graph, visited, i, i, -1))\n\n    return length if length != -1 else -1\n\ndef dfs(graph: dict, visited: list, node: int, parent: int, prev_length: int) -> int:\n    visited[node] = True\n    length = prev_length + 1\n\n    for child in graph[node]:\n        if not visited[child]:\n            length = max(length, dfs(graph, visited, child, node, length))\n        elif child != parent:\n            length = max(length, prev_length + 1)\n\n    return length\n\nn = int(input().strip())\na = list(map(int, input().strip().split()))\n\nprint(bitwise_and_cycle(n, a))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "import itertools\n\ndef is_wcd(pairs, div1, div2):\n    for a, b in pairs:\n        if div1 % a and div2 % a or div1 % b and div2 % b:\n            return False\n    return div1 > 1 and div2 > 1\n\ndef find_wcd(pairs):\n    n = len(pairs)\n    for div1, div2 in itertools.combinations(range(2, 2*10**9 + 1), 2):\n        if is_wcd(pairs, div1, div2):\n            return div1\n    return -1\n\nn = int(input())\npairs = [tuple(map(int, input().split())) for _ in range(n)]\nprint(find_wcd(pairs))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "n = int(input())\ns = input()\n\n# Initialize the dynamic programming array\ndp = [[0, 0] for _ in range(n)]\n\n# Set the base cases\ndp[0][0] = 1\ndp[0][1] = 0 if s[0] == '0' else 1\n\n# Iterate through the string\nfor i in range(1, n):\n    dp[i][0] = max(dp[i - 1])\n    dp[i][1] = dp[i - 1][0] + (1 if s[i] == '0' else 0)\n\n# Set the base cases for the reversed string\ndp_r = [[0, 0] for _ in range(n)]\ndp_r[n - 1][0] = 1\ndp_r[n - 1][1] = 0 if s[n - 1] == '1' else 1\n\n# Iterate through the reversed string\nfor i in range(n - 2, -1, -1):\n    dp_r[i][0] = max(dp_r[i + 1])\n    dp_r[i][1] = dp_r[i + 1][0] + (1 if s[i] == '1' else 0)\n\n# Initialize the answer\nans = max(dp[n - 1])\n\n# Iterate through the string and check the reversed string\nfor i in range(n):\n    ans = max(ans, dp[i][0] + dp_r[i][1])\n\n# Print the answer\nprint(ans)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "mod = 998244353\nfact = [1]\ninv = [1]\nfor i in range(1, 51):\n    fact.append((fact[-1] * i) % mod)\n    inv.append((pow(fact[-1], mod - 2, mod) * inv[-1]) % mod)\n\ndef C(n, k):\n    if k > n or k < 0:\n        return 0\n    return fact[n] * inv[k] * inv[n - k] % mod\n\nn, m = map(int, input().split())\na = list(map(int, input().split()))\nw = list(map(int, input().split()))\n\np = [0] * n\nq = [0] * n\nfor i in range(n):\n    if a[i] == 1:\n        p[i] = w[i]\n        q[i] = w[i]\n    else:\n        p[i] = mod - w[i]\n        q[i] = -w[i]\n\nfor _ in range(m):\n    tmp_p = [0] * n\n    tmp_q = [0] * n\n    for i in range(n):\n        if i > 0:\n            tmp_p[i] = (tmp_p[i - 1] + p[i - 1]) % mod\n        else:\n            tmp_p[i] = p[i]\n        if i > 0:\n            tmp_q[i] = (tmp_q[i - 1] + q[i - 1]) % mod\n        else:\n            tmp_q[i] = q[i]\n        if a[i] == 1:\n            tmp_q[i] = (tmp_q[i] + tmp_p[i] + q[i]) % mod\n        else:\n            tmp_q[i] = (tmp_q[i] + tmp_p[i] + mod + q[i]) % mod\n    p, q = tmp_p, tmp_q\n\nfor i in range", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "def is_beautiful(a, b, c, d):\n    # If the sum of a, b, c, and d is odd, it's impossible to form a beautiful sequence\n    if (a + b + c + d) % 2 != 0:\n        return False\n\n    # If any of a, b, c, or d is greater than the sum of the others, it's impossible to form a beautiful sequence\n    if max(a, b, c, d) > a + b + c + d - max(a, b, c, d):\n        return False\n\n    # If all a's are at the beginning and all d's are at the end, we can form a beautiful sequence\n    if a and not d:\n        return True\n\n    # If all d's are at the beginning and all a's are at the end, we can form a beautiful sequence\n    if d and not a:\n        return True\n\n    # In all other cases, it's impossible to form a beautiful sequence\n    return False\n\n\ndef main():\n    a, b, c, d = map(int, input().split())\n    if is_beautiful(a, b, c, d):\n        print(\"YES\")\n        # Construct the beautiful sequence by interleaving a's, b's, c's, and d's\n        for i in range(min(a, d)):\n            print(\"0 3\", end=\" \")\n        a -= i\n        d -= i\n        print(*([\"0\"] * a + [\"1\"] * b + [\"2\"] * c + [\"3\"] * d))\n    else:\n        print(\"NO\")\n\n\nif __name__ == \"__main__\":\n    main()", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "import math\n\ndef max_lcm_of_three(n):\n    return math.lcm(n, n-1, n-2) if n >= 2 else n\n\nn = int(input())\nprint(max_lcm_of_three(n))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "import sys\ninput = sys.stdin.readline\n\nMOD = 1000000007\n\ndef power(a, b):\n    result = 1\n    while b > 0:\n        if b % 2 == 1:\n            result = (result * a) % MOD\n        a = (a * a) % MOD\n        b //= 2\n    return result\n\ndef solve(n, k):\n    if k == 1:\n        return power(n, n - 1)\n    elif k == 2:\n        return (n * (n - 1) * (n - 2)) % MOD\n    else:\n        return (power(k, n - k + 1) - (k - 1) - power(k - 1, n - k + 1) + (k - 2)) % MOD\n\nn, k = map(int, input().strip().split())\nprint(solve(n, k))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "def solve(x, y):\n    if x == 1 and y == 1:\n        return \"Impossible\"\n    elif x == 1:\n        return \"B\" * y\n    elif y == 1:\n        return \"A\" * x\n    elif x % 2 == 0 and y % 2 == 0:\n        return (\"A\" * (x // 2)) + (\"B\" * (y // 2))\n    else:\n        return \"Impossible\"\n\nif __name__ == \"__main__\":\n    x, y = map(int, input().split())\n    print(solve(x, y))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "import sys\n\ndef duel(n, k, s):\n    if (n - 1) % (k - 1) != 0:\n        return \"tokitsukaze\" if k % 2 == 1 else \"quailty\"\n    if \"1\" not in s and \"0\" not in s:\n        return \"once again\"\n    if k == 1:\n        return \"quailty\" if \"1\" in s else \"tokitsukaze\"\n    if k == n:\n        return \"tokitsukaze\" if s[0] == s[-1] else \"quailty\"\n    if s[0] != s[-1]:\n        return \"once again\"\n    for i in range(1, n - k + 1):\n        if s[i:i + k] != s[i - 1] * k:\n            return \"once again\"\n    return \"tokitsukaze\" if s[0] == \"1\" else \"quailty\"\n\nif __name__ == '__main__':\n    lines = sys.stdin.readlines()\n    n, k = map(int, lines[0].split())\n    s = lines[1].strip()\n    print(duel(n, k, s))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "n, m = map(int, input().split())\ns = input()\nt = input()\n\ni, j = 0, 0\nwhile i < n and j < m:\n    if s[i] == '*':\n        i += 1\n        continue\n    if s[i] != t[j]:\n        break\n    i += 1\n    j += 1\n\nif i < n:\n    print(\"NO\")\nelse:\n    print(\"YES\")", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "def solve():\n    n, k, m, a = map(int, input().split())\n    votes = [0] * (n + 1)\n    last_votes = [0] * (n + 1)\n    for i in map(int, input().split()):\n        votes[i] += 1\n        last_votes[i] = a\n    for _ in range(m - a):\n        max_votes = max(votes)\n        max_votes_index = votes.index(max_votes)\n        if max_votes >= k:\n            print(1, end=' ')\n            votes[max_votes_index] += 1\n        elif max_votes == last_votes[max_votes_index] and max_votes + 1 < k:\n            print(3, end=' ')\n        else:\n            print(2, end=' ')\n            last_votes[max_votes_index] = m\n            votes[max_votes_index] += 1\n    print()\n\n\nif __name__ == '__main__':\n    t = int(input())\n    for _ in range(t):\n        solve()", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "from math import comb\n\nMOD = 1000000007\n\ndef solve(f, w, h):\n    if w == 0:\n        return 1\n    if f == 0:\n        return 0 if h > 0 else 1\n    if h == 0:\n        return 0\n    if f == 1:\n        return (sum([comb(w+i-1, w-1) for i in range(h, min(w, h+2))]) % MOD * pow(2, w-1, MOD)) % MOD\n    if w == 1:\n        return (sum([comb(f+i-1, f-1) for i in range(h, min(f, h+2))]) % MOD * pow(2, f-1, MOD)) % MOD\n\n    ans = 0\n    for i in range(h, min(f, w, h+2)):\n        ans = (ans + (comb(f+i-1, f-1) * comb(w+i-1, w-1)) % MOD) % MOD\n    ans = (ans * pow(2, f+w-2, MOD)) % MOD\n    return ans\n\nwhile True:\n    try:\n        f, w, h = map(int, input().strip().split())\n        print(solve(f, w, h))\n    except:\n        break", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "from shapely.geometry import Polygon\n\ndef check_intersection(square1, square2):\n    poly1 = Polygon(square1)\n    poly2 = Polygon(square2)\n    return poly1.intersects(poly2)\n\ndef parse_square(square_str):\n    square = []\n    for i in range(0, len(square_str), 2):\n        square.append((int(square_str[i]), int(square_str[i+1])))\n    return square\n\ndef main():\n    square1_str = input()\n    square2_str = input()\n\n    square1 = parse_square(square1_str)\n    square2 = parse_square(square2_str)\n\n    if check_intersection(square1, square2):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nif __name__ == \"__main__\":\n    main()", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "def min_cost(n, x, y, s):\n    # Initialize the cost and the number of zeros\n    cost = 0\n    zeros = 0\n\n    # Count the number of zeros in the string\n    for c in s:\n        if c == '0':\n            zeros += 1\n\n    # If there are no zeros, return 0\n    if zeros == 0:\n        return 0\n\n    # If the cost of reversing is more than the cost of inverting,\n    # then we will always invert\n    if x > y:\n        cost = zeros * y\n    else:\n        # Calculate the number of blocks of zeros\n        blocks = 1 + (zeros - 1) // n\n\n        # Reversing is cheaper, so we will reverse the entire string\n        # and then invert the blocks\n        cost = x + blocks * y\n\n    return cost\n\n# Read the input\nn, x, y = map(int, input().split())\ns = input()\n\n# Print the result\nprint(min_cost(n, x, y, s))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "import sys\nfrom collections import deque\n\n# Read input\ns = sys.stdin.readline().strip()\nx, y = map(int, sys.stdin.readline().strip().split())\n\n# Initialize the current direction and position\ndirection = 0  # 0: right, 1: up, 2: left, 3: down\nposition = [0, 0]\n\n# Simulate the robot movement\nfor cmd in s:\n    if cmd == 'F':\n        position[direction % 2] += 1 if direction < 2 else -1\n    elif cmd == 'T':\n        direction = (direction + 1) % 4\n\n# Check if the robot reaches the target position\nif position[0] == x and position[1] == y:\n    print('Yes')\nelse:\n    print('No')", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "def is_interesting_problemset_possible(n, k, known_problems):\n    for i in range(1, (1 << n)):\n        # Count the number of teams that know at least half of the selected problems\n        team_count = sum(sum(p & i for p in row) >= (1 << (n - 1)) for row in known_problems)\n        if team_count <= k // 2:\n            return True\n    return False\n\nn, k = map(int, input().split())\nknown_problems = [list(map(int, input().split())) for _ in range(n)]\n\nif is_interesting_problemset_possible(n, k, known_problems):\n    print(\"YES\")\nelse:\n    print(\"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "import sys\nimport operator\n\n# Modulo operation\nmod = 998244353\n\n# Bitwise XOR operation\nxor = lambda a, b: (a&b) ^ (a|b)\n\n# Read input data\nN, X = map(int, sys.stdin.readline().split())\nA = list(map(int, sys.stdin.readline().split()))\n\n# Initialize bitset\ndp = [0] * (X + 1)\ndp[0] = 1\n\n# Calculate number of ways to represent each number\nfor a in A:\n    dp2 = [0] * (X + 1)\n    for x in range(X + 1):\n        dp2[x] = dp[x]\n        if x + a < X + 1:\n            dp2[x + a] += dp[x]\n        if x + a & a < X + 1:\n            dp2[x + a & a] += dp[x]\n    dp = dp2\n\n# Print the answer\nprint(sum(dp))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "s = input()\na, b, c = 0, 0, 0\nfor i in s:\n    if i == 'a':\n        a += 1\n    elif i == 'b':\n        b += 1\n    else:\n        c += 1\nif a == 0 or b == 0:\n    print(\"NO\")\nelif (c - a >= 0 and b >= c - a + 1) or (c - b >= 0 and a >= c - b + 1):\n    print(\"YES\")\nelse:\n    print(\"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef max\\_pokemon(n, s):\n    s.sort()\n    count, current\\_gcd = 1, s[0]\n    for i in range(1, n):\n        current\\_gcd = gcd(current\\_gcd, s[i])\n        if current\\_gcd == 1:\n            count = i + 1\n        elif i == n - 1 or current\\_gcd != s[i + 1]:\n            print(count)\n            return\n\nn = int(input())\ns = list(map(int, input().split()))\nmax\\_pokemon(n, s)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "def min\\_extensions(a, b, h, w, extensions):\nn = len(extensions)\ndp = [[-1 for _ in range(b+1)] for _ in range(h+1)]\nfor i in range(h+1):\nfor j in range(b+1):\nif i == 0 and j == 0:\ndp[i][j] = 0\nelif i == 0:\ndp[i][j] = float('inf')\nelif j == 0:\ndp[i][j] = float('inf')\nelse:\nif dp[i][j] == -1:\ndp[i][j] = float('inf')\nelse:\nfor k in range(n):\nif i >= a*extensions[k]:\ndp[i][j] = min(dp[i][j], dp[i-a*extensions[k]][j] + 1)\nif j >= b*extensions[k]:\ndp[i][j] = min(dp[i][j], dp[i][j-b*extensions[k]] + 1)\nreturn dp[h][w]\n\nT = int(input())\nfor t in range(T):\na, b, h, w, n = map(int, input().split())\nextensions = list(map(int, input().split()))\nans = min\\_extensions(a, b, h, w, extensions)\nprint(ans)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "import sys\ninput = sys.stdin.readline\n\ndef mul(a, b):\n    c = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                c[i][j] += a[i][k] * b[k][j]\n                c[i][j] %= mod\n    return c\n\ndef pow(a, n):\n    if n == 1:\n        return a\n    res = pow(a, n // 2)\n    res = mul(res, res)\n    if n % 2:\n        res = mul(res, a)\n    return res\n\ndef solve(n, m, edges, x):\n    g = [[0] * n for _ in range(n)]\n    for u, v, w in edges:\n        g[u - 1][v - 1] = w\n        g[v - 1][u - 1] = w\n\n    # precalculate g^(n-2)\n    g = pow(g, n - 2)\n\n    # dp[i][j][k] = number of spanning trees with i black edges, j white edges, and total weight k\n    dp = [[[0] * (x + 1) for _ in range(m + 1)] for _ in range(n)]\n    for i in range(n):\n        for j in range(m + 1):\n            dp[i][j][0] = 1\n\n    # iterate over number of black edges\n    for k in range(1, n):\n        # iterate over number of white edges\n        for j in range(1, m + 1):\n            # iterate over possible weights\n            for w in range(1, x + 1):\n                for l in range(1, j + 1):", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "import sys\nfrom collections import defaultdict\n\ndef cross_product(p1, p2, p0):\n    return (p1[0] - p0[0]) * (p2[1] - p0[1]) - (p1[1] - p0[1]) * (p2[0] - p0[0])\n\ndef leftmost_point(points):\n    return min(points, key=lambda p: p[0])\n\ndef sharestaff(points):\n    n = len(points)\n    if n <= 3:\n        return points\n\n    # Find the leftmost point\n    p0 = leftmost_point(points)\n    points = sorted(points, key=lambda p: cross_product(p0, p, (0, 0)))\n\n    # Initialize the convex hull\n    hull = [p0]\n    for p in points:\n        while len(hull) > 1 and cross_product(hull[-2], hull[-1], p) <= 0:\n            hull.pop()\n        hull.append(p)\n\n    # Find the points inside the convex hull\n    inside = set()\n    for p in points:\n        if p not in hull:\n            flag = True\n            for q in hull:\n                if cross_product(p, q, (0, 0)) > 0:\n                    flag = False\n                    break\n            if flag:\n                inside.add(p)\n\n    # Compute the score of each subset of the convex hull\n    mod = 998244353\n    dp = defaultdict(int)\n    dp[frozenset()] = 1\n    for p in hull:\n        new_dp = defaultdict(int)\n        for s, count in dp.items():\n            new_", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "import sys\n\ndef can_tokitsukaze_win(n, a):\n    # dp[i] is True if Tokitsukaze can win when there are i piles left\n    dp = [False] * (n + 1)\n    dp[0] = True\n    for i in range(n):\n        for j in range(i, -1, -1):\n            # Check if there are two piles with the same number of stones\n            # after Tokitsukaze removes a stone from the j-th pile.\n            if a[j] > 1 and a[i] == a[j - 1]:\n                break\n            dp[i + 1] = dp[i + 1] or dp[j]\n            if not dp[i + 1]:\n                break\n        else:\n            # Tokitsukaze can win if there is at least one valid move\n            break\n    return dp[n]\n\ndef main():\n    n = int(input().strip())\n    a = list(map(int, input().strip().split()))\n    if can_tokitsukaze_win(n, a):\n        print(\"sjfnb\")\n    else:\n        print(\"cslnb\")\n\nif __name__ == \"__main__\":\n    main()", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "n = int(input())\nf = list(map(int, input().split()))\n\n# Check if it's possible to find such m, g, h\nif len(set(f)) < len(f):\n    print(-1)\nelse:\n    # Create g, h functions\n    m = len(set(f))\n    g = {i: j for i, j in enumerate(sorted(set(f)), 1)}\n    h = {j: i for i, j in g.items()}\n\n    # Print the answer\n    print(m)\n    print(*[g[i] for i in range(1, n+1)])\n    print(*[h[i] for i in range(1, m+1)])", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "import sys\nfrom collections import defaultdict\n\ninput = sys.stdin.readline\n\ndef solve():\n    N = int(input())\n    A = list(map(int, input().split()))\n\n    # Compute the prefix sum of A.\n    P = [0] * (N + 1)\n    for i in range(N):\n        P[i + 1] = P[i] + A[i]\n\n    # Initialize the maximum amount of money that can be earned.\n    max_money = 0\n\n    # Try all possible numbers to smash.\n    for x in range(1, 101):\n        # Compute the remaining money if we smash all multiples of x.\n        remain = [P[i + 1] - P[max(0, i - (i % x) + 1)] for i in range(N)]\n\n        # Update the maximum amount of money that can be earned.\n        max_money = max(max_money, sum(max(0, a) for a in remain))\n\n    print(max_money)\n\nsolve()", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "import heapq\n\ndef min_days(n, m, s, a, b, c):\n    # Sort the bugs in decreasing order of complexity\n    a.sort(reverse=True)\n\n    # Create a heap to store the students in increasing order of their ability levels\n    min_heap = [(b[i], i) for i in range(n)]\n    heapq.heapify(min_heap)\n\n    # Initialize the number of passes given to the students\n    passes_given = 0\n\n    # Initialize the result list with -1 for each bug\n    result = [-1] * m\n\n    # Iterate over the bugs\n    for i in range(m):\n        # If the heap is empty, we cannot fix the current bug\n        if not min_heap:\n            return \"NO\"\n\n        # Get the student with the minimum ability level from the heap\n        _, student = heapq.heappop(min_heap)\n\n        # If the student's ability level is less than the bug's complexity\n        if b[student] < a[i]:\n            # Add the bug's complexity to the heap\n            heapq.heappush(min_heap, (b[student], student))\n            # If the heap is not empty, continue to the next bug\n            if min_heap:\n                continue\n            else:\n                return \"NO\"\n\n        # Fix the current bug by the student\n        result[i] = student + 1\n\n        # Add the student's pass requirement to the total passes given\n        passes_given += c[student]\n\n        # If the total passes given exceeds the limit, return \"NO\"\n        if passes_given > s:\n            return \"NO\"\n\n    return \"YES\\n\" + \" \".join(map(str, result))\n\n# Read the input\nn, m, s = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nc = list(map(int, input().split()))\n\n# Call the function and print the result\nprint(min", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "import sys\nfrom collections import deque\n\n# Read input\nN = int(sys.stdin.readline())\nsequence = list(map(int, sys.stdin.readline().split()))\n\n# Initialize max_element and max_index\nmax_element = max(sequence)\nmax_index = sequence.index(max_element)\n\n# Initialize result\nresult = [0] * (N + 1)\nresult[0] = max_element\nresult[1] = max_index + 1\n\n# Initialize operation count\noperation_count = 0\n\n# Perform operation until the length of the sequence becomes 1\nwhile len(sequence) > 1:\n    # Update max_element and max_index\n    max_element = max(sequence)\n    max_index = sequence.index(max_element)\n\n    # If the maximum element is at either end of the sequence, delete it\n    if max_index == 0 or max_index == len(sequence) - 1:\n        del sequence[max_index]\n    # Otherwise, replace it with the sum of the two elements adjacent to it and delete those two elements\n    else:\n        sequence[max_index] = sequence[max_index - 1] + sequence[max_index + 1]\n        del sequence[max_index - 1:max_index + 1]\n\n    # Update result\n    result[operation_count + 1] = max_element\n    result[operation_count + 2] = max_index + 1\n    operation_count += 1\n\n# Print result\nprint(result[-1])\nprint(operation_count)\nfor i in range(1, operation_count + 1, 2):\n    print(result[i])", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "def has\\_winning\\_strategy(n, k, ancient\\_numbers):\n ans = \"Yes\"\n # If k is present in the ancient numbers, then Arya can always determine x mod k\n if k in ancient\\_numbers:\n return ans\n\n # Check if any of the ancient numbers is a multiple of k\n for num in ancient\\_numbers:\n if num % k == 0:\n continue\n else:\n # If none of the ancient numbers is a multiple of k, then Arya cannot determine x mod k\n # because for any two numbers x1 and x2, such that x1 % k != x2 % k, there will always\n # be a common ancient number with which they will have the same remainder\n ans = \"No\"\n break\n return ans\n\n# Read input\nn, k = map(int, input().split())\nancient\\_numbers = list(map(int, input().split()))\n\n# Call the function\nprint(has\\_winning\\_strategy(n, k, ancient\\_numbers))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "n, m = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nx = int(input())\n\n# Initialize a prefix sum array for a and b\nprefix_a = [0] + a[:]\nfor i in range(1, n+1):\n    prefix_a[i] += prefix_a[i-1]\n\nprefix_b = [0] + b[:]\nfor i in range(1, m+1):\n    prefix_b[i] += prefix_b[i-1]\n\n# Initialize result variables\nmax_area = 0\ncurrent_sum = 0\ncurrent_row = 0\n\n# Iterate over possible top-right corners of the subrectangle\nfor i in range(n, 0, -1):\n    # Calculate the sum of elements in the current row\n    row_sum = prefix_a[i] - prefix_a[current_row]\n    \n    # Binary search for the maximum j such that the sum of elements\n    # in the subrectangle with top-right corner (i, j) is at most x\n    left, right = 0, m\n    while left < right:\n        mid = (left + right) // 2\n        if prefix_b[mid] * row_sum > x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    j = right\n    \n    # Update the result variables\n    if j > 0:\n        current_sum = row_sum * prefix_b[j]\n        current_area = (i - current_row + 1) * (j + 1)\n        if current_sum <= x:\n            max_area = max(max_area, current_area)\n            current_row = i\n\n# Output the result\nprint(max_area)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "import math\n\ndef solve():\n    w, h, alpha = map(int, input().split())\n    alpha = math.radians(alpha)\n\n    # coordinates of the vertices of the first rectangle\n    x1, y1 = -w/2, -h/2\n    x2, y2 = w/2, h/2\n\n    # rotate the vertices of the first rectangle by angle alpha\n    x1_rot = x1 * math.cos(alpha) - y1 * math.sin(alpha)\n    y1_rot = x1 * math.sin(alpha) + y1 * math.cos(alpha)\n    x2_rot = x2 * math.cos(alpha) - y2 * math.sin(alpha)\n    y2_rot = x2 * math.sin(alpha) + y2 * math.cos(alpha)\n\n    # calculate the coordinates of the vertices of the second rectangle\n    x3 = -w/2 * math.cos(alpha) - h/2 * math.sin(alpha)\n    y3 = -w/2 * math.sin(alpha) + h/2 * math.cos(alpha)\n    x4 = w/2 * math.cos(alpha) - h/2 * math.sin(alpha)\n    y4 = w/2 * math.sin(alpha) + h/2 * math.cos(alpha)\n\n    # calculate the intersection area using cross product\n    area = abs(x1_rot * (y2_rot - y4) + x2_rot * (y3 - y2_rot) + x3 * (y1_rot - y3) + x4 * (y4 - y1_rot)) / 2\n\n    print(\"%.6f\" % area)\n\nif __name__ == '__main__':\n    solve()", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "def robot_walk():\n    a, b = map(int, input().split())\n    s = input()\n    x, y = 0, 0\n    dx, dy = { 'R': (1, 0), 'L': (-1, 0), 'U': (0, 1), 'D': (0, -1) }[s[0]]\n    while True:\n        if x == a and y == b:\n            print(\"Yes\")\n            return\n        if (x + dx, y + dy) == (a, b) or (x + dx, y + dy) == (a - dx, y - dy):\n            print(\"Yes\")\n            return\n        x, y = x + dx, y + dy", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "import sys\nfrom collections import deque\n\ninput = sys.stdin.readline\n\ndef solve():\n    N, K, Q = map(int, input().split())\n    A = list(map(int, input().split()))\n\n    # Initialize a deque to maintain the sliding window.\n    window = deque((x, i) for i, x in enumerate(A[:K]))\n    window = sorted(window, key=lambda x: x[0])\n\n    # Initialize the minimum and maximum values of X-Y.\n    x_y_min = 10**9 + 1\n    x_y_max = 0\n\n    # Perform the Q operations.\n    for _ in range(Q):\n        # Get the minimum and maximum values in the current window.\n        min_val, _ = window[0]\n        max_val, _ = window[-1]\n\n        # Update the minimum and maximum values of X-Y.\n        x_y_min = min(x_y_min, max_val - min_val)\n        x_y_max += max_val - min_val\n\n        # Remove the leftmost element in the window.\n        left, _ = window.popleft()\n\n        # Add the next element in the array to the window.\n        next_idx = i + 1\n        if next_idx < N:\n            next_val = A[next_idx]\n            window.append((next_val, next_idx))\n            window.sort(key=lambda x: x[0])\n\n        i += 1\n\n    # The minimum value of X-Y is the minimum of x_y_min and x_y_max - x_y_min.\n    print(min(x_", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "import math\n\ndef min_blocked_points(n):\n    size = 2*n + 1\n    blocked = 0\n    for i in range(1, math.ceil(size/2) + 1):\n        if i <= n:\n            blocked |= (1 << (i-1)) | (1 << (size - i))\n        if i <= n - 1:\n            blocked |= (1 << (size*(i-1) + i)) | (1 << (size*(i-1) + size - i))\n    return blocked.bit_count()\n\nn = int(input())\nprint(min_blocked_points(n))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "def min\\_time\\_to\\_bake(n, t, k, d):\nn\\_cakes\\_per\\_batch = k\nn\\_batches = n // k + (n % k != 0)\nt\\_with\\_one\\_oven = t * n\\_batches\nt\\_with\\_two\\_ovens = max(t, d) + (t + t * (n\\_batches - 2) + t % d) if n\\_batches > 2 else t\\_with\\_one\\_oven\nreturn \"YES\" if t\\_with\\_two\\_ovens < t\\_with\\_one\\_oven else \"NO\"\n\n# Reading input\nn, t, k, d = map(int, input().split())\n\n# Calculating minimum time needed\nresult = min\\_time\\_to\\_bake(n, t, k, d)\n\n# Printing the result\nprint(result)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "import sys\ninput = sys.stdin.buffer.readline\n\nmod = 1000000007\n\ndef f(n, A):\n    dp = [0] * (n + 1)\n    for i in range(n):\n        dp[i + 1] = max(dp[i + 1], dp[j] + 1 for j in range(i) if A[j] < A[i])\n    return sum(dp) * (n - 1) % mod\n\nN = int(input())\nA = list(map(int, input().split()))\nprint(f(N, A) * pow(N, mod - 2, mod) % mod)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "import sys\ninput = sys.stdin.readline\n\ndef min_trips(n, k, weights):\n    # Count the number of 50kg people\n    num_50 = sum(1 for w in weights if w == 50)\n\n    # If the total weight of all people exceeds the limit, return -1\n    if sum(weights) > k:\n        return -1, 0\n\n    # If the total weight is equal to the limit, and there are more than one people, return -1\n    if sum(weights) == k and num_50 > 1:\n        return -1, 0\n\n    # If the total weight is equal to the limit, and there is only one 50kg person, return 1\n    if sum(weights) == k and num_50 == 1:\n        return 1, 1\n\n    # If the total weight is less than the limit, and there are only 50kg people, return 1\n    if sum(weights) < k and num_50 == n:\n        return 1, 1\n\n    # If the total weight is less than the limit, and there are only 100kg people, return n/2\n    if sum(weights) < k and num_50 == 0:\n        return n//2, 1\n\n    # If the total weight is less than the limit, and there are both 50kg and 100kg people,\n    # we need to find the minimum number of trips to transport all the 100kg people first,\n    # then transport the 50kg people.\n    trips = n//2\n    while True:\n        if (k - 100*((n-num_50)//2)) < 0:\n            trips += 1\n        else:\n            break\n    return trips, 1\n\ndef count_ways(n, k, weights):\n    trips, _ = min_trips(n, k, weights)\n    if trips == -1:\n        return 0, 0\n    dp = [[0]*(10**5 + 1) for", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "def is_correct(s):\n    count = 0\n    for c in s:\n        if c == '(':\n            count += 1\n        else:\n            if count == 0:\n                return False\n            count -= 1\n    return count == 0\n\ndef can_fix(n, s):\n    if is_correct(s):\n        return False\n    for i in range(n):\n        if is_correct(s[:i] + s[i+1:]):\n            return True\n    return False\n\nn = int(input())\ns = input()\nif can_fix(n, s):\n    print(\"Yes\")\nelse:\n    print(\"No\")", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "def day_of_week_map(d):\n    return (\"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\", \"sunday\").index(d)\n\ndef solve():\n    day1 = input().strip().lower()", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "import sys\n\ndef solve():\n    n = int(sys.stdin.readline())\n    numbers = list(map(float, sys.stdin.readline().split()))\n    if n % 2 == 1:\n        numbers.append(0)\n    numbers += numbers[:n]\n    numbers.sort()\n    sum1 = sum(numbers[:2*n])\n    sum2 = sum(numbers[-2*n:])\n    diff = abs(sum1 - sum2)\n    for i in range(n):\n        sum1 -= numbers[i]\n        sum2 += numbers[i]\n        numbers[i] = int(numbers[i])\n        sum1 += numbers[i]\n        sum2 -= numbers[i]\n        new_diff = abs(sum1 - sum2)\n        if new_diff < diff:\n            diff = new_diff\n    print(diff)\n\nsolve()", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "import networkx as nx\n\ndef max\\_profit():\nn, m = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nedges = [list(map(int, input().split())) for _ in range(m)]\n\nG = nx.Graph()\nfor u, v in edges:\nG.add\\_edge(u, v)\n\ntotal\\_cost = sum(a)\nmax\\_profit = -total\\_cost # initialize with the minimum possible value\n\n# iterate over all vertices\nfor v in range(1, n+1):\nG\\_v = G.copy() # create a copy of the graph\nG\\_v.remove\\_node(v) # delete vertex v\n\n# calculate the sum of B\\_i for all connected components\nscores = [sum(b[cc] for cc in c) for c in nx.connected\\_components(G\\_v)]\n\n# calculate the profit\nprofit = sum(abs(s) for s in scores) - a[v-1]\n\n# update the maximum profit\nmax\\_profit = max(max\\_profit, profit)\n\nprint(max\\_profit)\n\nif **name** == '**main**':\nmax\\_profit()", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "import sys\nfrom collections import defaultdict\n\ndef min\\_time\\_needed():\n    n, m = map(int, input().strip().split())\n    adj\\_list = [[] for _ in range(n + 1)]\n    in\\_degree = [0] * (n + 1)\n    candy = defaultdict(int)\n    for _ in range(m):\n        a, b = map(int, input().strip().split())\n        adj\\_list[a].append(b)\n        in\\_degree[b] += 1\n        candy[b] += 1\n\n    queue = [i for i in range(1, n + 1) if in\\_degree[i] == 0]\n    time = [0] * (n + 1)\n\n    while queue:\n        node = queue.pop(0)\n        for neighbor in adj\\_list[node]:\n            in\\_degree[neighbor] -= 1\n            time[neighbor] = max(time[neighbor], time[node] + 1)\n            if in\\_degree[neighbor] == 0:\n                queue.append(neighbor)\n\n    for i in range(1, n + 1):\n        print(time[i] + candy[i], end=\" \")\n    print()\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for _ in range(t):\n        min\\_time\\_needed()", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "def split_string(s):\n    # If the string length is odd, split it into two parts of different size\n    if len(s) % 2 != 0:\n        return (s[:len(s)//2], s[len(s)//2+1:])\n    return (s[:len(s)//2], s[len(s)//2:])\n\ndef are_strings_equivalent(a, b):\n    # If strings are equal, they are equivalent\n    if a == b:\n        return True\n    # Split strings into two halves\n    a1, a2 = split_string(a)\n    b1, b2 = split_string(b)\n    # Check if strings can be rearranged to be equivalent\n    return (are_strings_equivalent(a1, b1) and are_strings_equivalent(a2, b2)) or (are_strings_equivalent(a1, b2) and are_strings_equivalent(a2, b1))\n\n# Read input strings\nstring1 = input()\nstring2 = input()\n# Check if strings are equivalent and print the result\nif are_strings_equivalent(string1, string2):\n    print(\"YES\")\nelse:\n    print(\"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "def hanoi\\_min\\_cost(t, n):\ncosts = [[0 for _ in range(3)] for _ in range(n)]\ncosts[0] = [t[0][1], t[0][2], 0]\n\nfor i in range(1, n):\nfor j in range(3):\ncosts[i][j] = min(costs[i-1][k] + t[k][j] for k in range(3) if k != j)\n\nreturn costs[n-1][2]\n\nif **name** == '**main**':\nt = [[0, 1, 1], [1, 0, 1], [1, 1, 0]]\nn = 3\nprint(hanoi\\_min\\_cost(t, n))\n\nt = [[0, 2, 2], [1, 0, 100], [1, 2, 0]]\nn = 3\nprint(hanoi\\_min\\_cost(t, n))\n\nt = [[0, 2, 1], [1, 0, 100], [1, 2, 0]]\nn = 5\nprint(hanoi\\_min\\_cost(t, n))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "MOD = 998244353\n\ndef inv(x):\n    return pow(x, MOD - 2, MOD)\n\ndef solve(n):\n    dp = [[0, 0] for _ in range(n + 1)]\n    dp[0][0] = dp[0][1] = 1\n    for i in range(1, n + 1):\n        dp[i][0] = (dp[i - 1][0] + dp[i - 1][1]) % MOD\n        for j in range(1, i + 1):\n            dp[i][1] = (dp[i][1] + dp[i - j - 1][0] + dp[i - j - 1][1]) % MOD\n    return dp[n][0] * inv(2) % MOD\n\nn = int(input())\nfor i in range(1, n + 1):\n    print(solve(i))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "import math\n\ndef min_positive_x(a, b):\n    if b % 2 == 1 or a % 2 == 1:\n        return -1\n    x = b / (2 * (a // 2 - 1))\n    return x if x > 0 else -1\n\nif __name__ == \"__main__\":\n    a, b = map(int, input().split())\n    result = min_positive_x(a, b)\n    print(\"{:.15f}\".format(result))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "mod = 10**9 + 7\nN, ca, cb, ca_ba, cbb = map(str, input().split())\nN = int(N)\n\n# Initialize the table with the base case\ndp = [[0, 0] for _ in range(N+1)]\ndp[2] = [1, 1]\n\n# Iterate over the string length\nfor i in range(2, N+1):\n    # Calculate the new table entries\n    dp[i][0] = (dp[i-1][0] + dp[i-2][1] if i >= 2 else 0) % mod\n    dp[i][1] = (dp[i-1][1] + dp[i-2][0] if i >= 2 else 0) % mod\n\n    # If the current character is A, update the table based on ca and ca_ba\n    if i >= 3 and s[i-3] == 'A':\n        dp[i][0] = (dp[i][0] + dp[i-3][1] * (ord(ca) - ord('A')) % mod) % mod\n        dp[i][1] = (dp[i][1] + dp[i-3][0] * (ord(ca_ba) - ord('A')) % mod) % mod\n\n    # If the current character is B, update the table based on cb and cbb\n    if i >= 3 and s[i-3] == 'B':\n        dp[i][0] = (dp[i][0] + dp[i-3][1] * (ord(cb) - ord('A')) % mod) % mod\n        dp[i][1] = (dp[i][1] + dp[i-3][0] * (ord(cbb) - ord('A')) % mod) % mod\n\n# The answer is the sum of the last row\nprint((dp[N][0] + dp[N][1]) % mod)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "def can_unentangle(seq):\n    # Count the number of times the '+' wire goes under the '-' wire\n    under = 0\n    for i in range(1, len(seq)):\n        if seq[i] == '-' and seq[i-1] == '+':\n            under += 1\n    \n    # If the number of times the '+' wire goes under is odd, then it's impossible to unentangle the wires\n    if under % 2 != 0:\n        return \"No\"\n    \n    # If the number of times the '+' wire goes under is even, then it's possible to unentangle the wires\n    return \"Yes\"\n\n# Test cases\nprint(can_unentangle(\"-++-\"))  # Yes\nprint(can_unentangle(\"+-\"))    # No\nprint(can_unentangle(\"++\"))    # Yes\nprint(can_unentangle(\"-\"))     # No", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "def min_operations(x, y, m):\n    if x >= m or y >= m:\n        return 0\n    operations = 0\n    while x < 0 or y < 0:\n        if x <= y:\n            x += y\n            y = abs(x - y)\n            operations += 1\n        else:\n            y += x\n            x = abs(x - y)\n            operations += 1\n    return (m - x - y) // (x + y) + operations\n\nif __name__ == \"__main__\":\n    x, y, m = map(int, input().split())\n    result = min_operations(x, y, m)\n    if result < 0:\n        print(\"-1\")\n    else:\n        print(result)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "def solve(n, l, r):\n    nums = [n]\n    while True:\n        new\\_nums = []\n        for x in nums:\n            if x <= 1:\n                new\\_nums.append(x)\n            else:\n                new\\_nums.append(x % 2)\n                new\\_nums.append(x // 2)\n        nums = new\\_nums\n        if len(nums) == len(set(nums)):\n            break\n    return sum(num[l-1:r] == 1 for num in ([int(i=='1') for i in bin(x)[2:]] for x in nums))\n\n# Test cases\nprint(solve(7, 2, 5))  # 4\nprint(solve(10, 3, 10))  # 5", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "import sys\nfrom collections import deque\n\ndef min_turn_to_diamond(n, m, grid):\n    # Find the shortest path using BFS\n    q = deque([(1, 1, 0)])\n    visited = set()\n    while q:\n        x, y, steps = q.popleft()\n        if x == n and y == m:\n            return steps\n        if (x, y) in visited:\n            continue\n        visited.add((x, y))\n        for dx, dy in ((1, 0), (0, 1)):\n            nx, ny = x + dx, y + dy\n            if 0 < nx <= n and 0 < ny <= m and grid[nx - 1][ny - 1] == '.':\n                q.append((nx, ny, steps + 1))\n\n    # If no path is found, return 0\n    return 0\n\ndef main():\n    n, m = map(int, input().split())\n    grid = [input() for _ in range(n)]\n    # Calculate the minimum number of cells to turn into impassable forests\n    num_to_turn = min_turn_to_diamond(n, m, grid) - n * m + 1\n    # Print the result\n    print(num_to_turn)\n\nif __name__ == '__main__':\n    main()", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "import sys\ninput = sys.stdin.readline\n\nMOD = 1000000007\n\nN = int(input().strip())\nS = input().strip()\n\ndp = [[0, 0, 0] for _ in range(N)] # dp[i][j]: number of distinct strings ending with j (j: 0(A), 1(B), 2(C)) after i operations\ndp[0][ord(S[0]) - ord('A')] = 1\n\nfor i in range(1, N):\n    if i == 1:\n        dp[i][(ord(S[i]) - ord('A')) % 3] += 1\n        dp[i][(ord(S[i]) - ord('A')) % 3 + 1] += 1\n    else:\n        dp[i][ord(S[i]) - ord('A')] = dp[i-1][(ord(S[i]) - ord('A')) % 3]\n        dp[i][(ord(S[i]) - ord('A')) % 3 + 1] = max(dp[i-1][(ord(S[i]) - ord('A')) % 3], dp[i-1][(ord(S[i]) - ord('A')) % 3 + 1]) + 1\n        dp[i][(ord(S[i]) - ord('A')) % 3 - 1] = max(dp[i-1][(ord(S[i]) - ord('A')) % 3 - 1], dp[i-1][(ord(S[i]) - ord('A')) % 3])\n\nprint(sum(dp[-1]) % MOD)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "import sys\nfrom functools import lru_cache\nmod = 10**9 + 7\n\ndef solve(N, M, l, r, x):\n    @lru_cache(maxsize=None)\n    def dp(i, prev_color):\n        if i == N + 1:\n            return 1\n        if i in r:\n            if dp(i + 1, prev_color).count(x[r.index(i)]) == x[r.index(i)]:\n                return dp(i + 1, prev_color)\n            else:\n                return 0\n        res = 0\n        for color in range(1, 4):\n            if color != prev_color:\n                res += dp(i + 1, color)\n                res %= mod\n        return res\n\n    return dp(1, 0)\n\ndef main():\n    N, M = map(int, sys.stdin.readline().strip().split())\n    l, r, x = [], [], []\n    for _ in range(M):\n        t = list(map(int, sys.stdin.readline().strip().split()))\n        l.append(t[0])\n        r.append(t[1])\n        x.append(t[2])\n    print(solve(N, M, l, r, x))\n\nif __name__ == '__main__':\n    main()", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "def max_smallest_piece(n, m, k):\n    if k >= n*m or k%2 == 0 or (n*m-k)%2 == 1:\n        return -1\n    return (n*m - k) ** 2 // (4*k)\n\nif __name__ == '__main__':\n    n, m, k = map(int, input().split())\n    print(max_smallest_piece(n, m, k))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "def min\\_possible\\_letters(a, b, l, r):\na -= 1\nb -= 1\n\n# Create a list to store the number of occurrences of each letter\ncount = [0] \\* 26\n\n# Initialize the first a letters\nfor i in range(a):\ncount[ord(chr(i + ord('a')))] = 1\n\n# Calculate the number of times each letter is added by Mister B\nadd\\_b = [0] \\* 26\nfor i in range(b):\nadd\\_b[ord(chr(i + ord('a')))] += 1\n\n# Calculate the number of times each letter is added by the opponent\nadd\\_a = [0] \\* 26\nfor i in range(a):\nadd\\_a[ord(chr(i + ord('a')))] += 1\n\n# Calculate the minimum number of different letters in the segment\nres = a\nfor i in range(l - 1, r):\nlast = (i - 1) % a\ncur = i % a\n\n# Add the number of occurrences of the current letter by Mister B\ncount[ord(chr(cur + ord('a')))] += add\\_b[ord(chr(cur + ord('a')))]\n\n# Subtract the number of occurrences of the current letter by the opponent\ncount[ord(chr(last + ord('a')))] -= add\\_a[ord(chr(last + ord('a')))]\n\n# Update the minimum number of different letters\nres = min(res, sum(count))\n\nreturn res", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "n = int(input().strip())\nsizes = []\nfor _ in range(n):\n    k, a = map(int, input().strip().split())\n    sizes.append((k, a))\n\nsizes.sort(key=lambda x: x[0])\n\ncurr\\_size = 0\nfor k, a in sizes:\n    if 2**k <= curr\\_size:\n        continue\n    else:\n        curr\\_size = 2**(k+1) - 1\n\nprint(sizes[-1][0] + 1)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "import sys\n\ndef f(b, n):\n    if n < b:\n        return n\n    else:\n        return f(b, n // b) + (n % b)\n\ndef find_b(n, s):\n    for b in range(2, min(n, s) + 1):\n        if s == f(b, n):\n            return b\n    return -1\n\nif __name__ == \"__main__\":\n    n = int(sys.stdin.readline())\n    s = int(sys.stdin.readline())\n    result = find_b(n, s)\n    print(result)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\n\n# Check if it's possible to place targets\nfor i in range(n):\n    if a[i] > (n - i):\n        print(-1)\n        exit()\n\n# Initialize the grid\ngrid = [[0] * (n + 1) for _ in range(n + 1)]\n\n# Place targets in the grid\nfor i in range(n - 1, -1, -1):\n    for j in range(1, n + 1):\n        if a[i] > 0:\n            grid[j][i + 1] = 1\n            a[i] -= 1\n\n# Find the rows with 2 targets\nrows_with_2 = [i for i in range(1, n + 1) if sum(grid[i]) == 2]\n\n# Place remaining targets\nfor i in range(1, n + 1):\n    if sum(grid[i]) == 0:\n        if len(rows_with_2) > 0:\n            r = rows_with_2.pop()\n            grid[r][i] = 1\n        else:\n            grid[1][i] = 1\n\n# Print the result\nprint(sum([sum(row) for row in grid]))\nfor i in range(1, n + 1):\n    for j in range(1, n + 1):\n        if grid[i][j] == 1:\n            print(i, j)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "def min_changes(format, time):\n    h, m = map(int, time.split(':'))\n    if format == 12:\n        if 1 <= h <= 9:\n            h = 1 if h == 9 else (h % 10) + 1\n        elif 10 <= h <= 12:\n            h = 10 if h == 12 else (h % 10)\n        else:\n            h = (h // 10) % 6 + 1\n\n        if m >= 40:\n            m = (m // 10) % 6 * 10 + 0\n        else:\n            m = (m // 10) % 6 * 10 + 5\n    elif format == 24:\n        if h >= 20 or (h == 1 and m >= 40):\n            h = (h // 10) % 6 * 10 + (h % 10)\n        else:\n            h = (h // 10) % 6 * 10 + (h % 10) + 2\n\n        m = (m // 10) % 6 * 10 + (m % 10)\n\n    return f\"{h:02d}:{m:02d}\"\n\nformat = int(input())\ntime = input()\n\nresult = min_changes(format, time)\nprint(result)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "def eat\\_as\\_many\\_bowls\\_as\\_possible(n, T, t):\nt = [0] + t\ndp = [0] * (n + 1)\nfor i in range(1, n + 1):\ndp[i] = max(dp[i - 1], dp[max(0, i - t[i])] + 1)\nreturn dp[n]\n\nn, T = map(int, input().split())\nt = list(map(int, input().split()))\nprint(eat\\_as\\_many\\_bowls\\_as\\_possible(n, T, t))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "import sys\n\ndef win():\n    s = input()\n    a, b = 0, 1\n    while b < len(s):\n        if s[a] == s[b]:\n            return \"Second\" if b-a > 1 else \"First\"\n        a, b = a+1, b+1\n    return \"First\"\n\nprint(win())", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "n, m = map(int, input().split())\n\n# The maximum number of chessmen that can be placed\nmax_chessmen = (min(n, m) // 3) * 2\n\nprint(max_chessmen)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "from math import ceil, sqrt\n\ndef min\\_time(n, l, v1, v2, k):\n\t# Time for all pupils to go by bus\n\tt\\_bus = l / v2\n\n\t# Time for all pupils to go by foot\n\tt\\_walk = l / v1\n\n\t# Number of bus rides needed\n\tnum\\_bus\\_rides = ceil(n / k)\n\n\t# Total time for all bus rides\n\tt\\_total\\_bus = num\\_bus\\_rides * t\\_bus\n\n\t# Time for the last pupils in the last ride\n\tt\\_last\\_bus\\_ride = (n % k) * l / v2\n\n\t# Time for the rest of the pupils in the last ride\n\tt\\_rest\\_last\\_bus\\_ride = (k - (n % k)) * t\\_walk\n\n\t# Total time\n\tt\\_total = t\\_total_bus + t\\_last\\_bus\\_ride + t\\_rest\\_last\\_bus\\_ride\n\n\treturn t\\_total\n\n# Read input\nn, l, v1, v2, k = map(int, input().split())\n\n# Print result\nprint(\"{:.12f}\".format(min\\_time(n, l, v1, v2, k)))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "import sys\ninput = sys.stdin.readline\n\nmod = 1000000007\n\ndef power(x, y):\n    res = 1\n    while y > 0:\n        if y % 2:\n            res = (res * x) % mod\n            y -= 1\n        x = (x * x) % mod\n        y //= 2\n    return res\n\nn = int(input().strip())\n\nprint((power(2, n * n) - power(2, n) - n + 1) % mod)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "n = int(input().strip())\nstreet = []\nfor _ in range(n):\n    s, g = map(int, input().strip().split())\n    street.append((s, g))\n\ns_i, g_i = zip(*street)\ns_i = list(s_i)\ng_i = list(g_i)\n\n# Initialize result\nres = 0\nfor i in range(n):\n    res += g_i[i]\n\n# Initialize road width\ns_i[0] += 1\ns_i[-1] -= 1\nfor i in range(1, n):\n    s_i[i] = s_i[i-1]\n\n# Adjust road width\nfor i in range(1, n-1):\n    if s_i[i] < min(s_i[i-1], s_i[i+1]) - 1:\n        s_i[i] = min(s_i[i-1], s_i[i+1]) - 1\n        res -= g_i[i]\n\n# Check if solution exists\nif min(s_i[0], s_i[1]) != s_i[0] or max(s_i[-2], s_i[-1]) != s_i[-1]:\n    print(-1)\nelse:\n    print(res)\n    print(*s_i)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "3\nimport sys\ninput = sys.stdin.readline\n\ndef max\\_profit():\n    n, m = map(int, input().split())\n    l = list(map(int, input().split()))\n    s = list(map(int, input().split()))\n    c = list(map(int, input().split())) + [0] * (n + 1)\n\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        dp[i][0] = max(dp[i - 1][j] for j in range(n + 1))\n    for i in range(1, n + 1):\n        for j in range(1, min(l[i - 1] + 1, m) + 1):\n            dp[j][i] = max(dp[j][i - 1], dp[j - 1][i - 1] + s[i - 1] + c[j])\n        for j in range(min(l[i - 1] + 1, m) + 1, m + 1):\n            dp[j][i] = dp[j][i - 1]\n\n    return max(dp[m])\n\nprint(max\\_profit())", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "n = int(input().strip())\nnums = list(map(int, input().strip().split()))\n\n# sort the numbers in increasing order\nnums.sort()\n\n# initialize the maximum size of the beautiful rectangle\nmax_size = 0\n\n# try all possible sizes from 1 to sqrt(n)\nfor size in range(1, int(n ** 0.5) + 1):\n    # check if the size is valid\n    if n % size != 0:\n        continue\n    \n    # calculate the number of rows and columns\n    rows = size", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "n = int(input())\nbids = list(map(int, input().split()))\n\n# Find the minimum and maximum bids\nmin_bid = min(bids)\nmax_bid = max(bids)\n\n# If the maximum bid is more than twice the minimum bid,\n# then it's impossible to make all bids equal.\nif max_bid > 2 * min_bid:\n    print(\"No\")\nelse:\n    # If all bids are equal, then they are already equal.\n    if max_bid == min_bid:\n        print(\"Yes\")\n    else:\n        # If the maximum bid is exactly twice the minimum bid,\n        # then it's possible to make all bids equal if and only if\n        # all bids are either the minimum bid or the maximum bid.\n        if max_bid == 2 * min_bid:\n            if bids.count(min_bid) + bids.count(max_bid) == n:\n                print(\"Yes\")\n            else:\n                print(\"No\")\n        else:\n            # In this case, the maximum bid must be exactly three times\n            # the minimum bid. We can check if it's possible to make all\n            # bids equal by counting the number of bids that are equal\n            # to the minimum bid and the number of bids that are equal\n            # to the maximum bid.\n            if bids.count(min_bid) + bids.count(max_bid) == n:\n                print(\"Yes\")\n            else:\n                print(\"No\")", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "def find\\_lucky\\_permutation(n):\nif n == 1:\nreturn [0]\nif n % 2 == 0:\nreturn -1\n\na = [0] \\* n\na[0], a[1] = 0, 1\nfor i in range(2, n, 2):\na[i], a[i + 1] = i + 1, i\n\nb = [0] \\* n\nfor i in range(n):\nb[i] = (a[i] + i) % n\n\nc = [0] \\* n\nfor i in range(n):\nc[i] = (2 \\* b[i]) % n\n\nreturn a, b, c\n\nn = int(input())\nresult = find\\_lucky\\_permutation(n)\n\nif result == -1:\nprint(-1)\nelse:\nfor perm in result:\nprint(' '.join(map(str, perm)))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "def count_rectangles(a, s):\n    n = len(s)\n    # Initialize the matrix b with zeros\n    b = [[0]*n for _ in range(n)]\n    for i in range(n):\n        for j in range(i, n):\n            b[i][j] = int(s[i]) * int(s[j])\n\n    # Initialize the count of rectangles with zeros\n    count = 0\n    # Iterate over all possible rectangles\n    for i in range(n):\n        for j in range(i, n):\n            for x in range(i, n):\n                for y in range(j, n):\n                    # If the sum of the rectangle equals a, increment the count\n                    if sum(b[i][j]) == a:\n                        count += 1\n    return count\n\n# Read input\na = int(input())\ns = input()\n\n# Print the output\nprint(count_rectangles(a, s))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "import sys\nfrom math import comb\n\ndef expected\\_max\\_dots(m, n):\nsum\\_of\\_expectations = 0\nfor i in range(1, m + 1):\nsum\\_of\\_expectations += i * (comb(n, n - i + 1) / comb(n + m - 1, m - 1))\nreturn sum\\_of\\_expectations\n\nif __name__ == '__main__':\ninput\\_line = input().strip().split()\nm, n = int(input\\_line[0]), int(input\\_line[1])\nresult = expected\\_max\\_dots(m, n)\nprint(\"{0:.12f}\".format(result))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "n = int(input())\ncoins = list(map(int, input().split()))\n\n# Check if the game can be finished\nif max(coins) > sum(coins) // n:\n    print(-1)\nelse:\n    # Calculate the minimum number of moves\n    moves = 0\n    while sum(coins) > 0:\n        moves += 1\n        new_coins = [0] * n\n        for i in range(n):\n            if i + 1 < n:\n                new_coins[i] = max(coins[i], coins[i+1], coins[i+2]) - coins[i]\n            else:\n                new_coins[i] = max(coins[i], coins[i+1]) - coins[i]\n        coins = new_coins\n    print(moves)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "import sys\nfrom collections import deque\n\ndef apply_permutation(perm, q):\n    return [perm[q[i] - 1] for i in range(len(perm))]", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "import math\n\ndef solve():\n    m = int(input())\n    max_blocks = 0\n    max_volume = 0\n    for i in range(1, int(math.sqrt(m)) + 1):\n        volume = i ** 3\n        blocks = 1\n        while volume <= m:\n            blocks += 1\n            volume += i ** 3\n        if blocks > max_blocks:\n            max_blocks = blocks\n            max_volume = volume\n    print(max_blocks, max_volume)\n\nsolve()", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "import sys\ninput = sys.stdin.readline\n\ndef power(x, y, p):\n    res = 1\n    x = x % p\n    while y > 0:\n        if y & 1:\n            res = (res * x) % p\n        y = y >> 1\n        x = (x * x) % p\n    return res\n\ndef solve(p, k):\n    if k == 0:\n        if p == 1:\n            return 1\n        else:\n            return 0\n    else:\n        return power(k, p - 1, p) * (p - 1) % (10**9 + 7)\n\np, k = map(int, input().strip().split())\nprint(solve(p, k))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "def min\\_elements\\_to\\_purchase():\nn, m, q = map(int, input().split())\nelements = set()\nfor _ in range(q):\nr, c = map(int, input().split())\nelements.add((r, c))\n\n# Add elements in the first row\nfor c in range(1, m + 1):\nif (1, c) not in elements:\nelements.add((1, c))\nq += 1\n\n# Add elements in the last column\nfor r in range(2, n + 1):\nif (r, m) not in elements:\nelements.add((r, m))\nq += 1\n\n# Add elements in the first column\nfor r in range(2, n + 1):\nif (r, 1) not in elements:\nelements.add((r, 1))\nq += 1\n\n# Check if all elements are available\nif len(elements) == n * m:\nprint(0)\nreturn\n\n# Add remaining elements\nfor r in range(2, n + 1):\nfor c in range(2, m + 1):\nif (r, c) not in elements:\nq += 1\n\nprint(q)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "def min_bitcoins_to_win():\n    hp_y, atk_y, def_y = map(int, input().split())\n    hp_m, atk_m, def_m = map(int, input().split())\n    h, a, d = map(int, input().split())\n\n    # Increase HP of Master Yang until he is strong enough to survive one attack from the monster\n    while (hp_m > 0 and atk_m > def_y) or (hp_m > def_y and atk_m >= def_y):\n        hp_y += 1\n        cost = h + (a if atk_m > def_y else 0) + (d if atk_m == def_y else 0)\n        if hp_y * h > cost * hp_m:\n            break\n\n    print(cost * hp_m)\n\nmin_bitcoins_to_win()", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "import collections\n\ndef dfs(i, j, grid, visited, val):\n    if i < 0 or i >= n or j < 0 or j >= m or visited[i][j] or grid[i][j] != val:\n        return\n    visited[i][j] = True\n    dfs(i+1, j, grid, visited, val)\n    dfs(i-1, j, grid, visited, val)\n    dfs(i, j+1, grid, visited, val)\n    dfs(i, j-1, grid, visited, val)\n\nn, m, k = map(int, input().split())\ngrid = [list(map(int, input().split())) for _ in range(n)]\n\n# find connected components\nvisited = [[False]*m for _ in range(n)]\ncomponents = []\nfor i in range(n):\n    for j in range(m):\n        if not visited[i][j]:\n            component = []\n            dfs(i, j, grid, visited, grid[i][j])\n            component.append((i, j))\n            for x, y in component:\n                visited[x][y] = len(components) + 1\n            components.append(component)\n\n# check if it is possible to make all connected components of the same values form rectangles\nfor i in range(len(components)):\n    for j in range(i+1, len(components)):\n        if grid[components[i][0][0]][components[i][0][1]] == grid[components[j][0][0]][components[j][0][1]]:", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "import sys\nfrom collections import defaultdict\n\ninput = sys.stdin.readline\n\ndef min\\_cost():\n    n, m, k = map(int, input().split())\n    flights = defaultdict(list)\n    for _ in range(m):\n        d, f, t, c = map(int, input().split())\n        flights[f].append((d, t, c))\n        flights[t].append((d, f, -c))\n    @lru\\_cache(maxsize=None)\n    def dp(day, city, prev\\_city):\n        if day > k:\n            return float('inf')\n        if day == k and city == 0:\n            return 0\n        res = float('inf')\n        for d, ncity, cost in flights[city]:\n            if ncity == prev\\_city:\n                continue\n            res = min(res, dp(d, ncity, city) + cost)\n        return res\n    return dp(1, 0, -1)\n\nprint(min\\_cost())", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\n# Sort bottles by remaining amount of soda in ascending order\nsorted_bottles = sorted((a[i], b[i]) for i in range(n))\n\n# Initialize variables to keep track of the minimum number of bottles and time taken\nk, t = 1, 0\n\n# Pour soda from one bottle to another until the current bottle is full\nfor i in range(n - 1):\n    if sorted_bottles[i][0] + sorted_bottles[i + 1][0] <= sorted_bottles[i + 1][1]:\n        sorted_bottles[i + 1] = (sorted_bottles[i][0] + sorted_bottles[i + 1][0], sorted_bottles[i + 1][1])\n        sorted_bottles[i] = (0, sorted_bottles[i][1])\n        k += 1\n    else:\n        t += sorted_bottles[i][0]\n        sorted_bottles[i] = (0, sorted_bottles[i][1])\n\n# Pour the remaining soda in the last bottle\nt += sorted_bottles[-1][0]\n\n# Print the minimum number of bottles and time taken\nprint(k, t)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "def sum_of_digits(n):\n    return sum(int(digit) for digit in str(n))\n\ndef largest_sum_of_digits(n):\n    largest_sum, current_sum = 0, 0\n    for a in range(n + 1):\n        b = n - a\n        current_sum = sum_of_digits(a) + sum_of_digits(b)\n        largest_sum = max(largest_sum, current_sum)\n    return largest_sum\n\n# Test the function\nprint(largest_sum_of_digits(35))  # Output: 17\nprint(largest_sum_of_digits(10000000000))  # Output: 91", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "n = int(input())\np = list(map(int, input().split()))\n\n# Initialize the result with the number of pairs of adjacent bulbs\n# with different parity in the given garland\nresult = sum(p[i] % 2 != p[i-1] % 2 for i in range(1, n) if p[i-1] != 0 and p[i] != 0)\n\n# Try to place the removed bulbs in the positions with the same parity\n# as the previous bulb\nfor i in range(n):\n    if p[i] == 0:\n        if i % 2 == 0:\n            # If the current position has even index, then look for\n            # the nearest removed bulb on the left\n            j = i - 1\n            while j >= 0 and p[j] == 0:\n                j -= 1\n            if j >= 0 and p[j] % 2 == 0:\n                # If the nearest removed bulb on the left has the same\n                # parity as the previous bulb, then place it in the\n                # current position\n                p[i] = p[j]\n                p[j] = 0\n                if i < n - 1 and p[i] % 2 != p[i+1] % 2:\n                    # If the complexity changes, then update the result\n                    result -= 1\n        else:\n            # If the current position has odd index, then look for\n            # the nearest removed bulb on the right\n            j = i + 1\n            while j < n and p[j] == 0:\n                j += 1\n            if j < n and p[j] % 2 == 1:\n                # If the nearest removed bulb on the right has the same\n                # parity as the previous bulb, then place it in the\n                # current position\n                p[i] = p[j]\n                p[j] = 0\n                if i >= 1 and p[i] % 2 != p[i-1]", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "def count_pairs(n, k):\n    # Initialize the result to 0\n    result = 0\n\n    # Iterate from 1 to n\n    for i in range(1, n + 1):\n        # If the difference between k and i is positive and\n        # can be represented as a difference of two numbers\n        if k - i > 0 and (k - i) % i == 0:\n            # Increment the result by 1\n            result += 1\n\n    # Return the result\n    return result\n\n# Read the input values of n and k\nn, k = map(int, input().split())\n\n# Print the result\nprint(count_pairs(n, k))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "import re\n\ndef find_pattern(n, files, to_delete):\n    # create a set of deleted files\n    deleted_files = set(files[i-1] for i in to_delete)\n    \n    # try all possible patterns\n    for pattern in deleted_files:\n        # check if the pattern matches all deleted files and no non-deleted files\n        if len(deleted_files) == len(set.intersection(deleted_files, {fn for fn in files if re.fullmatch(pattern, fn)})) and \\\n           len(files) - len(to_delete) == len(set.intersection({fn for fn in files if fn not in deleted_files}, {fn for fn in files if re.fullmatch(pattern, fn)})):\n            return \"Yes\\n\" + pattern\n            \n    return \"No\"\n\n# read input\nn, m = map(int, input().split())\nfiles = [input() for _ in range(n)]\nto_delete = list(map(int, input().split()))\n\n# find pattern\nprint(find_pattern(n, files, to_delete))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "n = int(input())\nM = [list(map(int, input().split())) for _ in range(n)]\n\na = [0] * n\nfor i in range(n):\n    for j in range(n):\n        if i != j:\n            a[i] = a[i] * a[j] // M[i][j] if a[i] != 0 else M[i][j]\n\nfor i in range(n):\n    print(a[i], end=\" \")\nprint()", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "import collections\n\ndef solve():\n    n, m = map(int, input().split())\n    edges = collections.defaultdict(set)\n    for _ in range(m):\n        u, v = map(int, input().split())\n        edges[u - 1].add(v - 1)\n        edges[v - 1].add(u - 1)\n    cur = 0\n    res = []\n    while cur < n - 1:\n        res.append(cur + 1)\n        new = set()\n        for x in edges[cur]:\n            new.update(edges[x])\n            new.discard(cur)\n        new.add(cur)\n        cur = max(new)\n    print(len(res))\n    print(*res)\n\nsolve()", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "def solve(p, k):\n    if p >= k:\n        return -1, []\n    d = 1\n    while (k ** d - k ** (d - 1)) <= p:\n        d += 1\n    p -= (k ** (d - 1))\n    result = [0] * d\n    result[-1] = p\n    for i in range(d - 2, -1, -1):\n        result[i] = min(result[i + 1] * k + p, k - 1)\n        p = result[i + 1] - result[i] // k\n    return d, result\n\nif __name__ == '__main__':\n    p, k = map(int, input().split())\n    d, result = solve(p, k)\n    if d == -1:\n        print(-1)\n    else:\n        print(d)\n        print(*result)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "def solve\\_rebus(rebus):\nn = int(rebus.split(\"=\")[1])\nops = rebus.split(\"=\")[0].split(\"+\") + rebus.split(\"=\")[0].split(\"-\")\nvalues = set(range(1, n+1))\n\nfor value in values:\nvalues -= set([value])\nif not consistent\\_subset(ops, values, n - value):\nreturn \"Impossible\"\nreturn \"Possible\\n\" + \" + \".join(str(x) for x in ([n] + list(values))) + \" = \" + str(n)\n\ndef consistent\\_subset(ops, values, target):\nif not ops:\nreturn target == 0\nif len(ops) == 1:\nop = ops[0]\nif op == \"+\":\nreturn target in values\nif op == \"-\":\nreturn target == values.pop()\nleft\\_ops, right\\_ops = split\\_ops(ops)\nleft\\_values = values.copy()\nif not consistent\\_subset(left\\_ops, left\\_values, target):\nreturn False\nreturn consistent\\_subset(right\\_ops, values, target - sum(left\\_values))\n\ndef split\\_ops(ops):\nfor i in range(1, len(ops)):\nif ops[i] in {\"+\", \"-\"}:\nreturn ops[:i], ops[i:]\nreturn ops, []\n\nrebus = input()\nprint(solve\\_rebus(rebus))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "import bisect\n\ndef solve():\n    n = int(input())\n    p = list(map(float, input().split()))\n\n    # Sort the probabilities in non-increasing order\n    p.sort(reverse=True)\n\n    # Initialize the answer as the probability of the most reliable friend\n    ans = p[0]\n\n    # Calculate the probability of getting exactly one problem from the first two friends\n    if n >= 2:\n        ans = ans * (1 - p[1]) + p[1]\n\n    # Calculate the probability of getting exactly one problem from any two adjacent friends\n    for i in range(2, n):\n        ans = max(ans, p[i] * (1 - p[i-1]), p[i-1] * (1 - p[i]))\n\n    # Print the answer with the required precision\n    print(f\"{ans:.12f}\")\n\n# Run the solve function\nsolve()", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "import sys\ninput = sys.stdin.readline\n\ndef power(x, n, mod):\n    result = 1\n    while n > 0:\n        if n % 2:\n            result = (result * x) % mod\n            n -= 1\n        else:\n            x = (x * x) % mod\n            n //= 2\n    return result % mod\n\ndef solve(N, K, mod):\n    if N == 1:\n        return K\n    if N % 2 == 0:\n        half = N // 2\n        return (power(K, half, mod) * (K + 1)) % mod\n    else:\n        half = (N - 1) // 2\n        return (power(K, half, mod) * (K + 1) - power(K, half + 1, mod) + mod) % mod\n\nN, K = map(int, input().split())\nprint(solve(N, K, 1000000007))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "def power(x, y, mod):\n    res = 1\n    x = x % mod\n    while (y > 0):\n        if (y & 1):\n            res = (res * x) % mod\n            y -= 1\n        x = (x * x) % mod\n        y = y >> 1\n    return res\n\ndef solve(n, t):\n    if (t == 1):\n        return n\n    else:\n        ans = power(2, n - 2, mod=1000000007)\n        if (t > n and t <= 2 * n + 1):\n            ans = (ans + (t - n - 1)) % 1000000007\n        return ans\n\nmod = 1000000007\nn, t = map(int, input().split())\nprint(solve(n, t))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "n = int(input())\nfield = input()\n\nleft_most_packman, right_most_packman = -1, -1\nfor i in range(n):\n    if field[i] == 'P':\n        if left_most_packman == -1:\n            left_most_packman = i\n        right_most_packman = i\n\n# move all packmen to the leftmost packman position\ntime = 0\nwhile left_most_packman > 0:\n    left_most_packman -= 1\n    time += 1\n    right_most_packman = min(n-1, right_most_packman-1)\n    if field[right_most_packman] == '*':\n        field = field[:right_most_packman] + '.' + field[right_most_packman+1:]\n\n# eat asterisks from right to left\ntime += 1\nwhile right_most_packman < n-1:\n    right_most_packman += 1\n    time += 1\n    if field[right_most_packman] == '*':\n        field = field[:right_most_packman] + '.' + field[right_most_packman+1:]\n\nprint(time)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "def lcs(s1, s2, virus):\n    dp = [[[-1] * (len(virus)+1) for _ in range(len(s2)+1)] for _ in range(len(s1)+1)]\n    def _lcs(i, j, k):\n        if i == 0 or j == 0 or k == len(virus):\n            return 0\n        if dp[i][j][k] != -1:\n            return dp[i][j][k]\n        if s1[i-1] == s2[j-1] and s1[i-1] != virus[k-1]:\n            dp[i][j][k] = max(_lcs(i-1, j-1, k), _lcs(i-1, j, k+1)) + 1\n        else:\n            dp[i][j][k] = max(_lcs(i-1, j, k), _lcs(i, j-1, k))\n        return dp[i][j][k]\n    res = _lcs(len(s1), len(s2), 0)\n    if res == 0:\n        return \"0\"\n    else:\n        ans = []\n        i, j, k = len(s1), len(s2), 0\n        while i > 0 and j > 0 and k < len(virus):\n            if dp[i][j][k] == _lcs(i-1, j-1, k+1) + 1:\n                if s1[i-1] == s2[j-1] and s1[i-1] != virus[k]:\n                    ans.append(s1[i-1])\n                i -= 1\n                j -= 1\n                k += 1\n            elif dp[i][j][k] == _lcs(i-1, j, k+1):\n                i -= 1\n            else:\n                j -= 1\n        return \"\".join(ans[::-1])\n\n# Read input\ns1 = input()\ns", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "n, T = map(int, input().split())\narr = list(map(int, input().split()))\n\n# Create an array of size 301 to store the maximum length of\n# non-decreasing subsequence ending at each number from 1 to 300\ndp = [0] * 301\n\nmax_len = 0\nfor i in range(n):\n    # Calculate the index of the current number in the array\n    # after repeating it T times\n    curr_num = arr[i]\n    curr_index = (curr_num - 1) * T + i + 1\n    \n    # Update dp array by taking maximum of previous values\n    dp[curr_num] = max(dp[curr_num], dp[curr_num - 1])\n    dp[curr_num] = max(dp[curr_num], 1)\n    \n    # Update the maximum length of non-decreasing subsequence\n    max_len = max(max_len, dp[curr_num])\n    \n    # Add T to the current index to get the index of the same number\n    # after T steps\n    next_index = curr_index + T\n    \n    # Update the dp array for the next T steps\n    for j in range(curr_num + 1, 301):\n        dp[j] = max(dp[j], dp[curr_num] + 1)\n        if next_index < n:\n            next_index += T\n        else:\n            break\n\nprint(max_len)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "def max\\_damage(n, jiro\\_cards, m, ciel\\_cards):\nn, m = map(int, input().split())\njiro\\_cards = [list(map(int, input().split())) for \\_ in range(n)]\nciel\\_cards = list(map(int, input().split()))\n\njiro\\_cards.sort(key=lambda x: (-x[1], x[0] == \"ATK\"))\nciel\\_cards.sort(reverse=True)\ndamage = 0\nfor c in ciel\\_cards:\nfor j in jiro\\_cards:\nif j[0] == \"DEF\" or c >= j[1]:\njiro\\_cards.remove(j)\ndamage += c - j[1] if j[0] == \"ATK\" else c\nbreak\nreturn damage\n\nprint(max\\_damage(2, [[\"ATK\", 2000], [\"DEF\", 1700]], 3, [2500, 2500, 2500]))\nprint(max\\_damage(3, [[\"ATK\", 10], [\"ATK\", 100], [\"ATK\", 1000]], 4, [1, 11, 101, 1001]))\nprint(max\\_damage(2, [[\"DEF\", 0], [\"ATK\", 0]], 4, [0, 0, 1, 1]))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "def is_possible_to_obtain_identity_permutation(n, m, table):\n    # Initialize the number of swaps needed for each row and column\n    row_swaps = [0]*n\n    col_swaps = [0]*m\n\n    # Count the number of swaps needed for each row and column\n    for i in range(n):\n        for j in range(m-1):\n            if table[i][j] > table[i][j+1]:\n                row_swaps[i] += 1\n                table[i][j], table[i][j+1] = table[i][j+1], table[i][j]\n        for j in range(m):\n            if table[i][j] != j+1:\n                col_swaps[j] += 1\n\n    # Check if the number of swaps needed is valid\n    total_swaps = sum(row_swaps) + sum(col_swaps)\n    if total_swaps % 2 == 1 or total_swaps > n + 1:\n        return False\n\n    # Check if it's possible to obtain the identity permutation by swapping elements in each row and column\n    for i in range(n):\n        for j in range(m-1):\n            if row_swaps[i] % 2 == 1 and table[i][j] > table[i][j+1]:\n                return False\n            if col_swaps[j] % 2 == 1 and table[i][j] > table[i+1][j] if i+1 < n else table[i][j] > 1:\n                return False\n\n    return True\n\n# Read the input\nn, m = map(int, input().split())\ntable = []\nfor i in range(n):\n    table.append(list(map(int, input().split())))\n\n# Check if it's possible to obtain the identity permutation\nif is_possible_to_obtain_identity_permutation(n, m, table):\n    print(\"YES\")\nelse", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "n = int(input().strip())\nfriends = []\nfor i in range(n):\n    w, h = map(int, input().strip().split())\n    friends.append((w, h))\n\nfriends.sort(key=lambda x: (x[0]*x[1], x[0]), reverse=True)\n\nwidth = 0\nheight = 0\nfor i in range(n):\n    if i >= n//2:\n        break\n    width += friends[i][0]\n    height = max(height, friends[i][1])\n\nwidth += sum(f[0] for f in friends[n//2:])\nheight = max(height, sum(f[1] for f in friends[n//2:]))\n\nprint(width * height)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "def is\\_palindrome(s):\ns = s.lower()\nreturn s == s[::-1]\n\ndef find\\_next\\_tolerable(n, p, s):\ns = list(s)\nfor i in range(n - 1, -1, -1):\nif s[i] < \"a\" + p or not is\\_palindrome(s[i:]):\nbreak\ns[i] = chr(ord(s[i]) + 1)\nfor j in range(i + 1, n):\ns[j] = \"a\"\nif is\\_palindrome(\"\".join(s[i:j + 1])):\ns[j - 1] = chr(ord(s[j - 1]) + 1)\nfor j in range(j - 1, i, -1):\ns[j] = s[j - 1]\ns[i] = chr(ord(s[i]) + 1)\nreturn \"\".join(s) if all(ord(c) <= ord(\"a\") + p for c in s) else \"NO\"\n\nn, p = map(int, input().split())\ns = input()\nprint(find\\_next\\_tolerable(n, p, s))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "import sys\nfrom collections import deque\nfrom functools import reduce\nfrom math import factorial\n\ndef solve(n, a, p):\n    # Calculate the sum of all guest sizes\n    sum_a = sum(a)\n    # Calculate the maximum number of guests that can fit in the table\n    max_guests = p // sum_a if sum_a > 0 else 0\n    # Calculate the number of ways to arrange the guests\n    num_arrangements = factorial(n)\n    # Calculate the number of ways where at least one guest can fit in the table\n    num_fitting_arrangements = reduce(lambda x, y: x * (num_arrangements - y + 1), range(0, num_arrangements - max_guests + 1), 1)\n    # Calculate the average number of guests that can fit in the table\n    avg_guests = (num_fitting_arrangements * max_guests + (num_arrangements - num_fitting_arrangements) * 0) / num_arrangements\n    return avg_guests\n\nif __name__ == '__main__':\n    input_n, input_a, input_p = map(int, sys.stdin.readline().strip().split())\n    output_avg_guests = solve(input_n, list(map(int, sys.stdin.readline().strip().split())), input_p)\n    print(f'{output_avg_guests:.12f}')", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "n, k = map(int, input().split())\na = list(map(int, input().split()))\n\n# Compute the maximum power of k that is less than or equal to the largest denomination\nmax_power = 0\nwhile k ** max_power <= max(a):\n    max_power += 1\n\n# Initialize the result\ndivine_digits = set()\nfor i in range(k):\n    # Check if a number formed by the digit i in base k can be obtained as a sum of banknotes\n    if can_obtain_sum(a, k ** (max_power - 1) * i):\n        divine_digits.add(i)\n\n# Print the result\nprint(len(divine_digits))\nprint(*sorted(divine_digits))\n\n\ndef can_obtain_sum(a, s):\n    # Check if it is possible to obtain the sum s using the banknotes in a\n    dp = [False] * (s + 1)\n    dp[0] = True\n    for i in range(n):\n        for j in range(s, -1, -1):\n            if dp[j] and j + a[i] <= s:\n                dp[j + a[i]] = True\n    return dp[s]", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "import math\n\ndef gcd(a, b):\n    return math.gcd(a, b)\n\ndef split\\_into\\_two\\_groups(n, a):\n    g = gcd(a[0], a[1])\n    for i in range(2, n):\n        g = gcd(g, a[i])\n    if g > 1:\n        return \"NO\"\n    group1 = [1] * n\n    group2 = [2] * n\n    group1[0] = 2\n    group2[0] = 1\n    for i in range(1, n):\n        if gcd(a[i], a[0]) == 1:\n            group1[i] = 1\n            group2[i] = 2\n    return \"YES\\n\" + ' '.join(map(str, group1)) + '\\n' + ' '.join(map(str, group2))\n\nn = int(input())\na = list(map(int, input().split()))\nprint(split\\_into\\_two\\_groups(n, a))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "import math\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef solve():\n    N = int(input().strip())\n    x = list(map(int, input().strip().split()))\n    ans = 0\n    while True:\n        flipped = set()\n        for i in range(1, N + 1):\n            if i % 2 == 1 and is_prime(i):\n                for j in range(max(0, x[0] - i // 2), min(N, x[-1] + i // 2) + 1):\n                    flipped.add(x[j])\n        if len(flipped) == 0:\n            break\n        for i in range(N):\n            if x[i] in flipped:\n                x[i] = -x[i]\n        ans += 1\n    print(ans)\n\nsolve()", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "def can_standardize_puppies():\n    n = int(input())\n    s = input()\n\n    count = {}\n    for c in s:\n        count[c] = count.get(c, 0) + 1\n\n    # If there is only one color, then all puppies are already standardized\n    if len(count) == 1:\n        print(\"Yes\")\n        return\n\n    # Check if there are at least two puppies of each color\n    for num_puppies in count.values():\n        if num_puppies == 1:\n            print(\"No\")\n            return\n\n    print(\"Yes\")\n\ncan_standardize_puppies()", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "import random\n\ndef is_valid(n, m, maze, k):\n    # Check if the current maze has k empty cells that can be turned into walls\n    count = 0\n    for i in range(1, n-1):\n        for j in range(1, m-1):\n            if maze[i][j] == '.' and count < k:\n                count += 1\n            elif maze[i][j] == '.':\n                return False\n    return count == k\n\ndef random_maze(n, m, k):\n    # Generate a random maze with k empty cells that can be turned into walls\n    maze = [['#'] * (m+2) for _ in range(n+2)]\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            maze[i][j] = '.' if random.random() < 1 - k/(n*m-1) else '#'\n    return maze\n\ndef solve(n, m, k, maze):\n    # Turn k empty cells into walls to make the maze connected\n    while not is_valid(n, m, maze, k):\n        k -= 1\n        maze = random_maze(n, m, k)\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if maze[i][j] == '#' and k > 0:\n                maze[i][j] = '.'\n                k -= 1\n    return maze\n\nn, m, k = map(int, input().split())\nmaze = [list(input()) for _ in range(n)]\n\nmaze = solve(n, m, k, maze)\n\nfor i in range(n):\n    print(''.join(maze[i]))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "from collections import defaultdict, deque\n\ndef is\\_valid\\_bfs(n, edges, sequence):\nqueue = deque([1])\nused = [False] * (n + 1)\nparents = defaultdict(int)\nused[1] = True\ni = 0\nwhile queue:\nif sequence[i] != queue[0]:\nreturn \"No\"\ni += 1\nfor v in edges[queue[0]]:\nif not used[v]:\nparents[v] = queue[0]\nused[v] = True\nqueue.append(v)\nqueue.popleft()\nif i < n - 1:\ncontinue\nfor i in range(1, n + 1):\nif sequence[n - 1] == i and parents[i] != sequence[n - 2]:\nreturn \"No\"\nreturn \"Yes\"\n\nn = int(input())\nedges = defaultdict(list)\nfor _ in range(n - 1):\nx, y = map(int, input().split())\nedges[x].append(y)\nedges[y].append(x)\nsequence = list(map(int, input().split()))\nprint(is\\_valid\\_bfs(n, edges, sequence))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "mod = 1000000007\n\ndef power(x, y):\n    if y == 0:\n        return 1\n    res = 1\n    while y > 0:\n        if y % 2:\n            res = (res * x) % mod\n            y -= 1\n        else:\n            x = (x * x) % mod\n            y //= 2\n    return res\n\ndef subset_cost(n, k):\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(1, n + 1):\n        dp[i] = dp[i - 1]\n        for j in range(i):\n            dp[i] = (dp[i] + (power(j, k) * dp[i - j - 1]) % mod) % mod\n    return dp[n]\n\nN, k = map(int, input().split())\nprint(subset_cost(N, k))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "import sys\ninput = sys.stdin.readline\n\ndef power(x, y, mod):\n    res = 1\n    while y > 0:\n        if y % 2:\n            res = (res * x) % mod\n            y -= 1\n        x = (x * x) % mod\n        y //= 2\n    return res\n\ndef count_wool_seq(n, m, mod):\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(n):\n        for j in range(m):\n            dp[i + 1] = (dp[i + 1] + dp[i]) % mod\n            if j & 1:\n                dp[i + 1] = (dp[i + 1] - dp[max(0, i - (1 << j) + 1)] + mod) % mod\n    return (power(2, n, mod) - dp[n] + mod) % mod\n\nn, m = map(int, input().split())\nprint(count_wool_seq(n, m, 1000000009))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "def min_operations(n, a, b):\n    # Initialize the pile and hand with empty cards\n    pile = [0] * n\n    hand = [0] * n\n    # Initialize the top of the pile\n    top = 0\n    # Initialize the count of operations\n    operations = 0\n    \n    # Loop through the given hand\n    for i in range(n):\n        # While the top of the pile is less than the current card in hand\n        while top < a[i]:\n            # If the pile is empty, add a numbered card\n            if pile[top] == 0:\n                top += 1\n                pile[top] = top\n            # Otherwise, play the top card of the pile\n            else:\n                top_card = pile[top]\n                pile[top] = 0\n                pile[n] = top_card\n                top += 1\n                operations += 1\n        # Add the current card to the pile\n        pile[top] = a[i]\n        top += 1\n        \n    # Loop through the given pile from top to bottom\n    for i in range(n-1, -1, -1):\n        # While the top of the pile is not equal to the current card in pile\n        while pile[top-1] != b[i]:\n            # If the pile is empty, add a numbered card\n            if pile[top] == 0:\n                top += 1\n                pile[top] = top\n            # Otherwise, play the top card of the pile\n            else:\n                top_card = pile[top]\n                pile[top] = 0\n                pile[n] = top_card\n                top += 1\n                operations += 1\n        # Add the current card to the pile\n        pile[top] = b[i]\n        top += 1\n    \n    # Return the number of operations\n    return operations", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "def count\\_distinct\\_pairs(n, m):\nn\\_digits = 1 + len(bin(n-1)[2:])\nm\\_digits = 1 + len(bin(m-1)[2:])\n\ncount = 0\nfor i in range(7**n\\_digits):\nfor j in range(7**m\\_digits):\ni\\_str = str(i).zfill(n\\_digits)\nj\\_str = str(j).zfill(m\\_digits)\nif len(set(i\\_str + j\\_str)) == len(i\\_str + j\\_str):\ncount += 1\n\nreturn count\n\n# Test cases\nprint(count\\_distinct\\_pairs(2, 3)) # Output: 4\nprint(count\\_distinct\\_pairs(8, 2)) # Output: 5", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "def destroyable\\_spaceships(n, m, y1, y2):\ny1\\_set = set(y1)\ny2\\_set = set(y2)\ny\\_set = y1\\_set.union(y2_set)\nreturn len(y\\_set) + min(len(y1\\_set), len(y2\\_set))\n\nn, m = map(int, input().split())\ny1 = list(map(int, input().split()))\ny2 = list(map(int, input().split()))\n\nprint(destroyable\\_spaceships(n, m, y1, y2))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "name = input().upper()\nif name == name[::-1]:\n    print('YES')\nelse:\n    print('NO')", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "import sys\ninput = sys.stdin.readline\n\nMOD = 1000000007\n\ndef power(x, y):\n    res = 1\n    while y > 0:\n        if y % 2:\n            res = (res * x) % MOD\n            y -= 1\n        x = (x*x) % MOD\n        y //= 2\n    return res\n\ndef solve(k):\n    return (power(2, k+1) + MOD - 2) % MOD\n\nk = int(input().strip())\nprint(solve(k))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "def fibonacci_sequence(limit):\n    fibonacci = [0, 1]\n    while fibonacci[-1] < limit:\n        fibonacci.append(fibonacci[-1] + fibonacci[-2])\n    return fibonacci", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "def modular_inverse(a, m):\n    for x in range(1, m):\n        if (a * x) % m == 1:\n            return x\n    return -1\n\ndef solve():\n    m = int(input().strip())\n    h1, a1 = map(int, input().strip().split())\n    x1, y1 = map(int, input().strip().split())\n    h2, a2 = map(int, input().strip().split())\n    x2, y2 = map(int, input().strip().split())\n\n    if (x1 == 1 and y1 == 0 and h1 != a1) or (x2 == 1 and y2 == 0 and h2 != a2):\n        return -1\n\n    inv_x1 = modular_inverse(x1, m)\n    if inv_x1 == -1:\n        return -1\n    cycles_xaniar = (a1 - h1) * inv_x1 % m\n\n    inv_x2 = modular_inverse(x2, m)\n    if inv_x2 == -1:\n        return -1\n    cycles_abol = (a2 - h2) * inv_x2 % m\n\n    if cycles_xaniar == 0 and cycles_abol == 0:\n        return -1\n\n    return min(cycles_xaniar, cycles_abol)\n\nprint(solve())", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "def solve(s, t):\n    a_s, b_s, a_t, b_t = 0, 0, 0, 0\n    for c in s:\n        if c == 'a':\n            a_s += 1\n        else:\n            b_s += 1\n    for c in t:\n        if c == 'a':\n            a_t += 1\n        else:\n            b_t += 1\n    if a_s == 0 or b_t == 0:\n        # if s contains only b or t contains only a, no operations are needed\n        return 0, []\n    elif a_t == 0 or b_s == 0:\n        # if t contains only b or s contains only a, swap the whole strings\n        return 1, [len(s), 0]\n    else:\n        # find the first index where s and t differ\n        for i in range(min(len(s), len(t))):\n            if s[i] != t[i]:\n                break\n        # swap the prefixes of s and t up to the found index\n        return 1, [i, i]\n\n# read input\ns = input()\nt = input()\n\n# solve the problem\nn, ops = solve(s, t)\n\n# print the result\nprint(n)\nfor a, b in ops:\n    print(a, b)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "def solve(a00, a01, a10, a11):\n    # Check if the given numbers are possible\n    if a00 + a01 + a10 + a11 != 1 or a00 + a01 != a10 + a11:\n        return \"Impossible\"\n\n    # Initialize the string with the required number of 00\n    s = '0' * a00 + '1'\n\n    # Add the required number of 01\n    s += '0' * (a01 - a00) + '1'\n\n    # Add the required number of 10\n    s += '0' * (a10 - a01)\n\n    # Add the required number of 11\n    s += '1' * a11\n\n    return s\n\n# Read the input numbers\na00, a01, a10, a11 = map(int, input().split())\n\n# Print the solution\nprint(solve(a00, a01, a10, a11))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "def count_returnable_rooms(n, s):\n    def is_returnable(i):\n        cw, acw = 0, 0\n        for j in range(i, n + i):\n            if s[j % n] == '>':\n                cw += 1\n            elif s[j % n] == '<':\n                acw += 1\n        return cw % 2 == acw % 2\n\n    return sum(is_returnable(i) for i in range(n))\n\nt = int(input().strip())\nfor _ in range(t):\n    n = int(input().strip())\n    s = input().strip()\n    print(count_returnable_rooms(n, s))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "H, W = map(int, input().split())\n\ngrids = []\nfor i in range(H):\n    grids.append(input())\n\nif H % 2 == 1:\n    # If H is odd, it's impossible to make the grid symmetric\n    print(\"NO\")\nelse:\n    # Check if the grid is already symmetric\n    for i in range(H):\n        for j in range(W):\n            if grids[i][j] != grids[H-1-i][W-1-j]:\n                # If there's a mismatch, try to make it symmetric by swapping columns\n                for k in range(W):\n                    if grids[i][k] == grids[H-1-i][W-1-k]:\n                        # If the corresponding cells in the mirrored rows are the same,\n                        # swap the columns to make the grid symmetric\n                        grids[i][j], grids[i][k] = grids[i][k], grids[i][j]\n                        grids[H-1-i][W-1-j], grids[H-1-i][W-1-k] = grids[H-1-i][W-1-k], grids[H-1-i][W-1-j]\n                else:\n                    # If there's no corresponding cell in the mirrored rows that matches,\n                    # the grid can't be made symmetric\n                    print(\"NO\")\n                    break\n        else:\n            # If all cells in the row have been checked and the grid is still symmetric,\n            # continue checking the next row\n            continue\n        break\n    else:\n        # If all rows and columns have been checked and the grid is still symmetric,\n        # it's possible to make the grid symmetric\n        print(\"YES\")", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "def max\\_sets(k, a, b):\nif a + b == 0:\nreturn -1\n\nsets\\_a = a // k\nsets\\_b = b // k\nif a % k != 0:\nsets\\_a += 1\nif b % k != 0:\nsets\\_b += 1\n\nreturn min(sets\\_a, sets\\_b)\n\nk, a, b = map(int, input().split())\nprint(max\\_sets(k, a, b))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "n, m = map(int, input().split())\nboard = []\nfor i in range(n):\n    board.append(list(input()))\n\nfor i in range(n):\n    for j in range(m):\n        if board[i][j] == 'B':\n            is_odd = ((n - i - 1) % 2 == 1) or ((i + 1) % 2 == 1) or ((m - j - 1) % 2 == 1) or ((j + 1) % 2 == 1)\n            if is_odd:\n                r = i + (1 - (n - i - 1) % 2) // 2\n                c = j + (1 - (m - j - 1) % 2) // 2\n                print(r, c)\n                exit()", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef make_resistor(a, b):\n    if gcd(a, b) != 1:\n        a, b = a // gcd(a, b), b // gcd(a, b)\n    if a == 1:\n        return b\n    res = a // b + 1\n    a = a - res * b\n    return make_resistor(a, b) + res\n\na, b = map(int, input().split())\nresult = make_resistor(a, b)\nprint(result)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "import sys\ninput = sys.stdin.buffer.readline\n\ndef power(x, y, p):\n    res = 1\n    x = x % p\n    while (y > 0):\n        if (y & 1):\n            res = (res * x) % p\n        y = y >> 1\n        x = (x * x) % p\n    return res\n\ndef solve(n, m):\n    ans = power(2, n, m) - 1\n    ans = (ans % m + m) % m\n    return ans\n\nif __name__==\"__main__\":\n    n, m = map(int, input().split())\n    print(solve(n, m))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "n, k = map(int, input().split())\ncoins = list(map(int, input().split()))\n\n# Initialize a boolean array to keep track of the reachable values\nreachable = [False] * (k+1)\nreachable[0] = True\n\n# Iterate through each coin value\nfor coin in coins:\n    # Initialize a new boolean array to keep track of the reachable values after adding the current coin\n    new_reachable = [False] * (k+1)\n    # Iterate through each possible remaining value\n    for j in range(k+1):\n        # If we could reach a value j before, we can now reach j + coin\n        if reachable[j]:\n            new_reachable[j + coin] = True\n    # Copy the new reachable values into the old reachable values\n    reachable = new_reachable\n\n# Find the number of reachable values\nq = sum(reachable)\n\n# Print the number of reachable values\nprint(q)\n\n# Find the reachable values\nresult = [i for i, x in enumerate(reachable) if x]\n\n# Print the reachable values\nprint(*result)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "N = int(input())\nP = list(map(int, input().split()))\nX = list(map(int, input().split()))\n\n# Initialize a dictionary to store the sum of X for each possible color\ncolor_sum = {0: 0, 1: 0}\nfor x in X:\n    color_sum[0] += x\n    color_sum[1] += x\n\n# Define a recursive function to calculate the sum of X for each subtree\ndef dfs(node, parent):\n    non_local color_sum\n    # If the node has no children, return the sum for its color\n    if node > N:\n        return color_sum[0], color_sum[1]\n    # Calculate the sum for each possible color\n    sum_black, sum_white = 0, 0\n    for child in (i for i in (node + 1, node + 2, ..., N) if P[i] == node):\n        child_black, child_white = dfs(child, node)\n        sum_black += child_black\n        sum_white += child_white\n    # Update the sum for the current node's color\n    sum_black += color_sum[1] - sum_white\n    sum_white += color_sum[0] - sum_black\n    # If the sums for both colors are equal to X[node], return them\n    if sum_black == X[node - 1] and sum_white == X[node - 1]:\n        color_sum[0] -= X[node - 1]\n        color_sum[1] -= X[node - 1]\n        return X[node - 1], X[node - 1]\n    # Otherwise, return -1 to indicate an impossible allocation\n    return -1, -1\n\n# Call the recursive function and check the result\nresult = dfs(1, 0)\nif result[0] == -1:\n    print(\"IMPOSSIBLE\")\nelse:\n    print(\"POSSIBLE\")", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "n = int(input().strip())\nrectangles = []\nfor _ in range(n):\n    x1, y1, x2, y2 = map(int, input().strip().split())\n    rectangles.append(((x1, y1), (x2, y2)))\n\n# sort the rectangles based on their bottom-left and top-right corners\nrectangles.sort(key=lambda x: (x[0][0], x[0][1], x[1][0], x[1][1]))\n\n# initialize the result point with the minimum x and y coordinates\nresult_x, result_y = rectangles[0][0][0], rectangles[0][0][1]\n\n# keep track of the number of rectangles that contain the result point\nrect_count = 1\n\n# iterate through the sorted rectangles\nfor i in range(1, n):\n    # get the current rectangle\n    rect = rectangles[i]\n\n    # if the bottom-left corner of the current rectangle is to the right or above the result point\n    if rect[0][0] > result_x or rect[0][1] >= result_y:\n        # if the top-right corner of the current rectangle is to the left or below the result point\n        if rect[1][0] <= result_x or rect[1][1] < result_y:\n            # the result point is not inside the current rectangle\n            rect_count -= 1\n            result_x, result_y = rect[0][0], rect[0][1]\n\n    # if the top-right corner of the current rectangle is to the right or above the result point\n    if rect[1][0] > result_x or rect[1][1] >= result_y:\n        # the result point is inside the current rectangle\n        rect_count += 1\n\n# the result point should belong to at least (n-1) rectangles\nassert rect_count >= n-1\n\nprint(result_x, result_y)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "def inv(a, m):\n    b0 = 1\n    b1 = 0\n    x0 = 0\n    x1 = 1\n    while a != 1:\n        q = a // m\n        a, m = m, a % m\n        b0, b1 = b1, b0 - q * b1\n        x0, x1 = x1, x0 - q * x1\n    if b1 < 0:\n        b1 += m\n    return b1\n\ndef poly_div(A, B):\n    a = A\n    b = B\n    r = [0] * len(a)\n    for i in range(len(a) - 1, -1, -1):\n        r[i - len(b) + 1:i + 1] = [a[i] - r[i] // b[len(b) - 1] * b[i]]\n    return r\n\ndef gcd(A, B):\n    if not B:\n        return A\n    return gcd(B, poly_div(A, B))\n\ndef solve(n):\n    if n % 2 == 0:\n        return -1\n    m = (n + 1) // 2\n    a = [1] + [0] * m\n    b = [1] + [0] * m + [-1]\n    x = inv(b[m], 2) % 2\n    b[m] = x\n    for i in range(m - 1, 0, -1):\n        b[i] = (x * b[i + 1] + 1) % 2\n    return m, a, b\n\nn = int(input())\nm, a, b = solve(n)\nif m == -1:\n    print(-1)\nelse:\n    print(m)\n    print(*a)\n    print(m - 1)\n    print(*b)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "def find_cube_vertices(points):\n    # Check if the points form a cube\n    if len(points) != 8:\n        return \"NO\"\n\n    unique_points = set(points)\n    if len(unique_points) != 8:\n        return \"NO\"\n\n    # Check if the points are corners of a cube\n    for point in unique_points:\n        if not all(abs(x - y) in (0, 1) for x, y in point):\n            return \"NO\"\n\n    # Check if there are multiple points at the same position\n    if len(unique_points) < 8:\n        return \"NO\"\n\n    # Check if the points are connected by edges\n    edges = [\n        (points[0], points[1]),\n        (points[1], points[2]),\n        (points[2], points[3]),\n        (points[0], points[4]),\n        (points[4], points[5]),\n        (points[5], points[6]),\n        (points[6], points[7]),\n        (points[4], points[0]),\n        (points[5], points[4]),\n        (points[6], points[5]),\n        (points[7], points[6]),\n    ]\n    for edge in edges:\n        if edge not in unique_points:\n            return \"NO\"\n\n    # If all checks pass, return the points in a consistent order\n    points.sort()\n    return \"\\n\".join(\" \".join(map(str, point)) for point in points) + \"\\nYES\"\n\n\nif __name__ == \"__main__\":\n    points = []\n    for _ in range(8):\n        x, y, z = map(int, input().split())\n        points.append((x, y, z))\n\n    print(find_cube_vertices(points))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "def generate\\_string(n, memo={}):\nif n == 0:\nreturn \"What are you doing at the end of the world? Are you busy? Will you save us?\"\nif n in memo:\nreturn memo[n]\ns = f\"What are you doing while sending {generate\\_string(n-1)}? Are you busy? Will you send {generate\\_string(n-1)}?\"\nmemo[n] = s\nreturn s\n\nq = int(input().strip())\nfor _ in range(q):\nn, k = map(int, input().strip().split())\ns = generate\\_string(n)\nif len(s) < k:\nprint(\".\")\nelse:\nprint(s[k-1])", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "import collections\n\ndef solve():\n    def add_edge(x, y):\n        if x not in graph:\n            graph[x] = collections.defaultdict(int)\n        if y not in graph:\n            graph[y] = collections.defaultdict(int)\n        graph[x][y] = 1\n        graph[y][x] = 1\n\n    def sign(a, b, c, x, y):\n        if a == 0 and b == 0:\n            return 0\n        elif a == 0:\n            return -c // b if b > 0 else -c // b - 1\n        elif b == 0:\n            return -c // a if a > 0 else -c // a - 1\n        else:\n            return -c - a * x - b * y\n\n    x1, y1 = map(int, input().split())\n    x2, y2 = map(int, input().split())\n    n = int(input())\n    roads = []\n    for _ in range(n):\n        a, b, c = map(int, input().split())\n        roads.append((a, b, sign(a, b, c, x1, y1), sign(a, b, c, x2, y2)))\n\n    graph = collections.defaultdict(collections.defaultdict(int))\n    for a, b, s1, s2 in roads:\n        if s1 != 0:\n            add_edge(s1, -a // b)\n        if s2 != 0:\n            add_edge(-s2, a // b)\n\n    q = collections.deque([(0, 0", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "n = int(input().strip())\nstrengths = list(map(int, input().strip().split()))\n\n# Count the number of stewards that Jon Snow can support\ncount = 0\nfor strength in strengths:\n    if strength > 0 and strengths.count(strength - 1) > 0 and strengths.count(strength + 1) > 0:\n        count += 1\n\nprint(count)", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "import sys\nfrom math import floor\n\ndef can_takahashi_move(a, k):\n    return any(1 <= x % k < a[x] for x in range(n))\n\ndef simulate(a, k):\n    while can_takahashi_move(a, k):\n        b = [(x - min(x, a[x] // k) + k - 1) // k * k for x in range(n)]\n        a = [x - b[x] for x in range(n)]\n    return 'Aoki' if sum(a) == 0 else 'Takahashi'\n\ninput()\na, k = [], []\nfor _ in range(int(input())):\n    x, y = map(int, input().split())\n    a.append(x)\n    k.append(y)\nprint(simulate(a, k))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "import sys\nfrom heapq import heappop, heappush\n\ninput = sys.stdin.readline\n\ndef dijkstra(n, p, start_positions, keys_positions):\n    dist = [float('inf')] * (n + 1)\n    dist[p] = 0\n    pq = [(0, p)]\n    while pq:\n        d, curr = heappop(pq)\n        if dist[curr] < d:\n            continue\n        for next_pos in (pos for pos in (start_positions + keys_positions) if pos != curr):\n            time = max(d, abs(curr - next_pos))\n            if time < dist[next_pos]:\n                dist[next_pos] = time\n                heappush(pq, (time, next_pos))\n    return dist\n\ndef min_time_to_office(n, k, p, start_positions, keys_positions):\n    dist_to_keys = dijkstra(n, p, start_positions, [])\n    dist_to_office = dijkstra(n, p, start_positions + keys_positions, [])\n    return max(dist_to_keys[key] + dist_to_office[key] for key in keys_positions)\n\nif __name__ == '__main__':\n    n, k, p = map(int, input().strip().split())\n    start_positions = list(map(int, input().strip().split()))\n    keys_positions = list(map(int, input().strip().split()))\n    print(min_time_to_office(n, k, p, start_positions, keys_positions))", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\n\n# Initialize current and next indices for Conan and Agasa\ncur\\_conan, next\\_conan, cur\\_agasa, next\\_agasa = 0, 0, 0, 0\n\n# Loop through the cards\nfor i in range(n):\n\n    # If the current card is greater than or equal to the next card for both Conan and Agasa\n    if a[cur\\_conan] >= a[next\\_conan] and a[cur\\_agasa] >= a[next\\_agasa]:\n\n        # If the current card is greater than or equal to the next card for Conan\n        if a[cur\\_conan] >= a[next\\_conan]:\n            # Move to the next card for Conan\n            cur\\_conan = next\\_conan\n            next\\_conan += 1\n\n        # If the current card is greater than or equal to the next card for Agasa\n        if a[cur\\_agasa] >= a[next\\_agasa]:\n            # Move to the next card for Agasa\n            cur\\_agasa = next\\_agasa\n            next\\_agasa += 1\n\n    # If the current card is less than the next card for both Conan and Agasa\n    elif a[cur\\_conan] < a[next\\_conan] and a[cur\\_agasa] < a[next\\_agasa]:\n\n        # If the current card is less than the next card for Conan\n        if a[cur\\_conan] < a[next\\_conan]:\n            # Move to the next card for Conan\n            cur\\_conan += 1\n\n        # If the current card is less than the next card for Agasa\n        if a[cur\\_agasa] < a[next\\_agasa]:\n            # Move to the next card for Agasa\n            cur\\_agasa += 1\n\n    # If the current card is less than the next card for one of the players and greater than or equal to the next card for the other player\n    else:\n        # If the current card is less than the next card for Agasa", "label": 1, "label_name": "machine_generated", "difficulty": "competition", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_competition_207.jsonl"}
{"code": "# Function to calculate the wait time for Vasya\ndef wait_time():\n    # Read the input\n    n, s = input()\n\n    # Calculate the row number\n    row = int(n)\n\n    # Calculate the column number\n    if s == 'a':\n        col = 1\n    elif s == 'b':\n        col = 2\n    elif s == 'c':\n        col = 3\n    elif s == 'd':", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "mod = 10**9 + 7\n\ndef solve(n, p, c):\n    dp_even = [[0] * 2 for _ in range(n)]\n    dp_even[0][c[0] + 1] = 1\n    dp_odd = [[0] * 2 for _ in range(n)]\n    dp_odd[0][c[0] + 1] = 1\n    for i in range(1, n):\n        if c[i] == -1:\n            dp_even[i][0] = dp_odd[i-1][1]\n            dp_even[i][1] = dp_odd[i-1][0] + dp_odd[i-1][1]\n            dp_odd[i][0] = dp_even[i-1][1]\n            dp_odd[i][1] = dp_even[i-1][0] + dp_even[i-1][1]\n        else:\n            dp_even[i][c[i]] = dp_odd[i-1][1-c[i]]\n            dp_odd[i][c[i]] = dp_even[i-1][1-c[i]]\n            dp_even[i][1-c[i]] = dp_odd[i-1][c[i]]\n            dp_odd[i][1-c[i]] = 0\n    if p == 0:\n        return sum(dp_even[n-1]) % mod\n    else:\n        return sum(dp_odd[n-1]) % mod\n\nn, p = map(int, input().split())\nc = list(map(int, input().split()))\nprint(solve(n, p, c))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def find_overlap(t):\n    for i in range(1, len(t)):\n        if t[:i] == t[i:i+i]:\n            return i\n    return 0\n\ndef main():\n    t = input()\n    n = find_overlap(t)\n    if n == 0:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n        print(t[:-n])\n\nif __name__ == \"__main__\":\n    main()", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def min\\_operations(n, s):\nif n == 1:\nreturn 1\n\ndp = [0] \\* (n + 1)\ndp[0], dp[1] = 0, 1\n\nfor i in range(2, n + 1):\ndp[i] = i\nfor j in range(1, i // 2 + 1):\nif s[j - 1] == s[i - 1]:\ndp[i] = min(dp[i], dp[j] + 1)\n\nreturn dp[n]\n\nn = int(input())\ns = input()\n\nprint(min\\_operations(n, s))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "n, a, b, c = map(int, input().split())\n\n# Calculate the net cost of a glass bottle (cost - deposit)\nglass\\_cost = b - c\n\n# Check if it's better to buy a plastic bottle or a glass bottle\n#", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def countTrailingZeros(n, b):\n    # Calculate the number of trailing zeros in n! in base b\n    count = 0\n    while n > 0:\n        n, temp = divmod(n, b)\n        count += temp // 5\n    return count\n\n# Read input numbers\nn, b = map(int, input().split())\n\n# Print the result\nprint(countTrailingZeros(n, b))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def is\\_lucky(n):\nif n < 0:\nn = -n\nreturn any(int(digit) == 0 or sum(int(digit) == 9 for digit in str(n)) <= 1\nfor digit in str(n))\n\nn = int(input())\nyears = 0\nwhile True:\nyears += 1\nif is\\_lucky(n + years):\nprint(years)\nbreak", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "import math\n\ndef find_pythagorean_triple(n):\n    for m in range(1, int(math.sqrt(n*n + 1)) + 1):\n        if (n*n + m*m) % (2*n*m) == 0:\n            k = (n*n + m*m) // (2*n*m)\n            return m, k\n    return -1\n\nn = int(input())\nresult = find_pythagorean_triple(n)\nprint(*result)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef min_seconds(x, y):\n    if x % 3 != y % 3:\n        return -1\n    g = gcd(x, y)\n    x //= g\n    y //= g\n    return (x - y) // 3\n\nif __name__ == \"__main__\":\n    x, y = map(int, input().split())\n    result = min_seconds(x, y)\n    if result != -1:\n        print(result)\n    else:\n        print(\"Impossible\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def find\\_snooze\\_button\\_presses(x, hh, mm):\nminute = mm + x\nif minute >= 60:\nhour = hh + (minute // 60)\nminute = minute % 60\nif minute < 10:\nminute = \"0\" + str(minute)\nif hour < 10:\nhour = \"0\" + str(hour)\ntime = str(hour) + \":\" + str(minute)\ncount = 0\nwhile \"7\" not in time:\ncount += 1\nminute += x\nif minute >= 60:\nhour += 1\nminute %= 60\nif hour >= 24:\nhour %= 24\nif hour < 10:\nhour = \"0\" + str(hour)\ntime = str(hour) + \":\" + str(minute)\nreturn count\n\n# Test cases\nprint(find\\_snooze\\_button\\_presses(3, 11, 23)) # 2\nprint(find\\_snooze\\_button\\_presses(5, 1, 7)) # 0", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def is\\_prime(num):\nif num < 2:\nreturn False\nfor i in range(2, int(num**0.5) + 1):\nif num % i == 0:\nreturn False\nreturn True\n\ndef represent\\_as\\_sum\\_of\\_primes(n):\nprimes = []\nfor i in range(1, 4):\nfor j in range(n - 2*i + 1):\nif is\\_prime(j) and is\\_prime(n - 2*i - j):\nprimes = [j, n - 2*i - j, i]\nbreak\nif len(primes) == 3:\nbreak\nreturn primes\n\nn = int(input())\nprimes = represent\\_as\\_sum\\_of\\_primes(n)\nprint(len(primes))\nprint(*primes)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "s = input()\nn = len(s)\nfor i in range(n // 2):\n    if s[i] != s[n - i - 1]:\n        print(\"NIE\")\n        break\nelse:\n    print(\"TAK\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def solve():\n    n, m = map(int, input().split())\n    grid = []\n    for _ in range(n):\n        grid.append(list(input().strip()))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def path(x):\n    res = []\n    while x != 1:\n        res.append(x)\n        if x % 2 == 0:\n            x = x // 2\n        else:\n            x = x - 1\n    res.append(1)\n    return res\n\ndef solve(n, k):\n    freq = [0] * (n + 1)\n    for i in range(1, n + 1):\n        for j in path(i):\n            freq[j] += 1\n    return max(range(1, n + 1), key=freq.__getitem__, default=0)\n\nif __name__ == '__main__':\n    n, k = map(int, input().split())\n    print(solve(n, k))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef count_good_pairs(l, r, x, y):\n    count = 0\n    for a in range(l, r+1):\n        for b in range(l, r+1):\n            if gcd(a, b) == x and lcm(a, b) == y:\n                count += 1\n    return count\n\nl, r, x, y = map(int, input().split())\nprint(count_good_pairs(l, r, x, y))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "n, q = map(int, input().split())\npainters = []\nfor _ in range(q):\n    l, r = map(int, input().split())\n    painters.append((l, r))\n\npainters.sort(key=lambda x: x[1])\nhired = set()\nfor l, r in painters:\n    if r - l + 1 < n - hired:\n        continue\n    hired.update(range(l, r + 1))\n    if len(hired) == n:\n        print(len(hired))\n        break\nelse:\n    print(n - len(hired))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def max\\_points(n, k, M, t):\nn, k, M = map(int, (n, k, M))\nt = list(map(int, t))\n\ns = sorted(enumerate(t), key=lambda x: x[1])\ntasks = [0] * n\npoints = 0\n\nfor i in range(n):\nj, time = s[i]\nif M >= (k - j) * time:\nM -= (k - j) * time\npoints += k + 1\nelse:\npoints += M // time\nM %= time\n\nreturn points\n\nn, k, M = map(int, input().split())\nt = list(map(int, input().split()))\n\nprint(max\\_points(n, k, M, t))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def check\\_street\\_pattern():\nn, m = map(int, input().split())\nhorizontal\\_streets = input()\nvertical\\_streets = input()\n\n# Check if there is at least one horizontal street going in each direction\nif horizontal\\_streets.count('<') == 0 or horizontal\\_streets.count('>') == 0:\nif vertical\\_streets.count('^') == 0 or vertical\\_streets.count('v') == 0:\nprint(\"YES\")\nreturn\n\n# Check if there is at least one vertical street going in each direction\nprint(\"NO\")\n\n# Check if it's possible to reach any junction from any other junction\nelse:\nprint(\"YES\")\n\ncheck\\_street\\_pattern()", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "n = int(input().strip())\nratings = list(map(int, input().strip().split()))\n\n# Check if it's possible to divide the players into two teams\nif max(ratings) not in ratings or min(ratings) not in ratings:\n    print(\"NO\")\nelse:\n    # Sort the ratings\n    ratings.sort()\n    # Check if the maximum and minimum ratings are at the ends\n    # of the sorted list\n    if ratings[-1] > ratings[-2] and ratings[0] < ratings[1]:\n        print(\"YES\")\n    else:\n        print(\"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "n, m = map(int, input().split())\nstars = []\nfor _ in range(n):\n    stars.append(input())", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\n\nleft_sum = 0\nright_sum = sum(a)\n\nfor i in range(n):\n    right_sum -= a[i]\n    if left_sum == right_sum:\n        print(\"YES\")\n        break\n    left_sum += a[i]\nelse:\n    print(\"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef find_solution(a1, b1, a2, b2):\n    l = gcd(a1, b1)\n    a1, b1 = a1 // l, b1 // l\n    l = gcd(a2, b2)\n    a2, b2 = a2 // l, b2 // l\n    if a1 == a2 and b1 == b2:\n        return 0, a1, b1, a2, b2\n    if a1 == a2:\n        k = lcm(b1, b2)\n        return (k // b1, a1, k, k // b2, a2)\n    if b1 == b2:", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "n = int(input())\n\n# Minimum number of days off\nmin_days_off = n % 7\nif min_days_off == 0:\n    min_days_off = 7\nmin_days_off = min_days_off // 2\nprint(min_days_off, end=' ')\n\n# Maximum number of days off\nmax_days_off = (n - 1) % 7\nif max_days_off == 0:\n    max_days_off = 7\nmax_days_off = max_days_off // 2\nprint(max_days_off)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def min\\_exchanges(n, a, b):\nfor key in range(1, 6):\n# Count the number of students with performance key in each group\na\\_count = sum(1 for x in a if x == key)\nb\\_count = sum(1 for x in b if x == key)\n# If the counts are not equal, return -1 if this is the first group\n# or the absolute difference if it's the second group\nif a\\_count != b\\_count:\nif key == 1:\nreturn -1\nelse:\nreturn abs(a\\_count - b\\_count)\n# If we made it here, all groups have the same number of students\nreturn 0\n\n# Read input\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\n# Compute and print the result\nresult = min\\_exchanges(n, a, b)\nprint(result)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "n, m = map(int, input().split())\nday = 1\nwhile (day * (day - 1) + 1 + (day - 1)) / 2 <= n + m - day:\n    day += 1\nprint(day)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def is_divisible_by_64(s):\n    # Count the number of consecutive zeros at the end of the string\n    zeros_count = 0\n    while s[-1] == '0':\n        zeros_count += 1\n        s = s[:-1]\n    \n    # Check if the remaining string represents a number divisible by 64 in binary\n    if int(s, 2) % 8 == 0 and zeros_count >= 3:\n        return True\n    else:\n        return False\n\n\n# Read the input string\ns = input()\n\n# Check if the string can be modified to represent a number divisible by 64\nif is_divisible_by_64(s):\n    print('yes')\nelse:\n    print('no')", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def can_weight(w, m):\n    # If m is 0, we can weight it\n    if m == 0:\n        return 'YES'\n\n    # If m is greater than the maximum weight, we cannot weight it\n    if m > w*100:\n        return 'NO'\n\n    # Create a set of weights that we can use to weight m\n    weights = set()\n    for i in range(101):\n        weight = w**i\n        if weight > m:\n            break\n        weights.add(weight)\n\n    # Check if we can use the weights to get m\n    while m > 0:\n        # Find the largest weight that is less than or equal to m\n        weight = next((w for w in weights if w <= m), None)\n        if weight is None:\n            return 'NO'\n\n        # Subtract the weight from m\n        m -= weight\n\n        # Remove the weight from the set of weights\n        weights.remove(weight)\n\n    return 'YES'\n\n# Read input\nw, m = map(int, input().split())\n\n# Print output\nprint(can_weight(w, m))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def can_grasshopper_reach(n, k, line):\n    start, target = line.index('G'), line.index('T')\n    if (start + k) % n == target or (start - k) % n == target:\n        return True\n    return False\n\nn, k = map(int, input().split())\nline = input()\nif can_grasshopper_reach(n, k, line):\n    print(\"YES\")\nelse:\n    print(\"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "# Read input\nn = int(input())\nfiles = [input().split() for _ in range(n)]\n\n# Initialize variables\nexamples = [f for f, t in files if t == '1']\nregulars = [f for f, t in files if t == '0']\n\n# Create script\nscript = ['move %s %d' % (f, i+1) for i, f in enumerate(regulars)]\nscript += ['move %s %d' % (f, i+1) for i, f in enumerate(examples)]\n\n# Print minimum number of lines\nprint(len(script))\n\n# Print script\nfor line in script:\n    print(line)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef find_solutions(a, b, x, y):\n    lcm = a * b // gcd(a, b)\n    max_width = a if a % x == 0 else (a // x + 1) * x\n    max_height = b if b % y == 0 else (b // y + 1) * y\n    count = 0\n    for w in range(x, max_width + 1, x):\n        h = (w * y) // x\n        if h <= b and h >= y and h % y == 0:\n            count += 1\n    return count\n\na, b, x, y = map(int, input().split())\nprint(find_solutions(a, b, x, y))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "mod = 998244353\nfac = [0]*1000005\ninv = [0]*1000005\nfac[0] = inv[0] = 1\nfor i in range(1, 1000005):\n    fac[i] = fac[i-1]*i%mod\n    inv[i] = pow(fac[i], mod-2, mod)\n\ndef C(n, k):\n    if k > n or k < 0:\n        return 0\n    return fac[n]*inv[k]*inv[n-k]%mod\n\ndp = [0]*(1000005)\ndp[0] = 1\nparity = 1\nfor i in range(1, 1000005):\n    dp[i] = dp[i-1]*2%mod\n    if i&1:\n        parity = -parity\n    dp[i] = (dp[i] + dp[i//2]*C(i, i//2)*parity%mod)%mod\n\nn = int(input())\nprint(dp[n])", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def min\\_cost(n, c0, c1):\nif n == 1:\nreturn min(c0, c1)\n\ndp = [[0] * (n + 1) for _ in range(2)]\n\nfor i in range(1, n + 1):\ndp[0][i] = dp[1][i - 1] + c0\ndp[1][i] = dp[0][i - 1] + c1\n\nfor i in range(2, n + 1):\ndp[0][i] = min(dp[0][i], dp[1][i - 1] + c0)\nfor i in range(2, n + 1):\ndp[1][i] = min(dp[1][i], dp[0][i - 1] + c1)\n\nreturn min(dp[0][n], dp[1][n])\n\nn, c0, c1 = map(int, input().split())\nprint(min\\_cost(n, c0, c1))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def expected\\_dresses(x, k):\nx\\_mod = 1000000007\npower = 1\nfor i in range(k):\npower = (power \\* 2) % x\\_mod\nif i != k - 1:\nexpected = (power + expected\\_dresses(x, k - 1)) // 2\nexpected = expected % x\\_mod\nreturn expected if x == 1 else (power + expected\\_dresses(x - 1, k)) % x\\_mod\n\nx, k = map(int, input().split())\nprint(expected\\_dresses(x, k))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def main():\n    n = int(input().strip())\n    x = list(map(int, input().strip().split()))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def is\\_possible(n):\nif n & 1:\nreturn False\ni = 1\nwhile True:\nk = (i * (i - 1)) // 2\nif k > n:\nbreak\nif k == n:\nprint(i)\ni += 1\nif i > n:\nreturn\nprint(-1)\n\nn = int(input())\nis\\_possible(n)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "n = int(input().strip())\na = list(map(int, input().strip().split()))\n\nleft, right = 0, 0\nresult = []\nwhile left < n or right < n:\n    if left < n and a[left] != 0:\n        left += 1\n    elif right < n and a[right] == 0:\n        result.append(right - left)\n        right += 1\n    else:\n        right += 1\n\nprint(*result)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def convert_to_decimal(number, base):\n    result = 0\n    for digit in number:\n        result = result * base + digit\n    return result\n\ndef compare_numbers(X, bx, Y, by):\n    return '>' if convert_to_decimal(X, bx) > convert_to_decimal(Y, by) else ('=' if convert_to_decimal(X, bx) == convert_to_decimal(Y, by) else '<')\n\nn, bx = map(int, input().split())\nX = list(map(int, input().split()))[::-1]\nm, by = map(int, input().split())\nY = list(map(int, input().split()))[::-1]\n\nprint(compare_numbers(X, bx, Y, by))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "n, m, k, x, y = map(int, input().split())\n\n# Calculate the total number of students in the classroom\ntotal_students = n * m\n\n# Calculate the maximum and minimum number of questions asked\nmax_questions = k // (total_students // 2) + (k % (total_students // 2) > 0)\nmin_questions = max_questions - (k % (total_students // 2) > 0) * (total_students % 2)\n\n# Calculate the number of times Sergei is asked\nsergei_questions = (k // (total_students // 2)) + (k % (total_students // 2) >= (x - 1) * m + y) - (k % (total_students // 2) >= x * m + y - 1)\n\n# Print the results\nprint(max_questions, min_questions, sergei_questions)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def get_next_char(c):\n    if c == 'z':\n        return None\n    else:\n        return chr(ord(c) + 1)\n\ndef can_reach_alphabet(s):\n    prev_char = None\n    for c in s:\n        if c == 'z':\n            if prev_char == 'y':\n                return False\n            else:\n                prev_char = None\n        elif prev_char is not None and get_next_char(prev_char) != c:\n            return False\n        else:\n            prev_char = c\n    return True", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def solve(n, k, m):\n    # Initialize result as 0\n    res = 0\n\n    # Loop through all numbers from 1 to 10^n-1\n    for x in range(1, 10**n):\n        # Initialize y as x\n        y = x\n\n        # Check if the remainder of y divided by k is 0\n        while y % k != 0:\n            # Remove the last digit from y\n            y = int(str(y)[:-1])\n\n            # If y becomes 0, break the loop\n            if y == 0:\n                break\n\n        # If the loop did not break, add the number of digits in x\n        # to the result\n        if y != 0:\n            res += 1\n\n    # Return the result modulo m\n    return res % m\n\n# Read input values\nn, k, m = map(int, input().split())\n\n# Print the result\nprint(solve(n, k, m))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def convert\\_to\\_base\\_n(num, base):\nn = \"\"\nwhile num:\ndigit = int(num % base)\nnum //= base\nn += str(digit)\nreturn n[::-1]\n\ndef find\\_min\\_decimal(base, k):\nk = str(k)\nlength = len(k)\npower = 1\nfor i in range(length):\npower *= base\nresult = 0\nfor i in range(length):\nresult += int(k[i]) \\* power\npower //= base\nreturn result\n\nbase = int(input())\nk = int(input())\nprint(find\\_min\\_decimal(base, k))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "m, d = map(int, input().split())\ndays\\_in\\_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\nfirst\\_day\\_of\\_month = (d + sum(days\\_in\\_month[:m-1]) - 1) % 7 + 1\nnum\\_columns = (days\\_in\\_month[m-1] + first\\_day\\_of\\_month - 2) // 7 + 1\nprint(num\\_columns)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "import math\n\ndef can_prepare(n, m, k, x, s, a, b, c, d, time):\n    mana = s\n    potions = 0\n\n    # check spells of the first type\n    for i in range(m):\n        if mana >= b[i] and a[i] <= time:\n            mana -= b[i]\n            time = a[i]\n\n    # check spells of the second type\n    for i in range(k):\n        if mana >= d[i] and potions + c[i] >= n:\n            mana -= d[i]\n            potions += c[i]\n            if potions >= n:\n                break\n\n    # check remaining time\n    if potions < n:\n        time_needed = math.ceil((n - potions) / (x / time)) * (x / time)\n    else:\n        time_needed = 0\n\n    return time + time_needed <= time, time_needed\n\ndef solution(n, m, k, x, s, a, b, c, d):\n    left, right = 1, x\n    while left < right:\n        time = (left + right) // 2\n        if can_prepare(n, m, k, x, s, a, b, c, d, time)[0]:\n            right = time\n        else:\n            left = time + 1\n    return left\n\n# example 1\nn, m, k = 20, 3, 2\nx, s = 10, 99\na = [2, 4, 3]\nb = [20, 10, 40]\nc = [4, 15]\nd = [10, 80]\nprint(solution(n, m, k, x, s, a, b, c, d))  # 20\n\n# example 2\nn, m, k = 20, 3,", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def get_max_nines(n):\n    # Calculate the maximum number of nines that can be at the end\n    max_nines = (n-1) % 10\n    # If the maximum number of nines is zero, then it means that all\n    # numbers from 1 to n can form a pair, so the answer is n*(n-1)//2\n    if max_nines == 0:\n        return n * (n - 1) // 2\n    # Calculate the number of pairs that will result in the maximum number\n    # of nines\n    num_pairs = (n - 1) // 10\n    # Subtract the number of pairs that have been counted\n    n -= num_pairs * 10\n    # Calculate the remaining number of pairs\n    remaining_pairs = n * (n - 1) // 2\n    # Return the total number of pairs\n    return remaining_pairs + num_pairs\n\n# Read the input number\nn = int(input())\n# Print the result\nprint(get_max_nines(n))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def get_finger_movement(number):\n    finger_movement = [(0, 0)]\n    for digit in number:\n        if digit == '0' or digit == '1':\n            dx, dy = 0, 0\n        elif digit == '2' or digit == '3':\n            dx, dy = 1, 0\n        elif digit == '4' or digit == '5':\n            dx, dy = 1, 1\n        elif digit == '6' or digit == '7':\n            dx, dy = 0, 1\n        else:\n            dx, dy = -1, 1\n        finger_movement.append((finger_movement[-1][0] + dx, finger_movement[-1][1] + dy))\n    return finger_movement\n\ndef check_unique_finger_movement(n, number):\n    finger_movement = get_finger_movement(number)\n    unique = set()\n    for i in range(10 ** (n - 1), 10 ** n):\n        if i == int(number):\n            continue\n        if get_finger_movement(str(i)) == finger_movement:\n            return False\n    return True\n\nn = int(input())\nnumber = input()\nif check_unique_finger_movement(n, number):\n    print(\"YES\")\nelse:\n    print(\"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def is\\_lucky(n):\nif n < 0:\nn = -n\nreturn any(int(digit) == 0 or sum(int(digit) == 9 for digit in str(n)) <= 1\nfor digit in str(n))\n\nn = int(input())\nyears = 0\nwhile True:\nyears += 1\nif is\\_lucky(n + years):\nprint(years)\nbreak", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "n, a, x, b, y = map(int, input().split())\n\n# Check if Daniel and Vlad ever meet on the circle line\nif (a + x - b) % n == 0 or (b + y - a) % n == 0:\n    print(\"YES\")\nelse:\n    print(\"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "n, s = map(int, input().split())\nv = list(map(int, input().split()))\n\nv.sort(reverse=True)\n\ncurrent_volume = 0\nfor i in range(n):\n    current_volume += v[i]\n    if current_volume >= s:\n        print(v[i])\n        break\nelse:\n    print(-1)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "import sys\nfrom fractions import Fraction\n\ndef lcm(a, b):\n    return abs(a*b) // math.gcd(a,b)\n\ndef bad_luck_island(r, s, p):\n    total = lcm(r, lcm(s, p))\n    r, s, p = total//r, total//s, total//p\n    rs = r*s\n    rp = r*p\n    sp = s*p\n    rsp = r*s*p\n    ans = [Fraction(rsp, total), Fraction(rs*p, total), Fraction(r*sp, total)]\n    return [float(x) for x in ans]\n\nif __name__ == \"__main__\":\n    r, s, p = map(int, sys.stdin.readline().strip().split())\n    print(\" \".join(map(str, bad_luck_island(r, s, p))))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "import sys\nimport math\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef solve():\n    a, b = map(int, input().strip().split())\n    if a > b:\n        a, b = b, a\n    min_lcm = math.lcm(a, b)\n    for k in range(min_lcm, 0, -1):\n        if math.lcm(a + k, b + k) == min_lcm:\n            print(k)\n            return\n\nif __name__ == \"__main__\":\n    solve()", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "import sys\n\ndef max_heapify(arr, i, n):\n    l = 2 * i + 1\n    r = 2 * i + 2\n    max_idx = i\n    if l < n and arr[l] > arr[max_idx]:\n        max_idx = l\n    if r < n and arr[r] > arr[max_idx]:\n        max_idx = r\n    if max_idx != i:\n        arr[i], arr[max_idx] = arr[max_idx], arr[i]\n        max_heapify(arr, max_idx, n)\n\ndef min_heapify(arr, i, n):\n    l = 2 * i + 1\n    r = 2 * i + 2\n    min_idx = i\n    if l < n and arr[l] < arr[min_idx]:\n        min_idx = l\n    if r < n and arr[r] < arr[min_idx]:\n        min_idx = r\n    if min_idx != i:\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n        min_heapify(arr, min_idx, n)\n\ndef heap_sort(arr):\n    n = len(arr)\n    for i in range(n//2 - 1, -1, -1):\n        max_heapify(arr, i, n)\n    for i in range(n-1, -1, -1):\n        arr[0], arr[i] = arr[i], arr[0]\n        max_heapify(arr, 0, i)\n\ndef play_war(n, s1, s2):\n    if n == 1:\n        return (0, s1[0])\n    h1 = [0] * (n // 2)\n    h2 = [0] * (n // 2)\n    for i in range(n // 2):\n        h1[i] = s1.pop(0)\n        h2[i] = s2.pop(0)\n    heap_sort(h1", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def solve():\n    s = input()\n    t, u = '', ''\n    while s:\n        t += s[0]\n        u += s[-1]\n        s = s[1:-1]\n    print(u)\n\nsolve()", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "a = int(input())\nb = int(input())\n\nif max(a, b) == a:\n    if a > b:\n        print(\">\")\n    else:\n        print(\"<\")\nelse:\n    print(\"=\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def is_divisible_by_64(s):\n    # Count the number of consecutive zeros at the end of the string\n    zeros_count = 0\n    while s[-1] == '0':\n        zeros_count += 1\n        s = s[:-1]\n    \n    # Check if the remaining string represents a number divisible by 64 in binary\n    if int(s, 2) % 8 == 0 and zeros_count >= 3:\n        return True\n    else:\n        return False\n\n\n# Read the input string\ns = input()\n\n# Check if the string can be modified to represent a number divisible by 64\nif is_divisible_by_64(s):\n    print('yes')\nelse:\n    print('no')", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "import math\n\ndef calculate(x, y, z, operation):\n    if operation == 1:\n        return x ** (y ** z)\n    elif operation == 2:\n        return x ** (z ** y)\n    elif operation == 3:\n        return (x ** y) ** z\n    elif operation == 4:\n        return (x ** z) ** y\n    elif operation == 5:\n        return y ** (x ** z)\n    elif operation == 6:\n        return y ** (z ** x)\n    elif operation == 7:\n        return (y ** x) ** z\n    elif operation == 8:\n        return (y ** z) ** x\n    elif operation == 9:\n        return z ** (x ** y)\n    elif operation == 10:\n        return z ** (y ** x)\n    elif operation == 11:\n        return (z ** x) ** y\n    elif operation == 12:\n        return (z ** y) ** x\n\ndef main():\n    x, y, z = map(float, input().split())\n    operations = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    max_value = -1\n    max_operation = -1\n    for operation in operations:\n        value = calculate(x, y, z, operation)\n        if value > max_value:\n            max_value = value\n            max_operation = operation\n\n    result = \"\"\n    if max_operation == 1:\n        result = \"x^y^z\"\n    elif max_operation == 2:\n        result = \"x^z^y\"\n    elif max_operation == 3:\n        result = \"(x^y)^z\"\n    elif max_operation == 4:\n        result = \"(x^z)^y\"\n    elif max_operation == 5:\n        result = \"y^x^z\"\n    elif max_operation == 6:\n        result = \"y^z^x\"", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "import math\n\ndef max_divisor(n):\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return n // i if i * (n // i) == n else i\n    return 1\n\ndef min_tax(n):\n    if n % 2 == 0:\n        return n // 2\n    else:\n        return (n + 1) // 2\n\nn = int(input())\nif n == 2:\n    print(1)\nelse:\n    print(min_tax(n))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "import itertools\n\ndef can_encode(s, k):", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def min\\_days\\_to\\_read\\_book(c, v0, v1, a, l):\nif v0 + (c - v0) // a > v1:\nreturn -1\n\ndays = 1\ncurrent\\_page = v0\nwhile current\\_page < c:\ndays += 1\nif current\\_page + a > c:\n\ta = c - current\\_page\nif current\\_page + a > v1:\n\ta = v1 - current\\_page\ncurrent\\_page += a\ncurrent\\_page -= l\nif current\\_page < 0:\n\tcurrent\\_page = 0\nreturn days\n\n# Test cases\nprint(min\\_days\\_to\\_read\\_book(5, 5, 10, 5, 4)) # 1\nprint(min\\_days\\_to\\_read\\_book(12, 4, 12, 4, 1)) # 3\nprint(min\\_days\\_to\\_read\\_book(15, 1, 100, 0, 0)) # 15", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "n, m, k, x, y = map(int, input().split())\n\n# Calculate the total number of students in the classroom\ntotal_students = n * m\n\n# Calculate the maximum and minimum number of questions asked\nmax_questions = k // (total_students // 2) + (k % (total_students // 2) > 0)\nmin_questions = max_questions - (k % (total_students // 2) > 0) * (total_students % 2)\n\n# Calculate the number of times Sergei is asked\nsergei_questions = (k // (total_students // 2)) + (k % (total_students // 2) >= (x - 1) * m + y) - (k % (total_students // 2) >= x * m + y - 1)\n\n# Print the results\nprint(max_questions, min_questions, sergei_questions)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "n = int(input().strip())\nratings = list(map(int, input().strip().split()))\n\n# Check if it's possible to divide the players into two teams\nif max(ratings) not in ratings or min(ratings) not in ratings:\n    print(\"NO\")\nelse:\n    # Sort the ratings\n    ratings.sort()\n    # Check if the maximum and minimum ratings are at the ends\n    # of the sorted list\n    if ratings[-1] > ratings[-2] and ratings[0] < ratings[1]:\n        print(\"YES\")\n    else:\n        print(\"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def main():\n    n = int(input().strip())\n    x = list(map(int, input().strip().split()))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def convert_num_to_words(n):\n    under_20 = [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\"]\n    tens = [\"twenty\", \"thirty\", \"forty\", \"fifty\", \"sixty\", \"seventy\", \"eighty\", \"ninety\"]\n\n    if n < 20:\n        return under_20[n]\n    elif n < 100:\n        return tens[n//10-2] + (-n%10 and \" \" + convert_num_to_words(n%10))\n    elif n < 1000:\n        if n % 100 == 0:\n            return convert_num_to_words(n//100) + \" hundred\"\n        else:\n            return convert_num_to_words(n//100) + \" hundred \" + (-n%100 and \"-\" + convert_num_to_words(n%100))\n    else:\n        return \"Number out of range\"\n\ns = int(input())\nprint(convert_num_to_words(s).replace(\" \", \"-\").lower())", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def has\\_winning\\_strategy(n, s):\nif n == 11:\nreturn s[0] == '8'\n\nfor i in range(1, n-1, 2):\n# check if Vasya can win after choosing the i-th digit\nif not has\\_winning\\_strategy(n - i - 1, s[i+1:]):\nreturn True\n\n# if Vasya cannot win after choosing any digit, then Petya has a winning strategy\nreturn False\n\nn = int(input())\ns = input()\n\nif has\\_winning\\_strategy(n, s):\nprint(\"YES\")\nelse:\nprint(\"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "n, L = map(int, input().split())\ncosts = list(map(int, input().split()))\n\n# Initialize the minimum cost to buy L liters of lemonade\nmin\\_cost = float('inf')\n\n# Iterate through all possible volumes that can be obtained by combining\n# different types of bottles\nfor i in range(1, 1 << n):\n    volume = sum(costs[j] * (i & (1 << j)) for j in range(n)) - 1\n\n    # If the current volume is greater than or equal to L, update the minimum cost\n    if volume >= L:\n        min\\_cost = min(min\\_cost, volume)\n\nprint(min\\_cost)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "import sys\ninput = sys.stdin.readline\n\nMOD = 1000003\n\ndef powmod(x, y, mod):\n    res = 1\n    while y > 0:\n        if y % 2:\n            res = (res * x) % mod\n            y -= 1\n        x = (x * x) % mod\n        y //= 2\n    return res\n\ndef solve(n, k):\n    if k > (1 << n):\n        return 0, 1\n    elif k == (1 << n):\n        return 1, 1\n    else:\n        not_k = (1 << n) - k\n        num = powmod(k, not_k, MOD)\n        den = powmod(2, n, MOD) - 1\n        den = (den * powmod(2, MOD - 2, MOD)) % MOD\n        return num, den\n\nn, k = map(int, input().strip().split())\nnum, den = solve(n, k)\nprint(num, den)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def max\\_expected\\_fishes(n, m, r, k):\nn, m, r, k = map(int, [n, m, r, k])\n\n# Calculate the total number of possible positions to place the scoop-net\ntotal\\_positions = (n - r + 1) * (m - r + 1)\n\n# Create a list to store the number of positions the scoop-net can be placed\n# such that the cell is inside the scoop-net\ncell\\_positions = [(r - 1)**2 for _ in range(n*m)]\n\n# Place the fishes in the k cells with the highest number of positions\n# the scoop-net can be placed such that the cell is inside the scoop-net\nfishes = [cell\\_positions.pop(max\\_index) for _ in range(k)]\n\n# Calculate the maximum possible expected number of caught fishes\nmax\\_expected = sum(fishes) / total\\_positions\n\n# Return the maximum possible expected number of caught fishes\nreturn max\\_expected\n\n# Test the function\nprint(max\\_expected\\_fishes(3, 3, 2, 3)) # 2.0000000000\nprint(max\\_expected\\_fishes(12", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "l1, r1, l2, r2, k = map(int, input().split())\n\n# Find the minimum and maximum of the overlap\nleft = max(l1, l2)\nright = min(r1, r2)\n\n# Check if there is any overlap\nif left > right:\n    print(0)\nelse:\n    # Adjust the right endpoint to account for Sonya's prinking\n    if k >= left and k <= right:\n        right -= 1\n    print(right - left + 1)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def bitland_game(n, a):\n    # If there is only one element in the array, BitLGM can win by taking it\n    if n == 1:\n        return \"BitLGM\"\n\n    # If the sum of the array is less than or equal to 1, BitAryo can win\n    if sum(a) <= 1:\n        return \"BitAryo\"\n\n    # If the minimum value in the array is 0, BitAryo can win\n    if min(a) == 0:\n        return \"BitAryo\"\n\n    # If the array has two elements, BitAryo can win by taking the smaller element\n    if n == 2:\n        if a[0] > a[1]:\n            a[0], a[1] = a[1], a[0]\n        if a[0] == a[1]:\n            return \"BitAryo\"\n        if a[0] > 1:\n            return \"BitAryo\"\n        else:\n            return \"BitLGM\"\n\n    # BitLGM can always reduce the array to a smaller subproblem where n is 1, 2 or 3\n    for i in range(n):\n        if a[i] > 0:\n            a[i] -= 1\n            break\n    for i in range(n):\n        if a[i] > 0:\n            for j in range(i+1, n):\n                if a[j] > 0:\n                    a[i], a[j] = a[j], a[i]\n                    break\n            a[i] -= 1\n            for j in range(i+1, n):\n                a[j] -= 1\n            break\n    for i in range(n):\n        if a[i] > 1:\n            a[i] -= 1\n            break\n    for i in range(n):\n        if a[i] > 0:\n            a[i] -= 1\n            break\n\n    return bitland_game(n-1 if n > 3 else n,", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def find_frame(n, m, screen):\n    for i in range(n):\n        for j in range(m):\n            if screen[i][j] == 'w':\n                frame = flood_fill(n, m, i, j, screen, [])\n                if frame is not None:\n                    return frame\n    return [-1]\n\ndef flood_fill(n, m, i, j, screen, frame):\n    if i < 0 or i >= n or j < 0 or j >= m:\n        return None\n    if screen[i][j] == '.':\n        return None\n    screen[i][j] = '+'\n    frame.append((i, j))\n    flood_fill(n, m, i + 1, j, screen, frame)\n    flood_fill(n, m, i - 1, j, screen, frame)\n    flood_fill(n, m, i, j + 1, screen, frame)\n    flood_fill(n, m, i, j - 1, screen, frame)\n    w, h = 1, 1\n    for x, y in frame:\n        w = max(w, x + 1 - x)\n        h = max(h, y + 1 - y)\n    if w == h:\n        return screen\n    return None\n\nn, m = map(int, input().split())\nscreen = []\nfor _ in range(n):\n    screen.append(list(input().strip()))\nprint(*screen, sep='\\n')\nframe = find_frame(n, m, screen)\nif frame[0] == -1:\n    print(-1)\nelse:\n    for i in range(n):\n        for j in range(m):\n            if frame[1][i][j] == '+':\n                print('+', end='')\n            else:\n                print(screen[i][j], end='')\n        print()", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "n = int(input())\nvotes = list(input())\n\n# Keep track of the number of eligible voters in each faction\nd, r = 0, 0\nfor v in votes:\n    if v == 'D':\n        d += 1\n    else:\n        r += 1\n\n# Simulate the voting process\nwhile d + r > 1:\n    # Count the number of eligible voters in the next round\n    d_next, r_next = 0, 0\n    \n    # Go through the voters in order\n    for i in range(n):\n        v = votes[i]\n        \n        # If this voter is eligible, add to the count for their faction\n        if v != '.':\n            if v == 'D':\n                d_next += 1\n            else:\n                r_next += 1\n            \n            # The voter becomes ineligible\n            votes[i] = '.'\n    \n    # The faction with more eligible voters in the next round wins\n    if d_next > r_next:\n        d, r = d_next, 0\n    elif d_next < r_next:\n        d, r = 0, r_next\n    else:\n        # If there's a tie, the depublicans win\n        d, r = d_next, 0\n\n# Output the result\nif d > 0:\n    print('D')\nelse:\n    print('R')", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "n, m = map(int, input().split())\n\nif m == 0:\n    print(2 * n)\nelif n == 0:\n    print(3 * m)\nelse:\n    # Start by building the tallest tower with two-block pieces\n    height = 2 * n\n\n    # Try to add one three-block piece on top\n    height += 3\n\n    # If the height is not a multiple of 3, add enough two-block pieces to make it one\n    if height % 3 != 0:\n        height += 3 - height % 3\n\n    print(height)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "x1, y1 = map(int, input().split())\nx2, y2 = map(int, input().split())\nprint(abs(x2 - x1) + abs(y2 - y1))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "# Function to calculate the wait time for Vasya\ndef wait_time():\n    # Read the input\n    n, s = input()\n\n    # Calculate the row number\n    row = int(n)\n\n    # Calculate the column number\n    if s == 'a':\n        col = 1\n    elif s == 'b':\n        col = 2\n    elif s == 'c':\n        col = 3\n    elif s == 'd':", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    curr\\_seats = 0\n    curr\\_group = 0\n    for i in range(k):\n        if a[i] + curr\\_seats > 8:\n            print(\"NO\")\n            return\n        if i % 2 == 0:\n            available\\_seats = 8 - curr\\_seats\n            if a[i] > available\\_seats:\n                print(\"NO\")\n                return\n            curr\\_group += a[i]\n            curr\\_seats = 0\n        else:\n            if a[i] + curr\\_seats > 8:\n                print(\"NO\")\n                return\n            curr\\_seats += a[i]\n    print(\"YES\")\n\nsolve()", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "n, k = map(int, input().split())\nremainders = set()\n\nfor i in range(1, k+1):\n    rem = n % i\n    if rem in remainders:\n        print(\"No\")\n        break\n    else:\n        remainders.add(rem)\nelse:\n    print(\"Yes\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def missing_meals(b, d, s):\n    # The minimum number of meals that Vasiliy could have missed is\n    # the maximum of the number of breakfasts, dinners, and suppers\n    # minus the total number of meals that he had.\n    return max(b, d, s) - (b + d + s)\n\n# Read the number of breakfasts, dinners, and suppers from input\nb, d, s = map(int, input().split())\n\n# Print the minimum number of meals that Vasiliy could have missed\nprint(missing_meals(b, d, s))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def lara_position(n, m, k):\n    # Lara starts at position (1, 1)\n    x, y = 1, 1\n    # She moves n-1 steps down and then m-1 steps to the right\n    steps_down = (n - 1) // 2\n    steps_right = m - 1\n    # We count how many steps Lara has made so far\n    steps = 0\n    while steps + 1 < k + 1:\n        # If Lara has not reached the bottom row yet\n        if x < n and steps < steps_down:\n            # She moves down\n            x += 1\n            steps += 1\n        # If Lara has reached the bottom row and has not moved to the right end of it yet\n        elif x == n and steps < steps_down + steps_right:\n            # She moves right\n            y += 1\n            steps += 1\n        # If Lara has moved to the right end of the bottom row\n        elif x == n and steps == steps_down + steps_right:\n            # She moves up\n            x -= 1\n            y -= 1\n            steps_right -= 1\n            steps += 1\n        # If Lara has moved to the left end of some row\n        elif y == 1 and x > 1 and steps < k:\n            # She moves up\n            x -= 1\n            y += 1\n            steps += 1\n    return x, y\n\n# Test the function\nprint(lara_position(4, 3, 0))  # (1, 1)\nprint(lara_position(4, 3, 11))  # (1, 2)\nprint(lara_position(4, 3, 7))   # (3, 2)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def min_minutes_to_palindrome(current_time):\n    hh, mm = map(int, current_time.split(\":\"))\n    minutes_to_add = 0\n\n    # If the current time is already a palindrome, we can wake up immediately\n    if hh == mm or (hh == 0 and mm == 9) or (hh == 9 and mm == 0):\n        return minutes_to_add\n\n    while True:\n        # Create a palindrome by adding minutes to the current time\n        palindrome = str(hh).zfill(2) + str(mm + minutes_to_add // 60).zfill(2) + str(hh).zfill(2)\n\n        # Convert the palindrome back to hours and minutes\n        ph, pm = map(int, palindrome.split(\":\"))\n\n        # Check if the palindrome is a valid time (i.e., between 00:00 and 23:59)\n        if 0 <= ph <= 23 and 0 <= pm <= 59:\n            break\n\n        minutes_to_add += 1\n\n    return minutes_to_add % 1440  # The result should be within 24 hours\n\n# Test cases\nprint(min_minutes_to_palindrome(\"05:39\"))  # Output: 11\nprint(min_minutes_to_palindrome(\"13:31\"))  # Output: 0\nprint(min_minutes_to_palindrome(\"23:59\"))  # Output: 1", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def check\\_accident():\nfor _ in range(int(input())):\nroads = [list(map(int, input().split())) for _ in range(4)]\nfor i in range(4):\nif roads[i][3] == 1:\n# check if any of the corresponding car lights are green\nif roads[i][0] == 1 or roads[(i+1)%4][1] == 1 or roads[(i+2)%4][2] == 1:\nreturn \"YES\"\nreturn \"NO\"\n\n# Test cases\nprint(check\\_accident())\nprint(check\\_accident())\nprint(check\\_accident())", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\ns = input()\n\ni = 0\nwhile i < n - 1:\n    if s[i] == '1' and a[i] < a[i + 1]:\n        i += 1\n    elif s[i] == '1' and a[i] > a[i + 1]:\n        a[i], a[i + 1] = a[i + 1], a[i]\n    elif s[i] == '0' and a[i] > a[i + 1]:\n        print(\"NO\")\n        break\n    else:\n        i += 1\n\nif i == n - 1:\n    print(\"YES\" if sorted(a) == a else \"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def find_matrix_size(n, a):\n    # Initialize the maximum and minimum possible values of x and y\n    x_max, x_min, y_max, y_min = 1, 1, n, 1\n\n    for i in range(1, n):\n        # Calculate the difference between two adjacent elements\n        diff = a[i] - a[i - 1]\n        \n        # Update the minimum and maximum possible values of x and y\n        x_min = max(x_min, 1 + (diff - 1) // n)\n        x_max = min(x_max, 1 + (diff - 1) % n)\n        y_min = max(y_min, 1 + (diff - 1) % n)\n        y_max = min(y_max, 1 + (diff - 1) // n)\n\n        # If x_max is less than x_min or y_max is less than y_min,\n        # then there is no possible matrix size that satisfies the condition\n        if x_max < x_min or y_max < y_min:\n            return \"NO\"\n\n    # If x_min and x_max are equal and y_min and y_max are equal,\n    # then there is a unique matrix size that satisfies the condition\n    if x_min == x_max and y_min == y_max:\n        return \"YES\\n{} {}\".format(x_min, y_min)\n\n    # If x_min and x_max are equal, then there are multiple possible matrix sizes\n    # that satisfies the condition\n    if x_min == x_max:\n        return \"YES\\n{} {}\".format(x_min, y_min if y_min <= y_max else y_max)\n\n    # If y_min and y_max are equal, then there are multiple possible matrix sizes\n    # that satisfies the condition\n    if y_min == y_max:\n        return \"YES\\n{} {}\".format(x_min if x_min <= x_max else x_max, y_min)\n\n    #", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def min_deletions(a, b):\n    j = 0\n    for char in a:\n        while j < len(b) and b[j] != char:\n            j += 1\n        if j == len(b):\n            return '-'\n        j += 1\n    return b[:j]\n\n# Read input strings\na = input()\nb = input()\n\n# Compute and print the result\nprint(min_deletions(a, b))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "import heapq\n\ndef min_blows(n, x, d, h):\n    # Create a heap to store the types of blows\n    heap = [(d[i], -h[i]) for i in range(n)]\n    heapq.heapify(heap)\n\n    # Count the number of blows\n    count = 0\n    while x > 0:\n        # Get the type of blow with the smallest d and largest h\n        d_, h_ = heapq.heappop(heap)\n        \n        # Calculate the new number of heads\n        new_x = max(0, x - d_)\n        \n        # Update the number of heads that the current blow can decrease\n        if new_x > 0:\n            d_[0] = min(d_[0], new_x)\n            \n        # Update the heap\n        heapq.heappush(heap, (d_, -h_))\n        \n        # Increase the number of blows\n        count += 1\n        \n        # Update the number of heads\n        x = new_x + h_\n        \n    # If all the heads are defeated, return the number of blows\n    if x == 0:\n        return count\n    # Otherwise, return -1\n    else:\n        return -1\n\nt = int(input().strip())\nfor _ in range(t):\n    n, x = map(int, input().strip().split())\n    d = list(map(int, input().strip().split()))\n    h = list(map(int, input().strip().split()))\n    print(min_blows(n, x, d, h))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def max\\_good\\_subset\\_weight():\n    W = int(input())\n    weights = list(map(int, input().split()))\n    n = len(weights)\n\n    # Initialize the dp array with all values set to 0\n    dp = [[0 for _ in range(W + 1)] for _ in range(n + 1)]\n\n    # The base case: when there are no items\n    for w in range(W + 1):\n        dp[0][w] = 0\n\n    # Fill in the dp array\n    for i in range(1, n + 1):\n        for w in range(W + 1):\n            if w >= weights[i - 1]:\n                dp[i][w] = max(dp[i - 1][w], dp[i - 1][w - weights[i - 1]] + weights[i - 1])\n            else:\n                dp[i][w] = dp[i - 1][w]\n\n    # The answer is the value in the bottom-right corner of the dp array\n    return dp[n][W]\n\nprint(max\\_good\\_subset\\_weight())", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "import math\n\ndef min_traps(m, x):\n    if math.gcd(m, x) != 1:\n        return -1\n    else:\n        return (m - 1) // x + 1\n\n# Test cases\nprint(min_traps(4, 3)) # 3\nprint(min_traps(5, 2)) # 2", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def can_achieve(n, k, a):\n    # Initialize result array with -1\n    v = [-1] * n\n    # Initialize power of k\n    k_power = 1\n    # Loop until k^power exceeds the maximum value in a\n    while k_power <= 10**16:\n        # Find the maximum value in a that is less than or equal to k_power\n        max_val = max(x for x in a if x <= k_power)\n        # If the maximum value is equal to k_power\n        if max_val == k_power:\n            # Set the positions of the maximum value in v to k_power\n            for i, x in enumerate(a):\n                if x == max_val:\n                    v[i] = k_power\n            # Return True\n            return True\n        # Increase power of k\n        k_power *= k\n    # Return False\n    return False\n\nT = int(input().strip())\nfor t in range(T):\n    n, k = map(int, input().strip().split())\n    a = list(map(int, input().strip().split()))\n    # Call can_achieve function and convert the result to uppercase YES or NO\n    print('YES' if can_achieve(n, k, a) else 'NO')", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "import sys\n\ndef solve():\n    n = int(input().strip())\n    a = list(map(int, input().strip().split()))\n\n    # Initialize minimum cost and optimal t for each possible value of t\n    min_cost = [float('inf')] * 101\n    min_cost[max(a)] = 0\n\n    # Iterate over each stick\n    for i in range(n):\n        # Iterate over each possible value of t\n        for t in range(101):\n            # Calculate the cost of changing stick i to be almost good for t\n            cost = abs(a[i] - t)\n\n            # If changing stick i to be almost good for t results in a lower cost than the current minimum cost for t,\n            # update the minimum cost and optimal t for t\n            if cost + min_cost[t] < min_cost[max(0, t - 1), max(t + 1)]:\n                min_cost[max(0, t - 1), max(t + 1)] = cost + min_cost[t]\n\n    # Find the minimum cost and optimal t over all possible values of t\n    min_cost_all = min(min_cost)\n    optimal_t = min_cost.index(min_cost_all)\n\n    # Print the minimum cost and optimal t\n    print(optimal_t, min_cost_all)\n\nif __name__ == \"__main__\":\n    solve()", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "a = int(input())\nb = int(input())\nc = int(input())\n\n# Calculate the maximum number of sets of fruits that can be used\nmax_sets = min(a, b // 2, c // 4)\n\n# Calculate the total number of fruits that can be used\ntotal_fruits = max_sets * (1 + 2 + 4)\n\nprint(total_fruits)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef max_gcd_sequence(n, k):\n    if k == 1:\n        return [n]\n    elif k > n:\n        return -1\n    else:\n        i = 2\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                g = n // i\n                if gcd(i, g) > 1 and k - 1 >= g:\n                    return [i] + [g] * (k - 1)\n                n = n // i - 1\n                i = 2\n        if n > 1 and k - 1 >= n:\n            return [n] + [1] * (k - 1)\n        return -1\n\nn, k = map(int, input().split())\nsequence = max_gcd_sequence(n, k)\nif sequence == -1:\n    print(-1)\nelse:\n    print(*sequence)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "k, a, b = map(int, input().split())\nprint( ((b//k) - (a-1)//k) + 1 )", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def solve(n, k, t):\n    # Calculate the number of full cycles before t\n    cycles = (t - 1) // k\n\n    # Calculate the remaining time after the full cycles\n    remaining_time = (t - 1) % k\n\n    # Calculate the number of standing spectators after the full cycles\n    standing_spectators_after_cycles = (cycles * k) % n\n\n    # Calculate the number of standing spectators at the remaining time\n    standing_spectators_at_remaining_time = remaining_time\n    if remaining_time <= k // 2:\n        standing_spectators_at_remaining_time = remaining_time + 1\n    elif k % 2 == 0 and remaining_time == k // 2 + 1:\n        standing_spectators_at_remaining_time = remaining_time - 1\n\n    # Calculate the final answer\n    answer = standing_spectators_after_cycles + standing_spectators_at_remaining_time\n    if answer > n:\n        answer -= n\n    return answer\n\n# Test cases\nprint(solve(10, 5, 3)) # 3\nprint(solve(10, 5, 7)) # 5\nprint(solve(10, 5, 12)) # 3", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "n = int(input())\nticket = input()\n\n# Calculate the sum of all digits\ntotal_sum = sum(int(digit) for digit in ticket)\n\n# Initialize a set to store the sum of segments\nsegment_sums = set()\n\n# Try to divide the ticket into segments with length from 1 to n/2\nfor segment_length in range(1, n//2 + 1):\n    # Calculate the sum of the current segment\n    segment_sum = 0\n    for i in range(segment_length):\n        segment_sum += int(ticket[i])\n    # Add the sum to the set\n    segment_sums.add(segment_sum)\n    # Try to divide the rest of the ticket\n    for i in range(segment_length, n - segment_length + 1, segment_length):\n        segment_sum -= int(ticket[i - segment_length])\n        segment_sum += int(ticket[i])\n        segment_sums.add(segment_sum)\n\n# Check if the ticket is lucky\nif len(segment_sums) > 1 and total_sum in segment_sums:\n    print(\"YES\")\nelse:\n    print(\"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "A, B, C, N = map(int, input().split())", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def max\\_chocolates(n, a, b, p, q):\nmax\\_count = 0\n\n# Handling the case when the tile with index divisible by a and b is painted Red\nmax\\_count = (p*(n//a) + q*(n//b)) if (n%a == 0 or n%b == 0) else 0\n\n# Handling the case when the tile with index divisible by a and b is painted Blue\nmax\\_count = max(max\\_count, p*(n//a) + q*(n//b - 1) + q*(n//(a*b)) if (n%a == 0 and n%b == 0) else 0)\n\n# Handling the case when the tile with index divisible by a and b is painted Red\nmax\\_count = max(max\\_count, p*(n//a - 1) + q*(n//b) + p*q*(n//(a*b)) if (n%a == 0 and n%b != 0) else 0)\n\n# Handling the case when the tile with index divisible by a and b is painted Red\nmax\\_count = max(max\\_count, p*(n//a - 1) + q*(n//b - 1) + (p+q)*q*(n//(a*b)) if (n%a != 0 and n%b != 0) else 0)\n\nreturn max\\_count\n\n# Taking input\nn, a, b, p, q = map(int, input().split())\n\n# Printing the answer\nprint(max\\_chocolates(n, a, b, p, q))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def max\\_min\\_cake\\_pieces(n, a, b):\n    # Calculate the maximum number of pieces that can be placed on a single plate\n    max\\_pieces = min(a, b, n)\n\n    # Calculate the minimum number of plates needed to serve each cake\n    min\\_plates = (a + max\\_pieces - 1) // max\\_pieces + (b + max\\_pieces - 1) // max\\_pieces\n\n    # If the number of plates is less than the minimum number needed,\n    # increase the max_pieces and try again\n    while min\\_plates > n:\n        max\\_pieces -= 1\n        min\\_plates = (a + max\\_pieces - 1) // max\\_pieces + (b + max\\_pieces - 1) // max\\_pieces\n\n    return max\\_pieces\n\n# Test cases\nprint(max\\_min\\_cake\\_pieces(5, 2, 3)) # 1\nprint(max\\_min\\_cake\\_pieces(4, 7, 10)) # 3", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def missing_meals(b, d, s):\n    # The minimum number of meals that Vasiliy could have missed is\n    # the maximum of the number of breakfasts, dinners, and suppers\n    # minus the total number of meals that he had.\n    return max(b, d, s) - (b + d + s)\n\n# Read the number of breakfasts, dinners, and suppers from input\nb, d, s = map(int, input().split())\n\n# Print the minimum number of meals that Vasiliy could have missed\nprint(missing_meals(b, d, s))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def min\\_seconds(n, pos, l, r):\nif l == 1 and r == n:\nreturn 0\n\n# Initialize the number of closed tabs to the left and right of the cursor\nleft, right = 0, 0\nif l > 1:\nleft = l - 1\nif r < n:\nright = n - r\n\n# Move the cursor to the leftmost or rightmost unclosed tab\nif pos < l:\npos = l - left\nelif pos > r:\npos = r + right\n\n# Compute the minimum number of seconds required to close all the tabs outside the segment [l, r]\nreturn pos - l + r - pos + max(left, right)\n\n# Read the input\nn, pos, l, r = map(int, input().split())\n\n# Print the result\nprint(min\\_seconds(n, pos, l, r))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "n = int(input().strip())\nratings = []\nfor _ in range(n):\n    a, b = map(int, input().strip().split())\n    ratings.append((a, b))\n\n# Check if the round is unrated\nif len(set(a for a, b in ratings)) == 1:\n    print(\"unrated\")\n    exit()\n\n# Check if the round is rated\nfor i in range(1, n):\n    if ratings[i - 1][1] > ratings[i][1] and ratings[i - 1][0] < ratings[i][0]:\n        print(\"rated\")\n        exit()\n\n# If we haven't determined if the round is rated or not yet, it must be 'maybe'\nprint(\"maybe\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def move(n: int) -> tuple[int, int]:\n    direction = 0  # 0: right, 1: down-right, 2: down-left, 3: up-left, 4: up, 5: up-right\n    x, y = 0, 0\n\n    for _ in range(n):\n        if direction == 0:\n            if y % 2 == 0:\n                x += 1\n            else:\n                x += 2\n            y += 1\n            direction = 1\n        elif direction == 1:\n            y += 1\n            direction = 2\n        elif direction == 2:\n            if y % 2 == 0:\n                x -= 1\n            else:\n                x -= 2\n            y += 1\n            direction = 3\n        elif direction == 3:\n            y -= 1\n            direction = 4\n        elif direction == 4:\n            if y % 2 == 0:\n                x += 1\n            else:\n                x -= 1\n            y -= 1\n            direction = 5\n        elif direction == 5:\n            y -= 1\n            direction = 0\n\n    return x, y\n\nn = int(input())\nx, y = move(n)\nprint(x, y)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "n = int(input())\na = int(input())\nb = int(input())\n\n# Calculate the total length of the sides of the frames\ntotal_length = 2 * 2 * a + 2 * b\n\n# Calculate the number of wooden bars needed\nnum_bars = total_length // n\n\n# If there is any leftover length, add one more bar\nif total_length % n != 0:\n    num_bars += 1\n\nprint(num_bars)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def check\\_flag(n, m, field):\nstripe\\_height = n // 3\nfor i in range(3):\nif field[i \\* stripe\\_height:(i + 1) \\* stripe\\_height].count('R') != stripe\\_height or \\\nfield[i \\* stripe\\_height:(i + 1) \\* stripe\\_height].count('G') != stripe\\_height or \\\nfield[i \\* stripe\\_height:(i + 1) \\* stripe\\_height].count('B') != stripe\\_height:\nreturn \"NO\"\nreturn \"YES\"\n\nn, m = map(int, input().split())\nfield = []\nfor i in range(n):\nfield.append(input())\n\nif n % 3 != 0 or m % 3 != 0:\nprint(\"NO\")\nelse:\nprint(check\\_flag(n, m, field))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def check\\_flag(n, m, field):\nstripe\\_height = n // 3\nfor i in range(3):\nif field[i \\* stripe\\_height:(i + 1) \\* stripe\\_height].count('R') != stripe\\_height or \\\nfield[i \\* stripe\\_height:(i + 1) \\* stripe\\_height].count('G') != stripe\\_height or \\\nfield[i \\* stripe\\_height:(i + 1) \\* stripe\\_height].count('B') != stripe\\_height:\nreturn \"NO\"\nreturn \"YES\"\n\nn, m = map(int, input().split())\nfield = []\nfor i in range(n):\nfield.append(input())\n\nif n % 3 != 0 or m % 3 != 0:\nprint(\"NO\")\nelse:\nprint(check\\_flag(n, m, field))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def pineapple\\_bark(t, s, x):\nif x < t:\nreturn \"NO\"\nelse:\nreturn \"YES\" if (x - t) % s < 2 else \"NO\"\n\n# Test cases\nprint(pineapple\\_bark(3, 10, 4)) # NO\nprint(pineapple\\_bark(3, 10, 3)) # YES\nprint(pineapple\\_bark(3, 8, 51)) # YES\nprint(pineapple\\_bark(3, 8, 52)) # YES", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "import math\n\ndef max_divisor(n):\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return n // i if i * (n // i) == n else i\n    return 1\n\ndef min_tax(n):\n    if n % 2 == 0:\n        return n // 2\n    else:\n        return (n + 1) // 2\n\nn = int(input())\nif n == 2:\n    print(1)\nelse:\n    print(min_tax(n))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "import math\n\ndef power(x, y, p):\n    res = 1\n    x = x % p\n    while (y > 0):\n        if (y & 1):\n            res = (res * x) % p\n        y = y >> 1\n        x = (x * x) % p\n    return res\n\ndef invmod(a, b):\n    b0 = b", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def min\\_operations(n, s):\nif n == 1:\nreturn 1\n\ndp = [0] \\* (n + 1)\ndp[0], dp[1] = 0, 1\n\nfor i in range(2, n + 1):\ndp[i] = i\nfor j in range(1, i // 2 + 1):\nif s[j - 1] == s[i - 1]:\ndp[i] = min(dp[i], dp[j] + 1)\n\nreturn dp[n]\n\nn = int(input())\ns = input()\n\nprint(min\\_operations(n, s))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def cat_furrier_transform(x):\n    operations = []\n    while True:\n        if (2 ** int(math.log2(x + 1)) - 1) != x:\n            n = int(math.log2(x + 1 - (2 ** int(math.log2(x + 1)))))\n            operations.append(n)\n            x ^= (2 ** n - 1)\n        else:\n            break\n        x += 1\n    return operations\n\nx = int(input())\noperations = cat_furrier_transform(x)\nprint(len(operations))\nfor i in operations[::2]:\n    print(i, end=' ')", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def convert_to_decimal(number, base):\n    result = 0\n    for digit in number:\n        result = result * base + digit\n    return result\n\ndef compare_numbers(X, bx, Y, by):\n    return '>' if convert_to_decimal(X, bx) > convert_to_decimal(Y, by) else ('=' if convert_to_decimal(X, bx) == convert_to_decimal(Y, by) else '<')\n\nn, bx = map(int, input().split())\nX = list(map(int, input().split()))[::-1]\nm, by = map(int, input().split())\nY = list(map(int, input().split()))[::-1]\n\nprint(compare_numbers(X, bx, Y, by))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "# Get the user name from the input\nuser_name = input()\n\n# Calculate the number of distinct characters in the user name\nnum_distinct_chars = len(set(user_name))\n\n# Determine the gender of the user by the hero's method\nif num_distinct_chars % 2 == 0:\n    print(\"CHAT WITH HER!\")\nelse:\n    print(\"IGNORE HIM!\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def solve():\n    n, a, b = map(int, input().split())\n    table = [0] * (a + b)\n    denied = 0\n    for t in map(int, input().split()):\n        if t == 1:\n            if a > 0:\n                table[0] -= 1\n                a += 1\n            elif b > 0 and table[1] > 0:\n                table[1] -= 1\n                b -= 1\n            elif b > 0 and table[1] == 0:\n                denied += 1\n                b -= 1\n                table[1] = 2\n            else:\n                denied += 1\n        else:\n            if b > 0 and table[1] == 1:\n                table[1] = 2\n                b -= 1\n            elif b > 0 and table[1] > 1:\n                table[1] -= 2\n                b -= 1\n            elif a > 0 and b > 0:\n                table[0] -= 1\n                a -= 1\n                table[1] += 1\n                b -= 1\n            else:\n                denied += 2\n    print(denied)\n\n\nsolve()", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def check_horizontal(board, row):\n    for col in range(len(board[0]) - 4):\n        if board[row][col] == '.' and all(board[row][col:col+5] == 'X'):\n            return True\n    return False\n\ndef check_vertical(board, col):", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def min_burles(n, m, a, b):\n    # Calculate the difference between n and the closest multiple of m\n    diff = (n - 1) % m\n    # If the difference is 0, then no need to build or demolish any boxes\n    if diff == 0:\n        return 0\n    # Calculate the number of boxes to be built or demolished\n    num_boxes = (diff if diff < m//2 else m - diff)\n    # Return the minimum cost to build or demolish the boxes\n    return num_boxes * a if a < b else num_boxes * b\n\n# Read the input values\nn, m, a, b = map(int, input().split())\n# Print the minimum amount of burles\nprint(min_burles(n, m, a, b))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "n = int(input().strip())\na = list(map(int, input().strip().split()))\n\nleft, right = 0, 0\nresult = []\nwhile left < n or right < n:\n    if left < n and a[left] != 0:\n        left += 1\n    elif right < n and a[right] == 0:\n        result.append(right - left)\n        right += 1\n    else:\n        right += 1\n\nprint(*result)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "k, a, b = map(int, input().split())\nprint( ((b//k) - (a-1)//k) + 1 )", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def is\\_valid\\_accordion(accordion):\n\treturn len(accordion) >= 3 and accordion[0] == '[' and accordion[-1] == ']' and accordion.count(':') == 2\n\ndef max\\_accordion\\_length(s):", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def min\\_coins():\n    n, m, k, l = map(int, input().split())\n    if l > n or (n - k) % m != 0:\n        print(-1)\n        return\n    print((n - k) // m)\n\nmin\\_coins()", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def check_win(board, player):\n    n = 4\n    # Check rows and columns\n    for i in range(n):\n        if all(board[j][i] == player for j in range(n)) or all(board[i][j] == player for j in range(n)):\n            return True\n    # Check diagonals\n    if all(board[i][i] == player for i in range(n)) or all(board[i][n-i-1] == player for i in range(n)):\n        return True\n    return False\n\ndef tic_tac_toe():\n    board = [input() for _ in range(4)]\n    for i in range(4):\n        for j in range(4):\n            if board[i][j] == '.':\n                board[i][j] = 'x'\n                if check_win(board, 'x'):\n                    print('YES')\n                    return\n                board[i][j] = '.'\n\n    print('NO')\n\ntic_tac_toe()", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\n\n# Find the index of the minimum and maximum elements\nmin_index = a.index(1)\nmax_index = a.index(n)\n\n# Calculate the distance between the minimum and maximum elements\ndistance = abs(min_index - max_index)\n\n# Perform the swap to maximize the distance\nif min_index < max_index:\n    a[min_index], a[max_index - 1] = a[max_index - 1], a[min_index]\nelse:\n    a[min_index], a[max_index + 1] = a[max_index + 1], a[min_index]\n\n# Calculate the new distance between the minimum and maximum elements\nnew_distance = abs(a.index(1) - a.index(n))\n\n# Print the maximum possible distance\nprint(max(distance, new_distance))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def will\\_write(b\\_1, q, l, bad\\_numbers):\nnumbers = set()\ni = 1\nn = b\\_1\nwhile True:\nif n in numbers or n in bad\\_numbers:\ni += 1\nn = b\\_1 \\* q**i\ncontinue\nnumbers.add(n)\nif abs(n) > l:\nreturn len(numbers) if len(numbers) < float('inf') else 'inf'\ni += 1\n\nb\\_1, q, l, m = map(int, input().split())\nbad\\_numbers = set(map(int, input().split()))\n\nresult = will\\_write(b\\_1, q, l, bad\\_numbers)\nprint(result)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "n, k = map(int, input().split())\n\n# Find the position of the rightmost digit that should be kept\nkeep_pos = -1\nwhile keep_pos >= -k and n % 5 != 0:\n    keep_pos -= 1\n    n //= 10\n\n# Calculate the number of digits to remove\nto_remove = len(str(n)) + keep_pos\n\n# Print the result\nprint(max(0, to_remove))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "import sys\n\ndef max_heapify(arr, i, n):\n    l = 2 * i + 1\n    r = 2 * i + 2\n    max_idx = i\n    if l < n and arr[l] > arr[max_idx]:\n        max_idx = l\n    if r < n and arr[r] > arr[max_idx]:\n        max_idx = r\n    if max_idx != i:\n        arr[i], arr[max_idx] = arr[max_idx], arr[i]\n        max_heapify(arr, max_idx, n)\n\ndef min_heapify(arr, i, n):\n    l = 2 * i + 1\n    r = 2 * i + 2\n    min_idx = i\n    if l < n and arr[l] < arr[min_idx]:\n        min_idx = l\n    if r < n and arr[r] < arr[min_idx]:\n        min_idx = r\n    if min_idx != i:\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n        min_heapify(arr, min_idx, n)\n\ndef heap_sort(arr):\n    n = len(arr)\n    for i in range(n//2 - 1, -1, -1):\n        max_heapify(arr, i, n)\n    for i in range(n-1, -1, -1):\n        arr[0], arr[i] = arr[i], arr[0]\n        max_heapify(arr, 0, i)\n\ndef play_war(n, s1, s2):\n    if n == 1:\n        return (0, s1[0])\n    h1 = [0] * (n // 2)\n    h2 = [0] * (n // 2)\n    for i in range(n // 2):\n        h1[i] = s1.pop(0)\n        h2[i] = s2.pop(0)\n    heap_sort(h1", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def bitland_game(n, a):\n    # If there is only one element in the array, BitLGM can win by taking it\n    if n == 1:\n        return \"BitLGM\"\n\n    # If the sum of the array is less than or equal to 1, BitAryo can win\n    if sum(a) <= 1:\n        return \"BitAryo\"\n\n    # If the minimum value in the array is 0, BitAryo can win\n    if min(a) == 0:\n        return \"BitAryo\"\n\n    # If the array has two elements, BitAryo can win by taking the smaller element\n    if n == 2:\n        if a[0] > a[1]:\n            a[0], a[1] = a[1], a[0]\n        if a[0] == a[1]:\n            return \"BitAryo\"\n        if a[0] > 1:\n            return \"BitAryo\"\n        else:\n            return \"BitLGM\"\n\n    # BitLGM can always reduce the array to a smaller subproblem where n is 1, 2 or 3\n    for i in range(n):\n        if a[i] > 0:\n            a[i] -= 1\n            break\n    for i in range(n):\n        if a[i] > 0:\n            for j in range(i+1, n):\n                if a[j] > 0:\n                    a[i], a[j] = a[j], a[i]\n                    break\n            a[i] -= 1\n            for j in range(i+1, n):\n                a[j] -= 1\n            break\n    for i in range(n):\n        if a[i] > 1:\n            a[i] -= 1\n            break\n    for i in range(n):\n        if a[i] > 0:\n            a[i] -= 1\n            break\n\n    return bitland_game(n-1 if n > 3 else n,", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\n\n# Check if the first element can be erased\nif a[1] - a[0] > 1:\n    print(1)\nelse:\n    # Find the length of the longest sequence of equal or increasing differences\n    diff = a[1] - a[0]\n    count = 2\n    for i in range(2, n):\n        if a[i] - a[i-1] == diff:\n            count += 1\n        elif a[i] - a[i-1] > diff:\n            diff = a[i] - a[i-1]\n            count = 2\n\n    print(count)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def cat_furrier_transform(x):\n    operations = []\n    while True:\n        if (2 ** int(math.log2(x + 1)) - 1) != x:\n            n = int(math.log2(x + 1 - (2 ** int(math.log2(x + 1)))))\n            operations.append(n)\n            x ^= (2 ** n - 1)\n        else:\n            break\n        x += 1\n    return operations\n\nx = int(input())\noperations = cat_furrier_transform(x)\nprint(len(operations))\nfor i in operations[::2]:\n    print(i, end=' ')", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "n, m = map(int, input().split())\na = []\nfor _ in range(n):\n    a.append(list(input()))\n\n# try all possible sizes of the square\nfor k in range(min(n, m)):\n    # check if there is a square of size k\n    for i in range(n - k + 1):\n        for j in range(m - k + 1):\n            if a[i][j] == 'B' and all([a[x][y] == 'B' for x in range(i, i + k) for y in range(j, j + k)]):\n                # if there is, print the number of cells to be painted and exit\n                print(n * m - (k ** 2))\n                exit()\n\n# if no square is found, print -1\nprint(-1)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def winner(xp, yp, xv, yv):\n    # If Polycarp is already at (0, 0), he wins\n    if xp == 0 and yp == 0:\n        return \"Polycarp\"\n    # If Vasiliy is at (0, 0), he wins\n    if xv == 0 and yv == 0:\n        return \"Vasiliy\"\n    # If Polycarp can reach (0, 0) in one move, he wins\n    if xp - 1 >= 0 and yp - 1 >= 0:\n        return \"Polycarp\"\n    # If Vasiliy can reach (0, 0) in one move, he wins\n    if xv - 1 >= 0 and yv - 1 >= 0 and xv - 2 >= 0:\n        return \"Vasiliy\"\n    # If Polycarp can reach (0, 0) in two moves, he wins\n    if xp - 2 >= 0 and yp - 2 >= 0:\n        return \"Polycarp\"\n    # Otherwise, Vasiliy wins\n    return \"Vasiliy\"\n\n# Read input\nxp, yp, xv, yv = map(int, input().split())\n# Print the winner\nprint(winner(xp, yp, xv, yv))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def max_permutation(a, b):\n    # Convert the numbers to strings to manipulate digits\n    a_str = str(a)\n    b_str = str(b)\n\n    # Create a list of digits from a\n    a_digits = list(a_str)\n\n    # Sort the digits in reverse order to get the maximum permutation\n    a_digits.sort(reverse=True)\n\n    # Convert the permuted digits back to an integer\n    result = int(\"\".join(a_digits))\n\n    # Check if the result is greater than b\n    if result > int(b_str):\n        # If so, return a\n        result = int(a_str)\n\n    # Check if the result has leading zeros\n    while result > 0 and result % 10 == 0:\n        # If so, remove the leading zero\n        result //= 10\n\n    return result\n\n# Test the function\na = 123\nb = 222\nprint(max_permutation(a, b))  # Output: 213\n\na = 3921\nb = 10000\nprint(max_permutation(a, b))  # Output: 9321\n\na = 4940\nb = 5000\nprint(max_permutation(a, b))  # Output: 4940", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "import math\n\ndef solve(y1, y2, yw, xb, yb, r):\n    goal_width = y2 - y1\n    dx = math.sqrt(r**2 - (yw - yb)**2)\n    if dx > xb or dx < -xb:\n        return -1\n    xw = xb + dx\n    if xw < 0 or xw > goal_width:\n        return -1\n    return xw\n\n# Test cases\nprint(solve(4, 10, 13, 10, 3, 1))  # 4.3750000000\nprint(solve(1, 4, 6, 2, 2, 1))  # -1\nprint(solve(3, 10, 15, 17, 9, 2))  # 11.3333333333", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def check_horizontal(board, row):\n    for col in range(len(board[0]) - 4):\n        if board[row][col] == '.' and all(board[row][col:col+5] == 'X'):\n            return True\n    return False\n\ndef check_vertical(board, col):", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "import math\n\ndef calculate_angle(v1, v2):\n    dot_product = v1[0] * v2[0] + v1[1] * v2[1]\n    magnitude_v1 = math.sqrt(v1[0] ** 2 + v1[1] ** 2)\n    magnitude_v2 = math.sqrt(v2[0] ** 2 + v2[1] ** 2)\n    angle_rad = math.acos(dot_product / (magnitude_v1 * magnitude_v2))\n    angle_deg = math.degrees(angle_rad)\n    return angle_deg % 180\n\nn = int(input().strip())\nvectors = []\nfor i in range(n):\n    x, y = map(int, input().strip().split())\n    vectors.append((x, y))\n\nmin_angle = 180\nmin_vectors = None\nfor i in range(n):\n    for j in range(i + 1, n):\n        angle = calculate_angle(vectors[i], vectors[j])\n        if angle < min_angle:\n            min_angle = angle\n            min_vectors = (i + 1, j + 1)\n\nprint(*min_vectors)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "import sys\ninput = sys.stdin.readline\n\nMOD = 1000000007\n\ndef pow_mod(a, b):\n    res = 1\n    while b > 0:\n        if b % 2 == 1:\n            res = res * a % MOD\n        a = a * a % MOD\n        b //= 2\n    return res\n\ndef solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    cnt = [0] * 2\n    for x in a:\n        cnt[x] += 1\n    if cnt[0] < k or cnt[1] < k:\n        print(0)\n        return\n    ans = pow_mod(2, k)\n    if n - 2 * k > 0:\n        ans = (ans - pow_mod(2, k) + MOD) % MOD\n    cnt[1] -= k\n    ans = ans * pow_mod(cnt[0], MOD - 2) % MOD\n    ans = ans * pow_mod(cnt[1], MOD - 2) % MOD\n    print(ans)\n\nsolve()", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def canDistributeGrapes(x, y, z, a, b, c):\n    # Check if Andrew can eat enough green grapes\n    if x > a:\n        return False\n\n    # Distribute the green grapes to Andrew first\n    a -= x\n\n    # Check if Dmitry can eat enough grapes excluding black ones\n    if y > a + b:\n        return False\n\n    # Distribute the remaining grapes to Dmitry and Michal\n    return a >= 0 and b >= 0 and c >= z\n\n# Read input\nx, y, z = map(int, input().split())\na, b, c = map(int, input().split())\n\n# Check if a distribution is possible\nif canDistributeGrapes(x, y, z, a, b, c):\n    print(\"YES\")\nelse:\n    print(\"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def kth_digit():\n    num = 1\n    while True:\n        for digit in str(num):\n            yield digit\n            num += 1\n\nk = int(input())\nprint(next(itertools.islice(kth_digit(), k-1, k)))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "n, k = map(int, input().split())\na = list(map(int, input().split()))\n\n# Initialize the minimum hours required to water the garden\nmin_hours = k\n\n# Iterate through the buckets\nfor i in range(n):\n  # Calculate the remainder when the garden length is divided by the bucket's length\n  rem = k % a[i]\n\n  # If the remainder is 0, then the bucket can water the entire garden\n  if rem == 0:\n    # Calculate the number of hours required to water the garden\n    hours = k // a[i]\n    # Update the minimum hours required to water the garden\n    min_hours = min(min_hours, hours)\n\n  # If the remainder is not 0, then the bucket cannot water the entire garden\n  # but it can water a subsegment of length a[i]-rem\n  elif rem != 0:\n    # Calculate the number of hours required to water the garden\n    hours = (k - rem) // a[i] + 1\n    # Update the minimum hours required to water the garden\n    min_hours = min(min_hours, hours)\n\n# Print the minimum number of hours required to water the garden\nprint(min_hours)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def can_form_non_increasing_seq():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n\n    # sort the elements in b\n    b.sort()\n\n    # initialize the number of zeros in a\n    zero_count = 0\n\n    # initialize a list to keep track of the unused elements in b\n    unused_b = set(b)\n\n    # iterate over the elements in a from right to left\n    for i in range(n - 1, -1, -1):\n        # if the current element is zero\n        if a[i] == 0:\n            # if there are no unused elements in b\n            if not unused_b:\n                # we cannot form a non-increasing sequence\n                return \"No\"\n            # get the smallest unused element in b\n            next_b = unused_b.pop()\n        # if the current element is not zero\n        else:\n            # set next_b to the current element\n            next_b = a[i]\n\n        # for each element in b that is greater than next_b\n        for j in range(len(b) - 1, -1, -1):\n            # if the element is unused and greater than next_b\n            if b[j] > next_b and j not in unused_b:\n                # we cannot form a non-increasing sequence\n                return \"No\"\n            # if the element is unused and equal to next_b\n            elif b[j] == next_b and j not in unused_b:\n                # mark the element as used\n                unused_b.remove(b[j])\n\n    # we can form a non-increasing sequence\n    return \"Yes\"\n\nprint(can_form_non_increasing_seq())", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def max_permutation(a, b):\n    # Convert the numbers to strings to manipulate digits\n    a_str = str(a)\n    b_str = str(b)\n\n    # Create a list of digits from a\n    a_digits = list(a_str)\n\n    # Sort the digits in reverse order to get the maximum permutation\n    a_digits.sort(reverse=True)\n\n    # Convert the permuted digits back to an integer\n    result = int(\"\".join(a_digits))\n\n    # Check if the result is greater than b\n    if result > int(b_str):\n        # If so, return a\n        result = int(a_str)\n\n    # Check if the result has leading zeros\n    while result > 0 and result % 10 == 0:\n        # If so, remove the leading zero\n        result //= 10\n\n    return result\n\n# Test the function\na = 123\nb = 222\nprint(max_permutation(a, b))  # Output: 213\n\na = 3921\nb = 10000\nprint(max_permutation(a, b))  # Output: 9321\n\na = 4940\nb = 5000\nprint(max_permutation(a, b))  # Output: 4940", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def min\\_length\\_to\\_reach\\_target(n, ops, x, y):\ndx, dy = 0, 0\nfor i, op in enumerate(ops):\nglobal\\_idx = i\nif op == 'R':\ndx += 1\nelif op == 'L':\ndx -= 1\nelif op == 'U':\ndy += 1\nelif op == 'D':\ndy -= 1\nif dx == x and dy == y:\nreturn 0\n\n# If the robot cannot reach the target position\nif dx != x or dy != y:\nreturn -1\n\n# Binary search to find the minimum subarray\nleft, right = 0, n - 1\nwhile left <= right:\nmid = (left + right) // 2\nif ops[mid] == 'R' and mid + dx > n or ops[mid] == 'L' and mid - dx < 0 or ops[mid] == 'U' and mid + dy > n or ops[mid] == 'D' and mid - dy < 0:\nright = mid - 1\nelse:\nleft = mid + 1\n\nreturn max(dx, dy, right - left + 1)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def min\\_time(n, m, k, a, b):\nn, m, k = map(int, (n, m, k))\na, b = map(int, (a, b))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def count_years_with_one_zero(a, b):\n    count = 0\n    for year in range(a, b+1):\n        if binary_representation_has_one_zero(year):\n            count += 1\n    return count\n\ndef binary_representation_has_one_zero(n):\n    binary_rep = format(n, 'b')\n    return binary_rep.count('0') == 1\n\n# Read input values\na, b = map(int, input().split())\n\n# Print the result\nprint(count_years_with_one_zero(a, b))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "import sys\n\ndef solve():\n    n = int(input().strip())\n    a = list(map(int, input().strip().split()))\n\n    # Initialize minimum cost and optimal t for each possible value of t\n    min_cost = [float('inf')] * 101\n    min_cost[max(a)] = 0\n\n    # Iterate over each stick\n    for i in range(n):\n        # Iterate over each possible value of t\n        for t in range(101):\n            # Calculate the cost of changing stick i to be almost good for t\n            cost = abs(a[i] - t)\n\n            # If changing stick i to be almost good for t results in a lower cost than the current minimum cost for t,\n            # update the minimum cost and optimal t for t\n            if cost + min_cost[t] < min_cost[max(0, t - 1), max(t + 1)]:\n                min_cost[max(0, t - 1), max(t + 1)] = cost + min_cost[t]\n\n    # Find the minimum cost and optimal t over all possible values of t\n    min_cost_all = min(min_cost)\n    optimal_t = min_cost.index(min_cost_all)\n\n    # Print the minimum cost and optimal t\n    print(optimal_t, min_cost_all)\n\nif __name__ == \"__main__\":\n    solve()", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "import sys\n\ndef find_area(points):\n    if len(points) != 2 and len(points) != 4:\n        return -1\n\n    x_coords = set([point[0] for point in points])\n    y_coords = set([point[1] for point in points])\n\n    if len(x_coords) != 2 or len(y_coords) != 2:\n        return -1\n\n    x_min, x_max = min(x_coords), max(x_coords)\n    y_min, y_max = min(y_coords), max(y_coords)\n\n    width = x_max - x_min\n    height = y_max - y_min\n\n    return width * height\n\ndef main():\n    n = int(sys.stdin.readline())\n    points = []\n\n    for i in range(n):\n        x, y = map(int, sys.stdin.readline().split())\n        points.append((x, y))\n\n    area = find_area(points)\n    print(area)\n\nif __name__ == \"__main__\":\n    main()", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "n = int(input())\ns = input()\n\n# Initialize the result to 0, since this is the smallest possible number of stones\nresult = 0\n\n# Loop through the string of operations\nfor operation in s:\n    # If the operation is to take a stone, we need to have at least one stone\n    # to be able to perform the operation, so we add one to the result\n    if operation == '-':\n        result += 1\n    # If the operation is to add a stone, we don't need to add anything to the result\n    # because the number of stones will simply increase by one\n\n# However, if the result is still 0 after processing all the operations,\n# this means that we have never taken any stones, so the number of stones\n# must be at least 1. Therefore, we return 1 in this case.\nif result == 0:\n    result = 1\n\n# Print the result\nprint(result)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def max\\_bourles(n, m, r, s, b):\nbuy\\_prices = sorted(s)\nsell\\_prices = sorted(b)\ni, j, result = 0, 0, r\nwhile i < n and j < m:\nif buy\\_prices[i] <= sell\\_prices[j]:\n# we can buy and sell, so we do it\nquantity = result // buy\\_prices[i]\nresult += quantity * (sell\\_prices[j] - buy\\_prices[i])\ni += 1\nj += 1\nelse:\n# we can't sell yet, so we move to the next buy price\ni += 1\nreturn result\n\n# read input\nn, m, r = map(int, input().split())\ns = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\n# compute and print the result\nprint(max\\_bourles(n, m, r, s, b))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "import re\n\ndef check_password(password):\n    if len(password) < 5:\n        return \"Too weak\"\n    elif not re.search(r'[A-Z]', password) or not re.search(r'[a-z]', password) or not re.search(r'\\d', password):\n        return \"Too weak\"\n    else:\n        return \"Correct\"\n\n# Test the function\npassword = input()\nprint(check_password(password))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def solve():\n    x, y, z = map(int, input().split())\n    if x > y:\n        return '+'\n    elif x < y:\n        return '-'\n    elif x == y and z == 0:\n        return '0'\n    else:\n        return '?'\n\n# In the following code, the function solve() is called and the result is printed.\nprint(solve())", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def min\\_time\\_to\\_post\\_office(d, k, a, b, t):\ntime = 0\ndist\\_driven = 0\nwhile dist\\_driven < d:\ntime += a\ndist\\_driven += 1\nif dist\\_driven == k:\ntime += t\ndist\\_driven = 0\nif dist\\_driven + k >= d:\ntime += (d - dist\\_driven) * b\nbreak\nreturn time\n\nd, k, a, b, t = map(int, input().split())\nprint(min\\_time\\_to\\_post\\_office(d, k, a, b, t))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def min\\_extra\\_tiles(hand):\nhand.sort()\nnum\\_sets = 0\nprev\\_num = -1\nprev\\_suit = None\nfor tile in hand:\nnum, suit = map(tuple, tile)\nif prev\\_suit is None:\nprev\\_suit = suit\ncontinue\nif suit == prev\\_suit:\nif num == prev\\_num + 1:\n# shuntsu\nreturn 0\nelse:\n# koutsu\nnum\\_sets += 1\nelse:\n# switch in suit\nprev\\_suit = suit\nprev\\_num = num\n# no mentsu yet\nnum\\_sets = 0\nreturn 1 if num\\_sets == 0 else 2\n\n# test\ncases = [\n(\"1s\", \"2s\", \"3s\"),\n(\"9m\", \"9m\", \"9m\"),\n(\"3p\", \"9m\", \"2p\"),\n]\nfor hand in cases:\nprint(min\\_extra\\_tiles(hand))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def is_valid(x):\n    # checks if x is a valid rectangle\n    return x % 2 == 0 and x // 2 % 2 == 0\n\ndef count_ways(n):\n    # count the number of ways to split the stick\n    count = 0\n    for a in range(1, n // 4 + 1):\n        if is_valid(a) and is_valid(n - 2 * a):\n            count += 1\n    return count\n\nn = int(input())\nprint(count_ways(n))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def count_pairs(n, m):\n    # Initialize a 5x5 matrix to count pairs for each remainder", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef min_seconds(x, y):\n    if x % 3 != y % 3:\n        return -1\n    g = gcd(x, y)\n    x //= g\n    y //= g\n    return (x - y) // 3\n\nif __name__ == \"__main__\":\n    x, y = map(int, input().split())\n    result = min_seconds(x, y)\n    if result != -1:\n        print(result)\n    else:\n        print(\"Impossible\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "n = int(input().strip())\nratings = []\nfor _ in range(n):\n    a, b = map(int, input().strip().split())\n    ratings.append((a, b))\n\n# Check if the round is unrated\nif len(set(a for a, b in ratings)) == 1:\n    print(\"unrated\")\n    exit()\n\n# Check if the round is rated\nfor i in range(1, n):\n    if ratings[i - 1][1] > ratings[i][1] and ratings[i - 1][0] < ratings[i][0]:\n        print(\"rated\")\n        exit()\n\n# If we haven't determined if the round is rated or not yet, it must be 'maybe'\nprint(\"maybe\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def max\\_number(n, cubes):\nn = int(n)\ncubes = [list(map(int, cube.split())) for cube in cubes]\n\navail\\_digits = [set() for _ in range(10)]\nfor cube in cubes:\nfor digit in cube:\navail\\_digits[digit].add(cube.index(digit))\n\nmax\\_num = 0\nfor i in range(1, 10):\nif i not in avail\\_digits[i]:\ncontinue\n\nfor j in range(i + 1, 10):\nif j not in avail\\_digits[j]:\ncontinue\n\nfor k in range(j + 1, 10):\nif k not in avail\\_digits[k]:\ncontinue\n\n# We have found 3 digits that are available on the cubes\n# Now we check if we can form a number using these digits\n\n# Sort the indices of the cubes containing the digits\nindices = sorted([avail\\_digits[i].pop(), avail\\_digits[j].pop(), avail\\_digits[k].pop()])\n\n# Try all possible rotations\nfor rotation in range(6):\n# Try all possible positions for the first digit\nfor pos\\_first in range(4 - rotation):\n# Try all possible positions for the second digit\nfor pos\\_second in range(3 - rotation):\n\nnum = 0\n# Construct the number\nnum = 100 * cubes[indices[0]][rotation + pos\\_first] + \\\n10 * cubes[indices[1]][rotation + pos\\_second + pos\\_first] + \\\ncubes[indices[2]][rotation + pos\\_first + pos\\_second]\n\nmax\\_num = max(max\\_num, num)\n\nreturn max\\_num\n\n# Read input\nn = input()\ncubes = []\nfor _ in range(n):\ncubes.append(input())\n\n# Print output\nprint(max\\_number(n, cubes))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def check_win(board, player):\n    n = 4\n    # Check rows and columns\n    for i in range(n):\n        if all(board[j][i] == player for j in range(n)) or all(board[i][j] == player for j in range(n)):\n            return True\n    # Check diagonals\n    if all(board[i][i] == player for i in range(n)) or all(board[i][n-i-1] == player for i in range(n)):\n        return True\n    return False\n\ndef tic_tac_toe():\n    board = [input() for _ in range(4)]\n    for i in range(4):\n        for j in range(4):\n            if board[i][j] == '.':\n                board[i][j] = 'x'\n                if check_win(board, 'x'):\n                    print('YES')\n                    return\n                board[i][j] = '.'\n\n    print('NO')\n\ntic_tac_toe()", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\n\n# Find the index of the smallest (in absolute value) non-zero element\nindex = 0\nmin_val = abs(a[0])\nfor i in range(1, n):\n    if abs(a[i]) < min_val and a[i] != 0:\n        min_val = abs(a[i])\n        index = i\n\n# Multiply all elements by -1, except for the smallest non-zero element\nfor i in range(n):\n    if i != index:\n        a[i] = -a[i]\n\nprint(*a)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "# Read input\nn = int(input())\nfiles = [input().split() for _ in range(n)]\n\n# Initialize variables\nexamples = [f for f, t in files if t == '1']\nregulars = [f for f, t in files if t == '0']\n\n# Create script\nscript = ['move %s %d' % (f, i+1) for i, f in enumerate(regulars)]\nscript += ['move %s %d' % (f, i+1) for i, f in enumerate(examples)]\n\n# Print minimum number of lines\nprint(len(script))\n\n# Print script\nfor line in script:\n    print(line)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def solve(n, k, t):\n    # Calculate the number of full cycles before t\n    cycles = (t - 1) // k\n\n    # Calculate the remaining time after the full cycles\n    remaining_time = (t - 1) % k\n\n    # Calculate the number of standing spectators after the full cycles\n    standing_spectators_after_cycles = (cycles * k) % n\n\n    # Calculate the number of standing spectators at the remaining time\n    standing_spectators_at_remaining_time = remaining_time\n    if remaining_time <= k // 2:\n        standing_spectators_at_remaining_time = remaining_time + 1\n    elif k % 2 == 0 and remaining_time == k // 2 + 1:\n        standing_spectators_at_remaining_time = remaining_time - 1\n\n    # Calculate the final answer\n    answer = standing_spectators_after_cycles + standing_spectators_at_remaining_time\n    if answer > n:\n        answer -= n\n    return answer\n\n# Test cases\nprint(solve(10, 5, 3)) # 3\nprint(solve(10, 5, 7)) # 5\nprint(solve(10, 5, 12)) # 3", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "import math\n\ndef min_norm(a, b):\n    # calculate the norm of A\n    norm_A = max(abs(a[0]), abs(a[1]), abs(b[0]), abs(b[1]))\n\n    # if A is already degenerate, then the answer is 0\n    if a[0]*b[1] - a[1]*b[0] == 0:\n        return 0\n\n    # calculate the determinant of A\n    det_A = a[0]*b[1] - a[1]*b[0]\n\n    # the minimum possible norm of A - B is the absolute value of the determinant\n    return abs(det_A)\n\n# read input\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\n# print the result\nprint(min_norm(a, b))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef solve(a1, b1, a2, b2, l, r):\n    # Calculate the greatest common divisor\n    g = gcd(a1, a2)\n    a1 //= g", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "n = int(input())\ns = input()\n\n# Initialize the result to 0, since this is the smallest possible number of stones\nresult = 0\n\n# Loop through the string of operations\nfor operation in s:\n    # If the operation is to take a stone, we need to have at least one stone\n    # to be able to perform the operation, so we add one to the result\n    if operation == '-':\n        result += 1\n    # If the operation is to add a stone, we don't need to add anything to the result\n    # because the number of stones will simply increase by one\n\n# However, if the result is still 0 after processing all the operations,\n# this means that we have never taken any stones, so the number of stones\n# must be at least 1. Therefore, we return 1 in this case.\nif result == 0:\n    result = 1\n\n# Print the result\nprint(result)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def winner(xp, yp, xv, yv):\n    # If Polycarp is already at (0, 0), he wins\n    if xp == 0 and yp == 0:\n        return \"Polycarp\"\n    # If Vasiliy is at (0, 0), he wins\n    if xv == 0 and yv == 0:\n        return \"Vasiliy\"\n    # If Polycarp can reach (0, 0) in one move, he wins\n    if xp - 1 >= 0 and yp - 1 >= 0:\n        return \"Polycarp\"\n    # If Vasiliy can reach (0, 0) in one move, he wins\n    if xv - 1 >= 0 and yv - 1 >= 0 and xv - 2 >= 0:\n        return \"Vasiliy\"\n    # If Polycarp can reach (0, 0) in two moves, he wins\n    if xp - 2 >= 0 and yp - 2 >= 0:\n        return \"Polycarp\"\n    # Otherwise, Vasiliy wins\n    return \"Vasiliy\"\n\n# Read input\nxp, yp, xv, yv = map(int, input().split())\n# Print the winner\nprint(winner(xp, yp, xv, yv))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def get_finger_movement(number):\n    finger_movement = [(0, 0)]\n    for digit in number:\n        if digit == '0' or digit == '1':\n            dx, dy = 0, 0\n        elif digit == '2' or digit == '3':\n            dx, dy = 1, 0\n        elif digit == '4' or digit == '5':\n            dx, dy = 1, 1\n        elif digit == '6' or digit == '7':\n            dx, dy = 0, 1\n        else:\n            dx, dy = -1, 1\n        finger_movement.append((finger_movement[-1][0] + dx, finger_movement[-1][1] + dy))\n    return finger_movement\n\ndef check_unique_finger_movement(n, number):\n    finger_movement = get_finger_movement(number)\n    unique = set()\n    for i in range(10 ** (n - 1), 10 ** n):\n        if i == int(number):\n            continue\n        if get_finger_movement(str(i)) == finger_movement:\n            return False\n    return True\n\nn = int(input())\nnumber = input()\nif check_unique_finger_movement(n, number):\n    print(\"YES\")\nelse:\n    print(\"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def binary\\_search(a, x):\nleft = 0\nright = len(a)\nwhile left < right:\nmiddle = (left + right) // 2\nif a[middle] <= x:\nleft = middle + 1\nelse:\nright = middle\nif left > 0 and a[left - 1] == x:\nreturn True\nreturn False\n\nMOD = 1000000007\ndef solve(n, x, pos):\n# Edge case when x is at the correct position\nif pos == n-1 and x == n:\nreturn 1\n# Edge case when x is at the first position\nif pos == 0 and x == 1:\nreturn 1\n# Edge case when x is not in the array\nif x > n or x == 1 and pos != 0:\nreturn 0\n\n# Calculate the number of valid permutations\ndp = [0] \\* (n+1)\ndp[0] = 1\nfor i in range(1, n+1):\n# If x is smaller than i, it should be at the left side of i\nif i >= x:\ndp[i] = (dp[i] + dp[i-x-1]) % MOD\n# If x is greater than i, it should be at the right side of i\ndp[i] = (dp[i] + dp[i-1] - dp[min(i-x, 0)] + MOD) % MOD\n\n# Check if x can be found by binary search\nfor i in range(pos+1, n):\nif a[i] == x and binary\\_search(a[:i], x):\nreturn dp[i]\nreturn 0\n\nn, x, pos = map(int, input().split())\na = list(range(1, n+1))\nprint(solve(n, x, pos))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def find\\_snooze\\_button\\_presses(x, hh, mm):\nminute = mm + x\nif minute >= 60:\nhour = hh + (minute // 60)\nminute = minute % 60\nif minute < 10:\nminute = \"0\" + str(minute)\nif hour < 10:\nhour = \"0\" + str(hour)\ntime = str(hour) + \":\" + str(minute)\ncount = 0\nwhile \"7\" not in time:\ncount += 1\nminute += x\nif minute >= 60:\nhour += 1\nminute %= 60\nif hour >= 24:\nhour %= 24\nif hour < 10:\nhour = \"0\" + str(hour)\ntime = str(hour) + \":\" + str(minute)\nreturn count\n\n# Test cases\nprint(find\\_snooze\\_button\\_presses(3, 11, 23)) # 2\nprint(find\\_snooze\\_button\\_presses(5, 1, 7)) # 0", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "import sys\nfrom collections import defaultdict\n\ndef is_valid(x, y, lines):\n    for l in lines:\n        if l[0] == 'v':\n            if y == l[1]:\n                return False\n        elif l[0] == 'h':\n            if x == l[1]:\n                return False\n    return True\n\ndef calculate_area(x1, y1, x2, y2, x3, y3):\n    return 0.5 * abs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))\n\ninput = sys.stdin.readlines()\nN, M = map(int, input[0].strip().split())\n\nn_lines = []\ne_lines = []\nfor i in range(1, 1+N):\n    a, b, c = map(int, input[i].strip().split())\n    n_lines.append((-1, c, a, b))\nfor i in range(1+N, 1+N+M):\n    d, e, f = map(int, input[i].strip().split())\n    e_lines.append((0, d, e, f))\n\nn_lines.sort(key=lambda x: (x[1], x[2]))\ne_lines.sort(key=lambda x: (x[1], x[2]))\n\nvertical_lines = defaultdict(int)\narea = 0\nfor line in n_lines:\n    while e_lines and e_lines[0][1] <= line[1]:\n        x1, y1, x2, y2 = e_lines.pop(0)\n        if y1 <= line[1] <= y2:\n            area += calculate_area(x1, line[1], x2, line[1], line[2], line[3])\n            vertical_lines[line[1]] += x2 - x1\n\n    x1, y1, x2, y2 = line\n    if line[1] in vertical_lines:\n        x3 = vertical_", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def binary\\_search(a, x):\nleft = 0\nright = len(a)\nwhile left < right:\nmiddle = (left + right) // 2\nif a[middle] <= x:\nleft = middle + 1\nelse:\nright = middle\nif left > 0 and a[left - 1] == x:\nreturn True\nreturn False\n\nMOD = 1000000007\ndef solve(n, x, pos):\n# Edge case when x is at the correct position\nif pos == n-1 and x == n:\nreturn 1\n# Edge case when x is at the first position\nif pos == 0 and x == 1:\nreturn 1\n# Edge case when x is not in the array\nif x > n or x == 1 and pos != 0:\nreturn 0\n\n# Calculate the number of valid permutations\ndp = [0] \\* (n+1)\ndp[0] = 1\nfor i in range(1, n+1):\n# If x is smaller than i, it should be at the left side of i\nif i >= x:\ndp[i] = (dp[i] + dp[i-x-1]) % MOD\n# If x is greater than i, it should be at the right side of i\ndp[i] = (dp[i] + dp[i-1] - dp[min(i-x, 0)] + MOD) % MOD\n\n# Check if x can be found by binary search\nfor i in range(pos+1, n):\nif a[i] == x and binary\\_search(a[:i], x):\nreturn dp[i]\nreturn 0\n\nn, x, pos = map(int, input().split())\na = list(range(1, n+1))\nprint(solve(n, x, pos))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "import math\n\ndef min_norm(a, b):\n    # calculate the norm of A\n    norm_A = max(abs(a[0]), abs(a[1]), abs(b[0]), abs(b[1]))\n\n    # if A is already degenerate, then the answer is 0\n    if a[0]*b[1] - a[1]*b[0] == 0:\n        return 0\n\n    # calculate the determinant of A\n    det_A = a[0]*b[1] - a[1]*b[0]\n\n    # the minimum possible norm of A - B is the absolute value of the determinant\n    return abs(det_A)\n\n# read input\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\n# print the result\nprint(min_norm(a, b))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def max_sum_digits(x):\n    # Generate the number with the maximum sum of digits\n    # by repeating the digit 9 as many times as possible\n    max_num = int(str(9) * (x // 9))\n    \n    # If x is not a multiple of 9, add one more 9 to the number\n    if x % 9 != 0:\n        max_num += 9\n    \n    return max_num\n\n# Read the input value of x\nx = int(input())\n\n# Print the result\nprint(max_sum_digits(x))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "n, s = map(int, input().split())\nv = list(map(int, input().split()))\n\nv.sort(reverse=True)\n\ncurrent_volume = 0\nfor i in range(n):\n    current_volume += v[i]\n    if current_volume >= s:\n        print(v[i])\n        break\nelse:\n    print(-1)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef find_solution(a1, b1, a2, b2):\n    l = gcd(a1, b1)\n    a1, b1 = a1 // l, b1 // l\n    l = gcd(a2, b2)\n    a2, b2 = a2 // l, b2 // l\n    if a1 == a2 and b1 == b2:\n        return 0, a1, b1, a2, b2\n    if a1 == a2:\n        k = lcm(b1, b2)\n        return (k // b1, a1, k, k // b2, a2)\n    if b1 == b2:", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "l, r, a = map(int, input().split())\n\n# The total number of players that can be included in the team\n# is limited by the number of left-handers and right-handers\n# since ambidexters can play with either hand\ntotal = min(l, r)\n\n# If the number of ambidexters is odd, then the team size must be even\n# and therefore cannot be equal to the total number of left-handers and right-handers\nif a % 2 == 1:\n    total -= 1\n\n# The number of left-handers and right-handers that can be included\n# in the team is half of the minimum of the two\nleft_right = total // 2\n\n# The number of ambidexters that can be included in the team\n# is the same as the number of left-handers and right-handers\nambidexters = total // 2\n\n# The final team size is the sum of the number of left-handers,\n# right-handers, and ambidexters\nteam_size = 2 * left_right + 2 * ambidexters\n\nprint(team_size)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "n, k = map(int, input().split())\nmain_courses = list(map(int, input().split()))\n\nadj_list = [[] for _ in range(n+1)]\nindegrees = [0] * (n+1)\nfor _ in range(n):\n    t, *deps = map(int, input().split())\n    adj_list[t] = deps\n    for dep in deps:\n        indegrees[dep] += 1\n\nqueue = [i for i in range(1, n+1) if indegrees[i] == 0 and i not in main_courses]\ncount = 0\norder = []\nwhile queue:\n    if len(queue) > 1 and count == k:\n        print(-1)\n        exit()\n    node = queue.pop(0)\n    order.append(node)\n    count += 1\n    for neighbor in adj_list[node]:\n        indegrees[neighbor] -= 1\n        if indegrees[neighbor] == 0:\n            queue.append(neighbor)\n\nif count < k:\n    print(-1)\nelse:\n    print(len(order))\n    print(' '.join(map(str, order)))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def kth_digit():\n    num = 1\n    digit_count = {1: 1}\n    while True:\n        for i in str(num):\n            if i not in digit_count:\n                digit_count[i] = 0\n            digit_count[i] += 1\n            if len(digit_count) >= k:\n                print(digit_count[i] // (len(str(num)) // 9))\n                return\n        num += 1\n\nkth_digit()", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "# Read input values\na, b, c = map(int, input().split())\n\n# Check if it's possible to break the shield\nif c % gcd(a, b) == 0:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "n = int(input())\nnums = set(map(int, input().split()))\n\nfor num in nums:\n    if num * 2 == n:\n        print(\"YES\")\n        print(num, num)\n        break\n    elif num * 2 > n and num not in nums - {num for num in nums if num * 2 <= n}:\n        print(\"YES\")\n        print(num, list(nums - {num})[0])\n        break\nelse:\n    print(\"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "n = int(input())\nsegments = {}\n\nfor i in range(n):\n    l, r = map(int, input().split())\n    segments[i] = (l, r)\n\nfor i, seg1 in segments.items():\n    for j, seg2 in segments.items():\n        if i != j and seg1[0] >= seg2[0] and seg1[1] <= seg2[1]:\n            print(i, j)\n            break\n    else:\n        continue\n    break\nelse:\n    print(-1, -1)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "n = int(input())\nsegments = {}\n\nfor i in range(n):\n    l, r = map(int, input().split())\n    segments[i] = (l, r)\n\nfor i, seg1 in segments.items():\n    for j, seg2 in segments.items():\n        if i != j and seg1[0] >= seg2[0] and seg1[1] <= seg2[1]:\n            print(i, j)\n            break\n    else:\n        continue\n    break\nelse:\n    print(-1, -1)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def solve(m, a, b):\n    # Initialize the result as 0\n    result = 0\n\n    # Create a set to store the distinct integers reachable from 0\n    reachable = {0}\n\n    # Initialize the current maximum reachable integer as 0\n    max_reach = 0\n\n    # Iterate from 1 to m\n    for i in range(1, m + 1):\n\n        # Try to extend the reach of the frog using a jump\n        new_reach = reachable | {x + a for x in reachable} | {x - b for x in reachable}\n\n        # Update the reachable set and maximum reach\n        reachable = new_reach\n        max_reach = max(max_reach, max(new_reach))\n\n        # Add the number of distinct integers reachable so far to the result\n        result += max_reach - i + 1\n\n    # Return the result\n    return result\n\n# Read the input\nm, a, b = map(int, input().split())\n\n# Print the result\nprint(solve(m, a, b))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "import sys\nfrom collections import defaultdict\n\ndef get_period(s):\n    for i in range(1, len(s)//2 + 1):\n        if s[:i] * (len(s) // i) == s:\n            return i\n    return len(s)\n\ndef solve(n, s):\n    if n == 1:\n        return 2 if s == '0' or s == '1' else 0\n\n    t = s * (n // len(s)) + s[:n % len(s)]\n    period = get_period(t)\n    count = (n // period) * (len(s) // period)\n\n    # if the period of t is not a factor of the length of s,\n    # then there are some shifts of t that will not contain s as a substring\n    if len(s) % period != 0:\n        # calculate the number of shifts that do not contain s\n        # by subtracting the number of shifts that do contain s\n        #", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def can_achieve(n, k, a):\n    # Initialize result array with -1\n    v = [-1] * n\n    # Initialize power of k\n    k_power = 1\n    # Loop until k^power exceeds the maximum value in a\n    while k_power <= 10**16:\n        # Find the maximum value in a that is less than or equal to k_power\n        max_val = max(x for x in a if x <= k_power)\n        # If the maximum value is equal to k_power\n        if max_val == k_power:\n            # Set the positions of the maximum value in v to k_power\n            for i, x in enumerate(a):\n                if x == max_val:\n                    v[i] = k_power\n            # Return True\n            return True\n        # Increase power of k\n        k_power *= k\n    # Return False\n    return False\n\nT = int(input().strip())\nfor t in range(T):\n    n, k = map(int, input().strip().split())\n    a = list(map(int, input().strip().split()))\n    # Call can_achieve function and convert the result to uppercase YES or NO\n    print('YES' if can_achieve(n, k, a) else 'NO')", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def count_pairs(n, m):\n    # Initialize a 5x5 matrix to count pairs for each remainder", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def min_cost(n, a, b, c):\n    # Calculate the minimum number of copybooks needed to make n+k divisible by 4\n    k = (4 - (n % 4)) % 4\n\n    # Calculate the minimum cost to buy k copybooks\n    cost = min(k * a, (k // 2) * b, (k // 3) * c)\n\n    return cost\n\n# Test cases\nprint(min_cost(1, 1, 3, 4)) # 3\nprint(min_cost(6, 2, 1, 1)) # 1\nprint(min_cost(4, 4, 4, 4)) # 0\nprint(min_cost(999999999, 1000000000, 1000000000, 1000000000)) # 1000000000", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "n, m = map(int, input().split())\nstars = []\nfor _ in range(n):\n    stars.append(input())", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def count_years_with_one_zero(a, b):\n    count = 0\n    for year in range(a, b+1):\n        if binary_representation_has_one_zero(year):\n            count += 1\n    return count\n\ndef binary_representation_has_one_zero(n):\n    binary_rep = format(n, 'b')\n    return binary_rep.count('0') == 1\n\n# Read input values\na, b = map(int, input().split())\n\n# Print the result\nprint(count_years_with_one_zero(a, b))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "n = int(input())\na = int(input())\nb = int(input())\n\n# Calculate the total length of the sides of the frames\ntotal_length = 2 * 2 * a + 2 * b\n\n# Calculate the number of wooden bars needed\nnum_bars = total_length // n\n\n# If there is any leftover length, add one more bar\nif total_length % n != 0:\n    num_bars += 1\n\nprint(num_bars)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def is_vowel(c):\n    return c in 'aeiou'\n\ndef find_typo_blocks(word):\n    typos = []\n    current_typo = []\n    current_char = None\n    for char in word:\n        if is_vowel(char):\n            if current_typo:\n                typos.append(current_typo)\n                current_typo = []\n            current_char = char\n        else:\n            if current_char is None or char == current_char:\n                current_char = char\n            else:\n                current_typo.append(char)\n                if len(current_typo) >= 3:\n                    typos.append(current_typo)\n                    current_typo = []\n    if current_typo:\n        typos.append(current_typo)\n    return typos\n\ndef insert_spaces(word):\n    typos = find_typo_blocks(word)\n    result = []\n    current_word = []\n    for char in word:\n        current_word.append(char)\n        if find_typo_blocks( ''.join(current_word) ):\n            result.append(''.join(current_word[:-1]))\n            result.append(' ')\n            current_word = [char]\n    result.append(''.join(current_word))\n    return ''.join(result)\n\nword = input()\nprint(insert_spaces(word))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def find\\_kth\\_largest(n, m, k):\nn, m = min(n, m), max(n, m)\nleft, right = 1, n \\* m\nwhile left < right:\nmid = (left + right) // 2\ncount = 0\nfor i in range(1, n + 1):\ncount += min(m, mid // i)\nif count < k:\nleft = mid + 1\nelse:\nright = mid\nreturn left", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "n, a, x, b, y = map(int, input().split())\n\n# Check if Daniel and Vlad ever meet on the circle line\nif (a + x - b) % n == 0 or (b + y - a) % n == 0:\n    print(\"YES\")\nelse:\n    print(\"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def solve():\n    x, y, z = map(int, input().split())\n    if x > y:\n        return '+'\n    elif x < y:\n        return '-'\n    elif x == y and z == 0:\n        return '0'\n    else:\n        return '?'\n\n# In the following code, the function solve() is called and the result is printed.\nprint(solve())", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def max\\_min\\_cake\\_pieces(n, a, b):\n    # Calculate the maximum number of pieces that can be placed on a single plate\n    max\\_pieces = min(a, b, n)\n\n    # Calculate the minimum number of plates needed to serve each cake\n    min\\_plates = (a + max\\_pieces - 1) // max\\_pieces + (b + max\\_pieces - 1) // max\\_pieces\n\n    # If the number of plates is less than the minimum number needed,\n    # increase the max_pieces and try again\n    while min\\_plates > n:\n        max\\_pieces -= 1\n        min\\_plates = (a + max\\_pieces - 1) // max\\_pieces + (b + max\\_pieces - 1) // max\\_pieces\n\n    return max\\_pieces\n\n# Test cases\nprint(max\\_min\\_cake\\_pieces(5, 2, 3)) # 1\nprint(max\\_min\\_cake\\_pieces(4, 7, 10)) # 3", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "n = int(input().strip())\na = list(map(int, input().strip().split()))\n\n# Initialize result and current co-prime number\nresult = 0\ncurr = a[0]\n\n# Initialize list of co-prime numbers\nco_primes = [1]\n\n# Iterate through the array\nfor i in range(1, n):\n    # If current number is not co-prime with previous number\n    if gcd(curr, a[i]) > 1:\n        # Find the smallest co-prime number greater than the current number\n        while True:\n            result += 1\n            if gcd(co_primes[-1], a[i]) == 1:\n                co_primes.append(a[i])\n                break\n            co_primes.append(co_primes[-1] + 1)\n    else:\n        # If current number is co-prime with previous number, add it to the list of co-primes\n        co_primes.append(a[i])\n        curr = a[i]\n\n# Print the result and the co-prime array\nprint(result)\nprint(*co_primes)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\n\n# Check if the first element can be erased\nif a[1] - a[0] > 1:\n    print(1)\nelse:\n    # Find the length of the longest sequence of equal or increasing differences\n    diff = a[1] - a[0]\n    count = 2\n    for i in range(2, n):\n        if a[i] - a[i-1] == diff:\n            count += 1\n        elif a[i] - a[i-1] > diff:\n            diff = a[i] - a[i-1]\n            count = 2\n\n    print(count)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def kth_digit():\n    num = 1\n    while True:\n        for digit in str(num):\n            yield digit\n            num += 1\n\nk = int(input())\nprint(next(itertools.islice(kth_digit(), k-1, k)))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\n\n# dp[i][0] will store the maximum sum of odd subsequence ending at index i\n# and with last element a[i] included\n# dp[i][1] will store the maximum sum of odd subsequence ending at index i\n# and with last element a[i] excluded\ndp = [[0, 0] for _ in range(n)]\n\ndp[0][0], dp[0][1] = a[0], 0\nfor i in range(1, n):\n    dp[i][0] = max(dp[i-1][1] + a[i], a[i])\n    dp[i][1] = max(dp[i-1][0], dp[i-1][1])\n\nprint(max(dp[-1][0], dp[-1][1]))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "n, k = map(int, input().split())\na = list(map(int, input().split()))\n\ncount = 0\nproduct = 1\nfor i in a:\n    product *= i\n    if product % k == 0:\n        count += 1\n\nprint(count)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def check\\_sequence(a, b, c):\nif b == a:\nreturn \"YES\"\nelse:\n\ti = 1\n\twhile True:\n\t\tif a + i * c == b:\n\t\t\treturn \"YES\"\n\t\telif a + i * c < b:\n\t\t\ti += 1\n\t\telse:\n\t\t\treturn \"NO\"\n\n# Test cases\nprint(check\\_sequence(1, 7, 3)) # YES\nprint(check\\_sequence(10, 10, 0)) # YES\nprint(check\\_sequence(1, -4, 5)) # NO\nprint(check\\_sequence(0, 60, 50)) # NO", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "n, L = map(int, input().split())\ncosts = list(map(int, input().split()))\n\n# Initialize the minimum cost to buy L liters of lemonade\nmin\\_cost = float('inf')\n\n# Iterate through all possible volumes that can be obtained by combining\n# different types of bottles\nfor i in range(1, 1 << n):\n    volume = sum(costs[j] * (i & (1 << j)) for j in range(n)) - 1\n\n    # If the current volume is greater than or equal to L, update the minimum cost\n    if volume >= L:\n        min\\_cost = min(min\\_cost, volume)\n\nprint(min\\_cost)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "n = int(input())\na = int(input())\nb = int(input())\n\nfor x in range(n//a + 1):\n    y = (n - x*a) // b\n    if x*a + y*b == n:\n        print(\"YES\")\n        print(x, y)\n        break\nelse:\n    print(\"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "import sys\nfrom collections import defaultdict\n\ndef is_valid(x, y, lines):\n    for l in lines:\n        if l[0] == 'v':\n            if y == l[1]:\n                return False\n        elif l[0] == 'h':\n            if x == l[1]:\n                return False\n    return True\n\ndef calculate_area(x1, y1, x2, y2, x3, y3):\n    return 0.5 * abs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))\n\ninput = sys.stdin.readlines()\nN, M = map(int, input[0].strip().split())\n\nn_lines = []\ne_lines = []\nfor i in range(1, 1+N):\n    a, b, c = map(int, input[i].strip().split())\n    n_lines.append((-1, c, a, b))\nfor i in range(1+N, 1+N+M):\n    d, e, f = map(int, input[i].strip().split())\n    e_lines.append((0, d, e, f))\n\nn_lines.sort(key=lambda x: (x[1], x[2]))\ne_lines.sort(key=lambda x: (x[1], x[2]))\n\nvertical_lines = defaultdict(int)\narea = 0\nfor line in n_lines:\n    while e_lines and e_lines[0][1] <= line[1]:\n        x1, y1, x2, y2 = e_lines.pop(0)\n        if y1 <= line[1] <= y2:\n            area += calculate_area(x1, line[1], x2, line[1], line[2], line[3])\n            vertical_lines[line[1]] += x2 - x1\n\n    x1, y1, x2, y2 = line\n    if line[1] in vertical_lines:\n        x3 = vertical_", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "import math\n\ndef solve(y1, y2, yw, xb, yb, r):\n    goal_width = y2 - y1\n    dx = math.sqrt(r**2 - (yw - yb)**2)\n    if dx > xb or dx < -xb:\n        return -1\n    xw = xb + dx\n    if xw < 0 or xw > goal_width:\n        return -1\n    return xw\n\n# Test cases\nprint(solve(4, 10, 13, 10, 3, 1))  # 4.3750000000\nprint(solve(1, 4, 6, 2, 2, 1))  # -1\nprint(solve(3, 10, 15, 17, 9, 2))  # 11.3333333333", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def max\\_bourles(n, m, r, s, b):\nbuy\\_prices = sorted(s)\nsell\\_prices = sorted(b)\ni, j, result = 0, 0, r\nwhile i < n and j < m:\nif buy\\_prices[i] <= sell\\_prices[j]:\n# we can buy and sell, so we do it\nquantity = result // buy\\_prices[i]\nresult += quantity * (sell\\_prices[j] - buy\\_prices[i])\ni += 1\nj += 1\nelse:\n# we can't sell yet, so we move to the next buy price\ni += 1\nreturn result\n\n# read input\nn, m, r = map(int, input().split())\ns = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\n# compute and print the result\nprint(max\\_bourles(n, m, r, s, b))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def process(a, b):\n    while a > 0 and b > 0:\n        if a >= 2*b:\n            a -= 2*b\n        else:\n            b -= 2*a\n    return a, b\n\n# Read input values for a and b\na, b = map(int, input().split())\n\n# Perform the sequence of actions and print the final values of a and b\nprint(*process(a, b))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def solve():\n    n, m, x, y, vx, vy = map(int, input().split())\n    px, py = x + vx, y + vy\n    if vx == 1:\n        px = (px - 1) % (n + 2)\n    elif vx == -1:\n        px = (n + 1 + px) % (n + 2)\n    if vy == 1:\n        py = (py - 1) % (m + 2)\n    elif vy == -1:\n        py = (m + 1 + py) % (m + 2)\n    if px in [0, n + 1] or py in [0, m + 1]:\n        print(f'{px - 1} {py - 1}')\n    else:\n        print(-1)\n\nsolve()", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def can_grasshopper_reach(n, k, line):\n    start, target = line.index('G'), line.index('T')\n    if (start + k) % n == target or (start - k) % n == target:\n        return True\n    return False\n\nn, k = map(int, input().split())\nline = input()\nif can_grasshopper_reach(n, k, line):\n    print(\"YES\")\nelse:\n    print(\"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "a = int(input())\nb = int(input())\nc = int(input())\n\n# Calculate the maximum number of sets of fruits that can be used\nmax_sets = min(a, b // 2, c // 4)\n\n# Calculate the total number of fruits that can be used\ntotal_fruits = max_sets * (1 + 2 + 4)\n\nprint(total_fruits)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def find_next_states(state):\n    next_states = []\n    for i in range(3):\n        next_row = [state[0][i], state[0][(i+1)%3], state[1][i], state[1][(i+1)%3]]\n        next_states.append((''.join(next_row), i))\n    return next_states\n\ndef solve(state1, state2):\n    states1, states2 = {state1}, {state2}\n    while True:\n        new_states1 = set()\n        for state, direction in states1:\n            next_states = find_next_states(state)\n            for next_state, next_direction in next_states:\n                if next_state in states2:\n                    return True, direction, next_direction\n                new_states1.add((next_state, (direction + 2 + next_direction) % 4))\n        if not new_states1:\n            break\n        states1 = new_states1\n\n    return False, -1, -1\n\ndef main():\n    state1 = [list(input().strip()) for _ in range(2)]\n    state2 = [list(input().strip()) for _ in range(2)]\n\n    result, direction1, direction2 = solve(tuple([''.join(row) for row in state1]), tuple([''.join(row) for row in state2]))\n\n    if result:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\n\n# Find the index of the smallest (in absolute value) non-zero element\nindex = 0\nmin_val = abs(a[0])\nfor i in range(1, n):\n    if abs(a[i]) < min_val and a[i] != 0:\n        min_val = abs(a[i])\n        index = i\n\n# Multiply all elements by -1, except for the smallest non-zero element\nfor i in range(n):\n    if i != index:\n        a[i] = -a[i]\n\nprint(*a)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "# Get the user name from the input\nuser_name = input()\n\n# Calculate the number of distinct characters in the user name\nnum_distinct_chars = len(set(user_name))\n\n# Determine the gender of the user by the hero's method\nif num_distinct_chars % 2 == 0:\n    print(\"CHAT WITH HER!\")\nelse:\n    print(\"IGNORE HIM!\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def check\\_records(n: int, stats: list) -> str:\nrecord\\_plays = [0]\nrecord\\_clears = [0]\nfor play, clear in stats:\nif play < record\\_plays[-1]:\nreturn \"NO\"\nrecord\\_plays.append(play)\nif clear < record\\_clears[-1]:\nreturn \"NO\"\nrecord\\_clears.append(clear)\nreturn \"YES\"\n\nT = int(input().strip())\nfor t in range(T):\nn = int(input().strip())\nstats = [list(map(int, input().strip().split())) for \\_ in range(n)]\nprint(\"YES\" if check\\_records(n, stats) == \"YES\" else \"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def check\\_records(n: int, stats: list) -> str:\nrecord\\_plays = [0]\nrecord\\_clears = [0]\nfor play, clear in stats:\nif play < record\\_plays[-1]:\nreturn \"NO\"\nrecord\\_plays.append(play)\nif clear < record\\_clears[-1]:\nreturn \"NO\"\nrecord\\_clears.append(clear)\nreturn \"YES\"\n\nT = int(input().strip())\nfor t in range(T):\nn = int(input().strip())\nstats = [list(map(int, input().strip().split())) for \\_ in range(n)]\nprint(\"YES\" if check\\_records(n, stats) == \"YES\" else \"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "# Read input values\na, b, c = map(int, input().split())\n\n# Check if it's possible to break the shield\nif c % gcd(a, b) == 0:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def is\\_unlucky(x, y, n):\nfor a in range(1 + int(n**0.5)):\nfor b in range(1 + int(n**0.5)):\nif a*a + b*b == n:\nreturn True\nreturn False\n\ndef golden\\_age(x, y, l, r):\nn = l\nwhile is\\_unlucky(x, y, n):\nn += 1\nif n > r:\nreturn 0\n\nres = 0\nwhile n <= r:\nres += 1\nn += 1\nwhile n <= r and not is\\_unlucky(x, y, n):\nn += 1\nreturn res\n\nx, y, l, r = map(int, input().split())\nprint(golden\\_age(x, y, l, r))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "import math\nimport sys\n\ndef reduce_array(A, gcd):\n    for i in range(len(A)):\n        A[i] -= gcd\n        if A[i] < gcd:\n            A[i] = 0\n    return A\n\ndef max_divides(N, K, A):\n    gcd = math.gcd(*A)\n    for _ in range(K):\n        gcd = math.gcd(gcd, max(A))\n        if gcd == 1:\n            break\n        A = reduce_array(A, gcd)\n    return gcd\n\ndef main():\n    N, K = map(int, input().split())\n    A = list(map(int, input().split()))\n    print(max_divides(N, K, A))\n\nif __name__ == '__main__':\n    main()", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "n, k = map(int, input().split())\nstones = [0] * n\nmoves = 0\n\n# Move to the first manhole if Nastya is not already there\nif k != 1:\n    for _ in range(k - 1):\n        stones[0] += 1\n        moves += 1\n\n# Move to the last manhole and pick the coin\nfor _ in range(n - k + 1):\n    while stones[n - 1] != 0:\n        stones[n - 2] += 1\n        stones[n - 1] -= 1\n        moves += 1\n\n    stones[n - 1] += 1\n    moves += 1\n    stones[0] -= 1\n    moves += 1\n\n# Move back to the first manhole and pick the coin\nfor _ in range(k - 1):\n    while stones[0] != 0:\n        stones[1] += 1\n        stones[0] -= 1\n        moves += 1\n\n    stones[0] += 1\n    moves += 1\n\nprint(moves)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def max\\_chocolates(n, a, b, p, q):\nmax\\_count = 0\n\n# Handling the case when the tile with index divisible by a and b is painted Red\nmax\\_count = (p*(n//a) + q*(n//b)) if (n%a == 0 or n%b == 0) else 0\n\n# Handling the case when the tile with index divisible by a and b is painted Blue\nmax\\_count = max(max\\_count, p*(n//a) + q*(n//b - 1) + q*(n//(a*b)) if (n%a == 0 and n%b == 0) else 0)\n\n# Handling the case when the tile with index divisible by a and b is painted Red\nmax\\_count = max(max\\_count, p*(n//a - 1) + q*(n//b) + p*q*(n//(a*b)) if (n%a == 0 and n%b != 0) else 0)\n\n# Handling the case when the tile with index divisible by a and b is painted Red\nmax\\_count = max(max\\_count, p*(n//a - 1) + q*(n//b - 1) + (p+q)*q*(n//(a*b)) if (n%a != 0 and n%b != 0) else 0)\n\nreturn max\\_count\n\n# Taking input\nn, a, b, p, q = map(int, input().split())\n\n# Printing the answer\nprint(max\\_chocolates(n, a, b, p, q))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def is_possible_to_place_paintings(a1, b1, a2, b2, a3, b3):\n    # Check if the total area of the paintings is smaller than the area of the board\n    total_area = a2 * b2 + a3 * b3", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def get_min_replacements(ticket: str) -> int:\n    # Calculate the sum of the first three and the last three digits\n    first_half_sum = sum(map(int, ticket[:3]))\n    second_half_sum = sum(map(int, ticket[3:]))\n\n    # If the sums are already equal, then no replacements are needed\n    if first_half_sum == second_half_sum:\n        return 0\n\n    # Initialize the minimum number of replacements to 3 (as at least one digit in each half needs to be changed)\n    min_replacements = 3\n\n    # Iterate over all possible replacement digits\n    for replacement_digit in range(10):\n        # Calculate the new sum of the first three digits if the replacement digit is used\n        new_first_half_sum = sum(map(int, (ticket[:3] if ticket[i] != str(replacement_digit) else \"0\"*3) for i in range(3)))\n\n        # Calculate the number of replacements needed if the replacement digit is used\n        replacements_needed = abs(new_first_half_sum - second_half_sum)\n\n        # Update the minimum number of replacements if fewer replacements are needed\n        min_replacements = min(min_replacements, 3 + replacements_needed)\n\n    return min_replacements\n\n# Test cases\nprint(get_min_replacements(\"000000\"))  # 0\nprint(get_min_replacements(\"123456\"))  # 2\nprint(get_min_replacements(\"111000\"))  # 1", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def max\\_beauty(s, b):\nn = len(s)\n# Initialize result with sum of all beauties\nres = sum(b)\n# Create a frequency array to count the occurrence of each character\nfreq = [0]*26\nfor c in s:\nfreq[ord(c)-ord('a')] += 1\n# Initialize left and right pointers\nleft, right = 0, n-1\n# Iterate while left is less than or equal to right\nwhile left <= right:\n# If current character from left is same as from right, then subtract beauty of left index from result\nif s[left] == s[right]:\nres -= b[left]\n# Move left pointer\nleft += 1\n# Move right pointer\nright -= 1\n# If current character from left is less than right, then subtract beauty of right index from result\nelif freq[ord(s[right])-ord('a')] > 0:\nres -= b[right]\nfreq[ord(s[right])-ord('a')] -= 1\n# Move right pointer\nright -= 1\n# If current character from left is greater than right, then subtract beauty of left index from result\nelse:\nres -= b[left]\nfreq[ord(s[left])-ord('a')] -= 1\n# Move left pointer\nleft += 1\nreturn res", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "n = int(input())\narr = list(map(int, input().split()))\n\nif n == 1:\n    print(\"YES\")\nelse:\n    flag = False\n    i = 0\n    while i < n - 1 and not flag:\n        if arr[i] < arr[i + 1]:\n            # increase\n            j = i + 1\n            while j < n - 1 and arr[j] < arr[j + 1]:\n                j += 1\n            if j == n - 1 or arr[j] > arr[j + 1]:\n                i = j + 1\n            else:\n                flag = True\n        elif arr[i] > arr[i + 1]:\n            # decrease\n            j = i + 1\n            while j < n - 1 and arr[j] > arr[j + 1]:\n                j += 1\n            if j == n - 1 or arr[j] < arr[j + 1]:\n                i = j + 1\n            else:\n                flag = True\n        else:\n            i += 1\n\n    if flag:\n        print(\"NO\")\n    else:\n        print(\"YES\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "import math\n\ndef calculate_angle(v1, v2):\n    dot_product = v1[0] * v2[0] + v1[1] * v2[1]\n    magnitude_v1 = math.sqrt(v1[0] ** 2 + v1[1] ** 2)\n    magnitude_v2 = math.sqrt(v2[0] ** 2 + v2[1] ** 2)\n    angle_rad = math.acos(dot_product / (magnitude_v1 * magnitude_v2))\n    angle_deg = math.degrees(angle_rad)\n    return angle_deg % 180\n\nn = int(input().strip())\nvectors = []\nfor i in range(n):\n    x, y = map(int, input().strip().split())\n    vectors.append((x, y))\n\nmin_angle = 180\nmin_vectors = None\nfor i in range(n):\n    for j in range(i + 1, n):\n        angle = calculate_angle(vectors[i], vectors[j])\n        if angle < min_angle:\n            min_angle = angle\n            min_vectors = (i + 1, j + 1)\n\nprint(*min_vectors)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def caterpillar(h1, h2, a, b):\n    # Calculate the net distance the caterpillar covers in a day\n    distance = a * 14 + b * 2\n    # Calculate the number of days needed for the caterpillar to reach the apple\n    days = (h2 - h1 - 1) // distance\n    # If the caterpillar cannot reach the apple, return -1\n    if (h2 - h1 - 1) % distance != 0:\n        return -1\n    # Otherwise, return the number of days\n    return days\n\n# Read input\nh1, h2 = map(int, input().split())\na, b = map(int, input().split())\n\n# Print the result\nprint(caterpillar(h1, h2, a, b))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def is_possible_to_place_paintings(a1, b1, a2, b2, a3, b3):\n    # Check if the total area of the paintings is smaller than the area of the board\n    total_area = a2 * b2 + a3 * b3", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "import math\nimport sys\n\ndef reduce_array(A, gcd):\n    for i in range(len(A)):\n        A[i] -= gcd\n        if A[i] < gcd:\n            A[i] = 0\n    return A\n\ndef max_divides(N, K, A):\n    gcd = math.gcd(*A)\n    for _ in range(K):\n        gcd = math.gcd(gcd, max(A))\n        if gcd == 1:\n            break\n        A = reduce_array(A, gcd)\n    return gcd\n\ndef main():\n    N, K = map(int, input().split())\n    A = list(map(int, input().split()))\n    print(max_divides(N, K, A))\n\nif __name__ == '__main__':\n    main()", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\n\n# Initialize mex as 1\nmex = 1\n\n# Keep track of maximum value in the array\nmax_val = max(a)\n\n# Iterate through all possible values of mex up to the maximum value in the array\nfor i in range(1, max_val + 1):\n    # Check if the current value of mex appears in the array\n    if i not in a:\n        # If it doesn't, update mex to this value\n        mex = i\n    else:\n        # If it does, continue to the next value of mex\n        continue\n\n# Print the maximum possible value of mex\nprint(mex)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def find\\_kth\\_largest(n, m, k):\nn, m = min(n, m), max(n, m)\nleft, right = 1, n \\* m\nwhile left < right:\nmid = (left + right) // 2\ncount = 0\nfor i in range(1, n + 1):\ncount += min(m, mid // i)\nif count < k:\nleft = mid + 1\nelse:\nright = mid\nreturn left", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "n = int(input())\nticket = input()\n\n# Calculate the sum of all digits\ntotal_sum = sum(int(digit) for digit in ticket)\n\n# Initialize a set to store the sum of segments\nsegment_sums = set()\n\n# Try to divide the ticket into segments with length from 1 to n/2\nfor segment_length in range(1, n//2 + 1):\n    # Calculate the sum of the current segment\n    segment_sum = 0\n    for i in range(segment_length):\n        segment_sum += int(ticket[i])\n    # Add the sum to the set\n    segment_sums.add(segment_sum)\n    # Try to divide the rest of the ticket\n    for i in range(segment_length, n - segment_length + 1, segment_length):\n        segment_sum -= int(ticket[i - segment_length])\n        segment_sum += int(ticket[i])\n        segment_sums.add(segment_sum)\n\n# Check if the ticket is lucky\nif len(segment_sums) > 1 and total_sum in segment_sums:\n    print(\"YES\")\nelse:\n    print(\"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def min\\_extra\\_tiles(hand):\nhand.sort()\nnum\\_sets = 0\nprev\\_num = -1\nprev\\_suit = None\nfor tile in hand:\nnum, suit = map(tuple, tile)\nif prev\\_suit is None:\nprev\\_suit = suit\ncontinue\nif suit == prev\\_suit:\nif num == prev\\_num + 1:\n# shuntsu\nreturn 0\nelse:\n# koutsu\nnum\\_sets += 1\nelse:\n# switch in suit\nprev\\_suit = suit\nprev\\_num = num\n# no mentsu yet\nnum\\_sets = 0\nreturn 1 if num\\_sets == 0 else 2\n\n# test\ncases = [\n(\"1s\", \"2s\", \"3s\"),\n(\"9m\", \"9m\", \"9m\"),\n(\"3p\", \"9m\", \"2p\"),\n]\nfor hand in cases:\nprint(min\\_extra\\_tiles(hand))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "from collections import defaultdict\n\ndef detect_cycle(n, edges):\n    graph = defaultdict(list)\n    for u, v in edges:\n        graph[u].append(v)\n\n    visited = set()\n    recursion_stack = set()\n\n    def dfs(node):\n        if node in recursion_stack:\n            return True\n        if node in visited:\n            return False\n\n        recursion_stack.add(node)\n        visited.add(node)\n        for neighbor in graph[node]:\n            if dfs(neighbor):\n                return True\n        recursion_stack.remove(node)\n        return False\n\n    for vertex in range(1, n+1):\n        if dfs(vertex):\n            return True\n\n    return False\n\ndef main():\n    n, m = map(int, input().split())\n    edges = [tuple(map(int, input().split())) for _ in range(m)]\n\n    if detect_cycle(n, edges):\n        print(\"NO\")\n    else:\n        # If the graph has a cycle, removing any edge will make it acyclic.\n        # If the graph is already acyclic, removing at most one edge will still keep it acyclic.\n        print(\"YES\")\n\nif __name__ == \"__main__\":\n    main()", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "import heapq\n\ndef min_blows(n, x, d, h):\n    # Create a heap to store the types of blows\n    heap = [(d[i], -h[i]) for i in range(n)]\n    heapq.heapify(heap)\n\n    # Count the number of blows\n    count = 0\n    while x > 0:\n        # Get the type of blow with the smallest d and largest h\n        d_, h_ = heapq.heappop(heap)\n        \n        # Calculate the new number of heads\n        new_x = max(0, x - d_)\n        \n        # Update the number of heads that the current blow can decrease\n        if new_x > 0:\n            d_[0] = min(d_[0], new_x)\n            \n        # Update the heap\n        heapq.heappush(heap, (d_, -h_))\n        \n        # Increase the number of blows\n        count += 1\n        \n        # Update the number of heads\n        x = new_x + h_\n        \n    # If all the heads are defeated, return the number of blows\n    if x == 0:\n        return count\n    # Otherwise, return -1\n    else:\n        return -1\n\nt = int(input().strip())\nfor _ in range(t):\n    n, x = map(int, input().strip().split())\n    d = list(map(int, input().strip().split()))\n    h = list(map(int, input().strip().split()))\n    print(min_blows(n, x, d, h))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def min\\_time\\_to\\_post\\_office(d, k, a, b, t):\ntime = 0\ndist\\_driven = 0\nwhile dist\\_driven < d:\ntime += a\ndist\\_driven += 1\nif dist\\_driven == k:\ntime += t\ndist\\_driven = 0\nif dist\\_driven + k >= d:\ntime += (d - dist\\_driven) * b\nbreak\nreturn time\n\nd, k, a, b, t = map(int, input().split())\nprint(min\\_time\\_to\\_post\\_office(d, k, a, b, t))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "import itertools\n\ndef can_encode(s, k):", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "import sys\nimport math\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef solve():\n    a, b = map(int, input().strip().split())\n    if a > b:\n        a, b = b, a\n    min_lcm = math.lcm(a, b)\n    for k in range(min_lcm, 0, -1):\n        if math.lcm(a + k, b + k) == min_lcm:\n            print(k)\n            return\n\nif __name__ == \"__main__\":\n    solve()", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def find_overlap(t):\n    for i in range(1, len(t)):\n        if t[:i] == t[i:i+i]:\n            return i\n    return 0\n\ndef main():\n    t = input()\n    n = find_overlap(t)\n    if n == 0:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n        print(t[:-n])\n\nif __name__ == \"__main__\":\n    main()", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def solve():\n    n, x = map(int, input().split())\n    s = input()\n    cnt0, cnt1, cur_balance = 0, 0, 0\n    ans = 0\n    for i in range(n):\n        if s[i] == '0':\n            cnt0 += 1\n        else:\n            cnt1 += 1\n        cur_balance = cnt0 - cnt1\n        if cur_balance == x:\n            ans += 1\n        elif cur_balance > x:\n            break\n    if cur_balance == x:\n        print(ans + 1)\n    elif cur_balance > x:\n        print(-1)\n    else:\n        if x > 0:\n            print(0)\n        else:\n            print(1)\n\nT = int(input())\nfor _ in range(T):\n    solve()", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "import sys\n\ndef is\\_stack\\_sortable(p):\nn = len(p)\na = [0] * n\ns = []\n\nfor i in range(n):\na[i] = p[i]\n\nwhile a and s:\nwhile a:\ntop = a.pop(0)\ns.append(top)\n\nwhile s:\ntop = s.pop()\nif a and a[0] > top:\nprint(\"Not stack sortable\")\nreturn False\nb.append(top)\na.pop(0)\n\nreturn b == sorted(b)\n\ndef restore\\_permutation(n, k, p):\n# Create a list of remaining elements\nremaining = [x for x in range(1, n+1)]\nfor i in range(k):\nremaining.remove(p[i])\n\n# Sort the remaining elements in non-increasing order\nremaining.sort(reverse=True)\n\n# Check if the remaining elements are stack sortable\nfor i in range(2, len(remaining) + 1):\nif not is\\_stack\\_sortable(remaining[:i] + [0] * (n - i) + p[:k]):\nreturn -1\n\n# Return the lexicographically maximal permutation\nreturn remaining + p[:k]\n\nif __name__ == \"__main__\":\nn, k = map(int, input().strip().split())\np = list(map(int, input().strip().split()))\n\nif k == n:\nprint(\" \".join(map(str, p)))\nsys.exit(0)\n\npermutation = restore\\_permutation(n, k, p)\n\nif permutation == -1:\nprint(-1)\nelse:\nprint(\" \".join(map(str, permutation)))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def has\\_winning\\_strategy(n, s):\nif n == 11:\nreturn s[0] == '8'\n\nfor i in range(1, n-1, 2):\n# check if Vasya can win after choosing the i-th digit\nif not has\\_winning\\_strategy(n - i - 1, s[i+1:]):\nreturn True\n\n# if Vasya cannot win after choosing any digit, then Petya has a winning strategy\nreturn False\n\nn = int(input())\ns = input()\n\nif has\\_winning\\_strategy(n, s):\nprint(\"YES\")\nelse:\nprint(\"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\n\n# Find the index of the minimum and maximum elements\nmin_index = a.index(1)\nmax_index = a.index(n)\n\n# Calculate the distance between the minimum and maximum elements\ndistance = abs(min_index - max_index)\n\n# Perform the swap to maximize the distance\nif min_index < max_index:\n    a[min_index], a[max_index - 1] = a[max_index - 1], a[min_index]\nelse:\n    a[min_index], a[max_index + 1] = a[max_index + 1], a[min_index]\n\n# Calculate the new distance between the minimum and maximum elements\nnew_distance = abs(a.index(1) - a.index(n))\n\n# Print the maximum possible distance\nprint(max(distance, new_distance))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\n\n# dp[i][0] will store the maximum sum of odd subsequence ending at index i\n# and with last element a[i] included\n# dp[i][1] will store the maximum sum of odd subsequence ending at index i\n# and with last element a[i] excluded\ndp = [[0, 0] for _ in range(n)]\n\ndp[0][0], dp[0][1] = a[0], 0\nfor i in range(1, n):\n    dp[i][0] = max(dp[i-1][1] + a[i], a[i])\n    dp[i][1] = max(dp[i-1][0], dp[i-1][1])\n\nprint(max(dp[-1][0], dp[-1][1]))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def get_min_replacements(ticket: str) -> int:\n    # Calculate the sum of the first three and the last three digits\n    first_half_sum = sum(map(int, ticket[:3]))\n    second_half_sum = sum(map(int, ticket[3:]))\n\n    # If the sums are already equal, then no replacements are needed\n    if first_half_sum == second_half_sum:\n        return 0\n\n    # Initialize the minimum number of replacements to 3 (as at least one digit in each half needs to be changed)\n    min_replacements = 3\n\n    # Iterate over all possible replacement digits\n    for replacement_digit in range(10):\n        # Calculate the new sum of the first three digits if the replacement digit is used\n        new_first_half_sum = sum(map(int, (ticket[:3] if ticket[i] != str(replacement_digit) else \"0\"*3) for i in range(3)))\n\n        # Calculate the number of replacements needed if the replacement digit is used\n        replacements_needed = abs(new_first_half_sum - second_half_sum)\n\n        # Update the minimum number of replacements if fewer replacements are needed\n        min_replacements = min(min_replacements, 3 + replacements_needed)\n\n    return min_replacements\n\n# Test cases\nprint(get_min_replacements(\"000000\"))  # 0\nprint(get_min_replacements(\"123456\"))  # 2\nprint(get_min_replacements(\"111000\"))  # 1", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def decode_genome(n, s):\n    # Count the number of each type of nucleotide in the input string\n    counts = {'A': 0, 'C': 0, 'G': 0, 'T': 0}\n    for nucleotide in s:\n        if nucleotide != '?':\n            counts[nucleotide] += 1\n\n    # If all nucleotides are already decoded, return the input string\n    if len(s) - sum(c > 0 for c in counts.values()) == 0:\n        return s\n\n    # If it is not possible to decode the genome, return \"===\"\n    if len(counts) < 4:\n        return \"===\"\n\n    # Find the nucleotide type with the fewest representatives\n    min_count = min(counts.values())\n\n    # Replace all '?' with the nucleotide type with the fewest representatives\n    decoded_genome = []\n    for nucleotide in s:\n        if nucleotide == '?':\n            decoded_genome.append(min(counts.keys(), key=(lambda k: counts[k])) )\n            counts[nucleotide] += 1\n        else:\n            decoded_genome.append(nucleotide)\n            counts[nucleotide] -= 1\n\n    # If all counts are equal, return the decoded genome\n    if all(count == min_count for count in counts.values()):\n        return \"\".join(decoded_genome)\n\n    # If it is not possible to decode the genome, return \"===\"\n    return \"===\"\n\n# Test the function\nprint(decode_genome(8, \"AG?C??CT\")) # AGACGTCT\nprint(decode_genome(4, \"AGCT\")) # AGCT\nprint(decode_genome(6, \"????G?\")) # ===\nprint(decode_genome(4, \"AA??\")) # ===", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def move(n: int) -> tuple[int, int]:\n    direction = 0  # 0: right, 1: down-right, 2: down-left, 3: up-left, 4: up, 5: up-right\n    x, y = 0, 0\n\n    for _ in range(n):\n        if direction == 0:\n            if y % 2 == 0:\n                x += 1\n            else:\n                x += 2\n            y += 1\n            direction = 1\n        elif direction == 1:\n            y += 1\n            direction = 2\n        elif direction == 2:\n            if y % 2 == 0:\n                x -= 1\n            else:\n                x -= 2\n            y += 1\n            direction = 3\n        elif direction == 3:\n            y -= 1\n            direction = 4\n        elif direction == 4:\n            if y % 2 == 0:\n                x += 1\n            else:\n                x -= 1\n            y -= 1\n            direction = 5\n        elif direction == 5:\n            y -= 1\n            direction = 0\n\n    return x, y\n\nn = int(input())\nx, y = move(n)\nprint(x, y)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def pineapple\\_bark(t, s, x):\nif x < t:\nreturn \"NO\"\nelse:\nreturn \"YES\" if (x - t) % s < 2 else \"NO\"\n\n# Test cases\nprint(pineapple\\_bark(3, 10, 4)) # NO\nprint(pineapple\\_bark(3, 10, 3)) # YES\nprint(pineapple\\_bark(3, 8, 51)) # YES\nprint(pineapple\\_bark(3, 8, 52)) # YES", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "import sys\ninput = sys.stdin.readline\n\ndef update(bit, i, x):\n    while i <= n:\n        bit[i] += x\n        i += i & -i\n\ndef query(bit, i):\n    s = 0\n    while i > 0:\n        s += bit[i]\n        i -= i & -i\n    return s\n\ndef max_messiness(n, k):\n    bit = [0] * (n + 1)\n    inv = 0\n    for i in range(1, n + 1):\n        inv += query(bit, n) - query(bit, i)\n        update(bit, i, 1)\n    for _ in range(k - 1):\n        i = query(bit, n) - query(bit, n - 1)\n        j = query(bit, n) - query(bit, i)\n        update(bit, i, -1)\n        update(bit, j + 1, 1)\n    return inv\n\nif __name__ == '__main__':\n    n, k = map(int, input().strip().split())\n    print(max_messiness(n, k))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def canDistributeGrapes(x, y, z, a, b, c):\n    # Check if Andrew can eat enough green grapes\n    if x > a:\n        return False\n\n    # Distribute the green grapes to Andrew first\n    a -= x\n\n    # Check if Dmitry can eat enough grapes excluding black ones\n    if y > a + b:\n        return False\n\n    # Distribute the remaining grapes to Dmitry and Michal\n    return a >= 0 and b >= 0 and c >= z\n\n# Read input\nx, y, z = map(int, input().split())\na, b, c = map(int, input().split())\n\n# Check if a distribution is possible\nif canDistributeGrapes(x, y, z, a, b, c):\n    print(\"YES\")\nelse:\n    print(\"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\ns = input()\n\ni = 0\nwhile i < n - 1:\n    if s[i] == '1' and a[i] < a[i + 1]:\n        i += 1\n    elif s[i] == '1' and a[i] > a[i + 1]:\n        a[i], a[i + 1] = a[i + 1], a[i]\n    elif s[i] == '0' and a[i] > a[i + 1]:\n        print(\"NO\")\n        break\n    else:\n        i += 1\n\nif i == n - 1:\n    print(\"YES\" if sorted(a) == a else \"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "n = int(input())\n\n# Minimum number of days off\nmin_days_off = n % 7\nif min_days_off == 0:\n    min_days_off = 7\nmin_days_off = min_days_off // 2\nprint(min_days_off, end=' ')\n\n# Maximum number of days off\nmax_days_off = (n - 1) % 7\nif max_days_off == 0:\n    max_days_off = 7\nmax_days_off = max_days_off // 2\nprint(max_days_off)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "n = int(input())\nx, y = 0, 0 # current position\nfor _ in range(n):\n    t, d = map(str, input().split())\n    t = int(t)\n    if d == 'South':\n        if y == 0:\n            print('NO')\n            exit()\n        y -= t\n    elif d == 'North':\n        if y == 20000:\n            print('NO')\n            exit()\n        y += t\n    elif d == 'East':\n        x += t\n    elif d == 'West':\n        x -= t\nif x != 0 or y != 0:\n    print('NO')\nelse:\n    print('YES')", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def solve(n, k, m):\n    # Initialize result as 0\n    res = 0\n\n    # Loop through all numbers from 1 to 10^n-1\n    for x in range(1, 10**n):\n        # Initialize y as x\n        y = x\n\n        # Check if the remainder of y divided by k is 0\n        while y % k != 0:\n            # Remove the last digit from y\n            y = int(str(y)[:-1])\n\n            # If y becomes 0, break the loop\n            if y == 0:\n                break\n\n        # If the loop did not break, add the number of digits in x\n        # to the result\n        if y != 0:\n            res += 1\n\n    # Return the result modulo m\n    return res % m\n\n# Read input values\nn, k, m = map(int, input().split())\n\n# Print the result\nprint(solve(n, k, m))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "n = int(input())\narr = list(map(int, input().split()))\n\nif n == 1:\n    print(\"YES\")\nelse:\n    flag = False\n    i = 0\n    while i < n - 1 and not flag:\n        if arr[i] < arr[i + 1]:\n            # increase\n            j = i + 1\n            while j < n - 1 and arr[j] < arr[j + 1]:\n                j += 1\n            if j == n - 1 or arr[j] > arr[j + 1]:\n                i = j + 1\n            else:\n                flag = True\n        elif arr[i] > arr[i + 1]:\n            # decrease\n            j = i + 1\n            while j < n - 1 and arr[j] > arr[j + 1]:\n                j += 1\n            if j == n - 1 or arr[j] < arr[j + 1]:\n                i = j + 1\n            else:\n                flag = True\n        else:\n            i += 1\n\n    if flag:\n        print(\"NO\")\n    else:\n        print(\"YES\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def power(x, y, p):\n    res = 1\n    x = x % p\n    while (y > 0):\n        if (y & 1):\n            res = (res * x) % p\n        y = y >> 1\n        x = (x * x) % p\n    return res\n\ndef invmod(x, y):\n    return power(x, y - 2, y)\n\ndef solve(n, l, r):\n    dp = [[0] * (r + 1) for _ in range(n)]\n    dp[0][l[0]] = 1\n    for i in range(1, n):\n        for j in range(l[i], r[i] + 1):\n            dp[i][j] = sum(dp[i - 1][k] for k in range(l[i - 1], j + 1))\n        dp[i][r[i]] %= 998244353\n    ans = 0\n    for i in range(r[n - 1], l[n - 1] - 1, -1):\n        ans = (ans + dp[n - 1][i]) % 998244353\n    ans = (ans * invmod(n, 998244353)) % 998244353\n    return ans\n\nn = int(input())\nl = list(map(int, input().split()))\nr = list(map(int, input().split()))\nprint(solve(n, l, r))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def is_possible(n, a):\n    if n == 1:\n        return a[0] == 0\n\n    for i in range(1, n):\n        if a[i] == 0 and is_possible(i, a[:i]):\n            return True\n\n    return False\n\ndef build_expression(n, a):\n    if n == 1:\n        return str(a[0])\n\n    for i in range(1, n):\n        if a[i] == 0 and is_possible(i, a[:i]):\n            return '(' + build_expression(i, a[:i]) + '->' + build_expression(n-i, a[i:]) + ')'\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    if is_possible(n, a):\n        print(\"YES\")\n        print(build_expression(n, a))\n    else:\n        print(\"NO\")\n\nmain()", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def min_minutes_to_palindrome(current_time):\n    hh, mm = map(int, current_time.split(\":\"))\n    minutes_to_add = 0\n\n    # If the current time is already a palindrome, we can wake up immediately\n    if hh == mm or (hh == 0 and mm == 9) or (hh == 9 and mm == 0):\n        return minutes_to_add\n\n    while True:\n        # Create a palindrome by adding minutes to the current time\n        palindrome = str(hh).zfill(2) + str(mm + minutes_to_add // 60).zfill(2) + str(hh).zfill(2)\n\n        # Convert the palindrome back to hours and minutes\n        ph, pm = map(int, palindrome.split(\":\"))\n\n        # Check if the palindrome is a valid time (i.e., between 00:00 and 23:59)\n        if 0 <= ph <= 23 and 0 <= pm <= 59:\n            break\n\n        minutes_to_add += 1\n\n    return minutes_to_add % 1440  # The result should be within 24 hours\n\n# Test cases\nprint(min_minutes_to_palindrome(\"05:39\"))  # Output: 11\nprint(min_minutes_to_palindrome(\"13:31\"))  # Output: 0\nprint(min_minutes_to_palindrome(\"23:59\"))  # Output: 1", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def power(x, y, p):\n    res = 1\n    x = x % p\n    while (y > 0):\n        if (y & 1):\n            res = (res * x) % p\n        y = y >> 1\n        x = (x * x) % p\n    return res\n\ndef invmod(x, y):\n    return power(x, y - 2, y)\n\ndef solve(n, l, r):\n    dp = [[0] * (r + 1) for _ in range(n)]\n    dp[0][l[0]] = 1\n    for i in range(1, n):\n        for j in range(l[i], r[i] + 1):\n            dp[i][j] = sum(dp[i - 1][k] for k in range(l[i - 1], j + 1))\n        dp[i][r[i]] %= 998244353\n    ans = 0\n    for i in range(r[n - 1], l[n - 1] - 1, -1):\n        ans = (ans + dp[n - 1][i]) % 998244353\n    ans = (ans * invmod(n, 998244353)) % 998244353\n    return ans\n\nn = int(input())\nl = list(map(int, input().split()))\nr = list(map(int, input().split()))\nprint(solve(n, l, r))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def find_frame(n, m, screen):\n    for i in range(n):\n        for j in range(m):\n            if screen[i][j] == 'w':\n                frame = flood_fill(n, m, i, j, screen, [])\n                if frame is not None:\n                    return frame\n    return [-1]\n\ndef flood_fill(n, m, i, j, screen, frame):\n    if i < 0 or i >= n or j < 0 or j >= m:\n        return None\n    if screen[i][j] == '.':\n        return None\n    screen[i][j] = '+'\n    frame.append((i, j))\n    flood_fill(n, m, i + 1, j, screen, frame)\n    flood_fill(n, m, i - 1, j, screen, frame)\n    flood_fill(n, m, i, j + 1, screen, frame)\n    flood_fill(n, m, i, j - 1, screen, frame)\n    w, h = 1, 1\n    for x, y in frame:\n        w = max(w, x + 1 - x)\n        h = max(h, y + 1 - y)\n    if w == h:\n        return screen\n    return None\n\nn, m = map(int, input().split())\nscreen = []\nfor _ in range(n):\n    screen.append(list(input().strip()))\nprint(*screen, sep='\\n')\nframe = find_frame(n, m, screen)\nif frame[0] == -1:\n    print(-1)\nelse:\n    for i in range(n):\n        for j in range(m):\n            if frame[1][i][j] == '+':\n                print('+', end='')\n            else:\n                print(screen[i][j], end='')\n        print()", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "mod = 998244353\nfac = [0]*1000005\ninv = [0]*1000005\nfac[0] = inv[0] = 1\nfor i in range(1, 1000005):\n    fac[i] = fac[i-1]*i%mod\n    inv[i] = pow(fac[i], mod-2, mod)\n\ndef C(n, k):\n    if k > n or k < 0:\n        return 0\n    return fac[n]*inv[k]*inv[n-k]%mod\n\ndp = [0]*(1000005)\ndp[0] = 1\nparity = 1\nfor i in range(1, 1000005):\n    dp[i] = dp[i-1]*2%mod\n    if i&1:\n        parity = -parity\n    dp[i] = (dp[i] + dp[i//2]*C(i, i//2)*parity%mod)%mod\n\nn = int(input())\nprint(dp[n])", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def max\\_joy(C, Hr, Hb, Wr, Wb):\nif C < Wr or C < Wb:\nreturn 0\nif Wr == Wb:\nreturn C * min(Hr, Hb)\ncandies\\_to\\_eat = min(C // Wr, C // Wb)\nreturn candies\\_to\\_eat * (Hr + Hb)\n\n# Test the function\nC, Hr, Hb, Wr, Wb = 10, 3, 5, 2, 3\nprint(max\\_joy(C, Hr, Hb, Wr, Wb)) # Output: 16", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def solve():\n    n, m = map(int, input().split())\n    grid = []\n    for _ in range(n):\n        grid.append(list(input().strip()))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "n = int(input())\nangles = list(map(int, input().split()))\nangles.sort()\n\ndiff = angles[-1] - angles[0]\nfor i in range(1, n, 2):\n    diff = min(diff, 360 - (angles[-1] - angles[i]))\n    diff = min(diff, angles[i] - angles[0])\n\nprint(diff)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "mod = 10**9 + 7\n\ndef solve(n, p, c):\n    dp_even = [[0] * 2 for _ in range(n)]\n    dp_even[0][c[0] + 1] = 1\n    dp_odd = [[0] * 2 for _ in range(n)]\n    dp_odd[0][c[0] + 1] = 1\n    for i in range(1, n):\n        if c[i] == -1:\n            dp_even[i][0] = dp_odd[i-1][1]\n            dp_even[i][1] = dp_odd[i-1][0] + dp_odd[i-1][1]\n            dp_odd[i][0] = dp_even[i-1][1]\n            dp_odd[i][1] = dp_even[i-1][0] + dp_even[i-1][1]\n        else:\n            dp_even[i][c[i]] = dp_odd[i-1][1-c[i]]\n            dp_odd[i][c[i]] = dp_even[i-1][1-c[i]]\n            dp_even[i][1-c[i]] = dp_odd[i-1][c[i]]\n            dp_odd[i][1-c[i]] = 0\n    if p == 0:\n        return sum(dp_even[n-1]) % mod\n    else:\n        return sum(dp_odd[n-1]) % mod\n\nn, p = map(int, input().split())\nc = list(map(int, input().split()))\nprint(solve(n, p, c))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "n, f = map(int, input().split())\nproducts\\_sold = 0\ndays = []\n\nfor _ in range(n):\n    k, l = map(int, input().split())\n    days.append((k, l))\n\ndays.sort(key=lambda x: x[0] - x[1], reverse=True)\n\nfor i in range(f):\n    k, l = days[i]\n    products\\_sold += k * 2\n\nfor i in range(f, n):\n    k, l = days[i]\n    if k < l:\n        continue\n    products\\_sold += k\n\nprint(products\\_sold)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\n\n# Initialize mex as 1\nmex = 1\n\n# Keep track of maximum value in the array\nmax_val = max(a)\n\n# Iterate through all possible values of mex up to the maximum value in the array\nfor i in range(1, max_val + 1):\n    # Check if the current value of mex appears in the array\n    if i not in a:\n        # If it doesn't, update mex to this value\n        mex = i\n    else:\n        # If it does, continue to the next value of mex\n        continue\n\n# Print the maximum possible value of mex\nprint(mex)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "import math\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    sqrt_n = math.isqrt(n)\n    for i in range(3, sqrt_n + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_divisors(n):\n    count = 1\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            count += 1\n            j = n // i\n            if j != i:\n                count += 1\n        i += 1\n    return count\n\ndef k_th_divisor(n, k):\n    if is_prime(n) and k == 1:\n        return n\n    if k > count_divisors(n):\n        return -1\n    i = 2\n    while True:", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "import sys\ninput = sys.stdin.readline\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef solve(n, k, s, a):\n    dp = [[0] * (s+1) for _ in range(n+1)]\n    dp[0][0] = 1\n    for i in range(1, n+1):\n        for j in range(s+1):\n            dp[i][j] = dp[i-1][j]\n            if j >= a[i-1]:\n                dp[i][j] += dp[i-1][j-a[i-1]]\n                if k > 0:\n                    dp[i][j] += dp[i-1][j-a[i-1]*2]\n                    k -= 1\n    return dp[n][s]\n\nif __name__ == \"__main__\":\n    n, k, s = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(solve(n, k, s, a))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "from fractions import Fraction\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef get_fraction(t, w, b):\n    l = lcm(w, b)\n    num = min(t - l // w, t - l // b) + 1\n    den = t\n    if num == 0:\n        return str(0)\n    g = gcd(num, den)\n    return str(Fraction(num // g, den // g))\n\nt, w, b = map(int, input().split())\nprint(get_fraction(t, w, b))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def is\\_palindrome(s):\ns = s.lower()\nreturn s == s[::-1]\n\ndef longest\\_non\\_palindrome\\_substring(s):\nmax\\_length = 0\nstart\\_index = 0\nfor i in range(len(s)):\nfor j in range(i, len(s)):\nif not is\\_palindrome(s[i:j+1]) and (j - i + 1) > max\\_length:\nmax\\_length = j - i + 1\nstart\\_index = i\nreturn s[start\\_index:start\\_index + max\\_length]\n\ns = input()\nresult = longest\\_non\\_palindrome\\_substring(s)\nif result:\nprint(len(result))\nelse:\nprint(0)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def min\\_exchanges(n, a, b):\nfor key in range(1, 6):\n# Count the number of students with performance key in each group\na\\_count = sum(1 for x in a if x == key)\nb\\_count = sum(1 for x in b if x == key)\n# If the counts are not equal, return -1 if this is the first group\n# or the absolute difference if it's the second group\nif a\\_count != b\\_count:\nif key == 1:\nreturn -1\nelse:\nreturn abs(a\\_count - b\\_count)\n# If we made it here, all groups have the same number of students\nreturn 0\n\n# Read input\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\n# Compute and print the result\nresult = min\\_exchanges(n, a, b)\nprint(result)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "from collections import defaultdict\n\ndef detect_cycle(n, edges):\n    graph = defaultdict(list)\n    for u, v in edges:\n        graph[u].append(v)\n\n    visited = set()\n    recursion_stack = set()\n\n    def dfs(node):\n        if node in recursion_stack:\n            return True\n        if node in visited:\n            return False\n\n        recursion_stack.add(node)\n        visited.add(node)\n        for neighbor in graph[node]:\n            if dfs(neighbor):\n                return True\n        recursion_stack.remove(node)\n        return False\n\n    for vertex in range(1, n+1):\n        if dfs(vertex):\n            return True\n\n    return False\n\ndef main():\n    n, m = map(int, input().split())\n    edges = [tuple(map(int, input().split())) for _ in range(m)]\n\n    if detect_cycle(n, edges):\n        print(\"NO\")\n    else:\n        # If the graph has a cycle, removing any edge will make it acyclic.\n        # If the graph is already acyclic, removing at most one edge will still keep it acyclic.\n        print(\"YES\")\n\nif __name__ == \"__main__\":\n    main()", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def check\\_street\\_pattern():\nn, m = map(int, input().split())\nhorizontal\\_streets = input()\nvertical\\_streets = input()\n\n# Check if there is at least one horizontal street going in each direction\nif horizontal\\_streets.count('<') == 0 or horizontal\\_streets.count('>') == 0:\nif vertical\\_streets.count('^') == 0 or vertical\\_streets.count('v') == 0:\nprint(\"YES\")\nreturn\n\n# Check if there is at least one vertical street going in each direction\nprint(\"NO\")\n\n# Check if it's possible to reach any junction from any other junction\nelse:\nprint(\"YES\")\n\ncheck\\_street\\_pattern()", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def process(a, b):\n    while a > 0 and b > 0:\n        if a >= 2*b:\n            a -= 2*b\n        else:\n            b -= 2*a\n    return a, b\n\n# Read input values for a and b\na, b = map(int, input().split())\n\n# Perform the sequence of actions and print the final values of a and b\nprint(*process(a, b))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def k_rounding(n, k):\n    if k == 0:\n        return n\n    else:\n        factor = 10 ** k\n        while n % 10 ** (k - 1) != 0:\n            n += 1\n        return n * factor\n\n# Read input\nn, k = map(int, input().split())\n\n# Perform k-rounding\nresult = k_rounding(n, k)\n\n# Print output\nprint(result)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "n, k = map(int, input().split())\na = list(map(int, input().split()))\n\ncount = 0\nproduct = 1\nfor i in a:\n    product *= i\n    if product % k == 0:\n        count += 1\n\nprint(count)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def decode_genome(n, s):\n    # Count the number of each type of nucleotide in the input string\n    counts = {'A': 0, 'C': 0, 'G': 0, 'T': 0}\n    for nucleotide in s:\n        if nucleotide != '?':\n            counts[nucleotide] += 1\n\n    # If all nucleotides are already decoded, return the input string\n    if len(s) - sum(c > 0 for c in counts.values()) == 0:\n        return s\n\n    # If it is not possible to decode the genome, return \"===\"\n    if len(counts) < 4:\n        return \"===\"\n\n    # Find the nucleotide type with the fewest representatives\n    min_count = min(counts.values())\n\n    # Replace all '?' with the nucleotide type with the fewest representatives\n    decoded_genome = []\n    for nucleotide in s:\n        if nucleotide == '?':\n            decoded_genome.append(min(counts.keys(), key=(lambda k: counts[k])) )\n            counts[nucleotide] += 1\n        else:\n            decoded_genome.append(nucleotide)\n            counts[nucleotide] -= 1\n\n    # If all counts are equal, return the decoded genome\n    if all(count == min_count for count in counts.values()):\n        return \"\".join(decoded_genome)\n\n    # If it is not possible to decode the genome, return \"===\"\n    return \"===\"\n\n# Test the function\nprint(decode_genome(8, \"AG?C??CT\")) # AGACGTCT\nprint(decode_genome(4, \"AGCT\")) # AGCT\nprint(decode_genome(6, \"????G?\")) # ===\nprint(decode_genome(4, \"AA??\")) # ===", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "import math\n\ndef find_pythagorean_triple(n):\n    for m in range(1, int(math.sqrt(n*n + 1)) + 1):\n        if (n*n + m*m) % (2*n*m) == 0:\n            k = (n*n + m*m) // (2*n*m)\n            return m, k\n    return -1\n\nn = int(input())\nresult = find_pythagorean_triple(n)\nprint(*result)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "n, k = map(int, input().split())\ns = input()\n\nif k > len(set(s)):\n    print(\"NO\")\nelse:\n    print(\"YES\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "n, m = map(int, input().split())\na = [list(map(int, input().split())) for _ in range(n)]\n\n# Initialize matrix B as all zeros\nb = [[0]*m for _ in range(n)]\n\n# Initialize the number of operations as -1, indicating that it is currently impossible to make matrices A and B equal\nk = -1\n\n# Check if it is possible to make matrices A and B equal\nfor i in range(n):\n    for j in range(m):\n        if a[i][j] == 1 and b[i][j] == 0:\n            # If the current element of matrix A is 1 and the corresponding element of matrix B is 0, then we need to perform operations to make them equal\n            if i+1 < n and j+1 < m and a[i+1][j] == 1 and a[i][j+1] == 1 and a[i+1][j+1] == 1 and b[i+1][j] == 0 and b[i][j+1] == 0 and b[i+1][j+1] == 0:\n                # If the 2x2 submatrix around the current element can be made equal to the submatrix of matrix A, then perform the operations\n                b[i][j] = 1\n                b[i][j+1] = 1\n                b[i+1][j] = 1\n                b[i+1][j+1] = 1\n                k = n*m - sum(sum(b, []))\n                break\n            else:\n                # If it is not possible to make the submatrix equal to the submatrix of matrix A, then it is impossible to make matrices A and B equal\n                k = -1\n                break\n        elif a[i][j] == 0 and b[i][j] == 1:\n            # If the current element of matrix A is 0 and the corresponding element of matrix B is 1, then it is impossible to make matrices A and B equal\n            k = -1\n            break\n    if k", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "l, r, a = map(int, input().split())\n\n# The total number of players that can be included in the team\n# is limited by the number of left-handers and right-handers\n# since ambidexters can play with either hand\ntotal = min(l, r)\n\n# If the number of ambidexters is odd, then the team size must be even\n# and therefore cannot be equal to the total number of left-handers and right-handers\nif a % 2 == 1:\n    total -= 1\n\n# The number of left-handers and right-handers that can be included\n# in the team is half of the minimum of the two\nleft_right = total // 2\n\n# The number of ambidexters that can be included in the team\n# is the same as the number of left-handers and right-handers\nambidexters = total // 2\n\n# The final team size is the sum of the number of left-handers,\n# right-handers, and ambidexters\nteam_size = 2 * left_right + 2 * ambidexters\n\nprint(team_size)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def can_form_non_increasing_seq():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n\n    # sort the elements in b\n    b.sort()\n\n    # initialize the number of zeros in a\n    zero_count = 0\n\n    # initialize a list to keep track of the unused elements in b\n    unused_b = set(b)\n\n    # iterate over the elements in a from right to left\n    for i in range(n - 1, -1, -1):\n        # if the current element is zero\n        if a[i] == 0:\n            # if there are no unused elements in b\n            if not unused_b:\n                # we cannot form a non-increasing sequence\n                return \"No\"\n            # get the smallest unused element in b\n            next_b = unused_b.pop()\n        # if the current element is not zero\n        else:\n            # set next_b to the current element\n            next_b = a[i]\n\n        # for each element in b that is greater than next_b\n        for j in range(len(b) - 1, -1, -1):\n            # if the element is unused and greater than next_b\n            if b[j] > next_b and j not in unused_b:\n                # we cannot form a non-increasing sequence\n                return \"No\"\n            # if the element is unused and equal to next_b\n            elif b[j] == next_b and j not in unused_b:\n                # mark the element as used\n                unused_b.remove(b[j])\n\n    # we can form a non-increasing sequence\n    return \"Yes\"\n\nprint(can_form_non_increasing_seq())", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "import sys\ninput = sys.stdin.readline\n\ndef get_divisors_count(n):\n    count = 0\n    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            count += 1\n            if i != n // i:\n                count += 1\n        i += 1\n    return count\n\ndef main():\n    a, b, c = map(int, input().strip().split())\n    mod = 1073741824\n    result = 0\n    for i in range(1, a+1):\n        for j in range(1, b+1):\n            for k in range(1, c+1):\n                result = (result + get_divisors_count(i * j * k)) % mod\n    print(result)\n\nif __name__ == '__main__':\n    main()", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "n = int(input().strip())\na = list(map(int, input().strip().split()))\n\n# Initialize result and current co-prime number\nresult = 0\ncurr = a[0]\n\n# Initialize list of co-prime numbers\nco_primes = [1]\n\n# Iterate through the array\nfor i in range(1, n):\n    # If current number is not co-prime with previous number\n    if gcd(curr, a[i]) > 1:\n        # Find the smallest co-prime number greater than the current number\n        while True:\n            result += 1\n            if gcd(co_primes[-1], a[i]) == 1:\n                co_primes.append(a[i])\n                break\n            co_primes.append(co_primes[-1] + 1)\n    else:\n        # If current number is co-prime with previous number, add it to the list of co-primes\n        co_primes.append(a[i])\n        curr = a[i]\n\n# Print the result and the co-prime array\nprint(result)\nprint(*co_primes)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def min_coins_needed(n, m, antennas):\n    # Sort the antennas by their right endpoint\n    antennas.sort(key=lambda x: x[0] + x[1])\n\n    # Initialize the minimum coins needed to cover the interval [1, m]\n    min_coins = 0\n\n    # Initialize the current right endpoint of the covered interval\n    current_right = 0\n\n    # Iterate over the antennas\n    for antenna in antennas:\n        # If the left endpoint of the antenna is greater than the current right endpoint\n        if antenna[0] > current_right:\n            # We need to increment the scope of some antenna to cover the interval [current_right + 1, antenna[0] - 1]\n            # The minimum number of coins needed to do this is equal to the length of this interval\n            min_coins += antenna[0] - current_right - 1\n\n        # Update the current right endpoint to the maximum between the current right endpoint and the right endpoint of the antenna\n        current_right = max(current_right, antenna[0] + antenna[1])\n\n    # Return the minimum number of coins needed to cover the interval [1, m]\n    return min_coins\n\n# Read the number of test cases\nT = int(input().strip())\n\n# Iterate over the test cases\nfor t in range(T):\n    # Read the number of antennas and the length of the street\n    n, m = map(int, input().strip().split())\n\n    # Read the positions and scopes of the antennas\n    antennas = [tuple(map(int, input().strip().split())) for _ in range(n)]\n\n    # Compute and print the minimum number of coins needed to modernize the street\n    print(min_coins_needed(n, m, antennas))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def min_cost(n, a, b, c):\n    # Calculate the minimum number of copybooks needed to make n+k divisible by 4\n    k = (4 - (n % 4)) % 4\n\n    # Calculate the minimum cost to buy k copybooks\n    cost = min(k * a, (k // 2) * b, (k // 3) * c)\n\n    return cost\n\n# Test cases\nprint(min_cost(1, 1, 3, 4)) # 3\nprint(min_cost(6, 2, 1, 1)) # 1\nprint(min_cost(4, 4, 4, 4)) # 0\nprint(min_cost(999999999, 1000000000, 1000000000, 1000000000)) # 1000000000", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def is\\_prime(num):\nif num < 2:\nreturn False\nfor i in range(2, int(num**0.5) + 1):\nif num % i == 0:\nreturn False\nreturn True\n\ndef represent\\_as\\_sum\\_of\\_primes(n):\nprimes = []\nfor i in range(1, 4):\nfor j in range(n - 2*i + 1):\nif is\\_prime(j) and is\\_prime(n - 2*i - j):\nprimes = [j, n - 2*i - j, i]\nbreak\nif len(primes) == 3:\nbreak\nreturn primes\n\nn = int(input())\nprimes = represent\\_as\\_sum\\_of\\_primes(n)\nprint(len(primes))\nprint(*primes)", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def path(x):\n    res = []\n    while x != 1:\n        res.append(x)\n        if x % 2 == 0:\n            x = x // 2\n        else:\n            x = x - 1\n    res.append(1)\n    return res\n\ndef solve(n, k):\n    freq = [0] * (n + 1)\n    for i in range(1, n + 1):\n        for j in path(i):\n            freq[j] += 1\n    return max(range(1, n + 1), key=freq.__getitem__, default=0)\n\nif __name__ == '__main__':\n    n, k = map(int, input().split())\n    print(solve(n, k))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def convert_num_to_words(n):\n    under_20 = [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\"]\n    tens = [\"twenty\", \"thirty\", \"forty\", \"fifty\", \"sixty\", \"seventy\", \"eighty\", \"ninety\"]\n\n    if n < 20:\n        return under_20[n]\n    elif n < 100:\n        return tens[n//10-2] + (-n%10 and \" \" + convert_num_to_words(n%10))\n    elif n < 1000:\n        if n % 100 == 0:\n            return convert_num_to_words(n//100) + \" hundred\"\n        else:\n            return convert_num_to_words(n//100) + \" hundred \" + (-n%100 and \"-\" + convert_num_to_words(n%100))\n    else:\n        return \"Number out of range\"\n\ns = int(input())\nprint(convert_num_to_words(s).replace(\" \", \"-\").lower())", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def max\\_joy(C, Hr, Hb, Wr, Wb):\nif C < Wr or C < Wb:\nreturn 0\nif Wr == Wb:\nreturn C * min(Hr, Hb)\ncandies\\_to\\_eat = min(C // Wr, C // Wb)\nreturn candies\\_to\\_eat * (Hr + Hb)\n\n# Test the function\nC, Hr, Hb, Wr, Wb = 10, 3, 5, 2, 3\nprint(max\\_joy(C, Hr, Hb, Wr, Wb)) # Output: 16", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def solve():\n    s = input()\n    t, u = '', ''\n    while s:\n        t += s[0]\n        u += s[-1]\n        s = s[1:-1]\n    print(u)\n\nsolve()", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "n, a, b, c = map(int, input().split())\n\n# Calculate the net cost of a glass bottle (cost - deposit)\nglass\\_cost = b - c\n\n# Check if it's better to buy a plastic bottle or a glass bottle\n#", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def get_max_nines(n):\n    # Calculate the maximum number of nines that can be at the end\n    max_nines = (n-1) % 10\n    # If the maximum number of nines is zero, then it means that all\n    # numbers from 1 to n can form a pair, so the answer is n*(n-1)//2\n    if max_nines == 0:\n        return n * (n - 1) // 2\n    # Calculate the number of pairs that will result in the maximum number\n    # of nines\n    num_pairs = (n - 1) // 10\n    # Subtract the number of pairs that have been counted\n    n -= num_pairs * 10\n    # Calculate the remaining number of pairs\n    remaining_pairs = n * (n - 1) // 2\n    # Return the total number of pairs\n    return remaining_pairs + num_pairs\n\n# Read the input number\nn = int(input())\n# Print the result\nprint(get_max_nines(n))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def min_layers(n):\n    # Initialize the result as 0\n    res = 0\n\n    # Initialize two pointers i and j\n    i, j = 0, 0\n\n    # Keep incrementing j until it becomes greater than n\n    while j <= n:\n\n        # Increment the result\n        res += 1\n\n        # Initialize the max endpoint of the current layer as i\n        max_endpoint = i\n\n        # Keep incrementing i until it becomes greater than j or the\n        # max endpoint of the current layer becomes less than or equal\n        # to j\n        while i <= j and max_endpoint <= j:\n            max_endpoint = n - (j - i)\n            i += 1\n\n        # Update j\n        j = max_endpoint\n\n    # Return the result\n    return res\n\n# Read the input\nn = int(input())\n\n# Print the result\nprint(min_layers(n))", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "n, k = map(int, input().split())\ns = input()\n\nif k > len(set(s)):\n    print(\"NO\")\nelse:\n    print(\"YES\")", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "n = int(input())\nvotes = list(input())\n\n# Keep track of the number of eligible voters in each faction\nd, r = 0, 0\nfor v in votes:\n    if v == 'D':\n        d += 1\n    else:\n        r += 1\n\n# Simulate the voting process\nwhile d + r > 1:\n    # Count the number of eligible voters in the next round\n    d_next, r_next = 0, 0\n    \n    # Go through the voters in order\n    for i in range(n):\n        v = votes[i]\n        \n        # If this voter is eligible, add to the count for their faction\n        if v != '.':\n            if v == 'D':\n                d_next += 1\n            else:\n                r_next += 1\n            \n            # The voter becomes ineligible\n            votes[i] = '.'\n    \n    # The faction with more eligible voters in the next round wins\n    if d_next > r_next:\n        d, r = d_next, 0\n    elif d_next < r_next:\n        d, r = 0, r_next\n    else:\n        # If there's a tie, the depublicans win\n        d, r = d_next, 0\n\n# Output the result\nif d > 0:\n    print('D')\nelse:\n    print('R')", "label": 1, "label_name": "machine_generated", "difficulty": "interview", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_interview_207.jsonl"}
{"code": "def dog_name(n):\n    # Initialize an empty string to store the name\n    name = ''\n\n    # Keep dividing n by 26 and updating the name until n becomes 1 or less\n    while n > 1:\n        # Compute the remainder of n divided by 26\n        rem = (n - 1) % 26\n\n        # If the remainder is 0, set it to 26 and subtract 1 from the quotient\n        if rem == 0:\n            rem = 26\n            n = n // 26 - 1\n        else:\n            n = n // 26\n\n        # Add the corresponding letter to the name\n        if rem > 0:\n            name = chr(ord('a') + rem - 1) + name\n        else:\n            name = 'z' + name\n\n    # If n is 1, the name is 'a'\n    if n == 1:\n        name = 'a' + name\n\n    return name", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "N, M = map(int, input().split())\n\ncurrent_money = 0\ncurrent_buy = 0\n\nfor i in range(N):\n    A, B = map(int, input().split())\n    while current_buy < M and current_money < 10**9+1:\n        if current_buy + B <= M:\n            current_buy += B\n            current_money += A*B\n        else:\n            missing = M - current_buy\n            current_buy += missing\n            current_money += A*missing\n    print(current_money)\n    current_money = 0\n    current_buy = 0", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "import sys\n\ndef min_hugs_to_make_palindrome(s):\n    # Find the longest palindrome in s\n    n = len(s)\n    for i in range(n // 2, -1, -1):\n        if s[:i + 1] == s[n - i - 1:][::-1]:\n            return (n - 1) // 2 - i\n    return 0\n\n# Read input and output the result\ninput_string = sys.stdin.readline().strip()\nprint(min_hugs_to_make_palindrome(input_string))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "def min_product_mod_k(l, r, k=2019):\n    # The smallest number not divisible by k in the range [a, b] is a + k - (a % k)\n    # So we can find the smallest number i in the range that is not divisible by k\n    # Then j = i + 1 will also be not divisible by k, and i * j will be minimum\n    i = l + k - (l % k)\n    if i > r:\n        return 0\n    return i * (i + 1) % k\n\nl, r = map(int, input().split())\nprint(min_product_mod_k(l, r))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "s = input()\n\nif len(s) > 100 or len(s) < 1:\n    print(\"No\")\n    exit()\n\nfor i in range(len(s)):\n    if i % 2 == 0:\n        if s[i] not in ['L', 'U', 'D']:\n            print(\"No\")\n            exit()\n    else:\n        if s[i] not in ['R', 'U', 'D']:\n            print(\"No\")\n            exit()\n\nprint(\"Yes\")", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "def get_divisors(n):\n    divs = [1]\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            divs.append(i)\n            divs.append(int(n / i))\n    divs.append(n)\n    return list(set(divs))\n\ndef restore_numbers(divs):\n    divs_dict = {}\n    for div in divs:\n        divs_dict[div] = divs_dict.get(div, 0) + 1\n\n    x_divs, y_divs = [], []\n    for div, count in divs_dict.items():\n        if count % 2 == 1:\n            x_divs.append(div)\n        else:\n            y_divs.append(div)\n\n    x = 1\n    for div in x_divs:\n        x *= div\n\n    y = 1\n    for div in y_divs:\n        if x % div == 0:\n            y *= div\n        else:\n            y *= div * div\n\n    return x, y\n\nn = int(input())\ndivs = list(map(int, input().split()))\nx, y = restore_numbers(divs)\nprint(x, y)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "import sys\n\ninput = sys.stdin.readline\n\ndef solve():\n    n, m, k = map(int, input().split())\n    dp = [[0] * (m+1) for _ in range(n+1)]\n    dp[1][1] = 1\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            dp[i][j] = dp[i-1][j] ^ dp[i][j-1] ^ a[i-1][j-1]\n            if i > 1:\n                dp[i][j] ^= dp[i-2][j]\n            if j > 1:\n                dp[i][j] ^= dp[i][j-2]\n            if dp[i][j] == k:\n                ans += 1\n    print(ans)\n\na = []\nfor _ in range(n):\n    a.append(list(map(int, input().split())))\nans = 0\nsolve()", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "n, m, d = map(int, input().split())\nc = list(map(int, input().split()))\n\nplatforms = [0] + [sum(c[:i]) for i in range(1, m+1)] + [n+1]\n\ndp = [0] * (m+1)\ndp[-1] = 1\nfor i in range(m, -1, -1):\n    for j in range(1, d+1):\n        if i+j < m+1 and platforms[i+j] - platforms[i] <= d:\n            dp[i] |= dp[i+j]\n\nif dp[0]:\n    a = [0] * (n+1)\n    i = 0\n    for j in range(1, m+1):\n        if dp[j]:\n            for k in range(platforms[j], platforms[j+1]):\n                a[k] = j\n            i = platforms[j+1]\n    print('YES')\n    print(''.join(map(str, a[1:])))\nelse:\n    print('NO')", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "def solve():\n    n = int(input().strip())\n    s = input().strip()\n    t = input().strip()\n\n    # Initialize result list with -1\n    res = [-1]\n\n    # If strings are not equal, find the first index where they differ\n    if s != t:\n        for i in range(n):\n            if s[i] != t[i]:\n                break\n\n        # Initialize the current index and swaps list\n        cur_idx = i\n        swaps = []\n\n        # Loop until the current index reaches the end of the string\n        while cur_idx < n:\n            # If the current character of s is the same as the corresponding character of t,\n            # increment the current index\n            if s[cur_idx] == t[cur_idx]:\n                cur_idx += 1\n            # If the current character of s is different from the corresponding character of t,\n            # and the previous character is the same as the next character,\n            # swap the current character with the previous character\n            elif cur_idx > 0 and s[cur_idx] == t[cur_idx - 1] and s[cur_idx - 1] == t[cur_idx + 1]:\n                s = s[:cur_idx - 1] + s[cur_idx] + s[cur_idx - 1] + s[cur_idx + 1:]\n                swaps.append(cur_idx - 1)\n                cur_idx += 1\n            # If the current character of s is different from the corresponding character of t,\n            # and the previous character is different from the next character,\n            # increment the current index\n            else:\n                cur_idx += 1\n\n        # If the swaps list is not empty, append its length to the result list\n        if swaps:\n            res = [len(swaps)] + swaps\n\n    # Print the result list\n    print(*res)\n\n# Call the solve function\nsolve()", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "import sys\ninput = sys.stdin.readline\n\nMOD = 1000000007\n\ndef power(a, b):\n    res = 1\n    while b > 0:\n        if b % 2:\n            res = (res * a) % MOD\n            b -= 1\n        a = (a * a) % MOD\n        b //= 2\n    return res\n\ndef solve(n, s):\n    dp = [[0] * len(s) for _ in range(n + 1)]\n    # base case: length 2\n    dp[1][0], dp[1][1] = 1, 1\n    for i in range(2, n + 1):\n        for j in range(len(s)):\n            if s[j] == '(':\n                if j > 0:\n                    dp[i][j] = (dp[i][j] + dp[i - 2][j - 1]) % MOD\n                if j + 1 < len(s) and s[j + 1] == ')':\n                    if j > 0 and s[j - 1] == '(':\n                        dp[i][j] = (dp[i][j] + dp[i - 2][j - 2]) % MOD\n                    if j + 2 < len(s) and s[j + 2] == ')':\n                        dp[i][j] = (dp[i][j] + dp[i - 4][j]) % MOD\n            elif s[j] == ')':\n                if j > 1 and s[j - 1] == '(' and s[j - 2] == ')':\n                    dp[i][j] = (dp[i][j] + dp[i - 2][j - 2]) % MOD\n    return sum(dp[n]) % MOD\n\nn = int(input().strip())\ns = input().strip()\nprint(solve(n * 2, s))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "import sys\n\ndef solve():\n    N = int(sys.stdin.readline())\n    A = list(map(int, sys.stdin.readline().split()))\n    B = list(map(int, sys.stdin.readline().split()))\n\n    # Initialize dp array\n    dp = [0] * (N + 2)\n\n    # Calculate maximum number of monsters that can be defeated\n    for i in range(N - 1, -1, -1):\n        dp[i] = max(dp[i + 1], dp[i + 2])\n        dp[i] = max(dp[i], B[i])\n        dp[i] += A[i]\n\n    # Print the result\n    print(dp[0])\n\nsolve()", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "def has\\_palindrome\\_subsequence(a):\nfor i in range(len(a)):\nfor j in range(i, len(a)):\nfor k in range(j, len(a)):\nif a[i:j+1] == a[j:k+1][::-1]:\nreturn True\nreturn False\n\nt = int(input().strip())\nfor _ in range(t):\nn = int(input().strip())\na = list(map(int, input().strip().split()))\nif has\\_palindrome\\_subsequence(a):\nprint(\"YES\")\nelse:\nprint(\"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    sqrt_n = math.isqrt(n)\n    for i in range(3, sqrt_n + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef find_min_prime_ge(x):\n    if x < 2:\n        return 2\n    while True:\n        if is_prime(x):\n            return x\n        x += 1\n\n# Read input from Standard Input\nX = int(input())\n\n# Print the minimum prime number greater than or equal to X\nprint(find_min_prime_ge(X))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\n\n# dp[i] will store the length of the longest block that ends at index i\ndp = [1] * n\n\nfor i in range(1, n):\n    for j in range(i):\n        if a[i] == a[j] and dp[i] < dp[j] + 1:\n            dp[i] = dp[j] + 1\n\n# max_block is the maximum length of a block\nmax_block = max(dp)\n\n# answer will store the blocks that make up the longest block\nblocks = []\n\n# iterate through the array in reverse order\nfor i in range(n-1, -1, -1):\n    if dp[i] == max_block:\n        # add the current index and the length of the block to the answer\n        blocks.append((i, i + max_block - 1))\n        max_block -= 1\n\n# print the number of blocks and the blocks themselves\nprint(len(blocks))\nfor block in blocks:\n    print(*block)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "import networkx as nx\nfrom itertools import islice\n\ndef read_input():\n    n, m, k = map(int, input().split())\n    edges = [list(map(int, input().split())) for _ in range(m)]\n    return n, edges, k\n\ndef find_trees(n, edges):\n    G = nx.Graph()\n    G.add_edges_from(edges)\n    return nx.spanning_trees(G)\n\ndef print_trees(trees, k):\n    print(min(k, len(trees)))\n    for tree in islice(trees, k):\n        print(''.join('1' if (u, v) in tree else '0' for u, v in edges))\n\nn, edges, k = read_input()\ntrees = find_trees(n, edges)\nprint_trees(trees, k)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\n\nleft, right = 0, 0\nfor i in range(n):\n    if i > 0:\n        left = max(left, a[i-1])\n    if i < n-1:\n        right = max(right, a[i+1])\n    if a[i] < left or a[i] < right:\n        print(\"NO\")\n        exit()\n\nprint(\"YES\")", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "def min\\_problems\\_to\\_solve():\n\\(\nD, G = map(int, input().split())\nperfect\\_bonuses = [0]\npoints = [0]\nfor \\_ in range(D):\n\\(\npi, ci = map(int, input().split())\nperfect\\_bonuses.append(ci)\npoints.append(pi)\n\\)\nrunning\\_sum = 0\nfor i in range(D, 0, -1):\n\\(\nrunning\\_sum += points[i] \\* (G // perfect\\_bonuses[i])\nif running\\_sum >= G:\n\\(\nreturn G // perfect\\_bonuses[i] + (running\\_sum - G) // points[i]\n\\)\n\\)\n\nprint(min\\_problems\\_to\\_solve())", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "n, r = map(int, input().split())\nprojects = []\nfor _ in range(n):\n    a, b = map(int, input().split())\n    projects.append((a, b))\n\ndp = [0] * (r + 1)\ndp[r] = 0\nfor i in range(n - 1, -1, -1):\n    a, b = projects[i]\n    for j in range(r, -1, -1):\n        if j >= a:\n            dp[j] = max(dp[j], dp[j - a] + 1)\n        if j + b >= 0:\n            dp[j] = max(dp[j], dp[j + b])\n\nprint(dp[r])", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "import sys\nfrom collections import defaultdict\n\ndef can_construct_square(n, m, tiles):\n    # A tile can be represented as a set of four numbers\n    tile_set = {frozenset(x) for x in tiles}\n    # Precompute the sum of each 2x2 submatrix in the target square\n    target_sums = set()\n    for i in range(m):\n        for j in range(i, m):\n            target_sums.add(sum(sum(k) for k in ( (i, j), (i, j+1), (i+1, j), (i+1, j+1) )))\n    # Check if each tile covers a submatrix with a sum present in target_sums\n    for tiles_sum in tile_set:\n        if not any(sums & tiles_sum for sums in target_sums):\n            return False\n    return True\n\nt = int(sys.stdin.readline())\nfor _ in range(t):\n    n, m = map(int, sys.stdin.readline().split())\n    tiles = [tuple(map(int, sys.stdin.readline().split())) + tuple(map(int, sys.stdin.readline().split())) for _ in range(n)]\n    if can_construct_square(n, m, tiles):\n        print(\"YES\")\n    else:\n        print(\"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "def price(N, A, B):\n    return A * N + B * len(str(N))\n\ndef solve():\n    A, B, X = map(int, input().split())\n    max_int = -1\n    max_price = -1\n    for N in range(1, 10**9 + 1):\n        current_price = price(N, A, B)\n        if current_price <= X and current_price > max_price:\n            max_int = N\n            max_price = current_price\n    print(max_int if max_price != -1 else 0)\n\nsolve()", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "import sys\nfrom collections import defaultdict\n\ndef get_median(arr, l, r):\n    mid = (l + r) // 2\n    arr[l:r+1] = sorted(arr[l:r+1])\n    if (r - l + 1) % 2 == 0:\n        return (arr[mid] + arr[mid - 1]) / 2\n    else:\n        return arr[mid]\n\ndef count_pairs(n, m, arr):\n    count = 0\n    freq = defaultdict(int)\n    for i in range(n + 1):\n        freq[arr[i - 1]] += 1\n\n    for i in range(1, n + 1):\n        # if the current element is greater than m, then we can't form any pair\n        if arr[i - 1] > m:\n            break\n\n        # if the current element is equal to m, then we can form a pair with any\n        # element on its right\n        if arr[i - 1] == m:\n            count += (n - i + 1) * freq[m]\n            continue\n\n        # if the current element is less than m, then we can form a pair if there\n        # is an element on its right which is greater than or equal to m\n        j = i\n        while j <= n and arr[j - 1] < m:\n            j += 1\n\n        # if j is less than or equal to n, then there is an element on the right\n        # of i which is greater than or equal to m, and we can form a pair\n        if j <= n:\n            count += (n - j + 1) * freq[m]\n\n        # update the frequency of elements less than the current element\n        i_freq = 0\n        while i <= n and arr[i - 1] < arr[i - 2]:\n            i_freq += freq[arr[i - 1]]\n            freq[arr[i - 1]] = 0\n            i += 1\n        freq[arr[i -", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "import sys\ninput = sys.stdin.readline\n\ndef build_tree(node, start, end, seg_tree):\n    if start == end:\n        seg_tree[node] = {0: -1, 1: start}\n        return\n    mid = (start + end) // 2\n    build_tree(2*node, start, mid, seg_tree)\n    build_tree(2*node+1, mid+1, end, seg_tree)\n    seg_tree[node] = max(seg_tree[2*node], seg_tree[2*node+1], key=lambda x: x[0])\n\ndef query(node, start, end, left, right, seg_tree):\n    if end < left or start > right:\n        return -1, -1\n    if left <= start and end <= right:\n        return seg_tree[node]\n    mid = (start + end) // 2\n    res1 = query(2*node, start, mid, left, right, seg_tree)\n    res2 = query(2*node+1, mid+1, end, left, right, seg_tree)\n    if res1[0] == -1:\n        return res2\n    elif res2[0] == -1:\n        return res1\n    else:\n        return max(res1, res2, key=lambda x: x[0])\n\nn = int(input().strip())\narr = list(map(int, input().strip().split()))\n\n# Sort the array and compute the differences between adjacent elements\narr.sort()\ndiff = [arr[i+1] - arr[i] for i in range(n-1)]", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "from collections import defaultdict\n\ndef minimum_new_roads(n, m, s, roads):\n    # Create an adjacency list to represent the graph\n    graph = defaultdict(list)\n    for u, v in roads:\n        graph[u].append(v)\n\n    # Initialize visited set and stack\n    visited = set()\n    stack = [s]\n\n    # Initialize the number of new roads to 0\n    new_roads = 0\n\n    while stack:\n        # Get the current city\n        city = stack.pop()\n\n        # If the city has not been visited\n        if city not in visited:\n            # Mark the city as visited\n            visited.add(city)\n\n            # If the city is not in the graph (not reachable from the capital)\n            if city not in graph:\n                # Add a new road to the capital\n                graph[s].append(city)\n                new_roads += 1\n\n            # Add the neighbors of the city to the stack\n            for neighbor in graph[city]:\n                stack.append(neighbor)\n\n    # Return the number of new roads\n    return new_roads\n\n# Test the function\nn, m, s = 9, 9, 1\nroads = [(1, 2), (1, 3), (2, 3), (1, 5), (5, 6), (6, 1), (1, 8), (9, 8), (7, 1)]\nprint(minimum_new_roads(n, m, s, roads))  # Output: 3\n\nn, m, s = 5, 4, 5\nroads = [(1, 2), (2, 3), (3, 4), (4, 1)]\nprint(minimum_new_roads(n, m, s, roads))  # Output: 1", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "n, k = map(int, input().split())\na = list(map(int, input().split()))\n\nif k > n:\n    print(\"NO\")\nelse:\n    print(\"YES\")\n    for i in range(1, k+1):\n        for j in range(i-1, n, k):\n            print(i, end=\" \")\n    print()", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "def can_complete_projects(n, r, projects):\n    # Initialize a list to keep track of the rating after completing each project\n    ratings = [r]\n    \n    # Iterate through the projects in reverse order\n    for a, b in projects[::-1]:\n        # If the rating before the current project is less than the required rating\n        if ratings[-1] < a:\n            # If the rating becomes negative after completing the project, return False\n            if a + b <= 0:\n                return False\n            # Otherwise, update the ratings list with the new rating\n            else:\n                ratings.append(a + b)\n        else:\n            # If the rating is sufficient, update the ratings list with the new rating\n            ratings.append(ratings[-1] + b)\n    \n    # If the final rating is non-negative, return True", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "n = int(input().strip())\na = list(map(int, input().strip().split()))\n\n# Compute the minimum and maximum values in the array\nmin_val = min(a)\nmax_val = max(a)\n\n# If the minimum and maximum values are equal, then all elements are already equal\n# and we can set D to 0\nif min_val == max_val:\n    print(0)\nelse:\n    # Compute the difference between the maximum and minimum values\n    diff = max_val - min_val\n\n    # If the difference is not a multiple of the minimum value, then it is impossible\n    # to make all elements equal\n    if diff % min_val != 0:\n        print(-1)\n    else:\n        # Set D to the difference divided by the minimum value\n        D = diff // min_val\n        print(D)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "def min\\_operations(a, b, c):\nif a == b == c:\nreturn 0, a, b, c\n\nops = 0\nwhile b % a != 0 or c % b != 0:\nops += 1\nif b % a != 0:\nb += 1 if b % 2 == 0 else -1\nif c % b != 0:\nc += 1 if c % 2 == 0 else -1\n\nreturn ops, a, b, c\n\nt = int(input().strip())\nfor _ in range(t):\na, b, c = map(int, input().strip().split())\nops, A, B, C = min\\_operations(a, b, c)\nprint(ops)\nprint(A, B, C)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "def solution(n):\n    count = 0\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        count += 1\n    return count\n\nn = int(input())\nprint(solution(n))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "from collections import defaultdict\n\ndef find_spanning_tree(n, m, D, edges):\n    # create a graph as a dictionary of adjacency lists\n    graph = defaultdict(list)\n    for v, u in edges:\n        graph[v].append(u)\n        graph[u].append(v)\n\n    # initialize a set of visited vertices and a set of tree edges\n    visited = {1}\n    tree_edges = set()\n\n    # recursive function to find a spanning tree\n    def dfs(v, parent):\n        # for each adjacent vertex u of v\n        for u in graph[v]:\n            if u == parent:\n                continue\n            if u not in visited:\n                # mark u as visited and add the edge (v, u) to the tree\n                visited.add(u)\n                tree_edges.add((min(v, u), max(v, u)))\n                dfs(u, v)\n\n    # find a spanning tree rooted at vertex 1\n    dfs(1, -1)\n\n    # check if the degree of vertex 1 is equal to D\n    if graph[1][0] == D - 1:\n        # print the tree edges in the required format\n        for v, u in sorted(tree_edges):\n            print(v, u)\n    else:\n        print(\"NO\")\n\n# read the input\nn, m, D = map(int, input().split())\nedges = [tuple(map(int, input().split())) for _ in range(m)]\n\n# find a spanning tree\nfind_spanning_tree(n, m, D, edges)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "n, r = map(int, input().split())\na = list(map(int, input().split()))\n\nleft, right = 0, r\nres = 0\nwhile right < n:\n    while left >= 0 and a[left] == 0:\n        left -= 1\n    while right < n and a[right] == 0:\n        right += 1\n    if left < 0 or right >= n:\n        print(-1)\n        break\n    a[left:right] = [1]* (right - left + 1)\n    res += 1\n    left, right = left - r + 1, right + r - 1\nprint(res)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "# Get input\na, b = map(int, input().split())\n\n# Calculate sum\nsum = a + b\n\n# Print output\nprint(sum)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef minimal_perimeter(a, b):\n    l = lcm(a, b)\n    return 2 * (l // a + l // b) * a\n\na, b = map(int, input().split())\nprint(minimal_perimeter(a, b))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "def min\\_packages(n, k):\nfor i in range(1, k+1):\nif n % i == 0:\nreturn n // i\nreturn -1\n\nt = int(input().strip())\nfor _ in range(t):\nn, k = map(int, input().strip().split())\nans = min\\_packages(n, k)\nif ans == -1:\nprint(\"Impossible\")\nelse:\nprint(ans)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\n\n# Keep track of the last occurrence of each number\nlast_occurrence = {}\nfor i in range(n-1, -1, -1):\n    last_occurrence[a[i]] = i\n\n# Find unique elements and print them in order\nunique_elements = []\nfor i in range(1001):\n    if i in last_occurrence:\n        unique_elements.append(i)\n\nprint(len(unique_elements))\nprint(*unique_elements)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "def count_triples(N, K):\n    count = 0\n    for a in range(1, N+1):\n        for b in range(1, N+1):\n            c = (K * ((a + b) // K - 1)) - a - b\n            if c <= 0 or c > N:\n                continue\n            count += 1\n    return count\n\nN, K = map(int, input().split())\nresult = count_triples(N, K)\nprint(result)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "def check_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6):\n    # Check if the white sheet is fully covered by the black sheets\n    if x2 <= x5 or x1 >= x6 or y2 <= y5 or y1 >= y6:\n        return \"NO\"\n\n    # Check if any part of the white sheet is not covered by the black sheets\n    if x2 > x5 and x1 < x6 and y2 > y5 and y1 < y6:\n        return \"YES\"\n\n    # Check if the white sheet intersects with either of the black sheets\n    if x1 < x5 and x2 > x5 and y1 < y5 and y2 > y5:\n        return \"YES\"\n    if x1 < x6 and x2 > x6 and y1 < y6 and y2 > y6:\n        return \"YES\"\n    if x1 < x5 and x2 > x5 and y1 < y6 and y2 > y6:\n        return \"YES\"\n    if x1 < x6 and x2 > x6 and y1 < y5 and y2 > y5:\n        return \"YES\"\n\n    return \"NO\"\n\n# Read input\nx1, y1, x2, y2 = map(int, input().split())\nx3, y3, x4, y4 = map(int, input().split())\nx5, y5, x6, y6 = map(int, input().split())\n\n# Check overlap\nprint(check_overlap(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "s = input()\n\n# Check if the first character is 'A'\nif s[0] != 'A':\n    print('WA')\n    exit()\n\n# Check if the third character is 'C'\nif s[2] != 'C':\n    print('WA')\n    exit()\n\n# Check if 'C' appears only once between the third character and the second to last character\nc_count = 0\nfor c in s[2:-2]:\n    if c == 'C':\n        c_count += 1\nif c_count != 1:\n    print('WA')\n    exit()\n\n# Check if all other characters are lowercase\nfor c in s[1:]:\n    if c != 'C' and c.isupper():\n        print('WA')\n        exit()\n\n# If all checks pass, print 'AC'\nprint('AC')", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "n, k = map(int, input().split())\na = list(map(int, input().split()))\n\n# Sort the list of students by their skill level\na.sort()\n\n# Initialize the maximum total number of students\nmax_students = 0\n\n# Iterate through all possible numbers of teams from 1 to k\nfor num_teams in range(1, min(k, n//2 + 1)):\n    # Calculate the maximum skill level of a student in a team\n    max_skill = a[n - 2*num_teams]\n    # Initialize the total number of students in teams\n    teams_students = 0\n    # Iterate through the sorted list of students\n    for i in range(n - 2*num_teams + 1):\n        # Calculate the minimum skill level of a student in a team\n        min_skill = a[i]\n        # Check if the difference in skill level between the two students is within 5\n        if max_skill - min_skill <= 5:\n            # Add the two students to a team\n            teams_students += 2\n            # Update the maximum skill level of a student in a team\n            max_skill = a[i + num_teams - 1]\n    # Update the maximum total number of students\n    max_students = max(max_students, teams_students)\n\n# Print the maximum total number of students\nprint(max_students)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "n = int(input().strip())\nv = list(map(int, input().strip().split()))\n\n# Check if the sequence is already /\\/\\/\\/\nif n == 2 or (v[0] == v[2] and v[1] == v[3]):\n    print(0)\n    exit()\n\n# Count the number of distinct elements\ndistinct_elements = len(set(v))\n\n# If there are more than 2 distinct elements, we need to replace all but 2\nif distinct_elements > 2:\n    print(n - 2)\n    exit()\n\n# Count the number of times each distinct element appears\ncounts = {el: v.count(el) for el in set(v)}\n\n# If the counts are not equal, we need to replace one of the elements\nif counts[list(counts.keys())[0]] != counts[list(counts.keys())[1]]:\n    print(1)\nelse:\n    # If the counts are equal, we need to replace half of the elements\n    print(n // 2)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "n, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\n# Initialize the result variable\nres = 0\n\n# Keep track of the current time\ncurr\\_time = 0\n\n# Iterate over the sleep times\nfor i in range(n):\n\t# Calculate the two possible times Vova can go to sleep\n\ttime1 = curr\\_time + a[i]\n\ttime2 = curr\\_time + a[i] - 1\n\t\n\t# If going to sleep at time2 is good, then Vova should go to sleep at time2\n\tif l <= time2 <= r:\n\t\tcurr\\_time = time2\n\t# If going to sleep at time2 is not good, but going to sleep at time1 is good, then Vova should go to sleep at time1\n\telif time2 < l and l <= time1 <= r:\n\t\tcurr\\_time = time1\n\t# If going to sleep at both time1 and time2 is not good, then Vova should not go to sleep at this moment\n\telif time1 < l or r < time1:\n\t\tcontinue\n\t# Increment the result variable\n\tres += 1\n\nprint(res)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "def midpoint(h1, m1, h2, m2):\n    # calculate total minutes\n    total\\_minutes = (h2 - h1) \\* 60 + (m2 - m1)\n    # divide by 2 to get the difference\n    minutes\\_difference = total\\_minutes // 2\n    # calculate new time\n    h3 = h1 + minutes\\_difference // 60\n    m3 = m1 + minutes\\_difference % 60\n    # adjust time if it's past midnight\n    if h3 >= 24:\n        h3 -= 24\n    # format and print the answer\n    print('{:02d}:{:02d}'.format(h3, m3))\n\n# read input\nh1, m1 = map(int, input().split(':'))\nh2, m2 = map(int, input().split(':'))\n\n# call the function\nmidpoint(h1, m1, h2, m2)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "def possible_ways(n, w, a):\n    # Initialize prefix sum array\n    prefix_sum = [0]\n    for i in a:\n        prefix_sum.append(prefix_sum[-1] + i)\n\n    # Initialize left and right pointers\n    left = 0\n    right = 0\n\n    # Initialize count of possible ways\n    ways = 0\n\n    # Iterate over the prefix sum array\n    for i in range(1, len(prefix_sum)):\n        # Calculate the current number of passengers\n        curr_num = prefix_sum[i]\n\n        # While the current number of passengers is negative\n        while curr_num < 0:\n            # Move the left pointer to the right\n            left += 1\n            # Update the current number of passengers\n            curr_num += prefix_sum[left]\n\n        # Update the right pointer\n        right = max(right, left + 1)\n\n        # If the current number of passengers exceeds the capacity\n        if curr_num > w:\n            # Move the right pointer to the left\n            right = left + 1\n            continue\n\n        # Calculate the number of possible ways\n        ways += (right - left)\n\n    # If the number of ways is 0, then it is contradictory\n    if ways == 0:\n        return 0\n\n    # Return the number of possible ways\n    return ways\n\n# Read input\nn, w = map(int, input().split())\na = list(map(int, input().split()))\n\n# Call the function and print the result\nprint(possible_ways(n, w, a))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "# Read the string from standard input\nS = input()\n\n# Replace every character in S with 'x'\nresult = ''\nfor char in S:\n    result += 'x'\n\n# Print the result\nprint(result)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "import sys\nfrom collections import deque\n\ndef min_moves_to_square(n):\n    # Initialize the queue and the visited set\n    queue = deque([(1, 1, 0)])\n    visited = set([(1, 1)])\n\n    # BFS algorithm\n    while queue:\n        i, j, moves = queue.popleft()\n\n        # Check if we have reached the target square\n        if i * j == n:\n            return moves\n\n        # Explore neighboring squares\n        for di, dj in [(0, 1), (1, 0)]:\n            ni, nj = i + di, j + dj\n            if (ni, nj) not in visited:\n                queue.append((ni, nj, moves + 1))\n                visited.add((ni, nj))\n\n    # If we cannot reach the target square, return -1\n    return -1\n\n# Read input and print output\nn = int(sys.stdin.readline())\nmoves = min_moves_to_square(n)\nprint(moves)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "def max\\_profit(n, k, a):\ni, j, profit, cur\\_sum = 0, 0, 0, 0\ndays = [0] * k\nwhile i < n:\ncur\\_sum = max(a[i], cur\\_sum)\nprofit += cur\\_sum\nif (i - j + 1) == k:\ndays[j] = i - j + 1\nj += 1\ncur\\_sum -= a[j] if j < i else 0\ni += 1\n\nreturn profit, days\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\nprofit, days = max\\_profit(n, k, a)\nprint(profit)\nprint(*days)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "import sys\ninput = sys.stdin.readline\n\nMOD = 1000000007\n\nN, M = map(int, input().strip().split())\na = list(map(int, input().strip().split()))\n\ndp = [0] * (N+1)\ndp[0] = 1\n\nfor i in range(N):\n    if i+1 < N and i+1 not in a:\n        dp[i+1] += dp[i]\n    if i+2 < N and i+2 not in a:\n        dp[i+2] += dp[i]\n\nprint(dp[N] % MOD)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\n\n# Calculate the total sum of the array\ntotal_sum = sum(a)\n\n# Initialize a set to store the candidates for the nice indices\ncandidates = set()\n\n# Iterate over the elements of the array\nfor i, val in enumerate(a):\n    # Calculate the sum of the array without the current element\n    sub_sum = total_sum - val\n    # If the current element is equal to the sum of the remaining elements,\n    # then the current index is a nice index\n    if sub_sum == val:\n        candidates.add(i+1)\n    # Check if the sum of the remaining elements is equal to the total sum\n    # divided by 2. If it is, then there is a subset of the remaining elements\n    # that sums to the current element. Therefore, the current index is a nice index.\n    elif sub_sum * 2 == total_sum:\n        candidates.add(i+1)\n\n# Calculate the number of nice indices\nk = len(candidates)\n\n# Print the number of nice indices\nprint(k)\n\n# Print the nice indices\nprint(*sorted(candidates))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "import math\n\ndef lcm(a, b):\n    return a * b // math.gcd(a, b)\n\nN = int(input())\ntimes = list(map(int, input().split()))\n\nl = times[0]\nfor t in times[1:]:\n    l = lcm(l, t)\n\nprint(l)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "# Read input values for A and B\nA, B = map(int, input().split())\n\n# Check if Takahashi can calculate A * B\nif 1 <= A <= 9 and 1 <= B <= 9:\n    result = A * B\nelse:\n    result = -1\n\n# Print the result\nprint(result)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "import sys\nfrom collections import defaultdict\n\ndef can_form_triangle(L: list) -> int:\n    N = len(L)\n    count = 0\n    lengths = defaultdict(int)\n\n    # Count the frequency of each length\n    for l in L:\n        lengths[l] += 1\n\n    # Iterate over all possible lengths\n    for l in lengths:\n        # Check if there are at least two other lengths that can form a triangle with this length\n        if lengths[l] < 2:\n            continue\n        for other in set(lengths.keys()) - {l}:\n            # Triangle inequality: |a - b| < c < a + b\n            if other < l - l or other > 2 * l:\n                continue\n            count += lengths[l] * (lengths[other] - (other == l)) // 2\n    return count\n\nif __name__ == \"__main__\":\n    input = sys.stdin.readline\n    N = int(input().strip())\n    L = list(map(int, input().strip().split()))\n    print(can_form_triangle(L))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "def construct_string(a, b, x):\n    # Initialize the string with a zeroes followed by b ones\n    s = '0'*a + '1'*b\n\n    # Place the x-1 transitions in the string\n    for i in range(x-1):\n        # If the current and next characters are the same, flip the next character\n        if s[i] == s[i+1]:\n            s = s[:i+1] + ('0' if s[i] == '1' else '1') + s[i+2:]\n\n    return s\n\n# Read input\na, b, x = map(int, input().split())\n\n# Construct and print the string\nprint(construct_string(a, b, x))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "import random\nimport sys\ninput = sys.stdin.readline\n\ndef solve():\n    N = int(input())\n    A = list(map(int, input().split()))\n    A.sort()\n\n    while len(A) > 1:\n        a = A.pop()\n        A[-1] -= a\n        if A[-1] < 0:\n            A[-1] = 0\n        A.sort()\n\n    print(A[0])\n\nif __name__ == \"__main__\":\n    solve()", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "n = int(input().strip())\n\nfor _ in range(n):\n    s = input().strip()\n    alphabet = [False]*26\n    prev = -1\n    for c in s:\n        pos = ord(c) - ord('a')\n        if alphabet[pos]:\n            print(\"No\")\n            break\n        alphabet[pos] = True\n        if prev != -1 and pos != prev+1:\n            print(\"No\")\n            break\n        prev = pos\n    else:\n        print(\"Yes\")", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "# Read input\nN, M = map(int, input().split())\nA = list(map(int, input().split()))\n\n# Calculate total votes\ntotal_votes = sum(A)\n\n# Calculate the minimum number of votes an item must have\nmin_votes = total_votes // (4 * M)\n\n# Check if M popular items can be selected\nif any(v > min_votes for v in A):\n    print(\"Yes\")\nelse:\n    print(\"No\")", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "# Read the input number\nn = int(input())\n\n# Calculate the number of 1000-yen bills needed\nnum_1000_yen_bills = n // 1000\n\n# Calculate the remaining change\nchange = n % 1000\n\n# Print the change\nprint(change)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "n = int(input())\nlights = list(map(int, input().split()))\n\n# Initialize the count of disturbed people\ndisturbed = 0\n\n# Iterate over the lights, excluding the first and last ones\nfor i in range(1, n-1):\n    # Check if the current flat is dark and the adjacent ones are bright\n    if lights[i] == 0 and lights[i-1] == 1 and lights[i+1] == 1:\n        # If so, increment the count of disturbed people\n        disturbed += 1\n\n# Print the minimum number of lights that need to be turned off\nprint(disturbed)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "def min_cost(n, a, b):\n    if n == 0:\n        return 0\n    elif n < a and n < b:\n        return n\n    elif a <= b:\n        return min(a + min_cost(n - a, a, b), b + min_cost(n - b, a, b))\n    else:", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "# Read the four lines of input\nline1 = input()\nline2 = input()\nline3 = input()\nline4 = input()\n\n# Combine the four lines into a single string\ns = line1 + line2 + line3 + line4\n\n# Calculate the XOR of all the digits in the string\nresult = int(s, 2) ^ 0b0110  # 0b0110 is the binary representation of 6\n\n# Output the result as a single digit\nprint(result)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "n, k = map(int, input().split())\narr = list(map(int, input().split()))\n\nleft, right = 0, n-1\ncount = 0\nwhile left <= right:\n    if arr[left] <= k:\n        count += 1\n        left += 1\n    elif arr[right] <= k:\n        count += 1\n        right -= 1\n    else:\n        break\n\nprint(count)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "# Read in the number of data points\nn = int(input())\n\n# Initialize an array to store the differences between the candidate center and the data points\ndiffs = [[0]*n for _ in range(201)]\n\n# Read in the data points and calculate the differences\nfor i in range(n):\n    x, y, h = map(int, input().split())\n    for j in range(201):\n        for k in range(201):\n            if i == 0:\n                # Initialize the minimum difference\n                diffs[j][k] = abs(j-x) + abs(k-y) - h\n            else:\n                # Take the maximum of the current minimum difference and the new difference\n                diffs[j][k] = max(diffs[j][k], abs(j-x) + abs(k-y) - h)\n\n# Find the center coordinates by finding the maximum difference\nc_x, c_y = 0, 0\nmax_diff = -1\nfor i in range(201):\n    for j in range(201):\n        if diffs[i][j] > max_diff:\n            max_diff = diffs[i][j]\n            c_x, c_y = i, j\n\n# Calculate the height of the pyramid\nh = max_diff + 1\n\n# Print the answer\nprint(c_x, c_y, h)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "import math\n\ndef solve():\n    x = float(input())\n    a = math.floor((x * 9 + 1) / 2)\n    b = math.floor(x * 10) % 10\n    return a, b\n\n# Read inputs and print the solution\nx = input()\na, b = solve()\nprint(a, b)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "def min_moves():\n    n, m = map(int, input().split())\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, input().split())))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "a, b, c, d = map(int, input().split())\nanswer = a * d\nif b > c:\n    answer = max(answer, b * c)\nprint(answer)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "n = int(input())\ns = input()\n\n# Initialize result with '0'\nresult = ['0'] * n\n\n# Check if the string can be colored and sorted\ncan_sort = True\nfor i in range(1, n):\n    if s[i] < s[i-1]:\n        # If the current character is smaller than the previous one,\n        # then they must have different colors.\n        if i > 1 and s[i] == s[i-2]:\n            # However, if the current character is the same as the\n            # character before the previous one, then it is impossible\n            # to color and sort the string.\n            can_sort = False\n            break\n    elif s[i] > s[i-1] and result[i-1] == result[i-2]:\n        # If the current character is greater than the previous one\n        # and they have the same color, then it is impossible\n        # to color and sort the string.\n        can_sort = False\n        break\n    if can_sort:\n        # If it is possible to color and sort the string,\n        # update the result accordingly.\n        if s[i] < s[i-1]:\n            result[i-1], result[i] = '1', '0'\n        elif s[i] > s[i-1] and result[i-1] != '1':\n            result[i] = '1'\n\n# Print the result\nprint('YES' if can_sort else 'NO')\nprint(''.join(result))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "n, k, x = map(int, input().split())\na = list(map(int, input().split()))\n\n# Check if it's possible to repost at least one picture in each segment of length k\nif x < (n - k + 1) // k:\n    print(-1)\nelse:\n    # Greedily repost the kittens with the highest beauty values\n    a.sort(reverse=True)\n    reposted = a[:x]\n    total = sum(reposted)\n    for i in range(x, n - k + 1, k):\n        # If there are not enough reposted kittens in this segment,\n        # repost the kittens with the highest beauty values\n        if sum(reposted[i - x:i]) < k:\n            reposted[i - x:i] = a[n - x:n]\n            total -= sum(reposted[:i - x])\n            total += sum(reposted[i - x:i])\n    print(total)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "# Read the input integer\na = int(input())\n\n# Calculate the output integer\noutput = 0\nwhile (2**output < a):\n    output += 1\n\n# Print the output integer\nprint(output)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "def max\\_subarray\\_remove(s, t):\n    n, m = len(s), len(t)\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if s[i - 1] == t[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    # backtrack to find the maximum subarray to remove\n    i, j = n, m\n    res = []\n    while i > 0 and j > 0:\n        if s[i - 1] == t[j - 1]:\n            res.append(i - 1)\n            i -= 1\n            j -= 1\n        elif dp[i - 1][j] > dp[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n    return len(res)\n\n# read input\ns = input()\nt = input()\n\n# compute the maximum subarray to remove\nres = max_subarray_remove(s, t)\n\n# output the result\nprint(res)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "import sys\n\ndef calculate\\_f(a, m):\nn = len(a)\nresult = 0\nfor i in range(n):\nresult += m % a[i]\nreturn result\n\ndef solve():\nn = int(sys.stdin.readline())\na = list(map(int, sys.stdin.readline().split()))\n\nmax\\_value = 0\nfor i in range(1, 10**5 + 1):\ncurrent\\_value = calculate\\_f(a, i)\nmax\\_value = max(max\\_value, current\\_value)\n\nprint(max\\_value)\n\nif **name** == '**main**':\nsolve()", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "def min\\_cost(n, k, s):\n    # Initialize cost as sum of all room numbers\n    cost = sum(i for i in range(1, n + 1))\n\n    # Initialize left and right pointers\n    left, right = 0, 0\n\n    # Iterate through the string\n    for i in range(n):\n        # If there is no spot for a router in the current room\n        if s[i] == '0':\n            continue\n\n        # Calculate the left and right indices\n        left = max(0, i - k)\n        right = min(n, i + k)\n\n        # Update cost by subtracting the cost of connecting\n        # the range covered by the router and adding the cost\n        # of the router itself\n        cost -= (sum(range(left, i)) - (i - left) * left)\n        cost += i\n\n    return cost\n\n# Read input\nn, k = map(int, input().split())\ns = input()\n\n# Print output\nprint(min_cost(n, k, s))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "# Get input number\na = int(input())\n\n# Initialize result as current number\nresult = a\n\n# If the current number is not interesting, find the next interesting number\nif sum(int(digit) for digit in str(a)) % 4 != 0:\n    # Increase number until it becomes interesting\n    while sum(int(digit) for digit in str(result)) % 4 != 0:\n        result += 1\n\n# Print result\nprint(result)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "def find_x(n, divisors):\n    divisors.sort()\n    max_div = divisors[-1]\n    min_div = divisors[0]\n    if max_div % min_div != 0:\n        return -1\n    else:\n        # calculate the product of all divisors\n        product = 1\n        for div in divisors:\n            product *= div\n        # the smallest possible number x is the product divided by the greatest common divisor (gcd) of all divisors\n        x = product // math.gcd(*divisors)\n        # check if x is valid\n        if x % min_div == 0 and x // min_div not in divisors:\n            return x\n        else:\n            return -1\n\nt = int(input().strip())\nfor _ in range(t):\n    n = int(input().strip())\n    divisors = list(map(int, input().strip().split()))\n    result = find_x(n, divisors)\n    print(result)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "def f(x):\n    while str(x).endswith('0'):\n        x = int(str(x)[:-1])\n    return x + 1\n\ndef count_reachable(n):\n    reachable = set()\n    to\\_visit = set([n])\n    while to\\_visit:\n        current = to\\_visit.pop()\n        if current not in reachable:\n            reachable.add(current)\n            to\\_visit.update(f(current) for c in reachable if c > current)\n    return len(reachable)\n\nn = int(input())\nprint(count\\_reachable(n))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "def can_make_equal(s, t):\n    if s == t:\n        return True\n\n    count_s = [0] * 26\n    count_t = [0] * 26\n\n    for char in s:\n        count_s[ord(char) - ord('a')] += 1\n\n    for char in t:\n        count_t[ord(char) - ord('a')] += 1\n\n    for i in range(26):\n        if count_s[i] % 2 == 1 and count_t[i] % 2 == 0:\n            return False\n        if count_s[i] % 2 == 0 and count_t[i] % 2 == 1:\n            return False\n\n    return True\n\ns = input()\nt = input()\n\nif can_make_equal(s, t):\n    print('Yes')\nelse:\n    print('No')", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "n, k = map(int, input().split())\na = list(map(int, input().split()))\n\n# Count the frequency of each number in the array\ncounts = [0] * (2 * 10**5 + 1)\nfor num in a:\n    counts[num] += 1\n\n# Initialize the result as the number of distinct numbers\nresult = len(counts) - counts.count(0)\n\n# If there are enough equal numbers, we can immediately stop\nif counts[a[0]] >= k:\n    print(0)\n    exit()\n\n# Binary search for the smallest number that can be merged to the first number\nleft, right = a[0], 2 * 10**5\nwhile left < right:\n    mid = (left + right) // 2\n    # Count the number of numbers that can be merged to the first number\n    mergeable = sum(count for count in counts if count > 0 and a[0] % (2 * mid) == 0)\n    # If the number of mergeable numbers is greater than or equal to k - 1,\n    # then we can merge the first number to mid and binary search in the left half\n    if mergeable >= k - 1:\n        right = mid\n    else:\n        left = mid + 1\n\n# The result is the original result minus the number of mergeable numbers\n# plus the number of times we need to merge the first number to the smallest mergeable number\nresult -= mergeable\nresult += (k - 1) // mergeable\nprint(result)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "n, m = map(int, input().split())\n\ncity = sorted([list(map(int, input().split())) for _ in range(m)], key=lambda x: x[1])\n\npref\\_count = {i: 0 for i in range(1, n+1)}\nid\\_num = []\n\nfor y, p in city:\npref\\_count[p] += 1\nid\\_num.append(str(p).zfill(6) + str(pref\\_count[p]).zfill(6))\n\nprint('\\n'.join(id\\_num))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\ncount = [0]*n\nfor x in b:\n    count[x] += 1\n\nc = [0]*n\nfor i in range(n):\n    while count[i] == 0:\n        i += 1\n    c[i] = a[i]\n    count[i] -= 1\n    j = (a[i] + i) % n\n    while count[j] == n:\n        j = (j + 1) % n\n    c[i], c[j] = c[j], c[i]\n    count[j] += 1\n\nprint(*c)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "import sys\n\ndef min_repaint(s):\n    n = len(s)\n    if n == 1:\n        return 0\n    count = 0\n    prev = s[0]\n    for i in range(1, n):\n        if s[i] == prev:\n            count += 1\n        else:\n            prev = 1 - prev\n    return count\n\ns = input()\nprint(min_repaint(s))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "import sys\n\ninput = sys.stdin.read().split()\nN, M, C = int(input[0]), int(input[1]), int(input[2])\nB = list(map(int, input[3].split()))\ncoefficients = [list(map(int, input[i+4].split())) for i in range(N)]\n\ncount = 0\nfor code in coefficients:\n    if sum(a*b for a, b in zip(code, B)) + C > 0:\n        count += 1\n\nprint(count)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "def solve(n, k):\n    if (n & 1) or k < n:\n        return \"NO\"\n\n    cur_man, cur_woman = 1, 2\n    res = [[\"man\", \"woman\"] for _ in range(n)]\n    for i in range(n):\n        res[i][0] = cur_man\n        res[i][1] = cur_woman\n        if cur_man == k:\n            cur_man = 1\n            cur_woman += 1\n        else:\n            cur_man += 1\n\n    if n > 1:\n        if res[0][0] == res[1][0] or res[0][1] == res[1][1]:\n            return \"NO\"\n\n    for i in range(1, n - 1, 2):\n        if res[i][0] == res[i + 1][0] or res[i][1] == res[i + 1][1]:\n            return \"NO\"\n\n    return \"YES\\n\" + \"\\n\".join([\" \".join(map(str, x)) for x in res])\n\nn, k = map(int, input().split())\nprint(solve(n, k))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\n\nmax_rest = 0\ncurrent_rest = 0\nfor i in range(n):\n    if a[i] == 0:\n        current_rest += 1\n    else:\n        max_rest = max(max_rest, current_rest)\n        current_rest = 0\n\n# Check if there is a rest that spans across two days\nmax_rest = max(max_rest, current_rest)\n\nprint(max_rest)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "# Read the number of test cases\nT = int(input().strip())\n\n# Process each test case\nfor t in range(T):\n    # Read the number of bounces and the maximum coordinate\n    N, X = map(int, input().strip().split())\n\n    # Read the distances between the bounces\n    Li = list(map(int, input().strip().split()))\n\n    # Initialize the current coordinate to 0\n    current = 0\n\n    # Initialize the count of bounces at most X to 0\n    count = 0\n\n    # Loop through each bounce\n    for i in range(N + 1):\n        # If the current coordinate is at most X\n        if current <= X:\n            # Increase the count by 1\n            count += 1\n\n        # Move to the next coordinate\n        current += Li[i] if i < N else 0\n\n    # Print the count of bounces at most X\n    print(count)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "def min_cost(N, M, C, A):\n    # Initialize the minimum cost to infinity\n    min_cost = float('inf')\n\n    # Iterate over all possible values for the understanding level X\n    for X in range(0, 101):\n        # Initialize the current cost and the current level of understanding\n        cost = 0\n        cur\\_level = [0] * M\n\n        # Iterate over all the books\n        for i in range(1, N+1):\n            # Initialize the number of new algorithms learned from the current book\n            new\\_algo = 0\n\n            # Check if the current book can help Takahashi learn any new algorithms\n            for j in range(M):\n                if cur\\_level[j] + A[i][j] > X:\n                    continue\n                new\\_algo += 1\n\n            # If the current book cannot help Takahashi learn any new algorithms, skip it\n            if new\\_algo == 0:\n                continue\n\n            # Calculate the cost of buying the current book\n            cost += C[i-1]\n\n            # Update the level of understanding for all the algorithms that can be learned from the current book\n            for j in range(M):\n                if cur\\_level[j] + A[i][j] > X:\n                    continue\n                cur\\_level[j] += A[i][j]\n\n            # If Takahashi can learn all the algorithms with a lower cost, update the minimum cost\n            if all(lvl >= X for lvl in cur\\_level):\n                min\\_cost = min(min\\_cost, cost)\n\n    # If the minimum cost is still infinity, it means that it is not possible for Takahashi to achieve his objective\n    if min\\_cost == float('inf'):\n        return -1\n    else:\n        return min\\_cost", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "def get_digit(k):\n    i, digit = 1, 1\n    while True:\n        if k <= i:\n            return digit - 1 + (k - 1) // i\n        i += 1\n        digit += 1", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "import math\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef solve():\n    n = int(input().strip())\n    b = list(map(int, input().strip().split()))\n    a = [0]*n\n    vis = [False]*len(b)\n    for i in range(0, 2*n, 2):\n        if not is_prime(b[i]):\n            a[b[i+1]-1] = b[i]\n        else:\n            vis[b[i]-1] = True\n    prime_count = sum(vis)\n    primes = [i for i in range(2, 2*n+1) if vis[i-1]]\n    for i in range(n - prime_count):\n        a[primes[i]-1] = primes[i]\n    print(*a)\n\nsolve()", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "def min_mp(N, A, B, C, l):\n    dp = [[float('inf') for _ in range(B+1)] for _ in range(A+1)]\n    dp[C][l[C-1]] = 0\n\n    for i in range(C+1, A+1):\n        dp[i][l[i-1]] = 0\n        for j in range(C, i):\n            dp[i][l[i-1]] = min(dp[i][l[i-1]], dp[j][l[j-1]] + 10)\n        for j in range(1, i+1):\n            if l[j-1] >= i:\n                dp[i][l[i-1]] = min(dp[i][l[i-1]], dp[i][l[i-1]-1] + 1)\n            elif l[j-1] >= i - 1:\n                dp[i][l[i-1]] = min(dp[i][l[i-1]], dp[i-1][l[j-1]] + 1)\n\n    res = float('inf')\n    for i in range(B+1):\n        res = min(res, dp[A][i])\n\n    return res\n\nN, A, B, C = map(int, input().split())\nl = [int(input()) for _ in range(N)]\nprint(min_mp(N, A, B, C, l))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "N = int(input())\nfor i in range(1, 10):\n    if N % i == 0 and N // i in range(1, 10):\n        print('Yes')\n        break\nelse:\n    print('No')", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "n, m = map(int, input().split())\na = list(map(int, input().split()))\nsegments = []\nfor _ in range(m):\n    l, r = map(int, input().split())\n    segments.append((l, r))\n\nleft, right = max(a), min(a)\nfor l, r in segments:\n    left = min(left, a[l-1])\n    right = max(right, a[r-1])\n\nans = right - left\nseg_to_use = []\nfor l, r in segments:\n    if a[l-1] == left:\n        ans = max(ans, right - (a[r-1] - 1))\n        seg_to_use.append(l)\n    elif a[r-1] == right:\n        ans = max(ans, (a[l-1] - 1) - left)\n        seg_to_use.append(r)\n\nprint(ans)\nprint(len(seg_to_use))\nprint(*sorted(seg_to_use))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "n = int(input().strip())\nstrings = []\nfor i in range(n):\n    strings.append(input().strip())\n\n# sort the strings based on their length and lexicographical order\nstrings.sort(key=lambda x: (len(x), x))\n\n# check if the sorted strings satisfy the given condition\nfor i in range(1, n):\n    for j in range(len(strings[i])):\n        if strings[i][j:] == strings[i-1]:\n            print(\"NO\")\n            exit()\n\nprint(\"YES\")\nfor s in strings:\n    print(s)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "n, k, x = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [0] * k\nfor i in range(k):\n    dp[i] = -1\n\nfor i in range(k-1, n):\n    dp[0] = max(dp[0], 0)\n    dp[0] += a[i]\n    for j in range(1, k):\n        dp[j] = max(dp[j], dp[j-1])\n        if dp[j-1] < 0:\n            dp[j] = max(dp[j], 0)\n        else:\n            dp[j] += a[i]\n\nprint(max(dp))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "import math\n\ndef min_time_needed(N, A, B, C, D, E):\n    # Calculate the minimum number of vehicles needed for all people to travel\n    num_vehicles = math.ceil(N/A)\n    num_vehicles = min(num_vehicles, math.ceil(N/B))\n    num_vehicles = min(num_vehicles, math.ceil(N/C))\n    num_vehicles = min(num_vehicles, math.ceil(N/D))\n    num_vehicles = min(num_vehicles, math.ceil(N/E))\n\n    # Return the minimum time needed for all people to travel\n    return num_vehicles\n\n# Read input\nN = int(input())\nA = int(input())\nB = int(input())\nC = int(input())\nD = int(input())\nE = int(input())\n\n# Print output\nprint(min_time_needed(N, A, B, C, D, E))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "# Read A and B from standard input\nA, B = map(int, input().split())\n\n# Calculate the least common multiple (LCM) of A and B\n# The LCM of two numbers is the smallest positive integer that is divisible by both numbers\nlcm = abs(A * B) // math.gcd(A, B)\n\n# Print the LCM as the answer\nprint(lcm)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "import math\n\ndef calculate_distance(A, B, H, M):\n    # Calculate the angle in radians for the hour hand\n    hour_angle = (H + M/60) * (math.pi * 2 / 12)\n\n    # Calculate the angle in radians for the minute hand\n    minute_angle = M * (math.pi * 2 / 60)\n\n    # Calculate the difference between the two angles\n    diff_angle = abs(hour_angle - minute_angle)\n\n    # If the difference is greater than pi, take the shorter angle\n    if diff_angle > math.pi:\n        diff_angle = 2 * math.pi - diff_angle\n\n    # Calculate the distance between the hands\n    distance = math.sqrt(A**2 + B**2 - 2*A*B*math.cos(diff_angle))\n\n    # Return the distance without units\n    return round(distance, 12)\n\n# Read input from Standard Input\nA, B, H, M = map(int, input().split())\n\n# Calculate and print the answer\nprint(calculate_distance(A, B, H, M))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "n = int(input())\ns = input()\nt = input()\n\ndef possible(n, s, t):\n    for i in range(n):\n        if s[0] in ('a' + 'b' * i + 'c' + 'b' * (n - i - 1),\n                    'b' + 'a' * i + 'c' + 'a' * (n - i - 1),\n                    'c' + 'a' * i + 'b' + 'a' * (n - i - 1),\n                    'c' + 'b' * i + 'a' + 'b' * (n - i - 1)):\n            return False\n    return True\n\nif possible(n, s, t):\n    print(\"YES\")\n    print(\"a\" * n + \"b\" * n + \"c\" * n)\nelse:\n    print(\"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "def can_sort_with_ravioli(arr):\n    n = len(arr)\n    # Find the index of the maximum element\n    max_index = arr.index(max(arr))\n    \n    # Check if the maximum element is at the end or at the beginning\n    if max_index == n - 1 or max_index == 0:\n        return True\n    \n    # Check if the maximum element can slide to the right or to the left\n    # without violating the conditions\n    if max_index > 0 and arr[max_index - 1] < arr[max_index] - 1:\n        return True\n    if max_index < n - 1 and arr[max_index + 1] < arr[max_index] - 1:\n        return True\n    \n    return False\n\n# Read the input\nn = int(input())\narr = list(map(int, input().split()))\n\n# Check if the array can be sorted with ravioli\nif can_sort_with_ravioli(arr):\n    print(\"YES\")\nelse:\n    print(\"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "n = int(input())\na = input()\nf = list(map(int, input().split()))\n\n# Initialize result as the given number\nresult = int(a)\n\n# Iterate over all possible subsegments\nfor i in range(n):\n    for j in range(i, n):\n        # Generate the number by applying function f on the subsegment\n        num = int(''.join(str(f[int(ch)]) if i <= k < j else ch for k, ch in enumerate(a)))\n        # Update result if the generated number is greater\n        result = max(result, num)\n\nprint(result)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "import sys\nfrom typing import List\n\ndef will_they_agree(n: int, m: int, x: int, y: int, x_cities: List[int], y_cities: List[int]) -> str:\n    # Check if there exists an integer Z that satisfies all three conditions\n    if x < y and x < Z <= y and all(xc < Z for xc in x_cities) and all(yc >= Z for yc in y_cities):\n        return \"No War\"\n    else:\n        return \"War\"\n\ndef main():\n    # Read input\n    n, m, x, y = map(int, sys.stdin.readline().strip().split())\n    x_cities = list(map(int, sys.stdin.readline().strip().split()))\n    y_cities = list(map(int, sys.stdin.readline().strip().split()))\n\n    # Check if war will break out\n    result = will_they_agree(n, m, x, y, x_cities, y_cities)\n\n    # Print output\n    print(result)\n\nif __name__ == \"__main__\":\n    main()", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "mod = 10**9 + 7\ndef solve():\n    n = int(input())\n    dp = [[0] * 10 for _ in range(n)]\n    for j in range(10):\n        dp[0][j] = 1 if j != 1 and j != 5 else 0\n    for i in range(1, n):\n        for j in range(10):\n            if j == 0:\n                dp[i][j] = dp[i-1][9]\n            elif j == 9:\n                dp[i][j] = dp[i-1][0]\n            else:\n                dp[i][j] = (dp[i-1][j-1] + dp[i-1][j+1]) % mod\n    print(sum(dp[n-1]) % mod)\nsolve()", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\n\n# Initialize the minimum number of problems to be solved\nmin_problems = 0\n\n# Find the maximum and minimum skill values\nmax_skill = max(a)\nmin_skill = min(a)\n\n# Calculate the range of skill values\nskill_range = max_skill - min_skill + 1\n\n# If the range is odd, then there is no way to form teams\nif skill_range % 2 != 0:\n    print(-1)\n\n# Otherwise, calculate the minimum number of problems to be solved\nelse:\n    # Calculate the number of students with the maximum skill value\n    max_students = a.count(max_skill)\n\n    # Calculate the number of students with the minimum skill value\n    min_students = a.count(min_skill)\n\n    # Add half of the difference between the maximum and minimum skill values\n    # to the minimum number of problems to be solved for each student with\n    # the maximum skill value\n    min_problems += (max_students * (skill_range // 2))\n\n    # Subtract the number of students with the maximum skill value from\n    # the total number of students, and add half of the difference between\n    # the maximum and minimum skill values to the minimum number of\n    # problems to be solved for each student with the minimum skill value\n    min_problems += (n - max_students) * (skill_range // 2)\n\n    # Print the minimum number of problems to be solved\n    print(min_problems)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    team1 = [0]*n\n    team2 = [0]*n\n\n    # Initialize the teams\n    team1[a.index(max(a))] = 1\n    a[a.index(max(a))] = -1\n    for i in range(k):\n        if a[i] != -1:\n            team1[i] = 1\n            a[i] = -1\n        if n-1-i < n and a[n-1-i] != -1:\n            team1[n-1-i] = 1\n            a[n-1-i] = -1\n\n    # Alternate between the two teams\n    while any(team1) or any(team2):\n        for i in range(n):\n            if not team1[i] and a[i] != -1:\n                team2[i] = 1\n                a[i] = -1\n                for j in range(max(0, i-k), i):\n                    if a[j] != -1:\n                        team2[j] = 1\n                        a[j] = -1\n                for j in range(i+1, min(i+k+1, n)):\n                    if a[j] != -1:\n                        team2[j] = 1\n                        a[j] = -1\n                break\n\n        for i in range(n):\n            if not team2[i] and a[i] != -1:\n                team1[i] = 1\n                a[i] = -1\n                for j in range(max(0, i-k), i):\n                    if a[j] != -1:\n                        team1[j] = 1\n                        a[j] = -1\n                for j in range(i+1, min(i+k+1, n)):\n                    if a[j] != -1:", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "d, n = map(int, input().split())\n\nif d == 0:\n    print(n)\nelse:\n    # Calculate the N-th number that is divisible by 100^d\n    # Since the numbers are divisible by 100^d, we can just calculate the number of multiples of 100^d in the range [1, 100*100*...*100] (D times)\n    # We can calculate the number of multiples of 100^d in the range [1, 100*100*...*100] by using the formula: (last - first) // 100^d + 1\n    # Then, we can find the N-th number by multiplying the quotient of (N-1) to 100^d and adding the first number (which is 1)\n    print(1 + (100**d * (n - 1)))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "n = int(input().strip())\na = list(map(int, input().strip().split(' ')))\n\na.sort()\n\n# Initialize the maximum team size\nmax_team_size = 0\n\n# Initialize the current team size and the start and end indices of the current sequence\ncurrent_team_size = 1\nstart, end = 0, 0\n\n# Iterate over the weights from the second one to the last one\nfor i in range(1, n):\n    # If the current weight is equal to the previous one, continue to the next iteration\n    if a[i] == a[i - 1]:\n        continue\n\n    # If the current weight is greater than the previous one by 1, increment the current team size\n    if a[i] == a[i - 1] + 1:\n        current_team_size += 1\n    # Otherwise, update the maximum team size if the current team size is greater than the previous maximum\n    else:\n        max_team_size = max(max_team_size, current_team_size)\n        # Update the current team size and the start and end indices of the current sequence\n        current_team_size = 2\n        start = i - 1\n        end = i\n\n# Update the maximum team size if the current team size is greater than the previous maximum\nmax_team_size = max(max_team_size, current_team_size)\n\n# If the maximum team size is less than 2, it means that all weights are equal, so we can increase or decrease one weight to form a team\nif max_team_size < 2:\n    max_team_size = 1\n# Otherwise, if the maximum team size is 2, we can form a team by increasing or decreasing the weights of the two largest or two smallest weights\nelif max_team_size == 2:\n    if a[0] > 1:\n        max_team_size = 2\n    elif a[-1] < 150000:\n        max_team_size = 2\n\nprint(max_team_size)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "n, k = map(int, input().split())\na = list(map(int, input().split()))\n\n# Count the frequency of each element in the array\nfreq = {}\nfor num in a:\n    if num not in freq:\n        freq[num] = 0\n    freq[num] += 1\n\n# Initialize variables to keep track of the current number of equal elements and the number of moves\ncurrent_equal, moves = max(freq.values()), 0\nwhile current_equal < k:\n    # Find the minimum and maximum frequencies\n    min_freq, max_freq = float('inf'), 0\n    for freq_val in freq.values():\n        min_freq = min(min_freq, freq_val)\n        max_freq = max(max_freq, freq_val)\n\n    # Increase the minimum frequency and decrease the maximum frequency\n    freq[min_freq] -= 1\n    freq[min_freq + 1] += 1\n    freq[max_freq] -= 1\n    freq[max_freq - 1] += 1\n\n    # Update the current number of equal elements\n    current_equal = sum(1 for freq_val in freq.values() if freq_val == max_freq)\n\n    # Increment the number of moves\n    moves += 1\n\nprint(moves)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "# Read the amount N from the input\nN = int(input())\n\n# Initialize two variables to keep track of the total cost of cakes and doughnuts\ncake_cost = 0\ndonut_cost = 0\n\n# Try to find a solution by iterating over all possible values of cakes and donuts\nfor cakes in range(N // 4 + 1):\n    donuts = N - cakes * 4\n    if donuts % 7 == 0 and donuts >= 0:\n        cake_cost = cakes\n        donut_cost = donuts\n        break\n\n# Print the solution\nif cake_cost * 4 + donut_cost == N:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "def solve():\n    n = int(input())\n    s = input()\n\n    # Calculate the target counts for each digit\n    target = [n // 3] * 3\n\n    # Calculate the current counts for each digit\n    current = [0, 0, 0]\n    for c in s:\n        current[int(c)] += 1\n\n    # Initialize the result string\n    result = []\n\n    # Replace the characters to reach the target counts\n    for i in range(3):\n        diff = target[i] - current[i]\n        result.extend([i] * diff)\n\n    # Combine the result string", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\n\neven_sum = 0\nodd_sum = 0\nfor i in range(n-1):\n    if i % 2 == 0:\n        odd_sum += a[i]\n    else:\n        even_sum += a[i]\n\ngood_candies = 0\nif even_sum % 2 == 0:\n    target = even_sum // 2\n    if a[-1] >= target:\n        good_candies += 1", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "n, k, m = map(int, input().split())\na = list(map(int, input().split()))\n\ncurrent\\_sum = sum(a)\nmin\\_points = (m * n - current\\_sum) % n\nif min\\_points > 0 and min\\_points <= k:\n    print(min\\_points)\nelse:\n    print(-1)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "# Read in the number of squares\nn = int(input())\n\n# Read in the heights of the squares\nsquares = list(map(int, input().split()))\n\n# Initialize a variable to keep track of whether it's possible to rearrange the squares\npossible = True\n\n# Initialize the previous square's height\nprev = squares[0]\n\n# Iterate over the remaining squares\nfor square in squares[1:]:\n    # If the current square's height is less than the previous square's height\n    if square < prev:\n        # If the previous square's height is 1 (the minimum possible height)\n        if prev == 1:\n            # Set possible to False, since we can't decrease the height of the previous square any further\n            possible = False\n        else:\n            # Decrease the previous square's height by 1\n            prev -= 1\n    else:\n        # Update the previous square's height to the current square's height\n        prev = square\n\n# Print the answer\nif possible:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "def is\\_palindromic(matrix):\n    n = len(matrix)\n    # check rows\n    for i in range(n):\n        if matrix[i] != matrix[n-1-i][::-1]:\n            return False\n    # check columns\n    for j in range(n):\n        if matrix[:,j] != matrix[:,n-1-j][::-1]:\n            return False\n    return True\n\ndef solve(n, nums):\n    if n == 1:\n        return [\"YES\", nums]\n    nums.sort(reverse=True)\n    matrix = [nums[:n], nums[n:2*n], nums[2*n:3*n], nums[3*n:]] if n > 1 else [nums]\n    if is_palindromic(matrix):\n        return [\"YES\", \"\\n\".join([\" \".join(map(str, row)) for row in matrix])]\n    else:\n        for i in range(n):\n            for j in range(n-1):\n                matrix[i][j], matrix[i][n-1-j] = matrix[i][n-1-j], matrix[i][j]\n        if is_palindromic(matrix):\n            return [\"YES\", \"\\n\".join([\" \".join(map(str, row)) for row in matrix])]\n        else:\n            return [\"NO\"]\n\nn = int(input())\nnums = list(map(int, input().split()))\nif len(nums) != n*n:\n    print(\"NO\")\nelse:\n    print(\"\\n\".join(solve(n, nums)))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "# Get input\nN = int(input().strip())\nside\\_lengths = list(map(int, input().strip().split()))\n\n# Check if the longest side is strictly shorter than the sum of the other N-1 sides\nif max(side\\_lengths) < sum(side\\_lengths[:-1]):\n    print(\"Yes\")\nelse:\n    print(\"No\")", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "def polycarp_game(n, nums):\n    # Step 1: Find the largest number that is a power of 2 or a multiple of 3\n    max_num = max(nums)\n    while max\\_num % 2 == 0 and max\\_num // 2 in nums:\n        max\\_num //= 2\n    while max\\_num % 3 == 0 and max\\_num // 3 in nums:\n        max\\_num //= 3\n\n    # Step 2: Build the sequence starting from the largest number\n    result = [max\\_num]\n    while max\\_num != 1:\n        if max\\_num % 3 == 0:\n            max\\_num //= 3\n        else:\n            max\\_num *= 2\n        result.append(max\\_num)\n\n    # Step 3: Check if the resulting sequence matches the given sequence\n    if result == nums:\n        return result\n\n    # Step 4: Find the index of the first number that is different from the given sequence\n    for i in range(len(result)):\n        if result[i] != nums[i]:\n            break\n\n    # Step 5: Swap the first number with the different number\n    nums[0], nums[i] = nums[i], nums[0]\n    return nums\n\n# Read input\nn = int(input())\nnums = list(map(int, input().split()))\n\n# Solve the problem\nresult = polycarp_game(n, nums)\n\n# Print the result\nprint(*result)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "a = int(input())\n\n# Check if the sum of the digits of a is divisible by 3\nsum\\_of\\_digits = sum(int(digit) for digit in str(a))\nif sum\\_of\\_digits % 3 == 0:\n    print(1)\nelse:\n    print(0)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "def solve(s, b):\n    n = len(s)\n    f = [0] * (n + 1)\n    g = [0] * (n + 1)\n    for i in range(1, n + 1):\n        f[i] = f[i - 1] + (ord(s[i - 1]) - 96)\n    for i in range(1, n + 1):\n        j = max(1, i - b[i - 1] - 1)\n        g[i] = g[i - 1] + (ord(s[j - 1]) - 96) - (i - j) * (ord(s[j - 1]) - 96)\n    last = [-1] * 26\n    ans = []\n    for i in range(1, n + 1):\n        c = s[i - 1]\n        j = last[ord(c) - 97] + 1\n        ans.append(c)\n        last[ord(c) - 97] = i\n        if j < i:\n            g[i] -= (i - j) * (ord(c) - 96)\n            f[i] -= (i - j) * (ord(c) - 96)\n    j = n\n    for i in range(n, 0, -1):\n        c = ans[i - 1]\n        if g[i] != f[j] - (j - i) * (ord(c) - 96):\n            ans[i - 1] = s[j - 1]\n            j -= 1\n    return ''.join(ans)\n\nq = int(input())\nfor _ in range(q):\n    s = input()\n    m = int(input())\n    b = list(map(int, input().split()))\n    print(solve(s, b))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "def robot\\_walk(n, b, a, s):\nn = int(n)\nb = int(b)\na = int(a)\ns = list(map(int, s))\n\n# dp[i][j][k] is the maximum number of segments robot can pass\n# starting from 0 to i, with battery charge j and accumulator charge k\ndp = [[[-1 for _k in range(a + 1)] for _j in range(b + 1)] for _i in range(n + 1)]\n\ndef max\\_segments(i, j, k):\nif i == 0:\nreturn 0\nif dp[i][j][k] != -1:\nreturn dp[i][j][k]\n\nif j > 0:\ndp[i][j][k] = max(max\\_segments(i - 1, j - 1, k),\nmax\\_segments(i - 1, j, k) if s[i - 1] == 0 else\nmax\\_segments(i - 1, j - 1, k + 1))\nelse:\ndp[i][j][k] = max\\_segments(i - 1, j, k)\n\nif k > 0:\ndp[i][j][k] = max(dp[i][j][k], max\\_segments(i - 1, j, k - 1))\n\ndp[i][j][k] += 1\nreturn dp[i][j][k]\n\nreturn max\\_segments(n, b, a)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "def solve():\n    n, k = map(int, input().split())\n    if k == 1:\n        print(\"YES\")\n        print(n)\n        return\n    if n % 2 == 0 and k % 2 == 0:\n        print(\"YES\")\n        for i in range(k // 2):\n            print(2 * i + 1, end=\" \")\n        for i in range(k // 2):\n            print(2 * i + 2, end=\" \")\n        print()\n    elif n % 2 == 1 and k % 2 == 1:\n        print(\"YES\")\n        for i in range(k // 2):\n            print(2 * i + 1, end=\" \")\n        print(n)\n    else:\n        print(\"NO\")\n\nsolve()", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "import sys\nfrom collections import defaultdict\n\ndef solve():\n    N = int(sys.stdin.readline())\n    A = list(map(int, sys.stdin.readline().split()))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "n = int(input())\ni = 1\npower_of_7 = 7\nwhile power_of_7 % n != 0:\n    i += 1\n    power_of_7 = 7 * (10 ** i)\nprint(i + 1)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "# Get the number of words and the words themselves\nn = int(input())\nwords = [input() for _ in range(n)]\n\n# Initialize an empty set to store the last characters of the words\nlast\\_chars = set()\n\n# Iterate over the words\nfor word in words:\n    # Check if the word was announced before\n    if word in last\\_chars:\n        print(\"No\")\n        exit()\n\n    # Add the last character of the word to the set of last characters\n    last\\_chars.add(word[-1])\n\n# Check if the first character of the first word is in the set of last characters\nif words[0][0] not in last\\_chars:\n    print(\"No\")\nelse:\n    print(\"Yes\")", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "import sys\ninput = sys.stdin.readline\n\ndef update(tree, node, start, end, idx, val):\n    if start == idx and end == idx:\n        tree[node] = val\n    else:\n        mid = (start + end) // 2\n        if idx <= mid:\n            update(tree, 2*node, start, mid, idx, val)\n        else:\n            update(tree, 2*node+1, mid+1, end, idx, val)\n        tree[node] = min(tree[2*node], tree[2*node+1])\n\ndef query(tree, node, start, end, l, r):\n    if l > end or r < start:\n        return 10**9\n    if l <= start and end <= r:\n        return tree[node]\n    mid = (start + end) // 2\n    return min(query(tree, 2*node, start, mid, l, r), query(tree, 2*node+1, mid+1, end, l, r))\n\nn = int(input().strip())\narr = list(map(int, input().strip().split()))\n\n# Initialize segment tree with all elements as 0\ntree = [0]*(4*n)\n\n# Initialize prefix sum array\nprefix = [0]\nfor a in arr:\n    prefix.append(prefix[-1] + a)\n\n# Initialize result variable\nres = 0\n\n# Iterate over the prefix sum array\nfor i in range(1, n+1):\n    # Calculate the required number of extra elements to make the sum non-zero\n    #", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "def is\\_palindrome(s):\n\treturn s == s[::-1]\n\ndef is\\_strong\\_palindrome():\n\tS = input()\n\tN = len(S)\n\tif N < 3 or N > 99 or N % 2 == 0:\n\t\treturn \"No\"\n\tfirst\\_half = S[:N//2]\n\tsecond\\_half = S[N//2 + 1:]\n\treturn \"Yes\" if is\\_palindrome(first\\_half) and is\\_palindrome(second\\_half) else \"No\"\n\nprint(is\\_strong\\_palindrome())", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "def distribute_candies(n):\n    count = 0\n    for a in range(1, n // 2 + 1):\n        b = n - a\n        if a > b:\n            count += 1\n    return count\n\nt = int(input().strip())\nfor _ in range(t):\n    n = int(input().strip())\n    result = distribute_candies(n)\n    print(result)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "import sys\ninput = sys.stdin.readline\n\ndef is_power_of_two(x):\n    return (x != 0) and ((x & (x - 1)) == 0)\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    dp = [0] * (1 << 21)\n    for x in a:\n        for i in range(20, -1, -1):\n            if (x >> i) & 1:\n                dp[x] |= 1 << i\n    need, cur = 0, 0\n    for i in range(20, -1, -1):\n        if dp[cur] & (1 << i):\n            need |= 1 << i\n        if is_power_of_two(cur | (1 << i)):\n            cur |= (1 << i)\n    print(n - sum(need))\n\nfor _ in range(int(input())):\n    solve()", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "def min_moves_to_divisible_by_25(n):\n    # If the number is already divisible by 25, return 0\n    if int(n) % 25 == 0:\n        return 0\n    \n    # Convert the number to a list of digits\n    digits = [int(digit) for digit in str(n)]\n    \n    # Keep track of the minimum number of moves\n    min_moves = float('inf')\n    \n    # Function to check if a number is divisible by 25\n    def is_divisible_by_25(num):\n        return int(num) % 25 == 0\n    \n    # Function to try all possible swaps of adjacent digits\n    def try_swaps(index, moves):\n        nonlocal min_moves\n        # If we have reached the end of the list, check if the number is divisible by 25\n        if index == len(digits):\n            if is_divisible_by_25(''.join(map(str, digits))):\n                min_moves = min(min_moves, moves)\n            return\n        # Try swapping the current digit with the next one\n        digits[index], digits[index + 1] = digits[index + 1], digits[index]\n        try_swaps(index + 1, moves + 1)\n        # Undo the swap\n        digits[index], digits[index + 1] = digits[index + 1], digits[index]\n        # Try not swapping the current digit with the next one\n        try_swaps(index + 1, moves)\n    \n    # Start trying swaps from the first digit\n    try_swaps(0, 0)\n    \n    # If it was impossible to obtain a number divisible by 25, return -1\n    if min_moves == float('inf'):\n        return -1\n    else:\n        return min_moves\n\n# Read the input number\nn = int(input())\n\n# Print the minimum number of moves required", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "n = int(input())\nq = list(map(int, input().split()))\n\n# Check if the given array q can form a valid permutation\nif sum(q) < -(n-1) or sum(q) > n-1:\n    print(-1)\nelse:\n    # Initialize the permutation with the first element\n    p = [0] * n\n    p[0] = -q[0]\n    for i in range(1, n-1):\n        p[i] = p[i-1] + q[i-1]\n    p[n-1] = p[n-2] + q[n-2] + n\n\n    # Check if the last element is correct\n    if p[n-1] != n*(n-1)//2 + 1:\n        print(-1)\n    else:\n        print(*p)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "# Read the input integer\na = int(input())\n\n# Calculate the output integer\noutput = a**3\n\n# Print the output integer\nprint(output)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "n = int(input().strip())\na = list(map(int, input().strip().split()))\n\nsorted_a = sorted(a)\nmin_instability = min(sorted_a[-1] - sorted_a[0], sorted_a[-2] - sorted_a[1])\n\nprint(min_instability)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "# Read input A and B\nA, B = map(int, input().split())\n\n# Initialize the minimum price as -1\nmin_price = -1\n\n# Loop through all possible prices\nfor price in range(1, 10001):\n    # Calculate the tax amounts for the current price\n    tax8 = price * 0.08\n    tax10 = price * 0.1\n    \n    # Round down the tax amounts to the nearest integer\n    tax8 = int(tax8)\n    tax10 = int(tax10)\n    \n    # Check if the current price satisfies the condition\n    if tax8 == A and tax10 == B:\n        # If so, update the minimum price\n        min_price = price\n        break\n\n# Print the minimum price\nprint(min_price)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "def can_vova_complete_the_wall(n, a):\n    # Check if the wall is already complete\n    if max(a) == min(a):\n        return \"YES\"\n\n    # Check if there are any parts of the wall that can be made equal to its neighbors\n    for i in range(1, n - 1):\n        if a[i - 1] < a[i] > a[i + 1]:\n            a[i] = (a[i - 1] + a[i + 1]) // 2\n\n    # Check if the wall can be made complete after making some parts equal to its neighbors\n    for i in range(1, n - 1):\n        if max(a[i - 1:i + 2]) == min(a[i - 1:i + 2]):\n            a[i - 1:i + 2] = [max(a[i - 1:i + 2])] * 3\n        elif a[i - 1] == a[i + 1]:\n            a[i - 1:i + 2] = [a[i - 1] + 1] * 3\n\n    # Check if the wall is now complete\n    if max(a) == min(a):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n# Read input\nn = int(input())\na = list(map(int, input().split()))\n\n# Print output\nprint(can_vova_complete_the_wall(n, a))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "import math\n\ndef lcm(x, y):\n    return (x * y) // math.gcd(x, y)\n\nn = int(input())\na = list(map(int, input().split()))\n\nmin_lcm = float('inf')\nindices = (-1, -1)\n\nfor i in range(n):\n    for j in range(i + 1, n):\n        current_lcm = lcm(a[i], a[j])\n        if current_lcm < min_lcm:\n            min_lcm = current_lcm\n            indices = (i + 1, j + 1)\n\nprint(*indices)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "def count_shichi_go_san(n):\n    count = 0\n    for i in range(753, n+1):\n        if '7' in str(i) and '5' in str(i) and '3' in str(i):\n            count += 1\n    return count\n\nn = int(input())\nprint(count_shichi_go_san(n))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "n = int(input())\ncoins = list(map(int, input().split()))\n\n# Sort the coins in ascending order\ncoins.sort()\n\n# Initialize pockets and current coin index\npockets = 0\ncurr_index = 0\n\n# Loop through the sorted coins\nwhile curr_index < n:\n    # Put the current coin in the current pocket\n    coins[curr_index] = -coins[curr_index]\n    curr_index += 1\n\n    # Initialize a flag to check if the current pocket can accommodate more coins\n    can_add_more = True\n\n    # Loop through the remaining coins\n    while curr_index < n and can_add_more:\n        # If the current coin can be added to the current pocket\n        if coins[curr_index] != coins[curr_index - 1]:\n            coins[curr_index] = -coins[curr_index]\n            curr_index += 1\n        # If the current coin cannot be added to the current pocket\n        else:\n            can_add_more = False\n\n    # Increment the number of pockets\n    pockets += 1\n\n# Print the minimum number of pockets needed\nprint(pockets)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "import sys\n\ndef count_tuples(n):\n    count = 0\n    for a in range(1, n):\n        for b in range(1, n-a+1):\n            if a*b + 1 == n:\n                count += 1\n            elif a*b + 1 < n:\n                break\n    return count\n\nif __name__ == \"__main__\":\n    n = int(sys.stdin.readline())\n    print(count_tuples(n))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "# Read in the number of friends and the minimum height requirement\nN, K = map(int, input().split())\n\n# Read in the heights of the friends\nheights = list(map(int, input().split()))\n\n# Count the number of friends who can ride the roller coaster\nnum_can_ride = sum(h >= K for h in heights)\n\n# Print the result\nprint(num_can_ride)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\n\n# Initialize variables to keep track of the current increasing sequence\ncurrent_seq = [a[0]]\ncurrent_length = 1\nmax_length = 1\nmax_seq = [a[0]]\n\n# Initialize variables to keep track of the direction of the current move\nleft_move = True\nright_move = False\n\n# Iterate over the sequence starting from the second element\nfor i in range(1, n):\n    # If the current element is greater than the last element of the current sequence\n    if a[i] > current_seq[-1]:\n        # Add the current element to the current sequence\n        current_seq.append(a[i])\n        current_length += 1\n        if current_length > max_length:\n            max_length = current_length\n            max_seq = current_seq.copy()\n    # If the current element is less than the first element of the current sequence\n    elif a[i] < current_seq[0]:\n        # Remove the first element of the current sequence and add the current element\n        current_seq = [a[i]] + current_seq[:-1]\n        current_length -= 1\n        current_seq.append(a[i+1])\n        current_length += 1\n        if current_length > max_length:\n            max_length = current_length\n            max_seq = current_seq.copy()\n        # Change the direction of the current move\n        left_move = False\n        right_move = True\n    # If the current element is between the first and last elements of the current sequence\n    else:\n        # If the current element is the next number after the last element of the current sequence\n        if a[i] == current_seq[-1] + 1:\n            # Remove the last element of the current sequence and add the current element\n            current_seq = current_seq[:-1] + [a[i]]\n            current_length -= 1\n            current_seq.append(a[i+1])\n            current_length += 1\n            if current_length > max_length:", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "import collections\n\ndef most_frequent_two_gram():\n    n = int(input())\n    s = input()\n\n    # Use collections.defaultdict to count occurrences of each two-gram\n    two_gram_count = collections.defaultdict(int)\n    for i in range(n-1):\n        two_gram_count[s[i:i+2]] += 1\n\n    # Find the two-gram with the maximum count\n    max_count = max(two_gram_count.values())\n    max_two_grams = [two_gram for two_gram in two_gram_count if two_gram_count[two_gram] == max_count]\n\n    # Print any two-gram with the maximum count\n    print(max_two_grams[0])\n\nmost_frequent_two_gram()", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "N = int(input().strip())\ndoublets_in_a_row = 0\nfor _ in range(N):\n    dice1, dice2 = map(int, input().strip().split())\n    if dice1 == dice2:\n        doublets_in_a_row += 1\n    else:\n        doublets_in_a_row = 0\n    if doublets_in_a_row >= 3:\n        print(\"Yes\")\n        break\nelse:\n    print(\"No\")", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "def min\\_after\\_which\\_monster\\_dies():\n\\_\\_author\\_\\_ = 'Dmytro Polishchuk'\n\nmin\\_hp = 0\nhp = hp\\_limit = int(input())\nn = int(input())\nd = list(map(int, input().split()))\n\nfor i in range(n):\nfor j in range(i, n, n):\nhp += d[j]\nif hp <= min\\_hp:\nmin\\_hp = hp\nif min\\_hp <= 0:\nreturn i\n\nreturn -1\n\nprint(min\\_after\\_which\\_monster\\_dies())", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "def minimum_difference(n):\n    # The sum of the first n natural numbers is n*(n+1)//2\n    total_sum = n * (n + 1) // 2\n    # The average of the total sum is total_sum/2\n    return total_sum // 2 if n % 2 == 0 else total_sum // 2 - n // 2\n\nn = int(input())\nprint(minimum_difference(n))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "n = int(input())\nf = list(map(int, input().split()))\n\n# Find the first friend who doesn't know who to give a gift to\nfor i in range(n):\n    if f[i] == 0:\n        start = i\n        break\n\n# Initialize the answer with the given values\nnf = f.copy()\n\n# Distribute the gifts starting from the found friend\ngiven = set()\nfor i in range(start, start + n):\n    i %= n  # Wrap around to the beginning if needed\n    if nf[i] == 0:\n        # Find the smallest available friend to give a gift to\n        for j in range(n):\n            if j not in given:\n                nf[i] = j\n                given.add(j)\n                break\n\nprint(*nf)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "def main():\n    # Read the input string\n    s = input()\n\n    # Check if the string can be rearranged to form a number with increasing digits\n    if ''.join(sorted(s)) == s:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n# Call the main function\nmain()", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "import sys\n\ndef main():\n    N, M = map(int, input().split())\n    A = list(map(int, input().split()))\n\n    # Sort the assignments in decreasing order of their lengths\n    A.sort(reverse=True)\n\n    # Keep track of the remaining days\n    days_left = N\n\n    # Loop through the assignments\n    for a in A:\n        # If the remaining days are less than the length of the assignment,\n        # then it is not possible to finish all assignments during the vacation\n        if days_left < a:\n            print(-1)\n            return\n        # Otherwise, subtract the length of the assignment from the remaining days\n        days_left -= a", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "import sys\nfrom collections import defaultdict\n\ndef main(input):\n    H, W, K = map(int, input.readline().strip().split())\n    grid = [input.readline().strip() for _ in range(H)]\n\n    # Initialize a 2D array to store the number of ways to color the grid\n    # with the given top and left borders.\n    dp = [[0] * (W + 1) for _ in range(H + 1)]\n\n    # Initialize the first row and column of the dp array.\n    dp[0][0] = 1\n    for j in range(1, W + 1):\n        dp[0][j] = dp[0][j - 1] + (1 if grid[0][j - 1] == '#' else 0)\n\n    for i in range(1, H + 1):\n        for j in range(W + 1):\n            dp[i][j] = dp[i - 1][j] + dp[i][j - 1] - dp[i - 1][j - 1]\n            if j > 0 and grid[i - 1][j - 1] == '#':\n                dp[i][j] += 1\n\n    # Initialize a hashmap to store the number of ways to color the grid\n    # with the given right border.\n    count = defaultdict(int)\n    for j in range(1, W + 1):\n        count[dp[H][j]] += 1\n\n    # Calculate the number of ways to color the grid with the given bottom border.\n    result = 0\n    for j in range(1, W + 1):\n        temp = dp[H][j] - dp[H - 1][j]\n        if grid[H - 1][j - 1] == '#':\n            temp += 1\n        result += count[K - temp]\n\n    print(result)\n\nif __name__ == '__main__':\n    main(sys.stdin)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "n = int(input())\ncoords = list(map(int, input().split()))\n\n# Calculate the maximum and minimum coordinates\nmin_coord = min(coords)\nmax_coord = max(coords)\n\n# Initialize the total cost\ntotal_cost = 0\n\n# Move all chips to the minimum coordinate\nwhile coords != [min_coord] * n:\n    # Find the chip that is furthest from the minimum coordinate\n    furthest_chip = max(coords)\n    # Calculate the cost to move it to the minimum coordinate\n    cost = (furthest_chip - min_coord) // 2\n    # Add the cost to the total cost\n    total_cost += cost\n    # Move the chip to the minimum coordinate\n    coords[coords.index(furthest_chip)] = min_coord\n\n# Move all chips to the maximum coordinate\nwhile coords != [max_coord] * n:\n    # Find the chip that is furthest from the maximum coordinate\n    furthest_chip = min(coords)\n    # Calculate the cost to move it to the maximum coordinate\n    cost = (max_coord - furthest_chip) // 2\n    # Add the cost to the total cost\n    total_cost += cost\n    # Move the chip to the maximum coordinate\n    coords[coords.index(furthest_chip)] = max_coord\n\n# Print the total cost\nprint(total_cost)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "n = int(input().strip())\na = list(map(int, input().strip().split()))\n\n# Initialize variables to keep track of the maximum length of increasing subarray\nmax_length = 1\ncurrent_length = 1\n\n# Iterate over the array\nfor i in range(1, n):\n    # If the current element is greater than the previous one,\n    # increment the current length\n    if a[i] > a[i - 1]:\n        current_length += 1\n    else:\n        # If the current length is greater than the maximum length,\n        # update the maximum length\n        max_length = max(max_length, current_length)\n        # Reset the current length to 1, since we can start a new increasing subarray\n        current_length = 1\n\n# After the loop, check if the current length is greater than the maximum length\n# and update the maximum length if necessary\nmax_length = max(max_length, current_length)\n\n# If we remove one element from the array, we can potentially form an increasing\n# subarray of length n-1. So, we return the maximum of max_length and n-1\nprint(max(max_length, n - 1))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "def main():\n    A, B, K = map(int, input().split())\n    for _ in range(K):\n        if A > 0:\n            A -= 1\n        elif B > 0:\n            B -= 1\n    print(A)\n    print(B)\n\nif __name__ == \"__main__\":\n    main()", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "def solve():\n    S = input()\n    # Initialize the number of removed cubes to 0\n    removed = 0\n    # Initialize a variable to keep track of the current color\n    curr_color = S[0]\n    # Iterate through the string\n    for i in range(1, len(S)):\n        # If the current color is different from the next color, increment the number of removed cubes\n        if curr_color != S[i]:\n            removed += 1\n        # Update the current color\n        curr_color = S[i]\n    # The maximum number of removed cubes is the total number of cubes minus the number of times the color changes\n    print(len(S) - removed)\n\n# Call the function\nsolve()", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
