{"code": "# Function to calculate the number of pairs with median m\ndef countPairs(a, n, m):\n    # Count the occurrence of m in the array\n    count = a.count(m)\n    # Calculate the number of pairs with median m\n    return count * (count - 1) // 2\n\n# Driver code\nn, m = map(int, input().split())\na = list(map(int, input().split()))\nans = countPairs(a, n, m)\nprint(ans)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "from heapq import heappop, heapify\n\n\ndef get_max(l, r):\n    return max(a[l: r + 1])\n\n\nn, k = [int(item) for item in input().split()]\na = [int(item) for item in input().split()]\n\ncoaches = [set(), set()]\n\ncoach = 0\ntaken = 0\n\nl, r = 0, 0\nstill_map = {0: n - 1}\ndone_map_l = {}\ndone_map_r = {}\n\nglobal_map = {}\nfor i in range(n):\n    global_map[a[i]] = i\n\ndone = [0] * (n + 1)\nh = [-(i + 1) for i in range(n)]\nheapify(h)\n# print(a)\nwhile taken < n:\n    # max_index = -1\n    # mx = -float(\"inf\")\n    # mx_l = -1\n    # for l in still_map:\n    #     r = still_map[l]\n    #     local_max = get_max(l, r)\n    #     if local_max > mx:\n    #         mx = local_max\n    #         mx_l = l\n    local_max = -heappop(h)\n    while done[local_max]:\n        local_max = -heappop(h)\n\n    max_index = global_map[local_max]\n\n    l_search, r_search = max_index - 1, max_index + 1\n    l_count, r_count = 0, 0\n    l_last = max_index\n\n    while l_search >= 0 and l_count < k:\n        if l_search in done_map_r:\n            new_l_search = done_map_r[l_search] - 1\n            done_map_l[done_map_r[l_search]] = l_last\n            done_map_r[l_last] = done_map_r[l_search]\n\n            l_search = new_l_search\n        else:\n            l_count += 1\n            coaches[coach].add(l_search)\n            done[a[l_search]] = 1\n            taken += 1\n            l_search -= 1\n\n    r_last = l_search + 1\n    while r_search < n and r_count < k:\n        if r_search in done_map_l:\n            new_r_search = done_map_l[r_search] + 1\n            done_map_r[done_map_l[r_search]] = r_last\n            done_map_l[r_last] = done_map_l[r_search]\n\n            r_search = new_r_search\n        else:\n            r_count += 1\n            coaches[coach].add(r_search)\n            done[a[r_search]] = 1\n            taken += 1\n            r_search += 1\n\n    done[local_max] = 1\n    coaches[coach].add(max_index)\n    taken += 1\n    coach ^= 1\n    done_map_l[l_search + 1] = r_search - 1\n    done_map_r[r_search - 1] = l_search + 1\n    # print(done_map_l, done_map_r)\n    # print(coaches, l_search, r_search)\n\n\nprint(''.join('1' if i in coaches[0] else '2' for i in range(n)))\n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "import sys\nfrom functools import lru_cache\n\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nsys.setrecursionlimit(10 ** 9)\nINF = 1 << 60\nMOD = 1000000007\n\n\ndef main():\n    N, A, B, C = list(map(int, readline().split()))\n    (*L,) = list(map(int, read().split()))\n\n    @lru_cache(maxsize=None)\n    def rec(i, a, b, c):\n        if i == N:\n            return abs(a - A) + abs(b - B) + abs(c - C) - 30 if min(a, b, c) > 0 else INF\n\n        res0 = rec(i + 1, a, b, c)\n        res1 = rec(i + 1, a + L[i], b, c) + 10\n        res2 = rec(i + 1, a, b + L[i], c) + 10\n        res3 = rec(i + 1, a, b, c + L[i]) + 10\n\n        return min(res0, res1, res2, res3)\n\n    print((rec(0, 0, 0, 0)))\n    return\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split())) + [-1]\na.sort()\nmx = 0\nc = 0\ncur = 0\nfor i in a:\n    if i == c:\n        cur += 1\n    else:\n        c = i\n        cur = 1\n    mx = max(mx, cur)\nprint(mx)\n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "x = int(input())\nyear = 0\nsum = 100\n\nwhile sum < x:\n    sum += int(sum//100)\n    year += 1\n\nprint(year)", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "# Read the input\na, b = input().split()\n\n# Convert the input to integers\na = int(a)\nb = int(b)\n\n# Calculate the sum of a and b\nsum = a + b\n\n# Print the sum\nprint(sum)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\na.sort()\n\n# Storing the difference between the maximum and minimum elements in the array in a list\ndiff = [a[i] - a[i - 1] for i in range(1, n)]\n\n# Finding the index of the minimum value in the diff list\nidx = diff.index(min(diff))\n\n# Calculating the minimum possible instability\nmin_instability = min(a[n - 1] - a[idx + 1], a[idx] - a[0])\n\nprint(min_instability)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "# Inputs the number of test cases\nt = int(input())\n\n# Iterates through each test case\nfor i in range(t):\n    # Inputs the length of the array\n    n = int(input())\n\n    # Inputs the array elements\n    a = list(map(int, input().split()))\n\n    # Iterates through each possible subsequence of length at least 3\n    for i in range(n - 2):\n        for j in range(i + 2, n):\n            # Checks if the subsequence is a palindrome\n            if a[i] == a[j] and a[i + 1] == a[j - 1]:\n                print(\"YES\")\n                break\n        else:\n            continue\n        break\n    else:\n        print(\"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "# Get input\nS = input()\nK = int(input())\n\n# Initialize variables\nlength = len(S)\nrepeats = 0\n\n# Calculate the number of repeats\nwhile 2**repeats * length <= 5 * 10**15:\n    repeats += 1\n\n# Calculate the length of the string after 5 * 10**15 days\ntotal_length = 2**repeats * length\n\n# Find the character at the K-th position\nfor i in range(length):\n    if 2**repeats * i + 1 <= K <= 2**repeats * (i + 1):\n        char = S[i]\n        break\n\n# Print the result\nprint(char)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "_ = input().split()\nn = int(_[0])\nk = int(_[1])\ndef lower(k,i):\n    return k*i + int(k*(k-1)/2)\ndef _max(k,i):\n    return i*(pow(2,k)-1)\nif n < lower(k,1):\n    print(\"NO\")\nelse:\n    i = int((n - int(k*(k-1)/2)) / k) - 1\n    # i = 1\n    while lower(k,i) <= n:\n        i = i + 1\n    i = i - 1\n    if _max(k,i) < n:\n        print(\"NO\")\n    else:\n        answer = [_ + i for _ in range(k)]\n        adder = n - lower(k,i)\n        for _ in range(adder):\n            answer[-_-1] = answer[-_-1] + 1\n        if k > 2 and answer[0] == 1 and answer[1] == 3:\n            answer[1] = answer[1] - 1\n            answer[-1] = answer[-1] + 1\n\n        answer = [str(_) for _ in answer]\n        print(\"YES\")\n        print(\" \".join(answer))", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "n = int(input())\npoints = set(int(x) for x in input().strip().split())\npowers = [2**i for i in range(31)]\n\nfor point in points:\n    for power in powers:\n        if point + power in points and point + power + power in points:\n            print(3)\n            print(point, point + power, point + power + power)\n            return\n\nfor point in points:\n    for power in powers:\n        if point + power in points:\n            print(2)\n            print(point, point + power)\n            return\n\nprint(1)\nprint(points.pop())\n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "a, b, c, d = map(int, input().split())\nmax_xy = 0\nfor x in range(a, b + 1):\n    for y in range(c, d + 1):\n        max_xy = max(max_xy, x * y)\nprint(max_xy)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "n = int(input())\n\npoints = list(map(int, input().split()))\n\npoints.sort()\n\nmax_subset = []\n\nfor i in range(n):\n    for j in range(i + 1, n):\n        diff = points[j] - points[i]\n        if diff == 0:\n            continue\n        if diff & (diff - 1) == 0:\n            max_subset.append(points[i])\n            max_subset.append(points[j])\n\nprint(len(max_subset) // 2)\nprint(*max_subset)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "# Function to check if a string is a palindrome\ndef isPalindrome(s):\n    return s == s[::-1]\n\n# Function to check if a string is a strong palindrome\ndef isStrongPalindrome(s):\n    # Check if the string is a palindrome\n    if not isPalindrome(s):\n        return False\n\n    # Calculate the indices of the substrings\n    first_substring_end_index = len(s) // 2\n    second_substring_start_index = (len(s) + 3) // 2 - 1\n\n    # Extract the substrings\n    first_substring = s[:first_substring_end_index]\n    second_substring = s[second_substring_start_index:]\n\n    # Check if the substrings are palindromes\n    if isPalindrome(first_substring) and isPalindrome(second_substring):\n        return True\n    else:\n        return False\n\n# Read input from standard input\ns = input()\n\n# Check if the input string is a strong palindrome\nif isStrongPalindrome(s):\n    print(\"Yes\")\nelse:\n    print(\"No\")", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "N = int(input())\nA = list(map(int, input().split()))\nt = \"APPROVED\"\nfor i in range(len(A)):\n    if A[i]%2==0:\n        if A[i]%3==0 or A[i]%5==0:\n            continue\n        else:\n            t = \"DENIED\"\nprint(t)", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "n = int(input())\na = [int(i) for i in input().split()]\na.extend(a)\ni, j = 0, 0\nm = 0\nwhile i < len(a):\n    while j < len(a) and a[j] == 1:\n        j += 1\n    j += 1\n    m = max(m, j - i - 1)\n    i = j\nprint(m)\n\n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "import sys\nfrom collections import Counter\n\ndef main():\n    n = int(input())\n    ar = list(map(int, input().split()))\n    \n    res = n\n    freq = Counter(ar)\n    \n    for val in ar:\n        for d in range(32):\n            x = (1 << d) - val\n            if x <= 0 or not freq.get(x):\n                continue\n            \n            count = freq.get(x) - (x == val)\n            if count > 0:\n                res -= 1\n                break\n    \n    print(res)\n            \ndef __starting_point():\n    main()\n\n__starting_point()", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "N,M,X,Y = map(int,input().split())\nxx = list(map(int, input().split()))\nyy = list(map(int, input().split()))\n\nxx.sort()\nyy.sort()\n\n\nfor Z in range(X+1,Y):\n    if Z > xx[-1] and yy[0] >= Z:\n        print('No War')\n        return\n\nprint('War')", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "import sys\ninput = sys.stdin.readline\nins = lambda: input().rstrip()\nini = lambda: int(input().rstrip())\ninm = lambda: map(int, input().rstrip().split())\ninl = lambda: list(map(int, input().split()))\nout = lambda x, s='\\n': print(s.join(map(str, x)))\n\na = inl()\nb = inl()\nc = inl()\nn = ini()\nbingo = []\nfor _ in range(n):\n    bingo.append(ini())\nct = [0] * 9\nfor i in bingo:\n    if i in a:\n        ct[a.index(i)] = 1\n    if i in b:\n        ct[b.index(i) + 3] = 1\n    if i in c:\n        ct[c.index(i) + 6] = 1\nif sum(ct[:3]) == 3 or sum(ct[3:6]) == 3 or sum(ct[6:9]) == 3:\n    print(\"Yes\")\nelif (ct[0] + ct[4] + ct[8]) == 3 or (ct[2] + ct[4] + ct[6]) == 3:\n    print(\"Yes\")\nelif (ct[0] + ct[3] + ct[6]) == 3 or (ct[1] + ct[4] + ct[7]) == 3 or (ct[2] + ct[5] + ct[8]) == 3:\n    print(\"Yes\")\nelse:\n    print(\"No\")    ", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "import sys\ninput = sys.stdin.readline\n\nfor _ in range(int(input())):\n    a, b, c = list(map(int, input().split()))\n    ans = 10**18\n    index = [0, 0, 0]\n\n    for x in range(1, c+1):\n        for y in range(x, c+100, x):\n            cost = abs(a-x) + abs(b-y)\n            if c % y < y - (c % y):\n                z = c - (c % y)\n                cost += c % y\n            else:\n                z = c + (y - (c % y))\n                cost += y - (c % y)\n            if ans > cost:\n                ans = cost\n                index = [x, y, z]\n\n    print(ans)\n    print(*index)\n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n\n#\n# Complete the 'solve' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts following parameters:\n#  1. INTEGER r\n#  2. 2D_INTEGER_ARRAY projects\n#\n\ndef solve(r, projects):\n    # Sort the projects by the required rating to complete them\n    projects.sort(key=lambda x: x[0])\n\n    # Initialize the subset and the current rating\n    subset = []\n    current_rating = r\n\n    # Iterate through the projects\n    for project in projects:\n        required_rating, rating_change = project\n\n        # Check if we have enough rating to complete the project\n        if current_rating >= required_rating:\n            subset.append(project)\n            current_rating += rating_change\n\n    # Return the size of the subset\n    return len(subset)\n\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    first_multiple_input = input().rstrip().split()\n\n    n = int(first_multiple_input[0])\n\n    r = int(first_multiple_input[1])\n\n    projects = []\n\n    for _ in range(n):\n        projects.append(list(map(int, input().rstrip().split())))\n\n    result = solve(r, projects)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "a,b,h,m = map(int, input().split())\n\nimport math\nprint((a**2+b**2-2*a*b*math.cos(math.radians((360*h/12+30*m/60)-360*m/60)))**(1/2))", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "N, M = map(int, input().split())\n\n# Create a dictionary to store the condition\nconditions = {}\n\nfor _ in range(M):\n    s_i, c_i = map(int, input().split())\n    conditions[s_i] = c_i\n\n# Initialize the answer to -1\nanswer = -1\n\n# Generate all possible numbers with N digits\nfor i in range(10**N):\n    # Convert the number to a string\n    number = str(i)\n\n    # Check if the number has exactly N digits\n    if len(number) == N:\n        # Check if the number satisfies all conditions\n        valid = True\n        for s_i, c_i in conditions.items():\n            if int(number[s_i-1]) != c_i:\n                valid = False\n                break\n\n        # If the number satisfies all conditions, update the answer\n        if valid:\n            answer = i\n            break\n\n# Print the answer\nprint(answer)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "s = input()\n\nred = 0\nblue = 0\nfor i in s:\n  if i == \"0\":\n    red += 1\n  else :\n    blue += 1\n    \nprint((red+blue-abs(red-blue)))\n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "X = int(input())\nif X % 1000 == 0:\n    print(0)\nelse:\n    print(1000 - (X % 1000))", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "N = int(input())\n\nfor i in range(1, 10):\n    for j in range(1, 10):\n        if i * j == N:\n            print('Yes')\n            return\n            \nprint('No')", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "S = input()\nb = 1\nB = 0\nfor i in S:\n  if i != str(b):\n    B += 1\n  b = 1 - b\nl = len(S)\nprint(min(B, l - B))", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "n = int(input())\ndivisors = [int(x) for x in input().split()]\n\n# Get the list of unique divisors\nunique_divisors = list(set(divisors))\n\n# Sort the list in ascending order\nunique_divisors.sort()\n\n# Initialize x and y\nx, y = 1, 1\n\n# Iterate through the unique divisors\nfor d in unique_divisors:\n    # Count the number of occurrences of d in the list of divisors\n    count = divisors.count(d)\n\n    # If d is a divisor of both x and y, count will be 2\n    if count == 2:\n        x *= d\n        y *= d\n    # If d is a divisor of x, count will be 1\n    elif count == 1:\n        x *= d\n    # If d is a divisor of y, count will be 0\n    else:\n        y *= d\n\nprint(x, y)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "q = int(input())\nfor _ in range(q):\n    n, a, b = list(map(int, input().split()))\n    if 2 * a <= b:\n        print(n * a)\n    else:\n        if n % 2:\n            print(a + n // 2 * b)\n        else:\n            print(n // 2 * b)\n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "# Input the cost of the product in yen\nN = int(input())\n\n# Initialize the change to zero\nchange = 0\n\n# Calculate the number of 1000-yen bills required\nbills = N // 1000\n\n# Calculate the amount of change (remainder)\nchange = N - (bills * 1000)\n\n# Print the amount of change as an integer\nprint(change)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "from collections import defaultdict\n\nn = int(input())\n\nf = list(map(int, input().split()))\n\ngraph = defaultdict(list)\n\nfor i in range(n):\n    if f[i] != 0:\n        graph[f[i]].append(i)\n\nfor i in range(1, n+1):\n    if len(graph[i]) == 0:\n        graph[i].append(i)\n\nwhile True:\n    is_change = False\n    for i in range(1, n+1):\n        if len(graph[i]) == 1:\n            for j in range(1, n+1):\n                if i in graph[j] and len(graph[j]) > 1:\n                    graph[j].remove(i)\n                    is_change = True\n    if not is_change:\n        break\n\nfor i in range(1, n+1):\n    if len(graph[i]) == 1:\n        graph[i].append(i)\n\nfor i in range(n):\n    if f[i] == 0:\n        f[i] = graph[i+1][0]\n\nprint(*f)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nn = int(input())\nsp = [[]for i in range(n)]\nns = []\nfor i in range(2*n-2):\n    s = input()\n    sp[len(s)].append(s)\n    ns.append(s)\ns1 = sp[n-1][0] + sp[n-1][1][-1]\ns2 = sp[n-1][1][0] + sp[n-1][0]\n\nss = [s1, s2]\ncorrect_s = ''\nres = True\nii = 0\ncorrect_s = ss[ii]\nfor i in range(1, n):\n    if correct_s[:i] == sp[i][0] and correct_s[-i:] == sp[i][1]:\n        continue\n    if correct_s[:i] == sp[i][1] and correct_s[-i:] == sp[i][0]:\n        continue\n    res = False\n    break\nif res: pass\nelse: correct_s = ss[1]\nans = ''\nf = [0]*n\nfor s in ns:\n    if f[len(s)] == 0:\n        if correct_s[:len(s)] == s: \n            ans += 'P'\n            f[len(s)] = 1\n        else: \n            ans += 'S'\n            f[len(s)] = 2\n    else:\n        res = 'P' if f[len(s)] == 2 else 'S'\n        ans += res\nprint(ans)\n    \n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "a,b=list(map(int,input().split()))\nprint((a+b)&2047)\n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "# Inputs\nM = int(input(\"Enter the number of algorithms: \"))\nN = int(input(\"Enter the number of books: \"))\nA = []\nC = []\nfor i in range(N):\n    C.append(int(input(\"Enter the cost of book %d: \" % (i+1))))\n    A.append([0] * M)\n    for j in range(M):\n        A[i][j] = int(input(\"Enter the increase in understanding level of algorithm %d due to book %d: \" % (j+1, i+1)))\nX = int(input(\"Enter the minimum understanding level required: \"))\n\n# Dynamic programming\ndp = [[0] * (M+1) for _ in range(N+1)]\nfor i in range(N+1):\n    for j in range(M+1):\n        if i == 0:\n            dp[i][j] = j * X\n        elif j == 0:\n            dp[i][j] = 0\n        else:\n            dp[i][j] = min(dp[i-1][j], dp[i-1][j-1] + C[i-1])\n\n# Check if achievable\nif dp[N][M] >= 0:\n    print(\"Objective achievable\")\n    print(\"Minimum amount of money needed: %d\" % dp[N][M])\nelse:\n    print(\"Objective not achievable\")", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "IN = input\nrint = lambda: int(IN())\nrmint = lambda: list(map(int, IN().split()))\nrlist = lambda: list(rmint())\n\nn, b, a = rmint()\ny = a\nx = b\nd = 0\n\n\ndef ex():\n    print(d)\n    return\n\n\nfor s in rlist():\n    if s:\n        if x and y < a:\n            y += 1\n            x -= 1\n        else:\n            if y:\n                y -= 1\n            else:\n                if x:\n                    x -= 1\n                else:\n                    ex()\n    else:\n        if y:\n            y -= 1\n        else:\n            if x:\n                x -= 1\n            else:\n                ex()\n    d += 1\n\nprint(d)\n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "n = int(input())\nmas = list(map(int, input().split()))\ncou = []\nfor i in range(n + 1):\n\tcou.append(0)\nx = -1\nfor i in range(n):\n\tif mas[i] == 0:\n\t\tif x == -1:\n\t\t\tx = i\n\t\telse:\n\t\t\ty = i\nfor i in range(n):\n\tcou[mas[i]] = 1\nnum = n\nfor i in range (1, n + 1):\n\tif cou[i] != 1:\n\t\tcou[i] = 1\n\t\twhile True:\n\t\t\tnum -= 1\n\t\t\tif mas[num] == 0:\n\t\t\t\tmas[num] = i\n\t\t\t\tbreak\nfor i in range(n):\n\tif mas[i] == i + 1:\n\t\tif i == x:\n\t\t\tmas[i], mas[y] = mas[y], mas[i]\n\t\telse:\n\t\t\tmas[i], mas[x] = mas[x], mas[i]\nprint(*mas)\n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "# Input the values of n, d and k\nn, d, k = map(int, input().split())\n\n# Check if it is possible to construct a tree with the given conditions\nif n == 1:\n    print(\"YES\")\nelse:\n    if d < k - 1:\n        print(\"NO\")\n    else:\n        # Construct a tree with the given conditions\n        print(\"YES\")\n        for i in range(2, n):\n            print(i, i - 1)\n        for i in range(2, k):\n            print(1, i)\n        for i in range(k + 1, n):\n            print(k, i)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "# Function to calculate the GCD of two numbers\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\n# Function to calculate the maximum possible GCD\ndef maximumGCD(N, A):\n    # Initialize the maximum GCD as 1\n    maxGCD = 1\n\n    # Find the GCD of all pairs of integers in the array\n    for i in range(N):\n        for j in range(i + 1, N):\n            maxGCD = max(maxGCD, gcd(A[i], A[j]))\n\n    # Iterate over all integers from 1 to 10^9\n    for k in range(1, 1000000000):\n        # Check if the integer k divides all integers in the array\n        if all(a % k == 0 for a in A):\n            # If k divides all integers, update the maximum GCD\n            maxGCD = max(maxGCD, k)\n\n    # Return the maximum possible GCD\n    return maxGCD\n\n# Read the input\nN = int(input())\nA = list(map(int, input().split()))\n\n# Calculate and print the maximum possible GCD\nprint(maximumGCD(N, A))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "s = input()\nbool = True\nfor i in range(len(s)):\n    if i % 2 == 0:\n        if s[i] != 'R' and s[i] != 'U' and s[i] != 'D':\n            bool = False\n    else:\n        if s[i] != 'L' and s[i] != 'U' and s[i] != 'D':\n            bool = False\nif bool:\n    print('Yes')\nelse:\n    print('No')", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "import sys\ninput = sys.stdin.readline\n\nn,m=list(map(int,input().split()))\nA=[list(map(int,input().split())) for i in range(n)]\n\nfor i in range(m):\n    #\u4e00\u884c\u76ee\u3092i-1\u307e\u30670\u306b\u3059\u308b\n\n    ANSR=[0]*n\n    ANSC=[0]*m\n\n    for j in range(i):\n        if A[0][j]==1:\n            ANSC[j]=1\n\n    for j in range(i,m):\n        if A[0][j]==0:\n            ANSC[j]=1\n\n    for r in range(1,n):\n        B=set()\n        for c in range(m):\n            if ANSC[c]==0:\n                B.add(A[r][c])\n            else:\n                B.add(1-A[r][c])\n\n        if len(B)>=2:\n            break\n        if max(B)==0:\n            ANSR[r]=1\n\n    else:\n        print(\"YES\")\n        print(\"\".join(map(str,ANSR)))\n        print(\"\".join(map(str,ANSC)))\n        return\n\nANSR=[0]*n\nANSC=[0]*m\n\nfor j in range(m):\n    if A[0][j]==1:\n        ANSC[j]=1\n\nflag=0\nfor r in range(1,n):\n    if flag==0:\n        B=[]\n        for c in range(m):\n            if ANSC[c]==0:\n                B.append(A[r][c])\n            else:\n                B.append(1-A[r][c])\n\n        if max(B)==0:\n            continue\n        elif min(B)==1:\n            ANSR[r]=1\n            continue\n        else:\n            OI=B.index(1)\n            if min(B[OI:])==1:\n                flag=1\n                continue\n\n            OO=B.index(0)\n            if max(B[OO:])==0:\n                flag=1\n                ANSR[r]=1\n                continue\n\n            else:\n                print(\"NO\")\n                return\n\n    else:\n\n        B=set()\n        for c in range(m):\n            if ANSC[c]==0:\n                B.add(A[r][c])\n            else:\n                B.add(1-A[r][c])\n\n        if len(B)>=2:\n            break\n        if max(B)==0:\n            ANSR[r]=1\n\nelse:\n    print(\"YES\")\n    print(\"\".join(map(str,ANSR)))\n    print(\"\".join(map(str,ANSC)))\n    return\n\nprint(\"NO\")\n\n    \n\n    \n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "import numpy as np\nimport itertools\n\ndef check():\n    N,M,X = map(int, input().split())\n    A = np.array([[int(i) for i in input().split()] for _ in range(N)])\n    total = np.sum(A,axis=0)\n    flag = True if all((a>=X  for a in total[1:])) else False\n    ans = total[0]\n\n    if flag:\n        for i in range(1,N+1):\n            for v in itertools.combinations([i for i in range(N)], i):\n                B = np.array([A[j] for j in v])\n                total2 = np.sum(B, axis=0)\n                sabun = total-total2\n                if all(a>=X for a in sabun[1:]):\n                    ans = min(ans, sabun[0])\n    print(ans if flag else -1)\n    \ncheck()", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "n=int(input())\nit=list(map(int,input().split()))\nkk=set(it)\nif len(kk)>3:\n    print(-1)\nif len(kk)==1:\n    print(0)\nif len(kk)==2:\n    kk=list(kk)\n    kk.sort()\n    if (kk[0]-kk[1])%2==0:\n        print((kk[1]-kk[0])//2)\n    else:\n        print(kk[1]-kk[0])\nif len(kk)==3:\n    kk=list(kk)\n    kk.sort()\n    if kk[0]-kk[1]==kk[1]-kk[2]:\n        print(kk[1]-kk[0])\n    else:\n        print(-1)\n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "def canBeEqual(S, T):\n    if len(S) != len(T):\n        return False\n\n    char_counts = {}\n    for char in S:\n        if char not in char_counts:\n            char_counts[char] = 0\n        char_counts[char] += 1\n\n    for char in T:\n        if char not in char_counts or char_counts[char] == 0:\n            return False\n        char_counts[char] -= 1\n\n    return True\n\nS = input()\nT = input()\nresult = canBeEqual(S, T)\nif result:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "def get_maximum_reposted_sum(n, k, x, beauty_values):\n    # Initialize the dynamic programming table\n    dp = [[0] * (n + 1) for _ in range(x + 1)]\n    \n    # Loop through all possible x values\n    for i in range(1, x + 1):\n        # Loop through all possible k values\n        for j in range(1, n + 1):\n            # Handle the case where k is greater than the current index\n            if j < k:\n                dp[i][j] = -1\n            # Handle the case where k is equal to the current index\n            elif j == k:\n                dp[i][j] = max(dp[i][j - 1], beauty_values[j - 1])\n            # Handle the case where k is less than the current index\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i - 1][j - k] + beauty_values[j - 1])\n    \n    # Return the maximum reposted sum\n    return dp[x][n]\n\n# Read input from stdin\nn, k, x = map(int, input().split())\nbeauty_values = list(map(int, input().split()))\n\n# Get the maximum reposted sum\nmax_reposted_sum = get_maximum_reposted_sum(n, k, x, beauty_values)\n\n# Print the result\nif max_reposted_sum == -1:\n    print(\"-1\")\nelse:\n    print(max_reposted_sum)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "n = int(input())\ns = input().split()\nfor i in range(n):\n    s[i] = int(s[i])\n\nans = 1\ncurStreak = 1\n\nfor i in range(1,n):\n    if s[i]<= 2*s[i-1]:\n        curStreak+=1\n        ans = max(ans,curStreak)\n    else:\n        curStreak = 1\n\nprint(ans)", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "def solve(n):\n    return n % 2\n\n\nif __name__ == '__main__':\n    n = int(input())\n    result = solve(n)\n    print(result)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "def count_monotonic_renumerations(a):\n    n = len(a)\n    cnt = [1] * n\n    for i in range(1, n):\n        if a[i] == a[i - 1]:\n            cnt[i] = cnt[i - 1]\n        else:\n            cnt[i] = cnt[i - 1] * 2\n    return (cnt[n - 1] % 998244353)\n\n\nn = int(input())\na = list(map(int, input().split()))\nprint(count_monotonic_renumerations(a))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "def superhero_fights_monster(H, n, d):\n    if all(x < 0 for x in d):\n        return -1\n    k = 0\n    while H > 0:\n        for i in range(n):\n            H += d[i]\n            k += 1\n            if H <= 0:\n                return k\n    return -1\n\n\nH, n = map(int, input().split())\nd = list(map(int, input().split()))\nprint(superhero_fights_monster(H, n, d))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "# -*- coding: utf-8 -*-\n# @Time    : 2019/3/8 0:18\n# @Author  : LunaFire\n# @Email   : gilgemesh2012@gmail.com\n# @File    : E. K Balanced Teams.py\n\n\ndef main():\n    n, k = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    a.sort()\n\n    cnt = [0] * n\n    for i in range(n):\n        while i + cnt[i] < n and a[i + cnt[i]] - a[i] <= 5:\n            cnt[i] += 1\n\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    for i in range(n):\n        for j in range(k + 1):\n            dp[i + 1][j] = max(dp[i + 1][j], dp[i][j])\n            if j + 1 <= k:\n                dp[i + cnt[i]][j + 1] = max(dp[i + cnt[i]][j + 1], dp[i][j] + cnt[i])\n\n    print(dp[n][k])\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "\na,b,x=list(map(int,input().split()))\nif(a>b):\n    s='0'\n    a-=1\nelse:\n    s='1'\n    b-=1\nfor i in range(x-1):\n    if(s[-1]=='1'):\n        s+='0'\n        a-=1\n    else:\n        s+='1'\n        b-=1\nif(s[-1]=='1'):\n    s+='1'*(b)\n    s+='0'*a\nelse:\n    s+='0'*a\n    s+='1'*b\nprint(s)\n\n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "# Input\nN, M = map(int, input().split())\nprefectures = []\nfor i in range(M):\n    prefecture, year = map(int, input().split())\n    prefectures.append((prefecture, year))\n\n# Sort the cities in ascending order of establishment year\nprefectures.sort(key=lambda x: x[1])\n\n# Create a dictionary to store the cities belonging to each prefecture\ncities_by_prefecture = {}\nfor i, (prefecture, year) in enumerate(prefectures):\n    cities_by_prefecture.setdefault(prefecture, []).append(i + 1)\n\n# Print the ID numbers for all the cities\nfor i, (prefecture, year) in enumerate(prefectures):\n    prefecture_str = str(prefecture).zfill(6)\n    city_str = str(cities_by_prefecture[prefecture].pop(0)).zfill(6)\n    id_number = prefecture_str + city_str\n    print(id_number)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\CodeLlama-70b-Instruct-hf-apps_introductory_207.jsonl"}
{"code": "n = int(input())\ns = input().strip()\n\n# Calculate the minimum number of characters to replace\nmin_replace = sum(x - y for x, y in zip(['0' * (n // 3), s].T))\n\n# Replace characters to make the string balanced\ns = ''.join(['0' if x == '1' else '1' if x == '0' else '2' for x in s])\n\n# Print the balanced ternary string\nprint(s)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n = int(input())\nA = [int(i) for i in input().split()]\n\ndef gcd(a, b):\n    if b==0:\n        return a\n    return gcd(b, a%b)\n\ng = A[0]\n\nfor i in A:\n    g = gcd(g, i)\n\nfct = []\n\nfor i in range(1, g+1):\n    if i*i > g:\n        break\n    if g%i == 0:\n        fct.append(i)\n        fct.append(g//i)\n\nprint(len(set(fct)))\n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n, k = map(int, input().split())\na = list(map(int, input().split()))\n\na.sort()\ni = 0\nans = 0\nwhile i < n and a[i] <= k:\n    ans += 1\n    a.pop(0)\n    i += 1\n\nprint(ans)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "import math\na,b = [int(x) for x in input().split()]\n\narea = a+b\nt = int(math.sqrt(area))\nsa = int(math.sqrt(a))\nsb = int(math.sqrt(b))\n\nD = []\nDA = []\nDB = []\nfor i in range(1,t+1):\n    if area % i == 0:\n        if i*i != area:\n            D.append(i)\n            D.append(area//i)\n        else:\n            D.append(i)\n\nfor i in range(1,sa+1):\n    if a % i == 0:\n        if i*i != a:\n            DA.append(i)\n            DA.append(a//i)\n        else:\n            DA.append(i)\n            \nfor i in range(1,sb+1):\n    if b % i == 0:\n        if i*i != b:\n            DB.append(i)\n            DB.append(b//i)\n        else:\n            DB.append(i)\nDA.sort()\nDB.sort()\nD.sort()\n\nstart = ((len(D)+1)//2)-1\ndiv = len(D)\n\ndef closestdiv(t,D):\n    low = 0\n    high = len(D)-1\n    while high - low > 1:\n        guess = (high+low)//2\n        if D[guess] > t:\n            high = guess\n        else:\n            low = guess\n    if D[high] <= t:\n        return high\n    else:\n        return low\n    \nwhile start > -1:\n    t = D[start]\n    s = D[-start-1]\n    if DA[-closestdiv(t,DA)-1] <= s:\n        print(2*t+2*s)\n        break\n    elif DB[-closestdiv(t,DB)-1] <= s:\n        print(2*t+2*s)\n        break\n    start -= 1", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\n\na.sort()\n\nk = len(set(a))\ns = \"\"\n\nfor i in range(k):\n    if a[i] == a[0]:\n        s += \"L\"\n    else:\n        s += \"R\"\n\nprint(k)\nprint(s)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "N, M = map(int, input().split())\n\ns_list = []\nc_list = []\n\nfor _ in range(M):\n    s, c = map(int, input().split())\n    s_list.append(s)\n    c_list.append(c)\n\n# Find the smallest integer satisfying the conditions\nresult = -1\nfor i in range(1, 10**N):\n    num = i\n    digits = str(num).split('.')\n    num_digits = len(digits) - 1\n    if num_digits == N and all(str(num // d) == str(s_list[i-1]) for i, d in enumerate(reversed(digits)) and num % 10**(num_digits-1) == c_list[i-1]:\n        result = num\n        break\n\n# Print the answer\nif result != -1:\n    print(result)\nelse:\n    print(-1)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n = int(input())\ns = input().lower()\nt = input().lower()\n\nif s == t:\n    print(0)\n    print()\n\nmoves = 0\nfor i in range(n - 1):\n    if s[i] != t[i]:\n        moves += 1\n        c = i\n        s[i] = t[i]\n        s[i + 1] = t[i]\n\nif moves <= 1000:\n    print(moves)\n    print(*[c + 1] * moves)\nelse:\n    print(-1)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "import numpy as np\nimport itertools\n\ndef check():\n    N,M,X = map(int, input().split())\n    A = np.array([[int(i) for i in input().split()] for _ in range(N)])\n    total = np.sum(A,axis=0)\n    flag = True if all((a>=X  for a in total[1:])) else False\n    ans = total[0]\n\n    if flag:\n        for i in range(1,N+1):\n            for v in itertools.combinations([i for i in range(N)], i):\n                B = np.array([A[j] for j in v])\n                total2 = np.sum(B, axis=0)\n                sabun = total-total2\n                if all(a>=X for a in sabun[1:]):\n                    ans = min(ans, sabun[0])\n    print(ans if flag else -1)\n    \ncheck()", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n = int(input())\nx = list(map(int, input().split()))\n\nx.sort()\n\n# Calculate the minimum coins required to move all chips to the same coordinate\ncoins = 0\ncurrent_position = x[0]\nfor i in range(1, n):\n    coins += abs(current_position - x[i])\n    current_position = x[i]\n\nprint(coins)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "#-*-coding:utf-8-*-\nimport sys\ninput=sys.stdin.readline\n\ndef main():\n    S = input().rstrip()\n    k = int(input())\n    \n    for i in range(k):\n        if S[i]!=\"1\":\n            break\n    print(S[i])\n\ndef __starting_point():\n    main()\n__starting_point()", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "# -*- coding: utf-8 -*-\n\nimport sys\n\ndef input(): return sys.stdin.readline().strip()\ndef list2d(a, b, c): return [[c] * b for i in range(a)]\ndef list3d(a, b, c, d): return [[[d] * c for j in range(b)] for i in range(a)]\ndef list4d(a, b, c, d, e): return [[[[e] * d for j in range(c)] for j in range(b)] for i in range(a)]\ndef ceil(x, y=1): return int(-(-x // y))\ndef INT(): return int(input())\ndef MAP(): return list(map(int, input().split()))\ndef LIST(N=None): return list(MAP()) if N is None else [INT() for i in range(N)]\ndef Yes(): print('Yes')\ndef No(): print('No')\ndef YES(): print('YES')\ndef NO(): print('NO')\n# sys.setrecursionlimit(10 ** 9)\nINF = 10 ** 18\nMOD = 10 ** 9 + 7\n\ndef bisearch_min(mn, mx, func):\n    ok = mx\n    ng = mn\n    while ng+1 < ok:\n        mid = (ok+ng) // 2\n        if func(mid):\n            ok = mid\n        else:\n            ng = mid\n    return ok\n\ndef check(m):\n    if m == len(B):\n        return True\n    if B[m][-1][0] <= a:\n        return True\n    else:\n        return False\n\nN = INT()\nA = [ord(c)-97 for c in input()]\n\nB = [[] for i in range(1)]\nB[0].append((A[0], 0))\nfor i, a in enumerate(A[1:], 1):\n    idx = bisearch_min(-1, len(B), check)\n    if idx == len(B):\n        B.append([(a, i)])\n    else:\n        B[idx].append((a, i))\n\nans = [0] * N\nfor a, li in enumerate(B):\n    for _, idx in li:\n        ans[idx] = a + 1\nprint(len(B))\nprint(*ans)\n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split().strip().split()))\n\na.sort()\nc = 1\nans = 0\nprev = a[0]\n\nfor i in range(1, n):\n    if a[i] != prev:\n        c += 1\n        prev = a[i]\n\nprint(c)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "N = int(input())\nh = list(map(int, input().split()))\n\nh_k = dict()\nfor i in range(N):\n    h_k[i+1] = h[i]\n\noperations = 0\nfor i in range(1, N+1):\n    operations += abs(h_k[i] - h_k[i-1])\n\nprint(operations)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n,k=list(map(int,input().split()))\nit=list(map(int,input().split()))\na=[[] for i in range(n)]\nfor i in range(n):\n    j=it[i]\n    a[i]=[j]\n    while True:\n        j=j//2\n        a[i].append(j)\n        if j==0:\n            break\nss={}\nfor i in a:\n    for j in i:\n        try:\n            ss[j]+=1\n        except:\n            ss[j]=1\nmi=10**10\nfor i in ss:\n    if ss[i]>=k:\n        l=[-1]*n\n        j=0\n        for ii in a:\n            try:\n                l[j]=ii.index(i)\n            except:\n                pass\n            j+=1\n        l=[i for i in l if i!=-1]\n        l.sort()\n        l=l[:k]\n     #   if sum(l)<mi:\n      #      print(l,i)\n        mi=min(mi,sum(l))\nprint(mi)\n        \n        \n            \n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "for _ in range(int(input())):\n    n, k = list(map(int, input().split()))\n    i = 1\n    ans = n\n    while i * i <= n:\n        if n % i == 0:\n            if i <= k:\n                ans = min(ans, n // i)\n            if n // i <= k:\n                ans = min(ans, i)\n        i += 1\n    print(ans)\n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split())) + [-1]\na.sort()\nmx = 0\nc = 0\ncur = 0\nfor i in a:\n    if i == c:\n        cur += 1\n    else:\n        c = i\n        cur = 1\n    mx = max(mx, cur)\nprint(mx)\n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n = int(input())\n\ns = str(n)\n\nif len(s) <= 10 and s.isdigit() and int(s) % 11 == 0:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n, a, b = map(int, input().split())\n\n# Calculate the number of blue balls that will be placed in the first N balls\nnum_blue = min(a, n)\n\n# Print the number of blue balls\nprint(num_blue)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n, k, x = map(int, input().split())\n\na = list(map(int, input().split()))\n\na.sort()\n\ns = sum(a)\n\nif s - x < k:\n    print(-1)\nelse:\n    print(s - x)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n, m = list(map(int, input().split()))\nA = list(map(int, input().split()))\nLf = [[] for _ in range(n)]\nRb = [[] for _ in range(n)]\nLR = []\nfor i in range(m):\n    l, r = list(map(int, input().split()))\n    l, r = l-1, r-1\n    Lf[r].append(l)\n    Rb[l].append(r)\n    LR.append((l, r))\n\nminus = [0]*n\nINF = 10**18\nans = [-INF]*n\nmn = A[0]\n\nfor i in range(n):\n    ans[i] = max(ans[i], A[i]-mn)\n    for l in Lf[i]:\n        for j in range(l, i+1):\n            minus[j] -= 1\n            mn = min(mn, A[j]+minus[j])\n    mn = min(mn, A[i]+minus[i])\n\nminus = [0]*n\nmn = A[n-1]\nfor i in reversed(list(range(n))):\n    ans[i] = max(ans[i], A[i]-mn)\n    for r in Rb[i]:\n        for j in range(i, r+1):\n            minus[j] -= 1\n            mn = min(mn, A[j]+minus[j])\n    mn = min(mn, A[i]+minus[i])\nans_ = max(ans)\nres = []\nfor i in range(n):\n    if ans[i] == ans_:\n        for j in range(m):\n            l, r = LR[j]\n            if not (l <= i and i <= r):\n                res.append(j+1)\n        break\nprint(ans_)\nprint(len(res))\nprint(*res)\n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "3\nS = input().lower()\nresult = \"\"\nfor i in S:\n    result += \"x\"\n\nprint(result)\n\nprint(\"Replacing every character in S with x results in\", result)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "l=(input().split())\nn=int(l[0])\nx=int(l[1])\ny=int(l[2])\nnum=input()\ncount=0\nfor i in range(n-1,n-x-1,-1):\n\tif i==(n-1-y):\n\t\tif num[i]==\"0\":\n\t\t\tcount+=1\n\telse:\n\t\tif num[i]==\"1\":\n\t\t\tcount+=1\nprint (count)", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n = int(input())\np = list(map(int, input().split()))\n\n# Check if the sequence can be sorted in ascending order\ncan_sort = True\n\n# Calculate the difference between each element and its sorted position\ndiff = []\nfor i in range(len(p)):\n    sorted_pos = i + 1\n    diff.append(sorted_pos - p[i])\n\n# If the maximum difference is more than 1, it is not possible to sort\nif max(diff) > 1:\n    can_sort = False\n\n# Print YES if the sequence can be sorted, NO otherwise\nprint(\"YES\" if can_sort else \"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n = int(input())\nprint([4, 22, 27, 58, 85, 94, 121, 166, 202, 265, 274, 319, 346, 355, 378, 382, 391, 438, 454, 483, 517, 526, 535, 562, 576, 588, 627, 634, 636, 645, 648, 654, 663, 666, 690, 706, 728, 729, 762, 778, 825, 852, 861, 895, 913, 915, 922, 958, 985, 1086, 1111, 1165][n-1])", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n, m = map(int, input().split())\ns = []\nd = []\nc = []\n\nfor i in range(m):\n    s_i, d_i, c_i = map(int, input().split())\n    s.append(s_i)\n    d.append(d_i)\n    c.append(c_i)\n\ns_set = set(s)\nif len(s_set) != m:\n    print(-1)\nelse:\n    ans = []\n    for i in range(n):\n        if i in s_set:\n            ans.append(m + 1)\n        elif i in d_set:\n            ans.append(0)\n        else:\n            ans.append(c[s.index(min(s_set))])\n    print(*ans)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "N = int(input())\n\nInfo = [[] for T in range(0,N)]\nfor I in range(0,N):\n    Info[I] = [int(T) for T in input().split()]\nInfo = sorted(Info,reverse=True,key=lambda X:X[2])\nfor CX in range(0,101):\n    for CY in range(0,101):\n        Flag  = True\n        BaseH = abs(Info[0][0]-CX)+abs(Info[0][1]-CY)+Info[0][2]\n        for I in range(1,N):\n            if max(BaseH-abs(Info[I][0]-CX)-abs(Info[I][1]-CY),0)!=Info[I][2]:\n                Flag = False\n                break\n        if Flag:\n            Ans = [str(CX),str(CY),str(BaseH)]\n            break\n    if Flag:\n        break\nprint(' '.join(Ans))", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n, w = map(int, input().split())\na = list(map(int, input().split()))\n\n# Check if the total number of passengers exceeds the bus capacity\ntotal_passengers = sum(a)\nif total_passengers > w:\n    print(0)\nelse:\n    # Calculate the number of ways to have passengers in the bus before the first stop\n    ways = 0\n    for i in range(w + 1):\n        # Check if the number of passengers in the bus before the first stop is equal to i\n        if sum(a[:1]) == i:\n            ways += 1\n    # Print the number of ways\n    print(ways)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\n\n# Calculate the power set of each element\npower_set = {}\nfor i in a:\n    powers = set(x for x in range(1, int(i**0.5) + 1))\n    power_set[i] = powers\n\n# Find the minimum number of elements to remove\nmin_removes = float('inf')\nfor i in a:\n    if not power_set[i] & set(power_set[a_i] - set([a_i])):\n        min_removes = min(min_removes, 1 + a_i)\n\nprint(int(min_removes))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "3\nn = int(input())\na = list(map(int, input().split()))\n\na.sort()\ntotal = 0\nteams = 0\n\nfor i in range(len(a)):\n    a[i] += teams\n    total += a[i]\n    teams += 1\n\n    if teams == n // 2:\n        print(total)\n        exit()\n\nprint(\"No solution\")", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "import sys\ninput = sys.stdin.readline\n\nn, m = list(map(int, input().split()))\narr = [[] for i in range(m)]\n\nfor _ in range(n):\n    l = list(map(int, input().split()))\n    for i in range(m):\n        arr[i].append(l[i])\n\nout = 0\nfor i in range(m):\n    l = arr[i]\n    \n    best = list(range(0, -n, -1))\n    for j in range(n):\n        v = l[j] - i - 1\n        \n        if v % m == 0:\n            correct = v // m\n            if 0 <= correct < n:\n                best[j - correct] += 1\n    out += (n - max(best))\n\nprint(out)\n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "L, R = map(int, input().split())\n\n# Calculate the minimum possible value of (i x j) mod 2019\nmin_product = (L-1) * L + 1\n\n# Update the minimum product if necessary\nif min_product % 2019 < 2:\n    min_product = min_product % 2019\n\nprint(min_product)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n=int(input());a,b,c=[*map(int,input().split())],[*map(int,input().split())],0\nfor i in range(n):\n  d=min(a[i],b[i])\n  c+=d\n  a[i]-=d\n  b[i]-=d\n  d=min(a[i+1],b[i])\n  c+=d\n  a[i+1]-=d\nprint(c)", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "def parse_arr():\n    return list(map(int, input().split(' ')))\n\nn = int(input())\n\nfor _ in range(n):\n    line = input().strip()\n\n    line = sorted(line)\n\n    start = line[0]\n    done = False\n    for a in line:\n        if a == start:\n            start = chr(ord(start) + 1)\n        \n        else:\n            print('No')\n            done = True\n            break\n\n    if not done:\n        print('Yes')", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n, k, q = map(int, input().split())\n\na = list(map(int, input().splitlines()))\n\n# Calculate the cumulative sum of points for each player\ncumulative_sum = {}\ncumulative_sum[0] = 0\nfor i in range(n):\n    cumulative_sum[i] = cumulative_sum[i-1] + a[i]\n\n# Determine the players who survived the game\nsurvived = [cumulative_sum[i] >= 0 for i in range(n)]\n\n# Print the results\nfor i in range(n):\n    print(\"No\" if not survived[i] else \"Yes\")", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n = int(input())\nfor _ in range(n):\n    s = input().lower()\n    if len(set(s)) == len(s) and ''.join(sorted(s)) == s:\n        print(\"Yes\")\n    else:\n        print(\"No\")", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "3\nn = int(input())\n\n# Calculate the minimum number of cakes and doughnuts to buy to reach N dollars\ncakes = 4\ndoughnuts = 7\nmin_cakes = n // cakes\nmin_doughnuts = n // doughnuts\n\n# If the number of cakes or doughnuts is greater than the minimum,\n# then there is a way to buy exactly N dollars\nif min_cakes * cakes >= n or min_doughnuts * doughnuts >= n:\n  print(\"Yes\")\nelse:\n  print(\"No\")", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n, k = map(int, input().split())\n\nif n * k < 2:\n    print(\"NO\")\nelse:\n    print(\"YES\")\n\n    b = list(int)\n    g = list(int)\n\n    for _ in range(n):\n        b.append(int(input().split()[0]))\n        g.append(int(input().split()[1]))\n\n    flag = 0\n\n    for i in range(n):\n        for j in range(i, n):\n            if b[i] == b[j] and g[i] == g[j]:\n                flag = 1\n\n    if flag:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n\n        for i in range(n):\n            print(b[i], g[i])", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "import math\nfrom decimal import *\na,b=map(str, input().split())\na_ = Decimal(a)\nb_ = Decimal(b)\nprint(math.floor(a_*b_))", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n, m = map(int, input().split())\nif m % n == 0:\n    k = m // n\n    res = 0\n    while k % 2 == 0:\n        k //= 2\n        res += 1\n    while k % 3 == 0:\n        k //= 3\n        res += 1\n    if k > 1:\n        print(-1)\n    else:\n        print(res)\nelse:\n    print(-1)", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "3\nn = int(input())\na = list(map(int, input().split()))\n\na.sort()\n\n# Calculate the number of monotonic renumerations\nres = 0\nprev = 0\nfor i in range(len(a)):\n    cur = 1\n    for j in range(i, len(a)):\n        if a[i] == a[j]:\n            cur += prev\n    prev = cur\n    res += cur\n\nprint(res % 998244353)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "import sys\ninput = sys.stdin.readline\n\nNEGINF = -1000000\n\nn = int(input())\nadj = [[] for i in range(n)]\nparent = [-1] * n\n\nvisited = [False] * n\nfor _ in range(n - 1):\n    a, b = list(map(int, input().split()))\n    adj[a - 1].append(b - 1)\n    adj[b - 1].append(a - 1)\n\ntup = tuple()\nouts = [tup] * n\nq = [(0, 0)]\n\nwhile q:\n    node, type = q.pop()\n    if type == 0:\n        visited[node] = True\n        q.append((node, 1))\n        for v in adj[node]:\n            if not visited[v]:\n                parent[v] = node\n                q.append((v, 0))\n    else:\n        ones = [(0, node)]\n        twos = []\n        threes = []\n        for v in adj[node]:\n            if v != parent[node]:\n                a, b, c = outs[v]\n                ones.append((a[0] + 1, a[1], v))\n                twos.append((b[0] + 1, b[1], v))\n                threes.append(c)\n        ones.sort(reverse = True)\n        twos.sort(reverse = True)\n        threes.sort(reverse = True)\n\n        bestOne = (ones[0][0], ones[0][1])\n        \n        bestsTwo = [(NEGINF, (0, 0))]\n        if len(twos) > 0:\n            bestsTwo.append((twos[0][0], twos[0][1]))\n        if len(ones) > 1:\n            o1 = ones[0]\n            o2 = ones[1]\n            bestsTwo.append((o1[0] + o2[0], (o1[1], o2[1])))\n\n        bestsThree = [(NEGINF, (0, 0, 0))]\n        if len(threes) > 0:\n            bestsThree.append(threes[0])\n        if len(ones) > 2:\n            o1 = ones[0]\n            o2 = ones[1]\n            o3 = ones[2]\n            bestsThree.append((o1[0] + o2[0] + o3[0], (o1[1], o2[1], o3[1])))\n        if len(twos) > 0:\n            o1 = ones[0]\n            t1 = twos[0]\n            if o1[2] != t1[2]:\n                bestsThree.append((o1[0] + t1[0], (o1[1], t1[1][0], t1[1][1])))\n            else:\n                if len(twos) > 1:\n                    t2 = twos[1]\n                    bestsThree.append((o1[0] + t2[0], (o1[1], t2[1][0], t2[1][1])))\n                if len(ones) > 1:\n                    o2 = ones[1]\n                    bestsThree.append((o2[0] + t1[0], (o2[1], t1[1][0], t1[1][1])))\n                    \n\n        outs[node] = (bestOne, max(bestsTwo), max(bestsThree))\n\nfinal = outs[0][2]\nprint(final[0])\nprint(' '.join([str(x + 1) for x in final[1]]))\n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "N,M,X,Y = map(int,input().split())\nxx = list(map(int, input().split()))\nyy = list(map(int, input().split()))\n\nxx.sort()\nyy.sort()\n\n\nfor Z in range(X+1,Y):\n    if Z > xx[-1] and yy[0] >= Z:\n        print('No War')\n        return\n\nprint('War')", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\n\na.sort()\n\n# Find the maximum number of boxers whose weights are different\nmax_team_size = 1\ncurrent_weight = a[0]\nfor i in range(1, n):\n    if a[i] - current_weight > 0:\n        max_team_size += 1\n        current_weight = a[i]\n\nprint(max_team_size)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\n\n# Check if the input is valid\nif len(a) != n**2 or len(set(a)) != n**2:\n    print(\"NO\")\nelse:\n    # Create a matrix and fill it with the numbers\n    m = n\n    n_a = len(a)\n    matrix = [[0] * m for _ in range(m)]\n    i = 0\n    for num in a:\n        matrix[i // m][i % m] = num\n        i += 1\n\n    # Check if the matrix is palindromic\n    is_palindrome = True\n    for i in range(m):\n        for j in range(m):\n            if matrix[i][j] != matrix[j][i]:\n                is_palindrome = False\n\n    # If the matrix is palindromic, print YES and the matrix\n    if is_palindrome:\n        print(\"YES\")\n        for i in range(m):\n            print(\" \".join(str(matrix[i][j]) for j in range(m)))\n    else:\n        print(\"NO\")", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "3\nimport random\n\nn = int(input())\na = list(map(int, input().split()))\n\n# Calculate the minimum health of the last monster\nmin_health = 0\nalive_monsters = set(a)\n\nwhile len(alive_monsters) > 1:\n    # Select two random alive monsters\n    monster1 = random.choice(alive_monsters)\n    monster2 = random.choice(alive_monsters)\n\n    # Reduce the health of the monster attacked by the amount equal to the current health of the monster attacking\n    a[monster2] -= a[monster1]\n\n    # If the health of the monster attacked is 0, remove it from the alive monsters\n    if a[monster2] == 0:\n        alive_monsters.remove(monster2)\n\n# Print the minimum health of the last monster\nprint(a[max(alive_monsters)])", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n = int(input())\nb = list(map(int, input().split()))\n\n# Calculate the prime factors of each element in b\nprime_factors = {}\nfor i in b:\n    for p in range(2, int(i**0.5) + 1):\n        if i % p == 0 and p not in prime_factors:\n            prime_factors[p] = True\n\n# Find the primes in b and their factors\nprimes = [p for p in prime_factors.keys() if prime_factors[p]]\na = set(primes)\n\n# Create an array a from the set of primes\na_list = list(a)\n\n# Print the array a\nprint(*a_list)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "input()\na=list(map(int,input().split()))\nprint(a[-1]^max(a))\n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n, k = map(int, input().split())\na = list(map(int, input().split()))\nb = sorted(a, reverse=True)\nb = b[:k]\ns = sum(b)\nrec = []\nk = 1\nfor i in range(n):\n    if a[i] not in b:\n        k += 1\n        continue\n    else:\n        b.remove(a[i])\n        rec.append(k)\n        k = 1\n\nrec[-1] += n - sum(rec)\nprint(s)\nprint(\" \".join(map(str, rec)))", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "S = input()\nT = S[::-1]\ncnt = 0\nfor i in range(len(S)//2):\n    if S[i] != T[i]:\n        cnt += 1\nprint(cnt)", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n, m = list(map(int, input().split(' ')))\naa = list(map(int, input().split(' ')))\n\ndef countMoreLess(vs, value):\n    #print(vs)\n    cur = 0\n    res = { cur: 1 }\n\n    for v in vs:\n        cur += 1 if v > value else -1\n        res[cur] = res.get(cur, 0) + 1\n    #print(res)\n    return res\n\npos = aa.index(m)\n\nleftCounts = countMoreLess(list(reversed(aa[0:pos])), m)\nrightCounts = countMoreLess(aa[pos+1:], m)\n\nres = 0\nfor dif, count in list(leftCounts.items()):\n    res += count * rightCounts.get(-dif, 0)\n    res += count * rightCounts.get(-dif+1, 0)\n\nprint(res)\n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\n\na.sort()\nlcm_min = float('inf')\ni, j = -1, -1\n\nfor i in range(len(a)):\n    for j in range(i + 1, len(a)):\n        lcm = a[i] * a[j] // gcda(a[i], a[j])\n        if lcm_min > lcm:\n            lcm_min = lcm\n            i, j = i, j\n\nprint(i, j)\n\ndef gcda(x, y):\n    if y % x == 0:\n        return x\n    else:\n        return gcda(y % x, x)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "N, M = map(int, input().split())\nA = list(map(int, input().split()))\n\n# Sort the assignments by completion days\nA.sort()\n\n# Calculate the maximum number of days to hang out\ndays_to_complete = 0\ndays_to_hang_out = 0\nfor i in range(len(A)):\n    days_to_complete += A[i]\n    days_to_hang_out = max(days_to_hang_out, days_to_complete - A[i])\n\n# If all assignments can be completed, print the number of days to hang out\nif days_to_complete == M:\n    print(days_to_hang_out)\nelse:\n    print(-1)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "k=int(input())\nrem=0\n\nfor i in range(k):\n    rem=(10*rem+7)%k\n    if rem==0:\n        print(i+1)\n\n        break\n    if i==k-1:\n        print(-1)", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "r=float(input())\na=0\nh=0\nfor i in range(1,11):\n    for j in range(1,11):\n        c=pow(j*j+i*i/4.,0.5)\n        rtest=i*j*0.5/c\n        if abs(rtest-r)<0.00001:\n            a=i\n            h=j\nprint(a,h)", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "N,X = map(int,input().split())\nL = [int(i) for i in input().split()]\nD = [0]\n\nfor i in range(N):\n    a = D[i]+L[i]\n    if(a <= X):\n        D.append(a)\n    else:\n        break\n\nprint(len(D))", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "N = int(input())\nA = list(map(int, input().split()))\nt = \"APPROVED\"\nfor i in range(len(A)):\n    if A[i]%2==0:\n        if A[i]%3==0 or A[i]%5==0:\n            continue\n        else:\n            t = \"DENIED\"\nprint(t)", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "\nn,r = map(int, input().split())\naa = [0]*n\nbb = [0]*n\nfor i in range(n):\n    aa[i], bb[i] = map(int, input().split())\navail = set(range(n))\nfr = r + sum(bb)\nif fr < 0:\n    print(\"NO\")\n    return\nok = True\nfor i in range(n):\n    nxt = -1\n    for j in avail:\n        if aa[j] <= r and bb[j] >= 0:\n            nxt = j\n            break\n    if nxt == -1:\n        break\n    avail.remove(nxt)\n    r += bb[nxt]\nfor i in range(len(avail)):\n    nxt = -1\n    for j in avail:\n        if aa[j]+bb[j] <= fr and bb[j] < 0:\n            nxt = j\n            break\n    if nxt == -1:\n        ok = False\n        break\n    avail.remove(nxt)\n    fr -= bb[nxt]\nif ok:\n    print(\"YES\")\nelse:\n    print(\"NO\")", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "3\nD, N = map(int, input().split())\n\n# Calculate the multiples of 100 less than or equal to N\nmultiples = [x for x in range(1, int(N) + 1) if x % 100 == 0]\n\n# Find the N-th smallest multiple\nprint(multiples[N - 1])", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "def mp():\n    return list(map(int, input().split()))\n\na, b, c = mp()\n\nk = min(a // 3, b // 2, c // 2)\na -= 3 * k\nb -= 2 * k\nc -= 2 * k\n\nm = 0\nfor i in range(7):\n    d = i\n    cnt = 0\n    x, y, z = a, b, c\n    while not(x < 0 or y < 0 or z < 0):\n        if d in [0, 3, 6]:\n            x -= 1\n        elif d in [1, 5]:\n            y -= 1\n        else:\n            z -= 1\n        d = (d + 1) % 7\n        cnt += 1\n    cnt -= 1\n    #print(cnt)\n    m = max(m, cnt)\n    cnt = 0\n    \nprint(7 * k + m)\n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "n, w = map(int, input().split())\na = list(map(int, input().split()))\nmx, mn, bal = 0, 0, 0\nfor aa in a:\n\tbal += aa\n\tmx, mn = max(mx, bal), min(mn, bal)\nleft, right = - mn, w - mx\nif right < 0 or left > right:\n\tprint(0)\nelse:\n\tprint(right - left + 1)", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "import math\nn=int(input())\na=list(map(int, input().split()))\nalist=[]\ngcd1=a[0]\nfor i in range(0,n):\n  gcd1=math.gcd(gcd1,a[i])\n  alist.append(gcd1)\nblist=[]\ngcd2=a[n-1]\nfor i in range(n-1,-1,-1):\n  gcd2=math.gcd(gcd2,a[i])\n  blist.append(gcd2)\nclist=[alist[n-2],blist[n-2]]\nfor i in range(n-2):\n  clist.append(math.gcd(alist[i],blist[n-i-3]))\nprint(max(clist))", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\gemma-7b-it-apps_introductory_207.jsonl"}
{"code": "import sys\ninput = sys.stdin.readline\n\nMOD = 998244353\n\ndef power(x, y):\n    res = 1\n    while y > 0:\n        if y % 2:\n            res = (res * x) % MOD\n            y -= 1\n        x = (x * x) % MOD\n        y //= 2\n    return res\n\ndef solve():\n    n = int(input().strip())\n    a = list(map(int, input().strip().split()))\n\n    last = a[0]\n    count = 1\n    for i in range(1, n):\n        if a[i] == last:\n            count += 1\n        else:\n            last = a[i]\n            count = 1\n        a[i] = count - 1\n\n    dp = [0] * n\n    dp[0] = 1\n    for i in range(1, n):\n        if a[i] == a[i - 1]:\n            dp[i] = dp[i - 1]\n        else:\n            dp[i] = (dp[i - 1] + dp[i - 2]) % MOD\n\n    ans = dp[-1]\n    if a[-1] != a[-2]:\n        ans = (ans + dp[-2]) % MOD\n\n    print(ans)\n\nsolve()", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "import math\n\ndef min_time_needed(N, A, B, C, D, E):\n    # Calculate the minimum number of vehicles needed for all people to travel\n    num_vehicles = math.ceil(N/A)\n    num_vehicles = min(num_vehicles, math.ceil(N/B))\n    num_vehicles = min(num_vehicles, math.ceil(N/C))\n    num_vehicles = min(num_vehicles, math.ceil(N/D))\n    num_vehicles = min(num_vehicles, math.ceil(N/E))\n\n    # Return the minimum time needed for all people to travel\n    return num_vehicles\n\n# Read input\nN = int(input())\nA = int(input())\nB = int(input())\nC = int(input())\nD = int(input())\nE = int(input())\n\n# Print output\nprint(min_time_needed(N, A, B, C, D, E))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "# Read input\nN, M = map(int, input().split())\nconditions = []\nfor _ in range(M):\n    si, ci = map(int, input().split())\n    conditions.append((si, ci))\n\n# Initialize result with -1\nresult = -1\n\n# Generate all numbers with N digits\n# and check if they satisfy the conditions\nfor i in range(10**(N-1), 10**N):\n    if all((cond[0]-1 == divmod(i, 10**(cond[0]-1))[0] % 10 == cond[1]) for cond in conditions):\n        result = i\n        break\n\n# Print result\nprint(result)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "import math\n\ndef main():\n    # Read input\n    d, t, s = map(int, input().split())\n\n    # Calculate time needed to reach the place\n    time_needed = d / s\n\n    # Check if Takahashi will arrive in time\n    if time_needed <= t:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nif __name__ == \"__main__\":\n    main()", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "import sys\n\ndef calculate\\_f(a, m):\nn = len(a)\nresult = 0\nfor i in range(n):\nresult += m % a[i]\nreturn result\n\ndef solve():\nn = int(sys.stdin.readline())\na = list(map(int, sys.stdin.readline().split()))\n\nmax\\_value = 0\nfor i in range(1, 10**5 + 1):\ncurrent\\_value = calculate\\_f(a, i)\nmax\\_value = max(max\\_value, current\\_value)\n\nprint(max\\_value)\n\nif **name** == '**main**':\nsolve()", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "n=int(input())\nif n%2==0:\n    print(0)\nelse:\n    print(1)", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "n = int(input())\nlights = list(map(int, input().split()))\n\n# Initialize the count of disturbed people\ndisturbed = 0\n\n# Iterate over the lights, excluding the first and last ones\nfor i in range(1, n-1):\n    # Check if the current flat is dark and the adjacent ones are bright\n    if lights[i] == 0 and lights[i-1] == 1 and lights[i+1] == 1:\n        # If so, increment the count of disturbed people\n        disturbed += 1\n\n# Print the minimum number of lights that need to be turned off\nprint(disturbed)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "S = input()\nb = 1\nB = 0\nfor i in S:\n  if i != str(b):\n    B += 1\n  b = 1 - b\nl = len(S)\nprint(min(B, l - B))", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "for i in range(int(input())):\n  n,m=[int(i) for i in input().split()]\n  if n==1:\n    print(0)\n  elif n==2:\n    print(m)\n  else:\n    print(2*m)\n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "n = int(input())\n\nhexa = hex(n)\n\n\nx = {\n    '0': 1,\n    '1': 0,\n    '2': 0,\n    '3': 0,\n    '4': 1,\n    '5': 0,\n    '6': 1,\n    '7': 0,\n    '8': 2,\n    '9': 1,\n    'a': 1,\n    'b': 2,\n    'c': 0,\n    'd': 1,\n    'e': 0,\n    'f': 0\n}\n\ndef toInt(c):\n    return x[c]\n\n\nprint(sum(map(toInt, hexa[2:])))\n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "def multiply(a,b):\n  return a * b if a < 10 and b < 10 else -1\n\nprint(multiply(*map(int, input().split())))", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "from collections import defaultdict\n\nn, m = list(map(int, input().split()))\nprefecture = [[] for _ in range(n+1)]\ntpl_lst=[]\nfor i in range(m):\n    p, y = list(map(int, input().split()))\n    prefecture[p].append(y)\n    tpl_lst.append((p,y))\n\nfor p in prefecture:\n    if len(p)>=2:\n        p.sort()\n\nd = defaultdict(list)\nfor idx, pre in enumerate(prefecture):\n    if len(pre)>=1:\n        for i, year in enumerate(pre):\n            d[(idx, year)]=[idx, i+1]\n\nfor tpl in tpl_lst:\n    id = d[tpl][0]*(10**6) + d[tpl][1]\n    id = str(id)\n    id = \"0\"*(12-len(id)) + id\n    print(id)\n#print(prefecture)\n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "from collections import defaultdict\n\ndef minimum_new_roads(n, m, s, roads):\n    # Create an adjacency list to represent the graph\n    graph = defaultdict(list)\n    for u, v in roads:\n        graph[u].append(v)\n\n    # Initialize visited set and stack\n    visited = set()\n    stack = [s]\n\n    # Initialize the number of new roads to 0\n    new_roads = 0\n\n    while stack:\n        # Get the current city\n        city = stack.pop()\n\n        # If the city has not been visited\n        if city not in visited:\n            # Mark the city as visited\n            visited.add(city)\n\n            # If the city is not in the graph (not reachable from the capital)\n            if city not in graph:\n                # Add a new road to the capital\n                graph[s].append(city)\n                new_roads += 1\n\n            # Add the neighbors of the city to the stack\n            for neighbor in graph[city]:\n                stack.append(neighbor)\n\n    # Return the number of new roads\n    return new_roads\n\n# Test the function\nn, m, s = 9, 9, 1\nroads = [(1, 2), (1, 3), (2, 3), (1, 5), (5, 6), (6, 1), (1, 8), (9, 8), (7, 1)]\nprint(minimum_new_roads(n, m, s, roads))  # Output: 3\n\nn, m, s = 5, 4, 5\nroads = [(1, 2), (2, 3), (3, 4), (4, 1)]\nprint(minimum_new_roads(n, m, s, roads))  # Output: 1", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "n = int(input())\nA = list(map(int,input().split()))\n\nans = 0\nfor i in range(1, n-1):\n  if A[i] == 0 and A[i-1] == 1 and A[i+1] == 1:\n    A[i+1] = 0\n    ans += 1\n\nprint(ans)\n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "def main():\n    S = input()\n    def first(s):\n        return s == s[::-1]\n    def second(s):\n        n = len(s)\n        return s[:(n-1)//2] == s[:(n-1)//2:-1]\n    def third(s):\n        n = len(s)\n        temp = s[(n+3)//2-1:]\n        return temp == temp[::-1]\n\n    return \"Yes\" if  first(S) and second(S) and third(S) else \"No\"\n\n\ndef __starting_point():\n    print(main())\n__starting_point()", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "N, M = map(int, input().split())\n\ncurrent_money = 0\ncurrent_buy = 0\n\nfor i in range(N):\n    A, B = map(int, input().split())\n    while current_buy < M and current_money < 10**9+1:\n        if current_buy + B <= M:\n            current_buy += B\n            current_money += A*B\n        else:\n            missing = M - current_buy\n            current_buy += missing\n            current_money += A*missing\n    print(current_money)\n    current_money = 0\n    current_buy = 0", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "n = int(input())\nA = [int(i) for i in input().split()]\n\ndef gcd(a, b):\n    if b==0:\n        return a\n    return gcd(b, a%b)\n\ng = A[0]\n\nfor i in A:\n    g = gcd(g, i)\n\nfct = []\n\nfor i in range(1, g+1):\n    if i*i > g:\n        break\n    if g%i == 0:\n        fct.append(i)\n        fct.append(g//i)\n\nprint(len(set(fct)))\n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "def solve():\n    N, A, B = map(int, input().split())\n    p = A + B\n    ans = A * (1 - p**100) / (1 - p)\n    print(int(ans % (10**9+7)))\n\n# Take input and solve for each test case\nT = int(input())\nfor _ in range(T):\n    solve()", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "import sys\ninput = sys.stdin.readline\n\ndef build_tree(node, start, end, seg_tree):\n    if start == end:\n        seg_tree[node] = {0: -1, 1: start}\n        return\n    mid = (start + end) // 2\n    build_tree(2*node, start, mid, seg_tree)\n    build_tree(2*node+1, mid+1, end, seg_tree)\n    seg_tree[node] = max(seg_tree[2*node], seg_tree[2*node+1], key=lambda x: x[0])\n\ndef query(node, start, end, left, right, seg_tree):\n    if end < left or start > right:\n        return -1, -1\n    if left <= start and end <= right:\n        return seg_tree[node]\n    mid = (start + end) // 2\n    res1 = query(2*node, start, mid, left, right, seg_tree)\n    res2 = query(2*node+1, mid+1, end, left, right, seg_tree)\n    if res1[0] == -1:\n        return res2\n    elif res2[0] == -1:\n        return res1\n    else:\n        return max(res1, res2, key=lambda x: x[0])\n\nn = int(input().strip())\narr = list(map(int, input().strip().split()))\n\n# Sort the array and compute the differences between adjacent elements\narr.sort()\ndiff = [arr[i+1] - arr[i] for i in range(n-1)]", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "n,blue,red = list(map(int,input().split()))\n\n# n / (blue + red) = quot ...rem\nquot = n // (blue + red) #\u5546 quotient\nrem = n % (blue + red) #\u4f59\u308a remainder\n\nans = blue * quot + min(blue,rem)\n\nprint(ans)", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "N = int(input())\n\nfor i in range(1, 10):\n    for j in range(1, 10):\n        if i * j == N:\n            print('Yes')\n            return\n            \nprint('No')", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "l=(input().split())\nn=int(l[0])\nx=int(l[1])\ny=int(l[2])\nnum=input()\ncount=0\nfor i in range(n-1,n-x-1,-1):\n\tif i==(n-1-y):\n\t\tif num[i]==\"0\":\n\t\t\tcount+=1\n\telse:\n\t\tif num[i]==\"1\":\n\t\t\tcount+=1\nprint (count)", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "def count_triples(N, K):\n    count = 0\n    for a in range(1, N+1):\n        for b in range(1, N+1):\n            c = (K * ((a + b) // K - 1)) - a - b\n            if c <= 0 or c > N:\n                continue\n            count += 1\n    return count\n\nN, K = map(int, input().split())\nresult = count_triples(N, K)\nprint(result)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "import re\n\ns = input()\nops = re.split('([+-])', s)\nassert len(ops) % 2 == 1\nops = ['+'] + ops\n\ntotal = 0\nfor i in range(0, len(ops), 2):\n    if ops[i] == '+':\n        total += int(ops[i+1])\n    elif ops[i] == '-':\n        total -= int(ops[i+1])\n    else:\n        assert False\n\nfor b in bytes(str(total), 'ascii'):\n    print('+' * b + '.>')\n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "# Read the amount N from the input\nN = int(input())\n\n# Initialize two variables to keep track of the total cost of cakes and doughnuts\ncake_cost = 0\ndonut_cost = 0\n\n# Try to find a solution by iterating over all possible values of cakes and donuts\nfor cakes in range(N // 4 + 1):\n    donuts = N - cakes * 4\n    if donuts % 7 == 0 and donuts >= 0:\n        cake_cost = cakes\n        donut_cost = donuts\n        break\n\n# Print the solution\nif cake_cost * 4 + donut_cost == N:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "d, n = map(int, input().split())\n\nif d == 0:\n    print(n)\nelse:\n    # Calculate the N-th number that is divisible by 100^d\n    # Since the numbers are divisible by 100^d, we can just calculate the number of multiples of 100^d in the range [1, 100*100*...*100] (D times)\n    # We can calculate the number of multiples of 100^d in the range [1, 100*100*...*100] by using the formula: (last - first) // 100^d + 1\n    # Then, we can find the N-th number by multiplying the quotient of (N-1) to 100^d and adding the first number (which is 1)\n    print(1 + (100**d * (n - 1)))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "n, k = map(int, input().split())\ns = input()\n\n# Calculate the number of occurrences of each character in the string\nchar_counts = {c: s.count(c) for c in set(s)}\n\n# If the number of characters is less than the desired set size, it's impossible\nif len(char_counts) < k:\n    print(-1)\n    exit()\n\n# Calculate the minimum cost to include each character in the set\ncosts = [n - char_count for char_count in char_counts.values()]\ncost = sum(costs[:k])\n\n# Try to reduce the cost by removing extra occurrences of characters\nfor i in range(k, len(char_counts)):\n    cost = min(cost, cost + costs[i] - (costs[i] - costs[i-k]))\n\nprint(cost)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "n = int(input())\ns = input()\na = list(s.split())\neq = [[0 for i in range(n)] for j in range(n)]\ndp = [[0 for i in range(n)] for j in range(n)]\nfor i in range(n):\n    eq[i][i] = 1\n    for j in range(0, i):\n        if a[i] == a[j]:\n            eq[i][j] += 1\n            eq[j][i] += 1\nfor i in range(n - 1, -1, -1):\n    for j in range(n - 1, -1, -1):\n        if eq[i][j] == 1:\n            if i < n - 1 and j < n - 1:\n                dp[i][j] = dp[i + 1][j + 1] + 1\n            else:\n                dp[i][j] = 1\nallsum = n - 1\nfor k in a:\n    allsum += len(k)\nans = allsum\nfor i in range(n):\n    sx = 0\n    j = 0\n    while i + j < n:\n        sx += len(a[i + j])\n        cnt = 1\n        pos = i + j + 1\n        while pos < n:\n            if dp[i][pos] > j:\n                cnt += 1\n                pos += j\n            pos += 1\n        cur = allsum - sx*cnt + (j + 1)*cnt - j*cnt\n        if cnt > 1 and ans > cur:\n            ans = cur\n        j += 1\nprint(ans)", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "k=int(input())\nrem=0\n\nfor i in range(k):\n    rem=(10*rem+7)%k\n    if rem==0:\n        print(i+1)\n\n        break\n    if i==k-1:\n        print(-1)", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "q = int(input())\nfor _ in range(q):\n    n, a, b = list(map(int, input().split()))\n    if 2 * a <= b:\n        print(n * a)\n    else:\n        if n % 2:\n            print(a + n // 2 * b)\n        else:\n            print(n // 2 * b)\n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "# -*- coding: utf-8 -*-\n\nimport sys\n\ndef input(): return sys.stdin.readline().strip()\ndef list2d(a, b, c): return [[c] * b for i in range(a)]\ndef list3d(a, b, c, d): return [[[d] * c for j in range(b)] for i in range(a)]\ndef list4d(a, b, c, d, e): return [[[[e] * d for j in range(c)] for j in range(b)] for i in range(a)]\ndef ceil(x, y=1): return int(-(-x // y))\ndef INT(): return int(input())\ndef MAP(): return list(map(int, input().split()))\ndef LIST(N=None): return list(MAP()) if N is None else [INT() for i in range(N)]\ndef Yes(): print('Yes')\ndef No(): print('No')\ndef YES(): print('YES')\ndef NO(): print('NO')\n# sys.setrecursionlimit(10 ** 9)\nINF = 10 ** 18\nMOD = 10 ** 9 + 7\n\ndef bisearch_min(mn, mx, func):\n    ok = mx\n    ng = mn\n    while ng+1 < ok:\n        mid = (ok+ng) // 2\n        if func(mid):\n            ok = mid\n        else:\n            ng = mid\n    return ok\n\ndef check(m):\n    if m == len(B):\n        return True\n    if B[m][-1][0] <= a:\n        return True\n    else:\n        return False\n\nN = INT()\nA = [ord(c)-97 for c in input()]\n\nB = [[] for i in range(1)]\nB[0].append((A[0], 0))\nfor i, a in enumerate(A[1:], 1):\n    idx = bisearch_min(-1, len(B), check)\n    if idx == len(B):\n        B.append([(a, i)])\n    else:\n        B[idx].append((a, i))\n\nans = [0] * N\nfor a, li in enumerate(B):\n    for _, idx in li:\n        ans[idx] = a + 1\nprint(len(B))\nprint(*ans)\n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "N = int(input())\nA = list(map(int, input().split()))\nt = \"APPROVED\"\nfor i in range(len(A)):\n    if A[i]%2==0:\n        if A[i]%3==0 or A[i]%5==0:\n            continue\n        else:\n            t = \"DENIED\"\nprint(t)", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "s = [ord(c) - 48 for c in input()]\nr, t, f = 0, 0, 1\nfor x in s:\n    if x < 0:\n        r += f * t\n        f = -4 - x\n        t = 0\n    t = t * 10 + x\nprint(r + f * t)\n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "def parse_arr():\n    return list(map(int, input().split(' ')))\n\nn = int(input())\n\nfor _ in range(n):\n    line = input().strip()\n\n    line = sorted(line)\n\n    start = line[0]\n    done = False\n    for a in line:\n        if a == start:\n            start = chr(ord(start) + 1)\n        \n        else:\n            print('No')\n            done = True\n            break\n\n    if not done:\n        print('Yes')", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "import math\na,b = [int(x) for x in input().split()]\n\narea = a+b\nt = int(math.sqrt(area))\nsa = int(math.sqrt(a))\nsb = int(math.sqrt(b))\n\nD = []\nDA = []\nDB = []\nfor i in range(1,t+1):\n    if area % i == 0:\n        if i*i != area:\n            D.append(i)\n            D.append(area//i)\n        else:\n            D.append(i)\n\nfor i in range(1,sa+1):\n    if a % i == 0:\n        if i*i != a:\n            DA.append(i)\n            DA.append(a//i)\n        else:\n            DA.append(i)\n            \nfor i in range(1,sb+1):\n    if b % i == 0:\n        if i*i != b:\n            DB.append(i)\n            DB.append(b//i)\n        else:\n            DB.append(i)\nDA.sort()\nDB.sort()\nD.sort()\n\nstart = ((len(D)+1)//2)-1\ndiv = len(D)\n\ndef closestdiv(t,D):\n    low = 0\n    high = len(D)-1\n    while high - low > 1:\n        guess = (high+low)//2\n        if D[guess] > t:\n            high = guess\n        else:\n            low = guess\n    if D[high] <= t:\n        return high\n    else:\n        return low\n    \nwhile start > -1:\n    t = D[start]\n    s = D[-start-1]\n    if DA[-closestdiv(t,DA)-1] <= s:\n        print(2*t+2*s)\n        break\n    elif DB[-closestdiv(t,DB)-1] <= s:\n        print(2*t+2*s)\n        break\n    start -= 1", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "n, k = map(int, input().split())\na = list(map(int, input().split()))\n\n# Count the frequency of each number in the array\ncounts = [0] * (2 * 10**5 + 1)\nfor num in a:\n    counts[num] += 1\n\n# Initialize the result as the number of distinct numbers\nresult = len(counts) - counts.count(0)\n\n# If there are enough equal numbers, we can immediately stop\nif counts[a[0]] >= k:\n    print(0)\n    exit()\n\n# Binary search for the smallest number that can be merged to the first number\nleft, right = a[0], 2 * 10**5\nwhile left < right:\n    mid = (left + right) // 2\n    # Count the number of numbers that can be merged to the first number\n    mergeable = sum(count for count in counts if count > 0 and a[0] % (2 * mid) == 0)\n    # If the number of mergeable numbers is greater than or equal to k - 1,\n    # then we can merge the first number to mid and binary search in the left half\n    if mergeable >= k - 1:\n        right = mid\n    else:\n        left = mid + 1\n\n# The result is the original result minus the number of mergeable numbers\n# plus the number of times we need to merge the first number to the smallest mergeable number\nresult -= mergeable\nresult += (k - 1) // mergeable\nprint(result)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "n = int(input().strip())\n\nfor _ in range(n):\n    s = input().strip()\n    alphabet = [False]*26\n    prev = -1\n    for c in s:\n        pos = ord(c) - ord('a')\n        if alphabet[pos]:\n            print(\"No\")\n            break\n        alphabet[pos] = True\n        if prev != -1 and pos != prev+1:\n            print(\"No\")\n            break\n        prev = pos\n    else:\n        print(\"Yes\")", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "def min_product_mod_k(l, r, k=2019):\n    # The smallest number not divisible by k in the range [a, b] is a + k - (a % k)\n    # So we can find the smallest number i in the range that is not divisible by k\n    # Then j = i + 1 will also be not divisible by k, and i * j will be minimum\n    i = l + k - (l % k)\n    if i > r:\n        return 0\n    return i * (i + 1) % k\n\nl, r = map(int, input().split())\nprint(min_product_mod_k(l, r))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "def game23(n, m):\n    if n == m:\n        return 0\n    if n == 1:\n        return -1\n    if m % 2 == 0 and m % 3 == 0:\n        return game23(n, m // 6) + 1\n    if m % 2 == 0:\n        return game23(n, m // 2) + 1\n    if m % 3 == 0:\n        return game23(n, m // 3) + 1\n    return -1\n\n# Read input numbers\nn, m = map(int, input().split())\n\n# Print the result\nprint(game23(n, m))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "n, m = map(int, input().split())\ngates = [tuple(map(int, input().split())) for _ in range(m)]\n\n# Initialize a set of all possible ID cards\nids = set(range(1, n+1))\n\nfor l, r in gates:\n    # Compute the intersection of the current set of ID cards and the allowed ID cards for the current gate\n    ids &= {i for i in range(l, r+1)}\n\n# The remaining elements in the set are the ID cards that allow us to pass all the gates alone\nprint(len(ids))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "n, m = map(int, input().split())\nif m % n == 0:\n    k = m // n\n    res = 0\n    while k % 2 == 0:\n        k //= 2\n        res += 1\n    while k % 3 == 0:\n        k //= 3\n        res += 1\n    if k > 1:\n        print(-1)\n    else:\n        print(res)\nelse:\n    print(-1)", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "def eval_expression(expression):\n    total = 0\n    for part in expression.split():\n        total += int(part)\n    return total\n\n# Test cases\nprint(eval_expression(\"8-7+6-5+4-3+2-1-0\"))  # Output: 4\nprint(eval_expression(\"2+2\"))  # Output: -46\nprint(eval_expression(\"112-37\"))  # Output: 375", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "import sys\ninput = sys.stdin.readline\n\nNEGINF = -1000000\n\nn = int(input())\nadj = [[] for i in range(n)]\nparent = [-1] * n\n\nvisited = [False] * n\nfor _ in range(n - 1):\n    a, b = list(map(int, input().split()))\n    adj[a - 1].append(b - 1)\n    adj[b - 1].append(a - 1)\n\ntup = tuple()\nouts = [tup] * n\nq = [(0, 0)]\n\nwhile q:\n    node, type = q.pop()\n    if type == 0:\n        visited[node] = True\n        q.append((node, 1))\n        for v in adj[node]:\n            if not visited[v]:\n                parent[v] = node\n                q.append((v, 0))\n    else:\n        ones = [(0, node)]\n        twos = []\n        threes = []\n        for v in adj[node]:\n            if v != parent[node]:\n                a, b, c = outs[v]\n                ones.append((a[0] + 1, a[1], v))\n                twos.append((b[0] + 1, b[1], v))\n                threes.append(c)\n        ones.sort(reverse = True)\n        twos.sort(reverse = True)\n        threes.sort(reverse = True)\n\n        bestOne = (ones[0][0], ones[0][1])\n        \n        bestsTwo = [(NEGINF, (0, 0))]\n        if len(twos) > 0:\n            bestsTwo.append((twos[0][0], twos[0][1]))\n        if len(ones) > 1:\n            o1 = ones[0]\n            o2 = ones[1]\n            bestsTwo.append((o1[0] + o2[0], (o1[1], o2[1])))\n\n        bestsThree = [(NEGINF, (0, 0, 0))]\n        if len(threes) > 0:\n            bestsThree.append(threes[0])\n        if len(ones) > 2:\n            o1 = ones[0]\n            o2 = ones[1]\n            o3 = ones[2]\n            bestsThree.append((o1[0] + o2[0] + o3[0], (o1[1], o2[1], o3[1])))\n        if len(twos) > 0:\n            o1 = ones[0]\n            t1 = twos[0]\n            if o1[2] != t1[2]:\n                bestsThree.append((o1[0] + t1[0], (o1[1], t1[1][0], t1[1][1])))\n            else:\n                if len(twos) > 1:\n                    t2 = twos[1]\n                    bestsThree.append((o1[0] + t2[0], (o1[1], t2[1][0], t2[1][1])))\n                if len(ones) > 1:\n                    o2 = ones[1]\n                    bestsThree.append((o2[0] + t1[0], (o2[1], t1[1][0], t1[1][1])))\n                    \n\n        outs[node] = (bestOne, max(bestsTwo), max(bestsThree))\n\nfinal = outs[0][2]\nprint(final[0])\nprint(' '.join([str(x + 1) for x in final[1]]))\n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "def min\\_problems\\_to\\_solve():\n\\(\nD, G = map(int, input().split())\nperfect\\_bonuses = [0]\npoints = [0]\nfor \\_ in range(D):\n\\(\npi, ci = map(int, input().split())\nperfect\\_bonuses.append(ci)\npoints.append(pi)\n\\)\nrunning\\_sum = 0\nfor i in range(D, 0, -1):\n\\(\nrunning\\_sum += points[i] \\* (G // perfect\\_bonuses[i])\nif running\\_sum >= G:\n\\(\nreturn G // perfect\\_bonuses[i] + (running\\_sum - G) // points[i]\n\\)\n\\)\n\nprint(min\\_problems\\_to\\_solve())", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "n = int(input())\na = list(map(int, input().split()))\n\ndp = [1] + [0]*n\nfor i in range(1, n):\n    for j in range(i):\n        if a[i] > a[j]*2:\n            dp[i] = max(dp[i], dp[j]+1)\n\nprint(max(dp))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "s = str(input())\nn = len(s)\nt = str(input())\nm = len(t)\nk = 0\nwhile n - k - 1 >= 0 and m - k - 1 >= 0 and s[n - k - 1] == t[m - k - 1]:\n k += 1\nprint(n + m - 2 * k)", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "n, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\n# Initialize the result variable\nres = 0\n\n# Keep track of the current time\ncurr\\_time = 0\n\n# Iterate over the sleep times\nfor i in range(n):\n\t# Calculate the two possible times Vova can go to sleep\n\ttime1 = curr\\_time + a[i]\n\ttime2 = curr\\_time + a[i] - 1\n\t\n\t# If going to sleep at time2 is good, then Vova should go to sleep at time2\n\tif l <= time2 <= r:\n\t\tcurr\\_time = time2\n\t# If going to sleep at time2 is not good, but going to sleep at time1 is good, then Vova should go to sleep at time1\n\telif time2 < l and l <= time1 <= r:\n\t\tcurr\\_time = time1\n\t# If going to sleep at both time1 and time2 is not good, then Vova should not go to sleep at this moment\n\telif time1 < l or r < time1:\n\t\tcontinue\n\t# Increment the result variable\n\tres += 1\n\nprint(res)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "N = int(input())\nW = list(map(int, input().split()))\n\ntot = sum(W)\nres = tot\ns = 0\nfor i in range(N-1):\n    s += W[i]\n    res = min(res, abs(tot - 2 * s))\n\nprint(res)", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "import sys\ninput = sys.stdin.readline\n\nMOD = 1000000007\n\nN, M = map(int, input().strip().split())\na = list(map(int, input().strip().split()))\n\ndp = [0] * (N+1)\ndp[0] = 1\n\nfor i in range(N):\n    if i+1 < N and i+1 not in a:\n        dp[i+1] += dp[i]\n    if i+2 < N and i+2 not in a:\n        dp[i+2] += dp[i]\n\nprint(dp[N] % MOD)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "def solve():\n    S = input()\n    # Initialize the number of removed cubes to 0\n    removed = 0\n    # Initialize a variable to keep track of the current color\n    curr_color = S[0]\n    # Iterate through the string\n    for i in range(1, len(S)):\n        # If the current color is different from the next color, increment the number of removed cubes\n        if curr_color != S[i]:\n            removed += 1\n        # Update the current color\n        curr_color = S[i]\n    # The maximum number of removed cubes is the total number of cubes minus the number of times the color changes\n    print(len(S) - removed)\n\n# Call the function\nsolve()", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "import sys\nfrom collections import defaultdict\n\ndef min_cost_to_obtain_set(n, k, s):\n    # dp[i] will store the minimum cost to obtain a set of size i\n    dp = [sys.maxsize] * (k + 1)\n    dp[0] = 0\n\n    # Precompute the frequency of all substrings of length 1 to n\n    freq = defaultdict(int)\n    for i in range(n + 1):\n        freq[s[:i]] += 1\n\n    # Iterate over all possible subset sizes from 1 to k\n    for i in range(1, k + 1):\n        # Iterate over all possible lengths of subsequences from 1 to n\n        for j in range(1, n + 1):\n            # If the frequency of the current subsequence is greater than 1,\n            # then we can include it in the set without any cost\n            if freq[s[:j]] > 1:\n                dp[i] = min(dp[i], dp[i - 1])\n                continue\n\n            # If the current subset size is less than the length of the\n            # current subsequence, then we cannot include it in the set\n            if i < j:\n                continue\n\n            # Calculate the cost of including the current subsequence\n            # in the set\n            cost = (n - j) * (i - j + 1)\n\n            # If the cost is less than the current minimum cost, then\n            # update the minimum cost\n            dp[i] = min(dp[i], dp[i - j] + cost)\n\n    return dp[k] if dp[k] != sys.maxsize else -1\n\nn, k = map(int, input().split())\ns = input()\n\nprint(min_cost_to_obtain_set(n, k, s))", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "n = int(input())\ns = input()\n\nresult = \"\"\nfor char in s:\n    shifted = ord(char) + n\n    if char == 'Z':\n        shifted = ord('A') + (n % 26) - 1\n    elif char == 'Y' and n >= 2:\n        shifted = ord('A') - 1\n    elif shifted > ord('Z'):\n        shifted = ord('A') + (shifted - ord('Z') - 1)\n    result += chr(shifted)\n\nprint(result)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "def polycarp_game(n, nums):\n    # Step 1: Find the largest number that is a power of 2 or a multiple of 3\n    max_num = max(nums)\n    while max\\_num % 2 == 0 and max\\_num // 2 in nums:\n        max\\_num //= 2\n    while max\\_num % 3 == 0 and max\\_num // 3 in nums:\n        max\\_num //= 3\n\n    # Step 2: Build the sequence starting from the largest number\n    result = [max\\_num]\n    while max\\_num != 1:\n        if max\\_num % 3 == 0:\n            max\\_num //= 3\n        else:\n            max\\_num *= 2\n        result.append(max\\_num)\n\n    # Step 3: Check if the resulting sequence matches the given sequence\n    if result == nums:\n        return result\n\n    # Step 4: Find the index of the first number that is different from the given sequence\n    for i in range(len(result)):\n        if result[i] != nums[i]:\n            break\n\n    # Step 5: Swap the first number with the different number\n    nums[0], nums[i] = nums[i], nums[0]\n    return nums\n\n# Read input\nn = int(input())\nnums = list(map(int, input().split()))\n\n# Solve the problem\nresult = polycarp_game(n, nums)\n\n# Print the result\nprint(*result)", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "def solve():\n    n = int(input())\n    s = input()\n\n    # Calculate the target counts for each digit\n    target = [n // 3] * 3\n\n    # Calculate the current counts for each digit\n    current = [0, 0, 0]\n    for c in s:\n        current[int(c)] += 1\n\n    # Initialize the result string\n    result = []\n\n    # Replace the characters to reach the target counts\n    for i in range(3):\n        diff = target[i] - current[i]\n        result.extend([i] * diff)\n\n    # Combine the result string", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "N = int(input())\nm = dict()\n\nprev = input()\nm[prev] = True\nflg = True\n\nfor _ in range(N - 1):\n  s = input()\n  flg = all([flg, s not in m, prev[len(prev) - 1] == s[0]])\n  m[s] = True\n  prev = s\n\nprint(\"Yes\" if flg else \"No\")", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "input()\na=list(map(int,input().split()))\nprint(a[-1]^max(a))\n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "r=float(input())\na=0\nh=0\nfor i in range(1,11):\n    for j in range(1,11):\n        c=pow(j*j+i*i/4.,0.5)\n        rtest=i*j*0.5/c\n        if abs(rtest-r)<0.00001:\n            a=i\n            h=j\nprint(a,h)", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "N = int(input())\nL = sorted(list(map(int, input().split())))\n \nm = L[-1]\ns = sum(L[:-1])\n \nif m < s: print('Yes')\nelse: print('No')", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "def f(x, v, n) :\n    a, p, s = 0, 0, 1\n    c = [0] * n + [1] + [0] * n\n    for i in v :\n        if(i < x) :\n            p += 1\n            s += c[p + n]\n        else :\n            s -= c[p + n]\n            p -= 1\n        c[p + n] += 1\n        a += s\n    return a\nn, x = list(map(int, input().split()))\nv = [int(i) for i in input().split()]\nprint(f(x + 1, v, n) - f(x, v, n))\n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "\nn,r = map(int, input().split())\naa = [0]*n\nbb = [0]*n\nfor i in range(n):\n    aa[i], bb[i] = map(int, input().split())\navail = set(range(n))\nfr = r + sum(bb)\nif fr < 0:\n    print(\"NO\")\n    return\nok = True\nfor i in range(n):\n    nxt = -1\n    for j in avail:\n        if aa[j] <= r and bb[j] >= 0:\n            nxt = j\n            break\n    if nxt == -1:\n        break\n    avail.remove(nxt)\n    r += bb[nxt]\nfor i in range(len(avail)):\n    nxt = -1\n    for j in avail:\n        if aa[j]+bb[j] <= fr and bb[j] < 0:\n            nxt = j\n            break\n    if nxt == -1:\n        ok = False\n        break\n    avail.remove(nxt)\n    fr -= bb[nxt]\nif ok:\n    print(\"YES\")\nelse:\n    print(\"NO\")", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "import sys\n\ndef main():\n    N, M = map(int, input().split())\n    A = list(map(int, input().split()))\n\n    # Sort the assignments in decreasing order of their lengths\n    A.sort(reverse=True)\n\n    # Keep track of the remaining days\n    days_left = N\n\n    # Loop through the assignments\n    for a in A:\n        # If the remaining days are less than the length of the assignment,\n        # then it is not possible to finish all assignments during the vacation\n        if days_left < a:\n            print(-1)\n            return\n        # Otherwise, subtract the length of the assignment from the remaining days\n        days_left -= a", "label": 1, "label_name": "machine_generated", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
{"code": "def mp():\n    return list(map(int, input().split()))\n\na, b, c = mp()\n\nk = min(a // 3, b // 2, c // 2)\na -= 3 * k\nb -= 2 * k\nc -= 2 * k\n\nm = 0\nfor i in range(7):\n    d = i\n    cnt = 0\n    x, y, z = a, b, c\n    while not(x < 0 or y < 0 or z < 0):\n        if d in [0, 3, 6]:\n            x -= 1\n        elif d in [1, 5]:\n            y -= 1\n        else:\n            z -= 1\n        d = (d + 1) % 7\n        cnt += 1\n    cnt -= 1\n    #print(cnt)\n    m = max(m, cnt)\n    cnt = 0\n    \nprint(7 * k + m)\n", "label": 0, "label_name": "human_written", "difficulty": "introductory", "original_source": "results\\Mixtral-8x7B-Instruct-v0.1-apps_introductory_207.jsonl"}
