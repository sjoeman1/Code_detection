{"columns": ["feature_names", "importances"], "data": [[".", 0.7221726135835307], ["map", 0.565925601748875], ["(", 0.5599113032425426], ["pairs", 0.5432329410876285], [")", 0.5279165682153735], ["int", 0.516000555590584], ["num", 0.4995768829749622], ["count", 0.47698754118797015], ["split", 0.4185822073297579], ["sort", 0.3899615293138042], ["input", 0.35356343874874946], ["max_sum", 0.3525864558225598], ["#NEWLINE#", 0.33992098870239773], ["max_num", 0.335432130231963], ["strip", 0.31578616335773035], ["standing", 0.3069219419048035], ["0.5", 0.3014749184381118], ["range", 0.29401503392542866], ["rated", 0.29264060003870174], ["re", 0.29248235566163455], ["**", 0.28963351010663235], ["min_distance", 0.2892385772396128], ["g", 0.2889070952645058], ["s", 0.2879199845579018], ["digit", 0.2851284915730118], ["base", 0.2829055731385629], ["lower", 0.27825490054527774], ["min_off", 0.27355993129517586], ["boxes", 0.27245620437692764], ["sofa_dict", 0.26720231547803847], ["x_y", 0.2666315134162587], ["b_1", 0.2615030708830081], ["np", 0.23816127227273043], [",", 0.23777793001993533], ["path", 0.22427073176162987], ["expectation", 0.21699044994039726], ["k_min", 0.21243697201553519], ["operations", 0.20831122925119305], ["down", 0.20525262382657894], ["up", 0.20525262382657894], ["s_len", 0.20438614040666017], ["\"yes\"", 0.20253841528938207], ["distance_willman", 0.20192572754040217], ["gcd_lcm", 0.19333816213767233], ["courses_passed", 0.19273639835953096], ["vectors", 0.19242608792824173], ["/", 0.19070403740142072], ["random", 0.19054062257741708], ["a_copy", 0.18951201097293063], ["bomb_pos", 0.18886869671253087], ["splitlines", 0.1884553978707455], ["v_total", 0.1859009230172353], ["days", 0.1859009230172353], ["max_off", 0.1823732875301173], ["distinct_strings", 0.18223321127938225], ["burles", 0.1816374695846184], ["y_max", 0.1794165854093039], ["tiles", 0.17878317224525653], ["cols", 0.17851025601666923], ["max_length", 0.17730360036004877], ["substring", 0.17730360036004877], ["waiting_time", 0.17584459278555464], ["swap", 0.17490726979589208], ["search", 0.17415313416020417], ["f", 0.17013099210374238], ["\"no\"", 0.16965517681772013], ["total_grains", 0.16663905240229204], ["y", 0.16632902167026348], ["min_questions", 0.16587974789585383], ["moves", 0.16470172106957198], ["prob", 0.16347930523851587], ["km_driven", 0.16100105573588325], ["prev", 0.16061633497595346], ["curr", 0.15968974946601602], ["lcm_value", 0.15932772901165138], ["float", 0.1581351990762751], ["constant_block", 0.15656355165430808], ["decreasing_block", 0.15656355165430808], ["increasing_block", 0.15656355165430808], ["curx", 0.15540963227374002], ["minblows", 0.15540963227374002], ["flag", 0.15430660194390783], ["u", 0.15328960530499514], ["sum", 0.15265874183841668], ["max_distance", 0.1516096087783445], ["\"(\"", 0.1512564547276176], ["\")\"", 0.15080401392035442], ["grid", 0.14165152253439814], ["is_possible", 0.14165152253439814], ["dx", 0.13907142505038902], ["dy", 0.13907142505038902], ["hash_s", 0.13667490845953667], ["\"\"", 0.1362729265836939], ["year_str", 0.13489499633051352], ["distance_bolt", 0.13461715169360144], ["paths", 0.1345624390569779], ["det", 0.13331575670812934], ["s_sum", 0.13319824022983337], ["v_y", 0.13219096164221908], ["max_terms", 0.1319672245814223], ["num_rows_served", 0.131883444589166], ["sorted_a", 0.13170684725842152], ["a_dict", 0.13170684725842152], ["num_painted", 0.13162877150114455], ["num_nine", 0.12953275013405433], ["num_sum", 0.12677751415720165], ["# calculate the maximum number of pieces that can be put on each plate", 0.12606289372552862], ["# print the maximum number of pieces", 0.12606289372552862], ["num_sparrows", 0.12497928930171902], ["num_days", 0.12497928930171902], ["hh", 0.12495323416048865], ["is_same", 0.12448235941217092], ["blow", 0.12432770581899202], ["v_0", 0.12393394867815688], ["num_str", 0.12352629080217895], ["kuro_beauty", 0.12076620705860924], ["shiro_beauty", 0.12076620705860924], ["winner", 0.12076620705860924], ["katie_beauty", 0.12076620705860924], ["a_digits", 0.11797487980682131], ["sasha_distances", 0.11270980100976621], ["kefa_distances", 0.11270980100976621], ["line", 0.11236577851396348], ["bool", 0.11203009476364945], ["read", 0.11171200411773967], ["sergei_questions", 0.11058649859723589], ["max_questions", 0.11058649859723589], ["replace", 0.11055820940339625], ["randint", 0.10993280590374349], ["abs", 0.1087877987327559], ["required_positives", 0.10818316534061277], ["next_lucky_year", 0.1079159970644108], ["time_walk", 0.10733403715725548], ["time_repair", 0.10733403715725548], ["time_min", 0.10733403715725548], ["time_driven", 0.10733403715725548], ["a_2", 0.10682608016646827], ["b_2", 0.10682608016646827], ["a_1", 0.10682608016646827], ["is_palindrome", 0.10276548154078126], ["num_year_bin", 0.10225789497400474], ["beauty", 0.10179999416364051], ["not", 0.10167390905163735], ["cnt1", 0.0996918493521058], ["cnt0", 0.0996918493521058], ["balance", 0.0996918493521058], ["v", 0.0992816008217793], ["accordion", 0.09926611810295649], ["min_length", 0.09926611810295649], ["\"inf\"", 0.09816494448315412], ["n_people", 0.09808758314310952], ["\"g\"", 0.09755010652406766], ["\"y\"", 0.09716447835565037], ["\"x\"", 0.09716447835565037], ["set", 0.09677064200543208], ["positions", 0.09293246915839479], ["hash", 0.09111660563969112], ["sub_s", 0.09111660563969112], ["# calculate the number of columns", 0.08925512800833461], ["# print the number of columns", 0.08925512800833461], ["area", 0.0888771711387529], ["longest_non_palindrome_length", 0.08865180018002439], ["longest_non_palindrome", 0.08865180018002439], ["pocket_y", 0.08812730776147938], ["vx_t", 0.08812730776147938], ["pocket_x", 0.08812730776147938], ["v_x", 0.08812730776147938], ["count_terms", 0.0879781497209482], ["s_seat", 0.08792229639277732], ["time_per_row", 0.08792229639277732], ["common_multiples", 0.08775251433409637], ["multiples_a", 0.08775251433409637], ["multiples_b", 0.08775251433409637], ["print", 0.08592646614578821], ["# print the results", 0.08511400885902269], ["all", 0.08376301124875928], ["false", 0.08338967051524723], ["time_str", 0.08330215610699242], ["min_sleep", 0.08330215610699242], ["elsie_grid_2d", 0.08298823960811395], ["elsie_grid", 0.08298823960811395], ["bessie_grid", 0.08298823960811395], ["_", 0.08289184940654488], ["ticket", 0.08235086053478599], ["sum_last_three", 0.08235086053478599], ["minmoves", 0.08235086053478599], ["# calculate the minimum number of moves required", 0.08235086053478599], ["sum_first_three", 0.08235086053478599], ["num_non_zero_digits", 0.08093699779830812], ["ti", 0.08030816748797673], ["gi", 0.08030816748797673], ["# print the answer", 0.07894627582985259], ["# print the number of pairs", 0.07859802298314086], ["# calculate the number of pairs of integers such that their sum is divisible by 5", 0.07859802298314086], ["+=", 0.07849885126111228], ["# print the result", 0.07816919971938496], ["# calculate the number of standing spectators at time t", 0.07673048547620087], ["div", 0.07649818055902076], ["cnt_1", 0.0756282273638088], ["cnt_3", 0.0756282273638088], ["cnt_4", 0.0756282273638088], ["is_regular", 0.0756282273638088], ["cnt_2", 0.0756282273638088], ["1073741824", 0.0732105288526494], ["\"left\"", 0.07287335876673777], ["\"bottom\"", 0.07287335876673777], ["\"right\"", 0.07287335876673777], ["\"top\"", 0.07287335876673777], ["shiro_ribbon", 0.07245972423516554], ["kuro_ribbon", 0.07245972423516554], ["katie_ribbon", 0.07245972423516554], ["gc", 0.07233014998013242], ["cos_angles", 0.07215978297309064], ["dot", 0.07215978297309064], ["calculate_extra_tiles", 0.07151326889810262], ["shuntsu_check", 0.07151326889810262], ["extra_tiles", 0.07151326889810262], ["koutsu_check", 0.07151326889810262], ["a_1_k", 0.07121738677764554], ["a_2_l", 0.07121738677764554], ["# calculate the minimum operations to type the string", 0.06943707641706436], ["# if there is a copy operation, the minimum operations are reduced by 1", 0.06943707641706436], ["num_year", 0.06817192998266981], ["\"0b\"", 0.06817192998266981], ["num_2015", 0.06817192998266981], ["year", 0.06817192998266981], ["\"/\"", 0.06730857584680072], ["cost", 0.06552020085541516], ["numerator", 0.06539172209540635], ["n_days", 0.06539172209540635], ["num_pairs", 0.06539172209540635], ["denominator", 0.06539172209540635], ["courses_dependencies", 0.06424546611984368], ["dependencies", 0.06424546611984368], ["minhead", 0.06216385290949601], ["v_1", 0.06196697433907844], ["\"1\"", 0.06139211551272602], ["y2", 0.060912772537036246], ["# find the index of the nearest zero to each element", 0.05924250124640486], ["group", 0.05840562056345244], ["r\"((\\w+)\\1+)\"", 0.05840562056345244], ["r\"((\\w+)\\1+\"", 0.05840562056345244], ["\"s\"", 0.05830242326529737], ["'u'", 0.056686102286588914], ["'r'", 0.056686102286588914], ["'l'", 0.056686102286588914], ["# calculate the maximum number of questions a particular pupil is asked", 0.055293249298617946], ["# calculate how many times the teacher asked sergei", 0.055293249298617946], ["# calculate the minimum number of questions a particular pupil is asked", 0.055293249298617946], ["# if no valid d is found, print 0", 0.054091582670306386], ["exit", 0.054091582670306386], ["-1000", 0.054091582670306386], ["# iterate over possible values of d and check if the condition is met", 0.054091582670306386], ["1001", 0.054091582670306386], ["# calculate the required number of positive numbers", 0.054091582670306386], ["'inf'", 0.05407153567170955], ["'-'", 0.0539579985322054], ["}", 0.053771847097195055], ["{", 0.053771847097195055], ["# calculate the time it takes to repair the car and walk to the post office", 0.05366701857862774], ["# find the minimum time", 0.05366701857862774], ["# print the minimum time", 0.05366701857862774], ["# calculate the number of kilometers that vasiliy can drive and the time it takes to drive those kilometers", 0.05366701857862774], ["# read input", 0.053187089734323005], ["# find the lcm of a+k and b+k", 0.053109243003883796], ["# decreasing block", 0.052187850551436044], ["# increasing block", 0.052187850551436044], ["# constant block", 0.052187850551436044], ["is_unimodal", 0.052187850551436044], ["\"0\"", 0.05212271527542959], ["x_i", 0.051829614656676876], ["y_i", 0.051829614656676876], ["by", 0.051829614656676876], ["\"?\"", 0.051313155956644735], ["unk", 0.051313155956644735], ["\"+\"", 0.051313155956644735], ["\"-\"", 0.051313155956644735], ["# print the beauty", 0.050899997081820254], ["# calculate the beauty of the array after multiplying all values in a consecutive subarray by x", 0.050899997081820254], ["# calculate the maximum subarray sum", 0.050899997081820254], ["# if it is not an accordion, print -1", 0.049633059051478245], ["match", 0.049633059051478245], ["# check if the input string is an accordion", 0.049633059051478245], ["# calculate the length of the shortest possible accordion", 0.049633059051478245], ["# otherwise, find the maximum length of the result", 0.049633059051478245], ["# print the maximum length of the result", 0.049633059051478245], ["\"[\"", 0.049633059051478245], ["\"\\[:.*:\\]\"", 0.049633059051478245], ["# check if the round is rated", 0.04877343333978362], ["# check if the round is unrated due to lower rated participant taking a better place", 0.04877343333978362], ["cnt_b", 0.048582239177825184], ["cnt_l", 0.048582239177825184], ["cnt_t", 0.048582239177825184], ["cnt_r", 0.048582239177825184], ["\"*\"", 0.04721717417813272], ["# check if the first k elements are stack-sortable", 0.046466234579197394], ["# sort the remaining elements in descending order", 0.046466234579197394], ["# create a map to store the positions of the first k elements in their original order", 0.046466234579197394], ["# place the first k elements in their original positions", 0.046466234579197394], ["'%x'", 0.04555830281984556], ["# if the determinant is 0, the area cannot be uniquely determined", 0.04443858556937645], ["# calculate the determinant of the matrix formed by the coordinates", 0.04443858556937645], ["# calculate the area of the rectangle", 0.04443858556937645], ["# create a function to find the length of the longest non-palindrome substring", 0.044325900090012194], ["# find the length of the longest non-palindrome substring", 0.044325900090012194], ["# print the length of the longest non-palindrome substring", 0.044325900090012194], ["vy_t", 0.04406365388073969], ["# the ball will fall into a corner pocket", 0.04406365388073969], ["# check if the ball will fall into a pocket", 0.04406365388073969], ["# the ball will move indefinitely", 0.04406365388073969], ["# calculate the ball's trajectory", 0.04406365388073969], ["# otherwise, return \"inf\"", 0.0439890748604741], ["# calculate the maximum number of terms", 0.0439890748604741], ["# print the number of terms that can be written", 0.0439890748604741], ["# if the number of terms is finite, return the number of terms", 0.0439890748604741], ["# calculate the number of terms that can be written", 0.0439890748604741], ["# print the waiting time", 0.04396114819638866], ["# iterate over the rows to find the number of rows served before vasya's row", 0.04396114819638866], ["# add the time to serve passengers in vasya's row", 0.04396114819638866], ["# number of rows served before vasya's row", 0.04396114819638866], ["# number of rows and seat number", 0.04396114819638866], ["# number of seconds vasya has to wait", 0.04396114819638866], ["# number of seconds to serve passengers in each row", 0.04396114819638866], ["# count the number of painted tiles", 0.04387625716704818], ["# find the common multiples", 0.04387625716704818], ["# calculate the total number of chocolates", 0.04387625716704818], ["# calculate the multiples of a and b", 0.04387625716704818], ["math", 0.043233567513734826], ["# calculate the number of days it takes for the barn to become empty", 0.04165976310057301], ["# print the number of days it takes for the barn to become empty", 0.04165976310057301], ["# calculate the number of grains that are brought every day", 0.04165976310057301], ["# bring grains to the barn", 0.04165976310057301], ["# increment the number of days", 0.04165976310057301], ["# calculate the number of sparrows that come every day", 0.04165976310057301], ["# iterate over the days until the barn becomes empty", 0.04165976310057301], ["# update the number of sparrows that come every day", 0.04165976310057301], ["# eat grains by sparrows", 0.04165976310057301], ["# convert time_str to hours and minutes", 0.04165107805349621], ["r\"(\\d+):(\\d+)\"", 0.04165107805349621], ["\":\"", 0.04165107805349621], ["# print the minimum number of minutes to sleep", 0.04165107805349621], ["findall", 0.04165107805349621], ["# calculate the minimum number of minutes to sleep", 0.04165107805349621], ["# create grids", 0.04149411980405698], ["bessie_grid_2d", 0.04149411980405698], ["bestie_grid_2d", 0.04149411980405698], ["# check if the grids are the same", 0.04149411980405698], ["# return the minimum number of moves", 0.041175430267392996], ["# get the input ticket number", 0.041175430267392996], ["# print the minimum number of moves", 0.041175430267392996], ["# calculate the minimum decimal number to get k in the system with base n", 0.04041508187693756], ["k_base", 0.04041508187693756], ["# print the maximum number", 0.0393249599356071], ["# convert a to a list of digits", 0.0393249599356071], ["# sort the digits in descending order", 0.0393249599356071], ["lstrip", 0.0393249599356071], ["# remove leading zeroes", 0.0393249599356071], ["# construct the maximum number not exceeding b", 0.0393249599356071], ["# calculate the maximum distance between the minimum and maximum elements", 0.03790240219458613], ["# calculate the distance between the minimum and maximum elements after swapping one element", 0.03790240219458613], ["# print the maximum distance", 0.03790240219458613], ["# check if the string is balanced", 0.0378141136819044], ["\"))\"", 0.0378141136819044], ["argmin", 0.037058651517062315], ["array", 0.037058651517062315], ["numpy", 0.037058651517062315], ["# calculate the possible sizes of the bars after the process", 0.03674674809754954], ["# calculate the minimum number of minutes", 0.03674674809754954], ["# if there is no koutsu or shuntsu, draw at least one extra tile", 0.03575663444905131], ["\"((\\d){3})\"", 0.03575663444905131], ["# get the tiles in tokitsukaze's hand", 0.03575663444905131], ["# calculate the minimum number of extra tiles", 0.03575663444905131], ["\"((\\d){3})-((\\d){1})\"", 0.03575663444905131], ["# otherwise, draw no extra tiles", 0.03575663444905131], ["# check if there is already a koutsu or shuntsu", 0.03575663444905131], ["# print the number of integers in the intersection", 0.03560869338882277], ["# find the intersection", 0.03560869338882277], ["# calculate the first progression", 0.03560869338882277], ["# calculate the second progression", 0.03560869338882277], ["2015", 0.034085964991334906], ["num_2015_bin", 0.034085964991334906], ["# calculate the binary representation of the year 2015", 0.034085964991334906], ["# count the number of years with exactly one zero in the binary representation", 0.034085964991334906], ["# calculate the maximum distance that willman and bolt can cover", 0.03365428792340036], ["# otherwise, the winner is the athlete who can cover a greater distance", 0.03365428792340036], ["# if the distance covered by both athletes is equal, they tie", 0.03365428792340036], ["none", 0.03298488373172142], ["# find the gcd of a and b", 0.032695861047703174], ["# calculate the probability of at least two people having the same birthday", 0.032695861047703174], ["# calculate a and b", 0.032695861047703174], ["# print a and b modulo 10^6 + 3", 0.032695861047703174], ["# calculate the number of pairs of people with the same birthday", 0.032695861047703174], ["main_courses", 0.03212273305992184], ["mm", 0.028665632758600734], ["# if the next lucky year is in the same year, increment the year until the next lucky year is found", 0.0269789992661027], ["# convert the year to a string", 0.0269789992661027], ["# print the number of years until the next lucky year", 0.0269789992661027], ["# find the next lucky year", 0.0269789992661027], ["# count the number of non-zero digits in the year", 0.0269789992661027], ["\">\"", 0.025914807328338438], ["\"=\"", 0.025914807328338438], ["\"<\"", 0.025914807328338438], ["# create a dictionary to store the information about each sofa", 0.024291119588912592], ["# calculate the number of sofas that meet the given conditions", 0.024291119588912592], ["# print the number of the sofa that meets the given conditions", 0.024291119588912592], ["# read kuro's, shiro's and katie's ribbons", 0.024153241411721843], ["\"kuro\"", 0.024153241411721843], ["# print the winner", 0.024153241411721843], ["\"draw\"", 0.024153241411721843], ["\"shiro\"", 0.024153241411721843], ["# determine the winner", 0.024153241411721843], ["\"katie\"", 0.024153241411721843], ["# calculate the beauty of each ribbon", 0.024153241411721843], ["cos", 0.024053260991030216], ["arccos", 0.024053260991030216], ["argmax", 0.024053260991030216], ["\"bitlgm\"", 0.02382132192178059], ["\"bitaryo\"", 0.02382132192178059], ["is", 0.0209440898552531], ["\"nie\"", 0.02018935022985391], ["\"tak\"", 0.02018935022985391], ["13", 0.016020966916451492], ["# calculate maximum value", 0.016020966916451492], ["a_i", 0.016020966916451492], ["a_c", 0.016020966916451492], ["# print the expression", 0.016020966916451492], ["# find the index of the maximum value", 0.016020966916451492], ["enumerate", 0.015772829193838094], ["floor", 0.015652622954408734], ["gcd", 0.012517791439567634], ["s2", 0.009622970875188435], ["bin", 0.008594779493370503], ["reverse", 0.004421667579326424], ["m", 0.003898697941483834], ["add", 0.002732054378737518], ["b2", 0.002699766233580574], ["'d'", -0.0022332161527855218], ["# toranai", -0.005660883643507528], ["# kaijyou totte toru", -0.005660883643507528], ["# toru", -0.005660883643507528], ["20", -0.005660883643507528], ["'.'", -0.0074306030828827], ["#print(i,j,np,co1,co2,ct,zeroes[-1],x2,y1)", -0.007823761568600523], ["quit", -0.00878731824233613], ["40000", -0.00878731824233613], ["#print(ans)", -0.010670350016297353], ["#print(xhit, yhit)", -0.010670350016297353], ["remove", -0.011116787974423645], ["\"b\"", -0.011116787974423645], ["\"r\"", -0.011116787974423645], ["clear", -0.011321767287015056], ["# make it sticky", -0.01134818909270123], ["# how many things match directly", -0.01134818909270123], ["assert", -0.01134818909270123], ["# skip m", -0.01134818909270123], ["# solve3(942, 911)", -0.01202339992528248], ["# bl = list(split(b))", -0.01202339992528248], ["# 942=a, 911=b", -0.01202339992528248], ["# print(al, bl, ptr)", -0.01202339992528248], ["# done to the last one.", -0.01202339992528248], ["# solve3(3921,10000)", -0.01202339992528248], ["# print(\"repermute\", al, bl)", -0.01202339992528248], ["# print(\"enter\")", -0.01202339992528248], ["# solve3(31434123, 13241234)", -0.01202339992528248], ["# print(al, bl,ptr)", -0.01202339992528248], ["# solve3(4940,5000)", -0.01202339992528248], ["# 9442=a, 9411=b", -0.01202339992528248], ["# print(selection)", -0.01202339992528248], ["# sorted from high to low", -0.01202339992528248], ["# solve3(9442, 9411)", -0.01202339992528248], ["# al = sorted(list(split(a)))[::-1]", -0.01202339992528248], ["# last one", -0.01202339992528248], ["# illegal:", -0.01202339992528248], ["# illegal, min of a_rest is larger than b_rest", -0.01202339992528248], ["# pop this idx", -0.01202339992528248], ["# then len(a) == len(b)", -0.01202339992528248], ["# solve3(9991020, 100001)", -0.01202339992528248], ["# answer can't have leading zeros.", -0.01202339992528248], ["# solve3(123, 301)", -0.01202339992528248], ["# all ptr to the back is legal", -0.01202339992528248], ["# 499200 vs 982400 = b", -0.01202339992528248], ["'qwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnm'", -0.012841395562377242], ["# cos = (v1,v2) / |v1||v2|", -0.013118034324982987], ["# cos = x/sqrt(xx+yy)", -0.013118034324982987], ["# 3 - a/b", -0.013118034324982987], ["# a/b+c = (a+bc)/b", -0.013118034324982987], ["# cos, cos^2 (0-90), val (0-360)", -0.013118034324982987], ["# 2 + a/b - 1 = a/b + 1", -0.013118034324982987], ["# 4 + a/b - 1 = a/b + 3", -0.013118034324982987], ["# a1 <=> a2: ", -0.013118034324982987], ["# 1 - a/b", -0.013118034324982987], ["'\\n>>> '", -0.01337792456548557], ["flush", -0.01337792456548557], ["0x3f3f3f3f3f3f3f3f", -0.01337792456548557], ["oo", -0.01337792456548557], ["pformat", -0.01337792456548557], ["# begin template", -0.01337792456548557], ["65", -0.01337792456548557], ["61", -0.01337792456548557], ["# end template", -0.01337792456548557], ["dbg", -0.01337792456548557], ["'\\n'", -0.01337792456548557], ["' = '", -0.01337792456548557], ["#premissing.discard(x)   ", -0.013476350349632677], ["\"z\"", -0.013476350349632677], ["#postmissing.discard(x)", -0.013476350349632677], ["chr", -0.013476350349632677], ["\"a\"", -0.013476350349632677], ["import", -0.01396268737047529], ["defaultdict", -0.01698265093052258], ["join", -0.016995637611343737], ["pfl", -0.01757463648467226], ["ab", -0.01838353921119659], ["d3", -0.01838353921119659], ["c3", -0.01838353921119659], ["cd", -0.01838353921119659], ["d2", -0.01838353921119659], ["# (l,r], return the smallest n which p holds", -0.019089078685220272], ["'1 1'", -0.019616232256768885], ["values", -0.020574557366029884], ["most_common", -0.020574557366029884], ["/=", -0.020780918962351333], ["dict", -0.020780918962351333], ["m2i", -0.021340700032594705], ["m1i", -0.021340700032594705], ["crt", -0.021340700032594705], ["e2", -0.021340700032594705], ["#\tprint(a)", -0.021897930768667504], ["primefactor", -0.022082977484444825], ["divisors", -0.022082977484444825], ["ret_prev", -0.022082977484444825], ["columns", -0.02223357594884729], ["data", -0.022624848770649988], ["#this code is dedicated to vlada s.", -0.022624848770649988], ["class", -0.022624848770649988], ["__init__", -0.022624848770649988], ["ind", -0.02269637818540246], ["k", -0.023238612247520718], ["co2", -0.023471284705801572], ["co1", -0.023471284705801572], ["'(z^x)^y'", -0.02371463555853204], ["'(y^x)^z'", -0.02371463555853204], ["'(x^y)^z'", -0.02371463555853204], ["'x^y^z'", -0.02371463555853204], ["'x^z^y'", -0.02371463555853204], ["'y^x^z'", -0.02371463555853204], ["8", -0.02371463555853204], ["'y^z^x'", -0.02371463555853204], ["'z^x^y'", -0.02371463555853204], ["prec", -0.02371463555853204], ["'z^y^x'", -0.02371463555853204], ["getcontext", -0.02371463555853204], ["400001", -0.023819890556793812], ["solve3", -0.02404679985056496], ["'shiro'", -0.025682791124754484], ["'katie'", -0.025682791124754484], ["'kuro'", -0.025682791124754484], ["quiz", -0.026236068649965975], ["ang", -0.026236068649965975], ["vec", -0.026236068649965975], ["sqrt", -0.026544933198949985], ["pprint", -0.02675584913097114], ["minn", -0.02675584913097114], ["1e70", -0.02675584913097114], ["stderr", -0.02675584913097114], ["ord", -0.026952700699265354], ["tp", -0.026952700699265354], ["gentemp", -0.026952700699265354], ["tup", -0.026952700699265354], ["300", -0.02727086185853379], ["785", -0.02727086185853379], ["^=", -0.02727086185853379], ["k2", -0.027575308816794885], ["18", -0.028122436839605903], ["fact", -0.02830441821753763], ["inp", -0.028538770482151136], ["insr", -0.028538770482151136], ["tt", -0.028538770482151136], ["inlt", -0.028538770482151136], ["############ ---- the actual code starts below ---- ############", -0.028538770482151136], ["############ ---- user defined input functions ---- ############", -0.028538770482151136], ["################################################################", -0.028538770482151136], ["\"\"\"\n    author : thekushalghosh\n    team   : codediggers\n\"\"\"", -0.028538770482151136], ["invr", -0.028538770482151136], ["s1", -0.02885927983536746], ["'g'", -0.028887951487470632], ["# print(i, right)", -0.028887951487470632], ["xgcd", -0.02921312159945329], ["12", -0.029478965246183], ["'''print(number, exponent, numdigits, start, final, remainder)'''", -0.029478965246183], ["#ans = false", -0.029550521051261727], ["\"ahimootuvvwwxxy\"", -0.029550521051261727], ["bx", -0.030643377759444847], ["node", -0.03173977424369858], ["#for _ in range(getint()):    ", -0.03184899252126888], ["#we want the smallest smallest such that there are at least k-1 smaller numbers", -0.03184899252126888], ["#in each row, how many numbers are < x", -0.03184899252126888], ["#if there are exactly k-1 elements less than right, then this is our answer", -0.03184899252126888], ["yhit", -0.03201105004889206], ["e1", -0.03201105004889206], ["xhit", -0.03201105004889206], ["swapx", -0.03201105004889206], ["swapy", -0.03201105004889206], ["append", -0.03203797396083954], ["sq", -0.033124466226667225], ["letters", -0.033350363923270954], ["rows", -0.033350363923270954], ["# always take all even sums", -0.03346198523051736], ["# there must be at least one odd number", -0.03346198523051736], ["# print highest sum", -0.03346198523051736], ["write", -0.033609638503522776], ["\"maybe\"", -0.03416420866749938], ["\"rated\"", -0.03416420866749938], ["\"unrated\"", -0.03416420866749938], ["lol", -0.034960969613823896], ["needed", -0.03514927296934452], ["'|'", -0.03529534071512324], ["'mps'", -0.03591576561064193], ["find", -0.03622128154215189], ["or", -0.03649261472250882], ["k3", -0.03676707842239318], ["z", -0.03747803264164232], ["=", -0.03860524245671598], ["y1", -0.03911880784300262], ["vmin", -0.039354102974948964], ["copy", -0.03989417813133151], ["name", -0.04042905104889804], ["firsttime", -0.04042905104889804], ["str", -0.04048780226856367], ["'#'", -0.040521446116604895], ["itertools", -0.040521446116604895], ["#print(pos)", -0.040521446116604895], ["'='", -0.04248326913032354], ["'>'", -0.04248326913032354], ["'<'", -0.04248326913032354], ["exgcd", -0.04268140006518941], ["ay", -0.04268140006518941], ["''", -0.04314095791457794], ["ok", -0.04393659121168064], ["~", -0.04528706914806022], ["s0", -0.04539275637080492], ["stdout", -0.04593326707489633], ["cd2", -0.04595884802799147], ["ab2", -0.04595884802799147], ["'1'", -0.046114177104810104], ["28", -0.04697749537378615], ["decimal", -0.04742927111706408], ["\\\n", -0.04742927111706408], ["op", -0.04742927111706408], ["bl", -0.04809359970112992], ["selection", -0.04809359970112992], ["integer", -0.04809359970112992], ["32", -0.05029753459042068], ["log", -0.05030201667735102], ["23", -0.05187156167801976], ["'7'", -0.05187156167801976], ["v2", -0.05247213729993195], ["imin", -0.05247213729993195], ["as", -0.05273542029994976], ["vy", -0.05335175008148677], ["vx", -0.05335175008148677], ["power", -0.05351169826194228], ["w", -0.05380639039414235], ["prewrong", -0.05390540139853071], ["postwrong", -0.05390540139853071], ["\"move\"", -0.05390540139853071], ["premissing", -0.05390540139853071], ["postmissing", -0.05390540139853071], ["preans", -0.05390540139853071], ["' '", -0.05418406823202101], ["zeroes", -0.05476633098020367], ["1e9", -0.055016892611891854], ["condition", -0.055583939872118245], ["# -*- coding: utf-8 -*-", -0.05596265458786965], ["\"\"\"\ncreated on sun may 27 20:07:20 2018\n\n@st0rmbring3r\n\"\"\"", -0.05596265458786965], ["stdin", -0.05657459143475633], ["binsearch", -0.057267236055660795], ["acc", -0.057267236055660795], ["max_ans", -0.057775902974941264], ["'s'", -0.057775902974941264], ["continue", -0.058374530255800076], ["prevy", -0.05842624319890658], ["prevx", -0.05842624319890658], ["rema", -0.05885389622013386], ["woodenbarnum", -0.05885389622013386], ["chopped_odd", -0.05887776686199341], ["len_even", -0.05887776686199341], ["len_odd", -0.05887776686199341], ["start", -0.058957930492366], ["'b'", -0.059101042102523454], ["'q'", -0.059101042102523454], ["'p'", -0.059101042102523454], ["'x'", -0.0594448246630616], ["have", -0.06151122769635291], ["rdp", -0.06226972007858279], ["ma", -0.06239919283615851], ["twos", -0.06259009254880418], ["t", -0.0635784263935799], ["'draw'", -0.06420697781188621], ["ab3", -0.06434238723918806], ["cd3", -0.06434238723918806], ["even", -0.06692397046103472], ["post", -0.06738175174816338], ["temp", -0.06738175174816338], ["pre", -0.06738175174816338], ["postfree", -0.06738175174816338], ["-2", -0.06763357155758933], ["done", -0.06787454631194997], ["in_stack", -0.06787454631194997], ["ldp", -0.06793060372209032], ["rstrip", -0.06818540345217673], ["diff", -0.06872930462528798], ["#!/usr/bin/env python3", -0.0694041076858698], ["\"south\"", -0.06990022090320387], ["\"north\"", -0.06990022090320387], ["20000", -0.06990022090320387], ["dp", -0.07051737306897864], ["'['", -0.07059068143024648], ["']'", -0.07059068143024648], ["for", -0.0711394400780579], ["arr", -0.07114390667559613], ["zs", -0.07145967167038142], ["combine", -0.0721403995516949], ["24", -0.07244256308430377], ["s3", -0.07475071342678243], ["9", -0.07476271491610015], ["<<=", -0.0748724983242267], ["a2", -0.07535107745992616], ["true", -0.07637789258974757], ["ones", -0.07823761568600524], ["mem", -0.07846492902707554], ["goal", -0.07934943560924645], ["onlya", -0.08034104915280445], ["onlyb", -0.08034104915280445], ["prefree", -0.08085810209779608], ["discard", -0.08085810209779608], ["postans", -0.08085810209779608], ["sl", -0.08085810209779608], ["val", -0.08086728325551741], ["groupby", -0.08104289223320979], ["'9'", -0.08169031012706278], ["phi", -0.0818125855756014], ["sec", -0.08214201309288513], ["occ", -0.08229822946411953], ["avail", -0.08229822946411953], ["memo", -0.08312367584940533], ["mod", -0.08312367584940533], ["i", -0.08452236596647658], ["tuple", -0.0857176886856582], ["any", -0.0857176886856582], ["ceil", -0.08587316558538186], ["fence", -0.08606137725460578], ["x2", -0.08607188949472991], ["6", -0.08621190624449561], ["assigned", -0.0866638544624119], ["pass", -0.08815591939277508], ["best_even", -0.0883166502929901], ["best_odd", -0.0883166502929901], ["chopped_even", -0.0883166502929901], ["remainder", -0.08843689573854904], ["numdigits", -0.08843689573854904], ["mir", -0.08865156315378517], ["sym", -0.08865156315378517], ["m3", -0.0898897689366407], ["courses", -0.09049939508259995], ["reqs", -0.09049939508259995], ["available", -0.09049939508259995], ["answer", -0.09049939508259995], ["ndp", -0.09078551274160984], ["and", -0.0908997819078432], ["ratings", -0.0915535909193609], ["b3", -0.09350537843147706], ["a3", -0.09350537843147706], ["<", -0.0943872053950145], ["'vasiliy'", -0.09469388233898528], ["'polycarp'", -0.09469388233898528], ["used", -0.09521932273109575], ["cntl", -0.09527956222717525], ["cntr", -0.09527956222717525], ["&", -0.09764495482383821], ["reversed", -0.09837457010716252], ["mi", -0.09854614505584082], ["min", -0.09867968854455786], ["sorted", -0.09908837703799028], ["v0", -0.09954750640282667], ["even_sum", -0.10038595569155208], ["rolling", -0.10038595569155208], ["mask", -0.10060403335470204], ["color", -0.10083179075587463], ["items", -0.10083179075587463], ["pdiff", -0.1037152266235846], ["cdiff", -0.1037152266235846], ["r", -0.10636255162598825], ["st", -0.10774729683192581], ["posttochange", -0.10781080279706141], ["*=", -0.10881696346696931], ["rest", -0.1089848262490607], ["total", -0.10946123229006809], ["collections", -0.11072126118064692], ["big", -0.11108920985294504], ["pos", -0.11179523819867042], ["lcm", -0.11202026192111736], ["self", -0.11312424385324998], ["pow", -0.11595800395556691], ["numwood", -0.11770779244026772], ["in", -0.11781720284851134], ["ax", -0.11804246046136495], ["divisor", -0.1183410590644837], ["rp", -0.11909945278396905], ["lp", -0.11909945278396905], ["t2", -0.11949300487277781], ["pretochange", -0.12128715314669408], ["n", -0.12137352628439194], [">=", -0.12308146063707301], ["pop", -0.12437483319707211], ["%=", -0.12587356159098215], ["lst", -0.1261878612982668], ["60", -0.1262396692190921], ["middle", -0.12739597008507553], ["'0'", -0.12763485758156823], ["zerocount", -0.12770017794990673], ["t3", -0.12868477447837612], ["10", -0.12894145764055154], ["lambda", -0.12989364131427442], ["r_close", -0.13041547268682807], ["l_close", -0.13041547268682807], ["':'", -0.13141376192058854], ["a2g", -0.13145904719753984], ["a1g", -0.13145904719753984], ["odd", -0.13384794092206945], ["4", -0.13413998151245865], ["pf", -0.13627082727207307], ["tl", -0.13674490592935892], ["100", -0.13761181153884947], ["v1", -0.14058020064004093], ["x3", -0.14117697823675424], ["readline", -0.142376051564444], ["search_from", -0.14282898409664363], ["answ", -0.1436630624425677], ["el", -0.14387835761507436], ["\" \"", -0.1451877768585881], ["b1", -0.14553292869987944], ["ret", -0.1456727374991428], ["remb", -0.14713474055033468], ["sys", -0.14795699133477583], ["course", -0.14981233164495145], ["solve", -0.14999357975435434], ["!=", -0.1506694005045159], ["m2", -0.1521974450958001], ["m1", -0.1521974450958001], ["key", -0.15429217917832583], ["lastc", -0.15557283993537696], ["lastp", -0.15557283993537696], ["check", -0.15646404353698878], ["yv", -0.1578231372316421], ["xv", -0.1578231372316421], ["ch", -0.15795392325440563], [">", -0.15867826161150436], ["left", -0.15924496260634438], ["p", -0.16036896485540014], ["possible", -0.16730992615258683], ["tr", -0.17093113241169872], ["<<", -0.1710108274902705], ["digs", -0.17182326156321992], ["row", -0.17386650933216657], ["ys", -0.17419741065943461], ["xs", -0.17419741065943461], ["//=", -0.17902567137090258], ["requirements", -0.1809987901651999], ["xp", -0.18938776467797055], ["yp", -0.18938776467797055], ["prime", -0.1907234459358562], ["__starting_point", -0.19132481623362266], ["al", -0.19237439880451968], ["'no'", -0.19266628725589063], ["'yes'", -0.19266628725589063], ["rem", -0.19909501280565334], ["1000000007", -0.19977139337505795], ["a1", -0.1999450887505031], ["bs", -0.20119013836168273], ["nums", -0.20260723058302443], ["works", -0.20277074606341272], ["from", -0.20475207329531192], ["tm", -0.20511735889403837], ["elif", -0.20524911137077395], ["exponent", -0.20635275672328104], ["final", -0.20635275672328104], ["7", -0.20955810026489186], ["cur2", -0.2115241699950341], ["cur1", -0.2115241699950341], ["aa", -0.21241634565161774], ["bb", -0.21241634565161774], ["ln", -0.21343172002678842], ["index", -0.214203239700896], ["ct", -0.21810350406564324], ["li", -0.21816689486827032], ["==", -0.21830382199983292], ["1", -0.2233537078013526], ["counter", -0.22454109695617291], ["x1", -0.22477026614088272], [";", -0.23144905235964972], ["d", -0.23162486667067986], ["-1", -0.23296412369599936], ["30", -0.23637216412954462], ["cur_pos", -0.24312867669962934], ["a", -0.24720398980329045], ["number", -0.2472534160507795], ["c2", -0.24855865422765902], ["c1", -0.25040109676807165], ["right", -0.251380151837187], ["time", -0.2535489707950632], ["else", -0.25500435397347126], ["-=", -0.2558959109781071], ["5", -0.25662932199124605], ["remwood", -0.2648425329906025], ["colors", -0.26873046158381303], ["e", -0.28663903393261664], ["0", -0.29261328478345067], ["max", -0.29412075804145815], ["if", -0.29726781702226335], ["c", -0.30429171166645047], ["q", -0.3043460370741978], ["l", -0.31543491364702764], ["def", -0.3230055915121994], ["%", -0.32690191208396113], ["+", -0.33843922931062576], ["ptr", -0.352478934469719], ["main", -0.3557427080696455], ["len", -0.3570701018567632], ["list", -0.36733953779886996], ["31", -0.3758199629902892], ["h", -0.3845108889122305], ["word", -0.3917385821150875], ["3", -0.40775056051392516], ["while", -0.440042552272946], ["return", -0.47370818135838466], ["*", -0.4790554585526861], ["break", -0.49603059209893624], ["<=", -0.502065502377359], ["//", -0.5043817539686326], ["x", -0.5886141321909951], ["j", -0.5904565917813042], ["cur", -0.6005846539242401], ["res", -0.6255965256637698], ["cnt", -0.6392087062994708], ["tmp", -0.6648525596686405], ["]", -0.7993432521712426], ["[", -0.7993432521712426], ["b", -0.8816618909338203], ["-", -0.8918295369268403], ["2", -0.896974645381601], ["ans", -0.9507369570429736], ["#INDENT#", -0.9686952756660124], ["#DEDENT#", -0.9686952756660124], [":", -1.065213986583927]]}