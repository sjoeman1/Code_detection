{"columns": ["feature_names", "importances"], "data": [["= map ( int", 0.1090288832783699], ["the", 0.0789952427148819], ["( ) ) #NEWLINE#", 0.059137213975191116], ["1 ) :", 0.03919248655438423], [") ) #NEWLINE# ans", 0.03492557257413864], ["#DEDENT# else : #INDENT#", 0.02632187306880951], ["-1", 0.022885819897055626], ["#NEWLINE#", 0.021822715178132057], ["input ( ) .", 0.020085908472537994], ["-", 0.019464703276753426], ["#DEDENT#", 0.019460424780845642], ["2", 0.01798941195011139], ["1 )", 0.01736118271946907], ["= input", 0.01643688976764679], [") .", 0.015420186333358288], ["n -", 0.014334372244775295], ["return", 0.01340553630143404], ["1", 0.012287002988159657], ["int (", 0.012102468870580196], ["import", 0.01182488352060318], ["n", 0.011520539410412312], [") #NEWLINE# if", 0.010719165205955505], ["for i in range", 0.010429839603602886], ["b", 0.010250893421471119], [") ) #NEWLINE# a", 0.0102454898878932], ["#NEWLINE# #DEDENT# print (", 0.010151674039661884], ["strip ( ) #NEWLINE#", 0.010066570714116096], ["a [", 0.010042229667305946], ["#NEWLINE# for", 0.009992462582886219], ["#NEWLINE# #DEDENT#", 0.009978358633816242], [". sort", 0.009899348951876163], ["a = list", 0.009544533677399158], ["1 #NEWLINE# #DEDENT# #DEDENT#", 0.009443380869925022], ["\"no\" )", 0.009225153364241123], [") ]", 0.009181340225040913], ["= map", 0.00907454825937748], ["#NEWLINE# a = list", 0.008908584713935852], ["//", 0.008898377418518066], [",", 0.008821312338113785], [": #INDENT#", 0.008809106424450874], ["s = input", 0.008723387494683266], ["a", 0.008666311390697956], ["(", 0.008528281934559345], ["#NEWLINE# #DEDENT# if", 0.008496524766087532], ["+", 0.00846045557409525], ["= list", 0.008188201114535332], ["] #NEWLINE#", 0.008142550475895405], ["k =", 0.007625658065080643], [". strip", 0.007516657002270222], ["min", 0.007447834126651287], [") #NEWLINE# ans", 0.0073941657319664955], ["[", 0.0073202988132834435], ["0", 0.0072426460683345795], ["- 1 )", 0.0069792550057172775], [") :", 0.006830809637904167], ["else", 0.006782465614378452], ["( ) . split", 0.006606608629226685], ["( )", 0.006559510249644518], ["( int ,", 0.006402949336916208], ["=", 0.00619245832785964], [": #INDENT# if", 0.0058520189486444], ["= true", 0.005653436295688152], ["( ) .", 0.0056124115362763405], ["range", 0.005611619912087917], ["( \"yes\"", 0.0055135819129645824], ["= int", 0.005340314004570246], ["#INDENT# if", 0.0051480857655406], ["0 : #INDENT#", 0.005147571209818125], ["= [", 0.005064051598310471], ["#NEWLINE# #DEDENT# #DEDENT#", 0.0049619171768426895], [". split", 0.00487535260617733], ["[ i ]", 0.0047774966806173325], ["= len", 0.004566194489598274], ["*", 0.004083259962499142], ["-1 #NEWLINE# for i", 0.0], ["-1 )", 0.0], [", vx", 0.0], ["-1 #NEWLINE#", 0.0], ["-1 #NEWLINE# for", 0.0], ["- y1 -", 0.0], ["- y1", 0.0], ["- y", 0.0], ["- x", 0.0], ["- t )", 0.0], ["- t", 0.0], ["-1 ) #NEWLINE#", 0.0], ["-1 ) )", 0.0], ["-1 ) #NEWLINE# #DEDENT#", 0.0], ["-1 ) #NEWLINE# return", 0.0], [", vectors [ 1", 0.0], [", vectors [", 0.0], ["-1 ) :", 0.0], ["-1 ) : #INDENT#", 0.0], ["-1 *", 0.0], ["-1 ,", 0.0], [", vectors", 0.0], ["-1 , -1", 0.0], ["-1 , -1 )", 0.0], ["-1 :", 0.0], ["-1 : #INDENT#", 0.0], ["-1 ]", 0.0], ["-1 ] #NEWLINE#", 0.0], ["- sum (", 0.0], [", y ) #NEWLINE#", 0.0], ["- sum", 0.0], ["- mini", 0.0], ["- n", 0.0], ["- minj + 1", 0.0], [", w )", 0.0], ["- minj +", 0.0], ["- minj", 0.0], [", w ) )", 0.0], [", w ,", 0.0], [", w", 0.0], ["- min ( l", 0.0], ["- min (", 0.0], ["- min", 0.0], ["- mid #NEWLINE#", 0.0], ["- mid", 0.0], ["- max (", 0.0], ["- pos", 0.0], ["- r", 0.0], ["- sofa_dict [ i", 0.0], ["- s .", 0.0], ["-1 ] #NEWLINE# #DEDENT#", 0.0], ["- sofa_dict", 0.0], ["- s3", 0.0], [", vx ,", 0.0], [", vx , vy", 0.0], ["- s . count", 0.0], ["- s )", 0.0], ["- r )", 0.0], ["- s", 0.0], [", vy", 0.0], ["- r + 1", 0.0], [", vy )", 0.0], ["- r +", 0.0], ["- r ) +", 0.0], ["- sofa_dict [", 0.0], [", v2 )", 0.0], ["-1 ] )", 0.0], [". available", 0.0], [". copy ( )", 0.0], [". copy (", 0.0], [". copy", 0.0], [", v ) #NEWLINE#", 0.0], [". ceil (", 0.0], [". ceil", 0.0], [". append ( n", 0.0], [", v ] )", 0.0], [", v ) )", 0.0], [". append ( list", 0.0], [", v =", 0.0], [". append ( l", 0.0], [". append ( k", 0.0], [", v ]", 0.0], [". count", 0.0], [". count (", 0.0], [". count ( \")\"", 0.0], [". count ( 'a'", 0.0], [", v )", 0.0], [". count ( 'c'", 0.0], [". count ( 'g'", 0.0], [", v", 0.0], [". count ( 't'", 0.0], [". count ( s", 0.0], [". discard", 0.0], [". discard (", 0.0], [". discard ( x", 0.0], [". dot", 0.0], [". dot (", 0.0], [". dot ( vectors", 0.0], [". find", 0.0], [". append ( int", 0.0], [". append ( i", 0.0], ["-1 ] ) #NEWLINE#", 0.0], ["-= 1 #NEWLINE#", 0.0], ["-= b #NEWLINE#", 0.0], ["-= b", 0.0], ["-= a #NEWLINE#", 0.0], ["-= a", 0.0], ["-= 1 #NEWLINE# ;", 0.0], ["-= 1 #NEWLINE# #DEDENT#", 0.0], ["-= 1", 0.0], [". append ( a", 0.0], ["-=", 0.0], ["-2 ]", 0.0], ["-2", 0.0], ["-1 ] ,", 0.0], ["-1 ] +", 0.0], ["- m", 0.0], ["-= k", 0.0], ["-= min", 0.0], ["-= min (", 0.0], [", v2", 0.0], [", v in", 0.0], ["-= min ( l", 0.0], [".", 0.0], [". #NEWLINE#", 0.0], [". add", 0.0], [". add (", 0.0], [". add ( (", 0.0], [". add ( i", 0.0], [". add ( x", 0.0], [". append", 0.0], [". append (", 0.0], [". append ( (", 0.0], [". append ( [", 0.0], ["- max", 0.0], ["- l", 0.0], [", w , b", 0.0], ["- ( 0 if", 0.0], ["- 1 #NEWLINE#", 0.0], ["- 1", 0.0], ["- * - coding", 0.0], ["- * - #NEWLINE#", 0.0], ["- * -", 0.0], ["- *", 0.0], ["- ( 0", 0.0], [", { } ,", 0.0], [", x , temp", 0.0], ["- (", 0.0], [", x , y", 0.0], ["- #NEWLINE#", 0.0], [", x =", 0.0], [", x = map", 0.0], ["- 1 #NEWLINE# #DEDENT#", 0.0], ["- 1 #NEWLINE# if", 0.0], ["- 1 #NEWLINE# print", 0.0], [", x , pos", 0.0], [", x ,", 0.0], ["- 1 ) #NEWLINE#", 0.0], ["- 1 ) )", 0.0], ["- 1 ) *", 0.0], ["- 1 ) //", 0.0], ["- 1 ) :", 0.0], ["- 1 ,", 0.0], ["- 1 , -1", 0.0], ["- 1 , n", 0.0], ["- 1 -", 0.0], ["- 1 - i", 0.0], ["- 1 :", 0.0], ["- 1 : #INDENT#", 0.0], [", { } ]", 0.0], [", { }", 0.0], ["- len (", 0.0], [", y , l", 0.0], [", y =", 0.0], [", y - 1", 0.0], [", y -", 0.0], [", y , z", 0.0], [", y , x2", 0.0], [", y , vx", 0.0], [", y ,", 0.0], [", x [", 0.0], [", y **", 0.0], [", y ) :", 0.0], [", x2 ,", 0.0], [", x2 , y2", 0.0], [", y", 0.0], [", y ) )", 0.0], [", y = i", 0.0], [", y = list", 0.0], [", y = map", 0.0], [", y ]", 0.0], [", y1", 0.0], [", y1 )", 0.0], [", y1 ) )", 0.0], [", y2", 0.0], [", x2", 0.0], [", y2 )", 0.0], [", y2 =", 0.0], [", yhit", 0.0], [", z", 0.0], [", z =", 0.0], [", x [ 1", 0.0], [", z = map", 0.0], [", {", 0.0], ["- 1 ]", 0.0], ["- 1 ] #NEWLINE#", 0.0], ["- 1 ] )", 0.0], [", wr #NEWLINE#", 0.0], ["- i )", 0.0], ["- i", 0.0], ["- d", 0.0], ["- cur [", 0.0], ["- cur", 0.0], ["- compression [", 0.0], ["- compression", 0.0], ["- 1 ] +", 0.0], ["- coding : utf-8", 0.0], ["- coding :", 0.0], [", wr #NEWLINE# hr", 0.0], ["- coding", 0.0], ["- chk_r", 0.0], ["- chk1", 0.0], ["- i *", 0.0], ["- i +", 0.0], ["- i + 1", 0.0], ["- i ]", 0.0], [", wr", 0.0], [", wb = wb", 0.0], ["- inf", 0.0], [", wb =", 0.0], ["- int", 0.0], ["- int (", 0.0], ["- j", 0.0], [", wb", 0.0], ["- j )", 0.0], ["- k", 0.0], ["- k )", 0.0], [", y )", 0.0], ["- len", 0.0], ["- c ) #NEWLINE#", 0.0], [". floor", 0.0], ["- c )", 0.0], [", x ) )", 0.0], ["- 1 ] :", 0.0], [", x + 1", 0.0], ["- 1 ] ==", 0.0], ["- 1 ] [", 0.0], ["- 2", 0.0], ["- 2 #NEWLINE#", 0.0], ["- 2 )", 0.0], ["- 2 *", 0.0], ["- 2 * k", 0.0], ["- 2 * r", 0.0], [", x +", 0.0], ["- 2 ,", 0.0], ["- 2 , -1", 0.0], ["- 2 , mod", 0.0], ["- 2 ]", 0.0], ["- c", 0.0], [", x ) #NEWLINE#", 0.0], ["- 3", 0.0], [", x )", 0.0], ["- 3 )", 0.0], [", x", 0.0], ["- 3 ) //", 0.0], ["- a", 0.0], ["- a )", 0.0], ["- a //", 0.0], ["- a [", 0.0], ["- a [ i", 0.0], ["- b", 0.0], ["- b )", 0.0], ["- b *", 0.0], [". find (", 0.0], [". keys (", 0.0], [". floor (", 0.0], ["0 ] , 2", 0.0], ["0 ] :", 0.0], ["0 ] -= min", 0.0], ["0 ] -=", 0.0], ["0 ] - a", 0.0], ["0 ] -", 0.0], ["0 ] , guy", 0.0], ["0 ] , boi", 0.0], ["0 ] ,", 0.0], ["0 ] ) +", 0.0], ["0 ] + dists", 0.0], ["0 ] +", 0.0], ["0 ] * n", 0.0], ["0 ] * m", 0.0], ["0 ] * k", 0.0], ["0 ] * (", 0.0], ["0 ] *", 0.0], ["0 ] : #INDENT#", 0.0], ["0 ] <", 0.0], ["0 ] <=", 0.0], ["0 ] <= 0", 0.0], ["0 ] [ tup", 0.0], ["0 ] [ c", 0.0], ["0 ] [ 3", 0.0], ["0 ] [ 1", 0.0], ["0 ] [ 0", 0.0], ["0 ] [ (", 0.0], ["0 ] [", 0.0], ["0 ] >=", 0.0], ["0 ] == board", 0.0], ["0 ] == '8'", 0.0], ["0 ] == '-'", 0.0], ["0 ] ==", 0.0], ["0 ] = 1", 0.0], ["0 ] =", 0.0], ["0 ] <= compression", 0.0], ["0 ] ) -", 0.0], ["0 ] ) #NEWLINE#", 0.0], ["0 ] and", 0.0], ["0 )", 0.0], ["0 , 0 ,", 0.0], ["0 , 0 #NEWLINE#", 0.0], ["0 , 0", 0.0], ["0 ,", 0.0], ["0 ) #NEWLINE# return", 0.0], ["0 ) #NEWLINE# #DEDENT#", 0.0], ["0 ) #NEWLINE#", 0.0], ["0 #NEWLINE# while n", 0.0], ["0 ] )", 0.0], ["0 #NEWLINE# while", 0.0], ["0 #NEWLINE# n =", 0.0], ["0 #NEWLINE# n", 0.0], ["0 #NEWLINE# if", 0.0], ["0 #NEWLINE# for i", 0.0], ["0 #NEWLINE# for", 0.0], ["0 #NEWLINE# cnt =", 0.0], ["0 , 0 ]", 0.0], ["0 :", 0.0], ["0 : #INDENT# a", 0.0], ["0 : #INDENT# break", 0.0], ["0 ] #NEWLINE# if", 0.0], ["0 ] #NEWLINE# for", 0.0], ["0 ] #NEWLINE# #DEDENT#", 0.0], ["0 ] #NEWLINE#", 0.0], ["0 ]", 0.0], ["0 <=", 0.0], ["0 : k", 0.0], ["0 : #INDENT# x", 0.0], ["0 : #INDENT# s", 0.0], ["0 : #INDENT# return", 0.0], ["0 : #INDENT# ret", 0.0], ["0 : #INDENT# print", 0.0], ["0 : #INDENT# n", 0.0], ["0 : #INDENT# if", 0.0], ["0 : #INDENT# c", 0.0], ["0 ] ]", 0.0], ["0 and", 0.0], ["0 #NEWLINE# #DEDENT# if", 0.0], ["1 #NEWLINE# ;", 0.0], ["1 #NEWLINE# break #NEWLINE#", 0.0], ["1 #NEWLINE# break", 0.0], ["1 #NEWLINE# b =", 0.0], ["1 #NEWLINE# b", 0.0], ["1 #NEWLINE# ans =", 0.0], ["1 #NEWLINE# ans", 0.0], ["1 #NEWLINE# a", 0.0], ["1 #NEWLINE# #DEDENT# while", 0.0], ["1 #NEWLINE# #DEDENT# elif", 0.0], ["1 #NEWLINE# #DEDENT# t2", 0.0], ["1 #NEWLINE# #DEDENT# return", 0.0], ["1 #NEWLINE# #DEDENT# print", 0.0], ["1 #NEWLINE# #DEDENT# otherwise", 0.0], ["1 #NEWLINE# #DEDENT# if", 0.0], ["1 #NEWLINE# #DEDENT# i", 0.0], ["1 #NEWLINE# #DEDENT# for", 0.0], ["1 #NEWLINE# c", 0.0], ["1 #NEWLINE# c +=", 0.0], ["1 #NEWLINE# calculate", 0.0], ["1 #NEWLINE# calculate the", 0.0], ["1 #NEWLINE# j", 0.0], ["1 #NEWLINE# if the", 0.0], ["1 #NEWLINE# if s", 0.0], ["1 #NEWLINE# if not", 0.0], ["1 #NEWLINE# if m", 0.0], ["1 #NEWLINE# if (", 0.0], ["1 #NEWLINE# if", 0.0], ["1 #NEWLINE# for i", 0.0], ["1 #NEWLINE# for", 0.0], ["1 #NEWLINE# fence [", 0.0], ["1 #NEWLINE# fence", 0.0], ["1 #NEWLINE# f =", 0.0], ["1 #NEWLINE# f", 0.0], ["1 #NEWLINE# co1 =", 0.0], ["1 #NEWLINE# co1", 0.0], ["1 #NEWLINE# #DEDENT# else", 0.0], ["1 #NEWLINE# #DEDENT# calculate", 0.0], ["0 and a", 0.0], ["0 else 0 #NEWLINE#", 0.0], ["0 if x2", 0.0], ["0 if", 0.0], ["0 for i in", 0.0], ["0 for i", 0.0], ["0 for", 0.0], ["0 else ones [", 0.0], ["0 else ones", 0.0], ["0 else 0", 0.0], ["1 #NEWLINE# #DEDENT#", 0.0], ["0 else", 0.0], ["0 and y", 0.0], ["0 and x", 0.0], ["0 and used [", 0.0], ["0 and used", 0.0], ["0 and s", 0.0], ["0 and a [", 0.0], ["0 if x2 ==", 0.0], ["0 or", 0.0], ["0 or b", 0.0], ["0 or x", 0.0], ["1 #NEWLINE#", 0.0], ["1 != k and", 0.0], ["1 != k :", 0.0], ["1 != k", 0.0], ["1 !=", 0.0], ["0.5 +", 0.0], ["0.5 ) + 1", 0.0], ["0.5 ) +", 0.0], ["0.5 )", 0.0], ["0.5", 0.0], ["0 or zerop ==", 0.0], ["0 or zerop", 0.0], ["0 or y ==", 0.0], ["0 or y", 0.0], ["0 or x ==", 0.0], ["0 #NEWLINE# cnt", 0.0], ["0 #NEWLINE# #DEDENT# else", 0.0], [". format", 0.0], [". replace", 0.0], [". search", 0.0], [". rstrip ( )", 0.0], [". rstrip (", 0.0], [". rstrip", 0.0], [". reqs", 0.0], [". replace ( \"0b\"", 0.0], [". replace (", 0.0], [". remove ( (", 0.0], [". read ( )", 0.0], [". remove (", 0.0], [". remove", 0.0], [". readline ( )", 0.0], [". readline (", 0.0], [". readline #NEWLINE# n", 0.0], [". readline #NEWLINE# #DEDENT#", 0.0], [". readline #NEWLINE#", 0.0], [". search (", 0.0], [". search ( '[a-z]'", 0.0], [". searchsorted", 0.0], [". searchsorted (", 0.0], [". sqrt (", 0.0], [". sqrt", 0.0], [". splitlines ( )", 0.0], [". splitlines (", 0.0], [". splitlines", 0.0], [". split ( )", 0.0], [". split ( '-'", 0.0], [". split ( ' '", 0.0], [". split ( \" \"", 0.0], [". split (", 0.0], [". sort ( key", 0.0], [". sort ( )", 0.0], [". sort (", 0.0], [". searchsorted ( y", 0.0], [". searchsorted ( x", 0.0], [". readline", 0.0], [". read (", 0.0], [". sqrt ( x", 0.0], [". items ( )", 0.0], [". keys ( )", 0.0], [", u )", 0.0], [". keys", 0.0], [". join ( str", 0.0], [". join ( [", 0.0], [". join (", 0.0], [". join", 0.0], [". items (", 0.0], [". read", 0.0], [". items", 0.0], [". inf", 0.0], [". index (", 0.0], [". index", 0.0], [". in_stack", 0.0], [". format ( x", 0.0], [". format (", 0.0], [". ln", 0.0], [". ln (", 0.0], [". ln ( )", 0.0], [". lower", 0.0], [". randint ( 1", 0.0], [". randint (", 0.0], [". randint", 0.0], [". put ( (", 0.0], [". put (", 0.0], [". put", 0.0], [". prec =", 0.0], [". prec", 0.0], [". pop ( ptr", 0.0], [". pop ( )", 0.0], [". pop (", 0.0], [". pop", 0.0], [". number", 0.0], [". lower ( )", 0.0], [". lower (", 0.0], [". sqrt ( (", 0.0], [". stdin", 0.0], ["0 #NEWLINE# #DEDENT# #DEDENT#", 0.0], ["// 7", 0.0], ["// gcd ( a", 0.0], ["// gcd (", 0.0], ["// gcd", 0.0], ["// g", 0.0], ["// d", 0.0], ["// b", 0.0], ["// a", 0.0], ["// 6 #NEWLINE#", 0.0], ["// 2 :", 0.0], ["// 6", 0.0], ["// 4 #NEWLINE#", 0.0], ["// 4", 0.0], ["// 3 #NEWLINE# t3", 0.0], ["// 3 #NEWLINE#", 0.0], ["// 3", 0.0], ["// 2 <=", 0.0], ["// i", 0.0], ["// i )", 0.0], ["// i ) #NEWLINE#", 0.0], ["// k", 0.0], ["0 #NEWLINE# #DEDENT#", 0.0], ["0 #NEWLINE#", 0.0], ["//= g #NEWLINE#", 0.0], ["//= g", 0.0], ["//= 10 #NEWLINE#", 0.0], ["//= 10", 0.0], ["//=", 0.0], ["// x >=", 0.0], ["// x", 0.0], ["// t", 0.0], ["// n #NEWLINE#", 0.0], ["// n", 0.0], ["// lcm", 0.0], ["// k -", 0.0], ["// k #NEWLINE#", 0.0], ["// 2 : #INDENT#", 0.0], ["// 2 -", 0.0], [". stdin .", 0.0], [". tolist (", 0.0], ["/ ( n", 0.0], ["/ (", 0.0], ["/", 0.0], [". unique ( np", 0.0], [". unique (", 0.0], [". unique", 0.0], [". tolist ( )", 0.0], [". tolist", 0.0], ["// 2 +", 0.0], [". t #NEWLINE#", 0.0], [". t", 0.0], [". strip ( )", 0.0], [". strip (", 0.0], [". stdin . readline", 0.0], [". stdin . read", 0.0], [". stdin . buffer", 0.0], ["/ ( n -", 0.0], ["/ ( r", 0.0], ["/ ( r +", 0.0], ["/ 2", 0.0], ["// 2 *", 0.0], ["// 2 ) :", 0.0], ["// 2 ) #NEWLINE#", 0.0], ["// 2 )", 0.0], ["// 2 #NEWLINE# t2", 0.0], ["// 2 #NEWLINE# if", 0.0], ["// 2 #NEWLINE#", 0.0], ["// 2", 0.0], ["// ( 2 **", 0.0], ["// ( 2", 0.0], ["// (", 0.0], ["/ b", 0.0], ["/ 2 ) )", 0.0], ["/ 2 )", 0.0], ["/ 2 #NEWLINE#", 0.0], [", u ) )", 0.0], ["} ]", 0.0], [", u", 0.0], ["+ s +", 0.0], ["+ s2 [", 0.0], ["+ s2", 0.0], ["+ s1 . count", 0.0], ["+ s1 .", 0.0], ["+ s1", 0.0], ["+ s [", 0.0], ["+ s + p", 0.0], ["+ s", 0.0], ["+ n6", 0.0], ["+ right ) //", 0.0], ["+ right )", 0.0], ["+ right", 0.0], ["+ q", 0.0], ["+ p ) #NEWLINE#", 0.0], ["+ p )", 0.0], ["+ p", 0.0], ["+ s2 [ 1", 0.0], ["+ s2 [ 2", 0.0], ["+ s3", 0.0], ["+ s3 [", 0.0], ["+= 1 #NEWLINE# if", 0.0], ["+= 1 #NEWLINE# #DEDENT#", 0.0], ["+= 1 #NEWLINE#", 0.0], ["+= 1", 0.0], ["+= (", 0.0], ["+=", 0.0], ["+ y )", 0.0], ["+ y", 0.0], ["+ t", 0.0], ["+ str (", 0.0], ["+ str", 0.0], ["+ s4 [", 0.0], ["+ s4", 0.0], ["+ s3 [ 2", 0.0], ["+ s3 [ 1", 0.0], ["+ n6 <", 0.0], ["+ n -", 0.0], ["+ abs", 0.0], ["+ d", 0.0], ["+ guy [", 0.0], ["+ guy", 0.0], ["+ dists [ 2", 0.0], ["+ dists [ 1", 0.0], ["+ dists [ 0", 0.0], ["+ dists [", 0.0], ["+ dists", 0.0], ["+ c *", 0.0], ["+ n", 0.0], ["+ c", 0.0], ["+ b *", 0.0], ["+ b )", 0.0], ["+ b #NEWLINE# #DEDENT#", 0.0], ["+ b #NEWLINE#", 0.0], ["+ b", 0.0], ["+ abs ( y", 0.0], ["+ guy [ 3", 0.0], ["+ i", 0.0], ["+ i #NEWLINE#", 0.0], ["+ i #NEWLINE# #DEDENT#", 0.0], ["+ mm )", 0.0], ["+ mm", 0.0], ["+ min (", 0.0], ["+ min", 0.0], ["+ mid #NEWLINE#", 0.0], ["+ mid", 0.0], ["+ m", 0.0], ["+ list (", 0.0], ["+ list", 0.0], ["+ l", 0.0], ["+ k - 1", 0.0], ["+ k -", 0.0], ["+ k ) #NEWLINE#", 0.0], ["+ k )", 0.0], ["+ k", 0.0], ["+= 1 #NEWLINE# n", 0.0], ["+= 1 #NEWLINE# x", 0.0], ["+= 2", 0.0], [", 0 #NEWLINE#", 0.0], [", 0 ] :", 0.0], [", 0 ]", 0.0], [", 0 , 0", 0.0], [", 0 ,", 0.0], [", 0 ) #NEWLINE#", 0.0], [", 0 )", 0.0], [", 0 #NEWLINE# for", 0.0], [", 0", 0.0], ["+= 2 #NEWLINE#", 0.0], [", -2", 0.0], [", -1 , -1", 0.0], [", -1 ,", 0.0], [", -1 ) :", 0.0], [", -1 ) )", 0.0], [", -1 )", 0.0], [", -1", 0.0], [", 1", 0.0], [", 1 )", 0.0], [", 1 ]", 0.0], [", 10", 0.0], [", 5", 0.0], [", 4", 0.0], [", 31 , 30", 0.0], [", 31 ,", 0.0], [", 31", 0.0], [", 30 , 31", 0.0], [", 30 ,", 0.0], [", 30", 0.0], [", 3", 0.0], [", 2 ,", 0.0], [", 2 ) #NEWLINE#", 0.0], [", 2 )", 0.0], [", 2", 0.0], [", 10 +", 0.0], [", 10 **", 0.0], [", (", 0.0], [", 't' ] [", 0.0], [", 't' ]", 0.0], ["+= u", 0.0], ["+= sum", 0.0], ["+= n", 0.0], ["+= min (", 0.0], ["+= min", 0.0], ["+= m", 0.0], ["+= k", 0.0], ["+= i", 0.0], ["+= d", 0.0], ["+= cnt [", 0.0], ["+= cnt", 0.0], ["+= abs (", 0.0], ["+= abs", 0.0], ["+= a #NEWLINE# #DEDENT#", 0.0], ["+= a #NEWLINE#", 0.0], ["+= a", 0.0], ["+= sum (", 0.0], [", \"\"", 0.0], [", 't'", 0.0], [", \"\" )", 0.0], [", 'right' ) -", 0.0], [", 'right' )", 0.0], [", 'right'", 0.0], [", 'g' , 't'", 0.0], [", 'g' ,", 0.0], [", 'g'", 0.0], [", 'c' , 'g'", 0.0], [", 'c' ,", 0.0], [", 'c'", 0.0], [", '.' ] ,", 0.0], [", '.' ]", 0.0], [", '.' , '.'", 0.0], [", '.' ,", 0.0], [", '.'", 0.0], [", ''", 0.0], ["+ abs (", 0.0], ["+ a [ i", 0.0], [", tiles ) )", 0.0], ["* value ,", 0.0], ["* x . ln", 0.0], ["* x .", 0.0], ["* x )", 0.0], ["* x", 0.0], ["* wr", 0.0], ["* wb", 0.0], ["* value , sep", 0.0], ["* value", 0.0], ["* random . randint", 0.0], ["* v2 [", 0.0], ["* v2", 0.0], ["* v #NEWLINE#", 0.0], ["* v", 0.0], ["* t [", 0.0], ["* t", 0.0], ["* s )", 0.0], ["* x_y", 0.0], ["* x_y [", 0.0], ["* x_y [ 1", 0.0], ["* y", 0.0], ["** 0.5 )", 0.0], ["** 0.5", 0.0], ["** ( n -", 0.0], ["** ( n", 0.0], ["** ( 1 /", 0.0], ["** ( 1", 0.0], ["** (", 0.0], ["**", 0.0], ["* z . ln", 0.0], ["* z .", 0.0], ["* z", 0.0], ["* y . ln", 0.0], ["* y .", 0.0], ["* y ) *", 0.0], ["* y )", 0.0], ["* s", 0.0], ["* random .", 0.0], ["+ a [", 0.0], ["* m", 0.0], ["* math", 0.0], ["* m2", 0.0], ["* m for _", 0.0], ["* m for", 0.0], ["* m -", 0.0], ["* m +", 0.0], ["* m #NEWLINE#", 0.0], ["* level_coeff #NEWLINE#", 0.0], ["* random", 0.0], ["* level_coeff", 0.0], ["* leny for _", 0.0], ["* leny for", 0.0], ["* leny", 0.0], ["* len", 0.0], ["* k // 2", 0.0], ["* k //", 0.0], ["* math .", 0.0], ["* n", 0.0], ["* n #NEWLINE#", 0.0], ["* n #NEWLINE# for", 0.0], ["* r )", 0.0], ["* r", 0.0], ["* q [ -1", 0.0], ["* q [", 0.0], ["* q", 0.0], ["* pow ( 3", 0.0], ["* pow ( 2", 0.0], ["* pow (", 0.0], ["* pow", 0.0], ["* p ) #NEWLINE#", 0.0], ["* p )", 0.0], ["* p", 0.0], ["* n : #INDENT#", 0.0], ["* n :", 0.0], ["* n +", 0.0], ["** 0.5 ) +", 0.0], ["** 0.5 +", 0.0], ["** 2", 0.0], ["+ 1 , maxj", 0.0], ["+ 1 ] )", 0.0], ["+ 1 ] #NEWLINE#", 0.0], ["+ 1 ]", 0.0], ["+ 1 >= compression", 0.0], ["+ 1 >=", 0.0], ["+ 1 : ]", 0.0], ["+ 1 :", 0.0], ["+ 1 , maxi", 0.0], ["** 2 )", 0.0], ["+ 1 , j", 0.0], ["+ 1 ,", 0.0], ["+ 1 ) }", 0.0], ["+ 1 ) if", 0.0], ["+ 1 ) :", 0.0], ["+ 1 ) //", 0.0], ["+ 1 ) +", 0.0], ["+ 1 ] +", 0.0], ["+ 1 ] -", 0.0], ["+ 1 ] .", 0.0], ["+ 1 ] :", 0.0], ["+ a ,", 0.0], ["+ a", 0.0], ["+ [", 0.0], ["+ 7 ) )", 0.0], ["+ 7 )", 0.0], ["+ 7", 0.0], ["+ 5", 0.0], ["+ 3", 0.0], ["+ 2 ) %", 0.0], ["+ 2 )", 0.0], ["+ 2 #NEWLINE#", 0.0], ["+ 2", 0.0], ["+ 1 ] [", 0.0], ["+ 1 ] ==", 0.0], ["+ 1 ] =", 0.0], ["+ 1 ) *", 0.0], ["+ 1 ) )", 0.0], ["+ 1 ) %", 0.0], ["** z ,", 0.0], ["** z", 0.0], ["** y ,", 0.0], ["** y )", 0.0], ["** y", 0.0], ["** x ,", 0.0], ["** x )", 0.0], ["** x", 0.0], ["** k", 0.0], ["** i for i", 0.0], ["** i for", 0.0], ["** i", 0.0], ["** 9 + 7", 0.0], ["** 9 +", 0.0], ["** 9", 0.0], ["** 2 ) #NEWLINE#", 0.0], ["** z )", 0.0], ["*=", 0.0], ["+ 1 ) #NEWLINE#", 0.0], ["*= 2", 0.0], ["+ 1 )", 0.0], ["+ 1 #NEWLINE# if", 0.0], ["+ 1 #NEWLINE# #DEDENT#", 0.0], ["+ 1 #NEWLINE#", 0.0], ["+ 1 != k", 0.0], ["+ 1 !=", 0.0], ["+ 1", 0.0], ["+ ( n -", 0.0], ["+ ( n", 0.0], ["+ (", 0.0], ["+ '' . join", 0.0], ["+ '' .", 0.0], ["+ ''", 0.0], ["*= 2 #NEWLINE# #DEDENT#", 0.0], ["*= 2 #NEWLINE#", 0.0], [", 6", 0.0], [", 6 )", 0.0], [", 7", 0.0], [", n", 0.0], [", n -", 0.0], [", n ,", 0.0], [", n + 1", 0.0], [", n +", 0.0], [", n ) :", 0.0], [", n ) )", 0.0], [", n )", 0.0], [", mod - 2", 0.0], [", maxi )", 0.0], [", mod -", 0.0], [", mod ) %", 0.0], [", mod )", 0.0], [", mod", 0.0], [", mm", 0.0], [", maxj ) if", 0.0], [", maxj )", 0.0], [", n - 1", 0.0], [", n //", 0.0], [", np", 0.0], [", p", 0.0], [", q )", 0.0], [", q", 0.0], [", ptr ) #NEWLINE#", 0.0], [", ptr )", 0.0], [", ptr", 0.0], [", print -1 #NEWLINE#", 0.0], [", print -1", 0.0], [", print", 0.0], [", pos , l", 0.0], [", pos", 0.0], [", p = map", 0.0], [", p =", 0.0], [", p ,", 0.0], [", p ) #NEWLINE#", 0.0], [", p )", 0.0], [", maxj", 0.0], [", maxi", 0.0], [", 8", 0.0], [", l =", 0.0], [", locs [ i", 0.0], [", locs [", 0.0], [", locs", 0.0], [", len ( a", 0.0], [", len (", 0.0], [", len", 0.0], [", l = map", 0.0], [", l , r", 0.0], [", math", 0.0], [", l ,", 0.0], [", l ) :", 0.0], [", l ) )", 0.0], [", l ) #NEWLINE#", 0.0], [", l )", 0.0], [", l", 0.0], [", key = sum", 0.0], [", m", 0.0], [", m )", 0.0], [", m ) #NEWLINE#", 0.0], [", m ,", 0.0], [", mask , colors", 0.0], [", mask , c", 0.0], [", mask ,", 0.0], [", mask ) :", 0.0], [", mask ) #NEWLINE#", 0.0], [", mask )", 0.0], [", mask", 0.0], [", m2 )", 0.0], [", m2", 0.0], [", m = map", 0.0], [", m = list", 0.0], [", m =", 0.0], [", m , x", 0.0], [", m , r", 0.0], [", m , k", 0.0], [", q ,", 0.0], [", q , l", 0.0], [", q =", 0.0], [", sep='\\t '", 0.0], [", sys", 0.0], [", stdout #NEWLINE#", 0.0], [", stdout", 0.0], [", stdin . readline", 0.0], [", stdin .", 0.0], [", stdin", 0.0], [", sep='\\t ' )", 0.0], [", sep='\\t", 0.0], [", q = map", 0.0], [", sep =", 0.0], [", sep", 0.0], [", sec [", 0.0], [", sec", 0.0], [", s3 =", 0.0], [", s3", 0.0], [", s = map", 0.0], [", sys .", 0.0], [", sys . stdin", 0.0], [", t", 0.0], ["1 #NEWLINE# j +=", 0.0], [", tiles )", 0.0], [", tiles", 0.0], [", they deny the", 0.0], [", they deny", 0.0], [", they", 0.0], [", then", 0.0], [", the", 0.0], [", temp ) )", 0.0], [", temp )", 0.0], [", temp", 0.0], [", t [", 0.0], [", t = map", 0.0], [", t =", 0.0], [", t ) :", 0.0], [", t ) #NEWLINE#", 0.0], [", s =", 0.0], [", s .", 0.0], [", s , r", 0.0], [", r_2", 0.0], [", r in", 0.0], [", r ]", 0.0], [", r = map", 0.0], [", r = list", 0.0], [", r =", 0.0], [", r , x", 0.0], [", r , p", 0.0], [", r , k", 0.0], [", r ,", 0.0], [", r + 1", 0.0], [", r +", 0.0], [", r ) :", 0.0], [", r ) #NEWLINE#", 0.0], [", r )", 0.0], [", r", 0.0], [", r in lr", 0.0], [", reqs", 0.0], [", s , p", 0.0], [", rest", 0.0], [", s ,", 0.0], [", s ) :", 0.0], [", s ) #NEWLINE#", 0.0], [", s )", 0.0], [", s", 0.0], [", right ) #NEWLINE#", 0.0], [", right )", 0.0], [", right", 0.0], [", reverse = true", 0.0], [", reverse =", 0.0], [", reverse", 0.0], [", return the", 0.0], [", return impossible #NEWLINE#", 0.0], [", return impossible", 0.0], [", return", 0.0], [", key = lambda", 0.0], [", key =", 0.0], [", key", 0.0], [", b2", 0.0], [", best", 0.0], [", b3 ,", 0.0], [", b3 )", 0.0], [", b3", 0.0], [", b2 = map", 0.0], [", b2 =", 0.0], [", b2 ,", 0.0], [", b1 = map", 0.0], [", c3", 0.0], [", b1 =", 0.0], [", b1 , a2", 0.0], [", b1 ,", 0.0], [", b1", 0.0], [", b = map", 0.0], [", b = list", 0.0], [", b = b", 0.0], [", best [", 0.0], [", best [ 1", 0.0], [", best [ 2", 0.0], [", bl", 0.0], [", c2", 0.0], [", c = map", 0.0], [", c = list", 0.0], [", c =", 0.0], [", c , colors", 0.0], [", c ,", 0.0], [", c + 1", 0.0], [", c +", 0.0], [", c ) #NEWLINE#", 0.0], [", c )", 0.0], [", c", 0.0], [", boi [ 1", 0.0], [", boi [ 0", 0.0], [", boi [", 0.0], [", boi", 0.0], [", b =", 0.0], [", b , s", 0.0], [", b , c", 0.0], [", a =", 0.0], [", a ,", 0.0], [", a + 1", 0.0], [", a +", 0.0], [", a ) #NEWLINE#", 0.0], [", a )", 0.0], [", a % b", 0.0], [", a %", 0.0], [", a", 0.0], [", \\\n", 0.0], [", [ ] ,", 0.0], [", [ ]", 0.0], [", [ ( z", 0.0], [", [ (", 0.0], [", [", 0.0], [", 9", 0.0], [", a , b", 0.0], [", a [", 0.0], [", b ,", 0.0], [", a [ i", 0.0], [", b + 1", 0.0], [", b +", 0.0], [", b ) ==", 0.0], [", b ) :", 0.0], [", b ) #NEWLINE#", 0.0], [", b )", 0.0], [", b", 0.0], [", abs (", 0.0], [", abs", 0.0], [", a3 , b3", 0.0], [", a3 ,", 0.0], [", a3", 0.0], [", a2 , b2", 0.0], [", a2 ,", 0.0], [", a2", 0.0], [", c2 ,", 0.0], [", cd2", 0.0], [", k = map", 0.0], [", int ( input", 0.0], [", j ) )", 0.0], [", j ) #NEWLINE#", 0.0], [", j )", 0.0], [", j", 0.0], [", it 's", 0.0], [", it", 0.0], [", int ( n", 0.0], [", int ( (", 0.0], [", cd3", 0.0], [", int (", 0.0], [", int", 0.0], [", input ( )", 0.0], [", input (", 0.0], [", input", 0.0], [", index", 0.0], [", i *", 0.0], [", j ) ]", 0.0], [", j +", 0.0], [", j + 1", 0.0], [", j ,", 0.0], [", k = list", 0.0], [", k = [", 0.0], [", k =", 0.0], [", k , x", 0.0], [", k , s", 0.0], [", k , m", 0.0], [", k , a", 0.0], [", k ,", 0.0], [", k ) :", 0.0], [", k ) ,", 0.0], [", k ) #NEWLINE#", 0.0], [", k )", 0.0], [", k", 0.0], [", j , k", 0.0], [", j , boi", 0.0], [", i ) )", 0.0], [", i ) #NEWLINE#", 0.0], [", i )", 0.0], [", end = ''", 0.0], [", end", 0.0], [", e , f", 0.0], [", e ,", 0.0], [", e", 0.0], [", d = map", 0.0], [", d =", 0.0], [", d ,", 0.0], [", d ) #NEWLINE#", 0.0], [", d )", 0.0], [", d", 0.0], [", colors ) :", 0.0], [", colors )", 0.0], [", colors", 0.0], [", cnt )", 0.0], [", cnt", 0.0], [", end =", 0.0], [", f", 0.0], [", i", 0.0], [", f ,", 0.0], [", hr", 0.0], [", hb", 0.0], [", guy [ 3", 0.0], [", guy [ 1", 0.0], [", guy [", 0.0], [", guy", 0.0], [", graph , mask", 0.0], [", graph ,", 0.0], [", graph", 0.0], [", g ( 3", 0.0], [", g ( 2", 0.0], [", g (", 0.0], [", g", 0.0], [", f = map", 0.0], [", f =", 0.0], [", t )", 0.0], ["1 #NEWLINE# s =", 0.0], ["1 #NEWLINE# k", 0.0], ["= s . count", 0.0], ["= s1 [ 0", 0.0], ["= s1 [", 0.0], ["= s1", 0.0], ["= s [ i", 0.0], ["= s [ -1", 0.0], ["= s [", 0.0], ["= s . find", 0.0], ["= s .", 0.0], ["= q +", 0.0], ["= s", 0.0], ["= res", 0.0], ["= r ( )", 0.0], ["= r (", 0.0], ["= r", 0.0], ["= queue .", 0.0], ["= queue", 0.0], ["= s1 [ 1", 0.0], ["= s1 [ 2", 0.0], ["= s1 [ 3", 0.0], ["= s2", 0.0], ["= sorted", 0.0], ["= solve (", 0.0], ["= solve", 0.0], ["= sol_2 [", 0.0], ["= sol_2", 0.0], ["= sol_1 [", 0.0], ["= sol_1", 0.0], ["= set ( map", 0.0], ["= set ( [", 0.0], ["= set ( )", 0.0], ["= set (", 0.0], ["= set", 0.0], ["= sec [", 0.0], ["= sec", 0.0], ["= s2 [", 0.0], ["= q + [", 0.0], ["= q", 0.0], ["= sorted ( l", 0.0], ["= min ( r", 0.0], ["= n -", 0.0], ["= n +", 0.0], ["= n #NEWLINE# while", 0.0], ["= n #NEWLINE# for", 0.0], ["= n #NEWLINE# #DEDENT#", 0.0], ["= n #NEWLINE#", 0.0], ["= n", 0.0], ["= min ( best", 0.0], ["= pretochange . pop", 0.0], ["= min ( ans", 0.0], ["= min ( a", 0.0], ["= min ( (", 0.0], ["= min (", 0.0], ["= min", 0.0], ["= middle #NEWLINE# #DEDENT#", 0.0], ["= middle #NEWLINE#", 0.0], ["= n //", 0.0], ["= now", 0.0], ["= np", 0.0], ["= np .", 0.0], ["= pretochange .", 0.0], ["= pretochange", 0.0], ["= prefixids ( a", 0.0], ["= prefixids (", 0.0], ["= prefixids", 0.0], ["= posttochange . pop", 0.0], ["= posttochange .", 0.0], ["= posttochange", 0.0], ["= p *", 0.0], ["= p", 0.0], ["= ones [", 0.0], ["= ones", 0.0], ["= number", 0.0], ["= num_", 0.0], ["= np . searchsorted", 0.0], ["= sorted (", 0.0], ["= sorted ( list", 0.0], ["= '+' #NEWLINE# #DEDENT#", 0.0], ["= w", 0.0], ["= x #NEWLINE# #DEDENT#", 0.0], ["= x #NEWLINE#", 0.0], ["= x", 0.0], ["= wb , wr", 0.0], ["= wb ,", 0.0], ["= wb", 0.0], ["= w *", 0.0], ["= ver [", 0.0], ["= true #NEWLINE# q_append", 0.0], ["= ver", 0.0], ["= v1 [", 0.0], ["= v1", 0.0], ["= v", 0.0], ["= twos [", 0.0], ["= twos", 0.0], ["= true ) #NEWLINE#", 0.0], ["= x *", 0.0], ["= x * x", 0.0], ["= x ,", 0.0], ["= x , y", 0.0], ["= { str (", 0.0], ["= { str", 0.0], ["= { 0 :", 0.0], ["= { 0", 0.0], ["= { \"x\" :", 0.0], ["= { \"x\"", 0.0], ["= {", 0.0], ["= z #NEWLINE# #DEDENT#", 0.0], ["= z #NEWLINE#", 0.0], ["= z", 0.0], ["= y", 0.0], ["= x [ 0", 0.0], ["= x [", 0.0], ["= x - s", 0.0], ["= x -", 0.0], ["= true )", 0.0], ["= true #NEWLINE# print", 0.0], ["= start", 0.0], ["= str ( n", 0.0], ["= sum ( int", 0.0], ["= sum ( a", 0.0], ["= sum (", 0.0], ["= sum", 0.0], ["= sufflen #NEWLINE# #DEDENT#", 0.0], ["= sufflen #NEWLINE#", 0.0], ["= sufflen", 0.0], ["= str ( int", 0.0], ["= true #NEWLINE# for", 0.0], ["= str ( final", 0.0], ["= str ( bin", 0.0], ["= str (", 0.0], ["= str", 0.0], ["= statement_order [ i", 0.0], ["= statement_order [", 0.0], ["= statement_order", 0.0], ["= sum ( r", 0.0], ["= sum )", 0.0], ["= sys", 0.0], ["= sys .", 0.0], ["= true #NEWLINE# avt", 0.0], ["= true #NEWLINE# a", 0.0], ["= true #NEWLINE# #DEDENT#", 0.0], ["= true #NEWLINE#", 0.0], ["= tmp . split", 0.0], ["= tmp .", 0.0], ["= tmp", 0.0], ["= tm #NEWLINE# #DEDENT#", 0.0], ["= tm #NEWLINE#", 0.0], ["= tm", 0.0], ["= temp *", 0.0], ["= temp", 0.0], ["= t #NEWLINE#", 0.0], ["= t", 0.0], ["= sys . stdin", 0.0], ["= middle", 0.0], ["= max ( x", 0.0], ["= max ( ma", 0.0], ["= [ 0", 0.0], ["= [ [ int", 0.0], ["= [ [ false", 0.0], ["= [ [ 0", 0.0], ["= [ [", 0.0], ["= [ 1", 0.0], ["= [ 0 ]", 0.0], ["= [ 0 ,", 0.0], ["= [ (", 0.0], ["= 1000", 0.0], ["= 4 #NEWLINE#", 0.0], ["= 4", 0.0], ["= 3", 0.0], ["= 2 *", 0.0], ["= 2 #NEWLINE#", 0.0], ["= 2", 0.0], ["= 1000 * (", 0.0], ["= [ ]", 0.0], ["= [ ] #NEWLINE#", 0.0], ["= [ i", 0.0], ["= [ i for", 0.0], ["= ab3", 0.0], ["= a1", 0.0], ["= a [ i", 0.0], ["= a [ :", 0.0], ["= a [", 0.0], ["= a //", 0.0], ["= a .", 0.0], ["= a +", 0.0], ["= a *", 0.0], ["= a #NEWLINE#", 0.0], ["= a", 0.0], ["= [ list (", 0.0], ["= [ list", 0.0], ["= [ int (", 0.0], ["= [ int", 0.0], ["= 1000 *", 0.0], ["= 10 ** 9", 0.0], ["= max ( ans", 0.0], ["= ( res", 0.0], ["= 0 #NEWLINE#", 0.0], ["= 0", 0.0], ["= -1 #NEWLINE# for", 0.0], ["= -1 #NEWLINE#", 0.0], ["= -1", 0.0], ["= - a", 0.0], ["= -", 0.0], ["= ( n -", 0.0], ["= 10 **", 0.0], ["= ( n", 0.0], ["= ( left +", 0.0], ["= ( left", 0.0], ["= ( l +", 0.0], ["= ( l", 0.0], ["= ( 1", 0.0], ["= ( (", 0.0], ["= 0 #NEWLINE# #DEDENT#", 0.0], ["= 0 #NEWLINE# cnt", 0.0], ["= 0 #NEWLINE# for", 0.0], ["= 0 #NEWLINE# if", 0.0], ["= 10", 0.0], ["= 1 if fence", 0.0], ["= 1 if", 0.0], ["= 1 +", 0.0], ["= 1 #NEWLINE# while", 0.0], ["= 1 #NEWLINE# print", 0.0], ["= 1 #NEWLINE# for", 0.0], ["= 1 #NEWLINE# break", 0.0], ["= 1 #NEWLINE# #DEDENT#", 0.0], ["= 1 #NEWLINE#", 0.0], ["= 1", 0.0], ["= 0 , 0", 0.0], ["= 0 ,", 0.0], ["= 0 #NEWLINE# while", 0.0], ["= 0 #NEWLINE# n", 0.0], ["= abs", 0.0], ["= abs (", 0.0], ["= abs ( a", 0.0], ["= l", 0.0], ["= len ( [", 0.0], ["= len (", 0.0], ["= lambda x :", 0.0], ["= lambda x", 0.0], ["= lambda : list", 0.0], ["= lambda :", 0.0], ["= lambda", 0.0], ["= k #NEWLINE# #DEDENT#", 0.0], ["= al", 0.0], ["= k #NEWLINE#", 0.0], ["= k", 0.0], ["= int ( num_str", 0.0], ["= int ( n", 0.0], ["= int ( line", 0.0], ["= int ( input", 0.0], ["= int ( (", 0.0], ["= len ( a", 0.0], ["= len ( s", 0.0], ["= linedata", 0.0], ["= list (", 0.0], ["= max ( 1", 0.0], ["= max (", 0.0], ["= max", 0.0], ["= math .", 0.0], ["= math", 0.0], ["= map (", 0.0], ["= m -", 0.0], ["= m + 1", 0.0], ["= m +", 0.0], ["= m #NEWLINE# #DEDENT#", 0.0], ["= m #NEWLINE#", 0.0], ["= m", 0.0], ["= lt", 0.0], ["= list ( range", 0.0], ["= list ( map", 0.0], ["= int (", 0.0], ["= input ( )", 0.0], ["= input (", 0.0], ["= exgcd (", 0.0], ["= d", 0.0], ["= counter (", 0.0], ["= counter", 0.0], ["= c #NEWLINE# #DEDENT#", 0.0], ["= c #NEWLINE#", 0.0], ["= c", 0.0], ["= bool (", 0.0], ["= bool", 0.0], ["= b [", 0.0], ["= b //", 0.0], ["= b , a", 0.0], ["= b ,", 0.0], ["= b #NEWLINE#", 0.0], ["= b", 0.0], ["= al .", 0.0], ["= exgcd", 0.0], ["= f", 0.0], ["= i #NEWLINE# #DEDENT#", 0.0], ["= false", 0.0], ["= i #NEWLINE#", 0.0], ["= i", 0.0], ["= gcd (", 0.0], ["= gcd", 0.0], ["= g (", 0.0], ["= g", 0.0], ["= floor (", 0.0], ["= floor", 0.0], ["= float ( 'inf'", 0.0], ["= float (", 0.0], ["= float", 0.0], ["= false #NEWLINE# if", 0.0], ["= false #NEWLINE# for", 0.0], ["= false #NEWLINE# #DEDENT#", 0.0], ["= false #NEWLINE#", 0.0], ["= { }", 0.0], ["= { } #NEWLINE#", 0.0], ["==", 0.0], ["[ 3 :", 0.0], ["[ :", 0.0], ["[ 3 ] [", 0.0], ["[ 3 ] ==", 0.0], ["[ 3 ] +", 0.0], ["[ 3 ] #NEWLINE#", 0.0], ["[ 3 ]", 0.0], ["[ 3 : ]", 0.0], ["[ 3", 0.0], ["[ 1 for", 0.0], ["[ 2 ] ]", 0.0], ["[ 2 ] [", 0.0], ["[ 2 ] ==", 0.0], ["[ 2 ] :", 0.0], ["[ 2 ] +", 0.0], ["[ 2 ]", 0.0], ["[ 2", 0.0], ["[ : -1", 0.0], ["[ : -1 ]", 0.0], ["[ : 3", 0.0], ["[ : 3 ]", 0.0], ["[ ] #NEWLINE# for", 0.0], ["[ ] #NEWLINE# #DEDENT#", 0.0], ["[ ] #NEWLINE#", 0.0], ["[ ]", 0.0], ["[ [ int (", 0.0], ["[ [ int", 0.0], ["[ [ false ]", 0.0], ["[ [ false", 0.0], ["[ [ 0 ]", 0.0], ["[ [ 0", 0.0], ["[ [", 0.0], ["[ : ] #NEWLINE#", 0.0], ["[ : ]", 0.0], ["[ : : -1", 0.0], ["[ : :", 0.0], ["[ 1 for i", 0.0], ["[ 1 ] [", 0.0], ["[ -1", 0.0], ["[ 0 :", 0.0], ["[ 0 ] ,", 0.0], ["[ 0 ] +", 0.0], ["[ 0 ] *", 0.0], ["[ 0 ] )", 0.0], ["[ 0 ] #NEWLINE#", 0.0], ["[ 0 ]", 0.0], ["[ 0 : k", 0.0], ["[ 0 , 0", 0.0], ["[ 1 ] ==", 0.0], ["[ 0 ,", 0.0], ["[ 0", 0.0], ["[ -2 ]", 0.0], ["[ -2", 0.0], ["[ -1 ] +", 0.0], ["[ -1 ] )", 0.0], ["[ -1 ] #NEWLINE#", 0.0], ["[ 0 ] -", 0.0], ["[ 0 ] -=", 0.0], ["[ 0 ] :", 0.0], ["[ 0 ] <", 0.0], ["[ 1 ] :", 0.0], ["[ 1 ] -", 0.0], ["[ 1 ] ,", 0.0], ["[ 1 ] +", 0.0], ["[ 1 ] )", 0.0], ["[ 1 ] #NEWLINE#", 0.0], ["[ 1 ]", 0.0], ["[ 1 : ]", 0.0], ["[ 1 :", 0.0], ["[ 1 ,", 0.0], ["[ 1", 0.0], ["[ 0 ] [", 0.0], ["[ 0 ] ==", 0.0], ["[ 0 ] =", 0.0], ["[ 0 ] <=", 0.0], ["[ ] #NEWLINE# if", 0.0], ["[ ] #NEWLINE# while", 0.0], ["[ ] ,", 0.0], ["[ j ] #NEWLINE#", 0.0], ["[ j ] [", 0.0], ["[ j ] ==", 0.0], ["[ j ] =", 0.0], ["[ j ] :", 0.0], ["[ j ] -", 0.0], ["[ j ] +=", 0.0], ["[ j ] )", 0.0], ["[ j ]", 0.0], ["[ ] , [", 0.0], ["[ j + 1", 0.0], ["[ j +", 0.0], ["[ j", 0.0], ["[ int ( x", 0.0], ["[ int ( input", 0.0], ["[ int ( i", 0.0], ["[ int (", 0.0], ["[ j ] and", 0.0], ["[ k", 0.0], ["[ k -", 0.0], ["[ k - 1", 0.0], ["[ maxi ]", 0.0], ["[ maxi", 0.0], ["[ m", 0.0], ["[ list ( input", 0.0], ["[ list (", 0.0], ["[ list", 0.0], ["[ l ] =", 0.0], ["[ l ]", 0.0], ["[ l , r", 0.0], ["[ l ,", 0.0], ["[ l + 1", 0.0], ["[ l +", 0.0], ["[ l", 0.0], ["[ k ] [", 0.0], ["[ k ]", 0.0], ["[ int", 0.0], ["[ i for i", 0.0], ["[ i for", 0.0], ["[ i ] !=", 0.0], ["[ i - 1", 0.0], ["[ i -", 0.0], ["[ i + 1", 0.0], ["[ i +", 0.0], ["[ i", 0.0], ["[ guy [ 2", 0.0], ["[ guy [", 0.0], ["[ guy", 0.0], ["[ false ] *", 0.0], ["[ false ]", 0.0], ["[ false", 0.0], ["[ c ] ==", 0.0], ["[ c ]", 0.0], ["[ c", 0.0], ["[ a", 0.0], ["[ i :", 0.0], ["[ i ] #NEWLINE#", 0.0], ["[ i ] and", 0.0], ["[ i ] %", 0.0], ["[ i ] ]", 0.0], ["[ i ] [", 0.0], ["[ i ] >=", 0.0], ["[ i ] >", 0.0], ["[ i ] ==", 0.0], ["[ i ] =", 0.0], ["[ i ] <=", 0.0], ["[ i ] <", 0.0], ["[ i ] :", 0.0], ["[ i ] -", 0.0], ["[ i ] ,", 0.0], ["[ i ] +=", 0.0], ["[ i ] +", 0.0], ["[ i ] *", 0.0], ["[ i ] )", 0.0], ["[ -1 ]", 0.0], ["[ -", 0.0], ["== \"1\"", 0.0], ["== [ 1", 0.0], ["== b", 0.0], ["== ar [ i", 0.0], ["== ar [", 0.0], ["== ar", 0.0], ["== a [ i", 0.0], ["== a [", 0.0], ["== a", 0.0], ["== [ 0", 0.0], ["== 1 : #INDENT#", 0.0], ["== [", 0.0], ["== 3 : #INDENT#", 0.0], ["== 3 :", 0.0], ["== 3", 0.0], ["== 2 : #INDENT#", 0.0], ["== 2 :", 0.0], ["== 2", 0.0], ["== b :", 0.0], ["== b : #INDENT#", 0.0], ["== board", 0.0], ["== board [", 0.0], ["== none : #INDENT#", 0.0], ["== none :", 0.0], ["== none", 0.0], ["== n : #INDENT#", 0.0], ["== n :", 0.0], ["== n", 0.0], ["== len (", 0.0], ["== len", 0.0], ["== k :", 0.0], ["== k", 0.0], ["== board [ r", 0.0], ["== board [ 3", 0.0], ["== board [ 2", 0.0], ["== board [ 1", 0.0], ["== board [ 0", 0.0], ["== 1 or", 0.0], ["== 1 :", 0.0], ["[ ( z", 0.0], ["== \"r\" :", 0.0], ["== '-' :", 0.0], ["== '-'", 0.0], ["== '*'", 0.0], ["== \"u\" : #INDENT#", 0.0], ["== \"u\" :", 0.0], ["== \"u\"", 0.0], ["== \"r\" : #INDENT#", 0.0], ["== \"r\"", 0.0], ["== 1 )", 0.0], ["== \"north\"", 0.0], ["== \"l\" : #INDENT#", 0.0], ["== \"l\" :", 0.0], ["== \"l\"", 0.0], ["== \"d\" : #INDENT#", 0.0], ["== \"d\" :", 0.0], ["== \"d\"", 0.0], ["== '-' : #INDENT#", 0.0], ["== '.'", 0.0], ["== '.' :", 0.0], ["== '.' : #INDENT#", 0.0], ["== 1", 0.0], ["== 0 or", 0.0], ["== 0 else 0", 0.0], ["== 0 else", 0.0], ["== 0 and a", 0.0], ["== 0 and", 0.0], ["== 0 : #INDENT#", 0.0], ["== 0 :", 0.0], ["== 0", 0.0], ["== -1 : #INDENT#", 0.0], ["== -1 :", 0.0], ["== -1", 0.0], ["== 'w' ] )", 0.0], ["== 'w' ]", 0.0], ["== 'w'", 0.0], ["== s", 0.0], ["== s .", 0.0], ["== s [", 0.0], [">= b", 0.0], [">= l", 0.0], [">= k", 0.0], [">= compression [", 0.0], [">= compression", 0.0], [">= c", 0.0], [">= b : #INDENT#", 0.0], [">= b :", 0.0], [">= a", 0.0], ["== s [ i", 0.0], [">= 2 : #INDENT#", 0.0], [">= 2 :", 0.0], [">= 2 *", 0.0], [">= 2", 0.0], [">= 1", 0.0], [">= 0 and used", 0.0], [">= 0 and", 0.0], [">= l and", 0.0], [">= min_grapes", 0.0], [">= min_grapes [", 0.0], [">= n", 0.0], ["[ ( x", 0.0], ["[ ( j +", 0.0], ["[ ( j", 0.0], ["[ ( i ,", 0.0], ["[ ( i +", 0.0], ["[ ( i", 0.0], ["[ (", 0.0], ["[ 'a' , 'c'", 0.0], ["[ 'a' ,", 0.0], ["[ 'a'", 0.0], ["[ '.'", 0.0], ["[ \"name\" ]", 0.0], ["[ \"name\"", 0.0], [">= x", 0.0], [">= s", 0.0], [">= 0 : #INDENT#", 0.0], [">= 0 :", 0.0], [">= 0", 0.0], ["> b : #INDENT#", 0.0], ["> b", 0.0], ["> a", 0.0], ["> 1 : #INDENT#", 0.0], ["> 1 :", 0.0], ["> 1", 0.0], ["> 0 else", 0.0], ["> 0 and", 0.0], ["> 0 : #INDENT#", 0.0], ["> 0 :", 0.0], ["> 0", 0.0], [">", 0.0], ["== x and", 0.0], ["== x : #INDENT#", 0.0], ["== x :", 0.0], ["== x", 0.0], ["> b :", 0.0], ["> k", 0.0], [">= ( n +", 0.0], ["> len", 0.0], [">= ( n", 0.0], [">= (", 0.0], [">=", 0.0], ["> y", 0.0], ["> x or s", 0.0], ["> x or", 0.0], ["> x : #INDENT#", 0.0], ["> x :", 0.0], ["> x", 0.0], ["> shiro_beauty", 0.0], ["> n : #INDENT#", 0.0], ["> n :", 0.0], ["> n", 0.0], ["> min_spheres", 0.0], ["> len (", 0.0], ["= (", 0.0], ["= '+' #NEWLINE#", 0.0], ["1 #NEWLINE# k -=", 0.0], ["10 )", 0.0], ["10 :", 0.0], ["10 +", 0.0], ["10 ** k", 0.0], ["10 ** 9 +", 0.0], ["10 ** 9", 0.0], ["10 ** (", 0.0], ["10 **", 0.0], ["10 #NEWLINE#", 0.0], ["1 for i", 0.0], ["10", 0.0], ["1 or", 0.0], ["1 if fence [", 0.0], ["1 if fence", 0.0], ["1 if", 0.0], ["1 for x in", 0.0], ["1 for x", 0.0], ["100", 0.0], ["100 #NEWLINE#", 0.0], ["1000", 0.0], ["1000 *", 0.0], ["2 #NEWLINE# print", 0.0], ["2 #NEWLINE# k", 0.0], ["2 #NEWLINE# if", 0.0], ["2 #NEWLINE# #DEDENT# #DEDENT#", 0.0], ["2 #NEWLINE# #DEDENT#", 0.0], ["2 #NEWLINE#", 0.0], ["2 != 0 :", 0.0], ["2 != 0", 0.0], ["2 !=", 0.0], ["1e9", 0.0], ["12", 0.0], ["11 :", 0.0], ["11", 0.0], ["1000 * ( l", 0.0], ["1000 * (", 0.0], ["1 for i in", 0.0], ["1 for", 0.0], ["2 #NEWLINE# t2", 0.0], ["1 ] , guy", 0.0], ["1 ] :", 0.0], ["1 ] . append", 0.0], ["1 ] .", 0.0], ["1 ] -= 1", 0.0], ["1 ] -=", 0.0], ["1 ] - compression", 0.0], ["1 ] -", 0.0], ["1 ] ,", 0.0], ["1 and", 0.0], ["1 ] += 1", 0.0], ["1 ] +=", 0.0], ["1 ] + s4", 0.0], ["1 ] + s3", 0.0], ["1 ] + s2", 0.0], ["1 ] + s", 0.0], ["1 ] + dists", 0.0], ["1 ] : #INDENT#", 0.0], ["1 ] <=", 0.0], ["1 ] =", 0.0], ["1 ] ==", 0.0], ["1 ] or", 0.0], ["1 ] ] #NEWLINE#", 0.0], ["1 ] ]", 0.0], ["1 ] [ y", 0.0], ["1 ] [ tup", 0.0], ["1 ] [ j", 0.0], ["1 ] [ i", 0.0], ["1 ] [ c", 0.0], ["1 ] [ 2", 0.0], ["1 ] [ 1", 0.0], ["1 ] [ 0", 0.0], ["1 ] [ (", 0.0], ["1 ] [", 0.0], ["1 ] == board", 0.0], ["1 ] == 1", 0.0], ["2 #NEWLINE# print (", 0.0], ["2 #NEWLINE# t2 -=", 0.0], ["= '+'", 0.0], ["3", 0.0], ["3 #NEWLINE# t3 -=", 0.0], ["3 #NEWLINE# t3", 0.0], ["3 #NEWLINE# n =", 0.0], ["3 #NEWLINE# n ,", 0.0], ["3 #NEWLINE# n", 0.0], ["3 #NEWLINE# k", 0.0], ["3 #NEWLINE#", 0.0], ["24", 0.0], ["2 ] ,", 0.0], ["2 ] ] [", 0.0], ["2 ] ]", 0.0], ["2 ] [ tup", 0.0], ["2 ] [", 0.0], ["2 ] == board", 0.0], ["2 ] ==", 0.0], ["2 ] : #INDENT#", 0.0], ["3 )", 0.0], ["3 ) #NEWLINE#", 0.0], ["3 ) #NEWLINE# #DEDENT#", 0.0], ["3 ) //", 0.0], ["3 ] )", 0.0], ["3 ] #NEWLINE#", 0.0], ["3 ]", 0.0], ["3 == 0 :", 0.0], ["3 == 0", 0.0], ["3 ==", 0.0], ["3 : ]", 0.0], ["3 : #INDENT#", 0.0], ["3 :", 0.0], ["3 -", 0.0], ["3 ,", 0.0], ["3 *", 0.0], ["3 ) : #INDENT#", 0.0], ["3 ) :", 0.0], ["3 ) // 2", 0.0], ["2 ] :", 0.0], ["2 ] + s4", 0.0], ["2 )", 0.0], ["2 ) : #INDENT#", 0.0], ["2 +", 0.0], ["2 **", 0.0], ["2 * r", 0.0], ["2 * k", 0.0], ["2 * b", 0.0], ["2 * a", 0.0], ["2 *", 0.0], ["2 ) :", 0.0], ["2 ] + s3", 0.0], ["2 ) *", 0.0], ["2 ) ) #NEWLINE#", 0.0], ["2 ) )", 0.0], ["2 ) %", 0.0], ["2 ) #NEWLINE# print", 0.0], ["2 ) #NEWLINE# #DEDENT#", 0.0], ["2 ) #NEWLINE#", 0.0], ["2 ,", 0.0], ["2 , -1", 0.0], ["2 , -1 ,", 0.0], ["2 , k", 0.0], ["2 ] + dists", 0.0], ["2 ] +", 0.0], ["2 ] #NEWLINE#", 0.0], ["2 ]", 0.0], ["2 == 0 :", 0.0], ["2 == 0", 0.0], ["2 ==", 0.0], ["2 <=", 0.0], ["2 : #INDENT# print", 0.0], ["2 : #INDENT#", 0.0], ["2 :", 0.0], ["2 //", 0.0], ["2 -", 0.0], ["2 , mod )", 0.0], ["2 , mod", 0.0], ["1 ] + 1", 0.0], ["1 ] +", 0.0], ["1 ] *", 0.0], ["1 ) //", 0.0], ["1 ) for x", 0.0], ["1 ) for", 0.0], ["1 ) [", 0.0], ["1 ) : #INDENT#", 0.0], ["1 ) // n", 0.0], ["1 ) // m", 0.0], ["1 ) // 2", 0.0], ["1 ) ,", 0.0], ["1 ) * (", 0.0], ["1 ) + guy", 0.0], ["1 ) +", 0.0], ["1 ) **", 0.0], ["1 ) * pow", 0.0], ["1 ) * m", 0.0], ["1 ) * k", 0.0], ["1 ) * a", 0.0], ["1 ) if", 0.0], ["1 ) if i", 0.0], ["1 ) or", 0.0], ["1 ) or (", 0.0], ["1 , 6 )", 0.0], ["1 , 6", 0.0], ["1 , 2", 0.0], ["1 , 0 ,", 0.0], ["1 , 0 )", 0.0], ["1 , 0", 0.0], ["1 , -1 ,", 0.0], ["1 , -1 )", 0.0], ["1 , -1", 0.0], ["1 , (", 0.0], ["1 ,", 0.0], ["1 + moves", 0.0], ["1 +", 0.0], ["1 ) } #NEWLINE#", 0.0], ["1 ) }", 0.0], ["1 ) * 5", 0.0], ["1 ) *", 0.0], ["1 ] ) not", 0.0], ["1 #NEWLINE# print (", 0.0], ["* k +", 0.0], ["1 #NEWLINE# s", 0.0], ["1 #NEWLINE# rp", 0.0], ["1 #NEWLINE# right =", 0.0], ["1 #NEWLINE# right", 0.0], ["1 #NEWLINE# remwood =", 0.0], ["1 #NEWLINE# remwood", 0.0], ["1 #NEWLINE# print", 0.0], ["1 ) ) :", 0.0], ["1 #NEWLINE# p =", 0.0], ["1 #NEWLINE# p", 0.0], ["1 #NEWLINE# number", 0.0], ["1 #NEWLINE# num =", 0.0], ["1 #NEWLINE# num", 0.0], ["1 #NEWLINE# n //=", 0.0], ["1 #NEWLINE# n", 0.0], ["1 #NEWLINE# s1", 0.0], ["1 #NEWLINE# s2", 0.0], ["1 #NEWLINE# while", 0.0], ["1 #NEWLINE# while k", 0.0], ["1 ) ) #NEWLINE#", 0.0], ["1 ) )", 0.0], ["1 ) % 6", 0.0], ["1 ) % 4", 0.0], ["1 ) %", 0.0], ["1 ) #NEWLINE# print", 0.0], ["1 ) #NEWLINE# for", 0.0], ["1 ) #NEWLINE# a", 0.0], ["1 ) #NEWLINE# #DEDENT#", 0.0], ["1 ) #NEWLINE#", 0.0], ["1 ) !", 0.0], ["1 #NEWLINE# y =", 0.0], ["1 #NEWLINE# y", 0.0], ["1 #NEWLINE# x ^=", 0.0], ["1 #NEWLINE# x", 0.0], ["1 , a", 0.0], ["1 , a +", 0.0], ["1 , b", 0.0], ["1 : ] )", 0.0], ["1 <= i", 0.0], ["1 <=", 0.0], ["1 << n )", 0.0], ["1 << n", 0.0], ["1 <<", 0.0], ["1 <", 0.0], ["1 : ] -", 0.0], ["1 : ] #NEWLINE#", 0.0], ["1 , b +", 0.0], ["1 : ]", 0.0], ["1 : #INDENT# x", 0.0], ["1 : #INDENT# t", 0.0], ["1 : #INDENT# return", 0.0], ["1 : #INDENT# res", 0.0], ["1 : #INDENT# print", 0.0], ["1 : #INDENT# if", 0.0], ["1 <= i :", 0.0], ["1 =", 0.0], ["1 = a/b", 0.0], ["1 = a/b +", 0.0], ["1 ] ) ]", 0.0], ["1 ] ) :", 0.0], ["1 ] ) )", 0.0], ["1 ] ) #NEWLINE#", 0.0], ["1 ] )", 0.0], ["1 ] %", 0.0], ["1 ] #NEWLINE# if", 0.0], ["1 ] #NEWLINE# for", 0.0], ["1 ] #NEWLINE# #DEDENT#", 0.0], ["1 ] #NEWLINE#", 0.0], ["1 ] !=", 0.0], ["1 ]", 0.0], ["1 >= compression [", 0.0], ["1 >= compression", 0.0], ["1 >=", 0.0], ["1 : #INDENT# for", 0.0], ["1 : #INDENT# a", 0.0], ["1 : #INDENT#", 0.0], ["1 , maxj )", 0.0], ["1 , maxi )", 0.0], ["1 , maxi", 0.0], ["1 , m", 0.0], ["1 , len (", 0.0], ["1 , len", 0.0], ["1 , k )", 0.0], ["1 , k", 0.0], ["1 , j +", 0.0], ["1 , j", 0.0], ["1 , int (", 0.0], ["1 , int", 0.0], ["1 , d +", 0.0], ["1 , d", 0.0], ["1 , c +", 0.0], ["1 , c", 0.0], ["1 , maxj", 0.0], ["1 , n", 0.0], ["1 :", 0.0], ["1 , n )", 0.0], ["1 / 2 )", 0.0], ["1 / 2", 0.0], ["1 /", 0.0], ["1 - i ]", 0.0], ["1 - i", 0.0], ["1 - (", 0.0], ["1 -", 0.0], ["1 , y", 0.0], ["1 , x +", 0.0], ["1 , x", 0.0], ["1 , t )", 0.0], ["1 , t", 0.0], ["1 , p", 0.0], ["1 , n -", 0.0], ["1 , n +", 0.0], ["3 ] ) )", 0.0], ["3 ] +", 0.0], ["3 ] ,", 0.0], [": #INDENT# v", 0.0], [": #INDENT# x -=", 0.0], [": #INDENT# x ,", 0.0], [": #INDENT# x +=", 0.0], [": #INDENT# x", 0.0], [": #INDENT# while", 0.0], [": #INDENT# visit [", 0.0], [": #INDENT# visit", 0.0], [": #INDENT# twos", 0.0], [": #INDENT# s1 +=", 0.0], [": #INDENT# time", 0.0], [": #INDENT# t =", 0.0], [": #INDENT# t", 0.0], [": #INDENT# sum_", 0.0], [": #INDENT# sum =", 0.0], [": #INDENT# sum", 0.0], [": #INDENT# sl", 0.0], [": #INDENT# x =", 0.0], [": #INDENT# y", 0.0], [": #INDENT# y +=", 0.0], [": #INDENT# y -=", 0.0], [": :", 0.0], [": 3 ]", 0.0], [": 3", 0.0], [": 2", 0.0], [": 0 ,", 0.0], [": 0", 0.0], [": -1 ] )", 0.0], [": -1 ] #NEWLINE#", 0.0], [": -1 ]", 0.0], [": -1", 0.0], [": ( x [", 0.0], [": ( x", 0.0], [": (", 0.0], [": #NEWLINE#", 0.0], [": #INDENT# y =", 0.0], [": #INDENT# s2", 0.0], [": #INDENT# s1", 0.0], [": #INDENT# n ,", 0.0], [": #INDENT# path", 0.0], [": #INDENT# r =", 0.0], [": #INDENT# r", 0.0], [": #INDENT# q", 0.0], [": #INDENT# print (", 0.0], [": #INDENT# print", 0.0], [": #INDENT# pf", 0.0], [": #INDENT# path .", 0.0], [": #INDENT# pass #NEWLINE#", 0.0], [": #INDENT# s =", 0.0], [": #INDENT# pass", 0.0], [": #INDENT# p =", 0.0], [": #INDENT# p", 0.0], [": #INDENT# operations", 0.0], [": #INDENT# ones", 0.0], [": #INDENT# now", 0.0], [": #INDENT# n =", 0.0], [": #INDENT# requirements", 0.0], [": #INDENT# res", 0.0], [": #INDENT# res +=", 0.0], [": #INDENT# ret", 0.0], [": #INDENT# s +=", 0.0], [": #INDENT# s", 0.0], [": #INDENT# right =", 0.0], [": #INDENT# right", 0.0], [": #INDENT# return true", 0.0], [": #INDENT# return none", 0.0], [": #INDENT# return list", 0.0], [": #INDENT# return int", 0.0], [": #INDENT# return false", 0.0], [": #INDENT# return a", 0.0], [": #INDENT# return (", 0.0], [": #INDENT# return #NEWLINE#", 0.0], [": #INDENT# return \"too weak\"", 0.0], [": #INDENT# return", 0.0], [": #INDENT# ret [", 0.0], [": : -1", 0.0], [": : -1 ]", 0.0], [": ]", 0.0], ["< n : #INDENT#", 0.0], ["<= a1", 0.0], ["<= 0 : #INDENT#", 0.0], ["<= 0 :", 0.0], ["<= 0", 0.0], ["<=", 0.0], ["<<", 0.0], ["< x", 0.0], ["< n :", 0.0], [": ] #NEWLINE#", 0.0], ["< n", 0.0], ["< m", 0.0], ["< k : #INDENT#", 0.0], ["< k :", 0.0], ["< k", 0.0], ["< i :", 0.0], ["< i", 0.0], ["<= b", 0.0], ["<= b :", 0.0], ["<= b : #INDENT#", 0.0], ["<= b1", 0.0], ["= '' ) #NEWLINE#", 0.0], ["= '' )", 0.0], ["= '' #NEWLINE# for", 0.0], ["= '' #NEWLINE#", 0.0], ["= ''", 0.0], ["= \"\" #NEWLINE#", 0.0], ["= \"\"", 0.0], ["<= x : #INDENT#", 0.0], ["<= x :", 0.0], ["<= x", 0.0], ["<= r", 0.0], ["<= n", 0.0], ["<= k", 0.0], ["<= compression [", 0.0], ["<= compression", 0.0], ["< d", 0.0], ["< c", 0.0], ["< b : #INDENT#", 0.0], [": list (", 0.0], [": k ]", 0.0], [": k", 0.0], [": if the", 0.0], [": if", 0.0], [": i + 1", 0.0], [": i +", 0.0], [": i", 0.0], [": check if the", 0.0], [": check if", 0.0], [": check", 0.0], [": calculate the", 0.0], [": calculate", 0.0], [": ] ,", 0.0], [": ] ) #NEWLINE#", 0.0], [": ] )", 0.0], [": list", 0.0], [": list ( map", 0.0], ["< b :", 0.0], [": n", 0.0], ["< b", 0.0], ["< a", 0.0], ["< 0 : #INDENT#", 0.0], ["< 0 :", 0.0], ["< 0", 0.0], ["<", 0.0], [";", 0.0], [": x", 0.0], [": winner =", 0.0], [": winner", 0.0], [": utf-8 - *", 0.0], [": utf-8 -", 0.0], [": utf-8", 0.0], [": print (", 0.0], [": print", 0.0], [": #INDENT# n //=", 0.0], [": #INDENT# n", 0.0], ["3 ] ==", 0.0], ["8 *", 0.0], ["90 )", 0.0], ["90", 0.0], ["9 + 7 )", 0.0], ["9 + 7", 0.0], ["9 +", 0.0], ["9 #NEWLINE#", 0.0], ["9", 0.0], ["8", 0.0], ["60 )", 0.0], ["7 ) ) #NEWLINE#", 0.0], ["7 ) )", 0.0], ["7 )", 0.0], ["7 #NEWLINE#", 0.0], ["7", 0.0], ["60 + mm )", 0.0], ["60 + mm", 0.0], [":", 0.0], [": #INDENT# a", 0.0], [": #INDENT# a +=", 0.0], [": #INDENT# a ,", 0.0], [": #INDENT# c =", 0.0], [": #INDENT# c", 0.0], [": #INDENT# break #NEWLINE#", 0.0], [": #INDENT# break", 0.0], [": #INDENT# b =", 0.0], [": #INDENT# b", 0.0], [": #INDENT# avt [", 0.0], [": #INDENT# avt", 0.0], [": #INDENT# area", 0.0], [": #INDENT# ans =", 0.0], [": #INDENT# ans +=", 0.0], [": #INDENT# ans", 0.0], [": #INDENT# a [", 0.0], [": #INDENT# a =", 0.0], [": #INDENT# a .", 0.0], ["60 +", 0.0], ["60", 0.0], [": #INDENT# mon [", 0.0], ["31 , 30", 0.0], ["4 ) : #INDENT#", 0.0], ["4 ) :", 0.0], ["4 ) #NEWLINE#", 0.0], ["4 )", 0.0], ["4 #NEWLINE#", 0.0], ["4", 0.0], ["31 , 30 ,", 0.0], ["31 ,", 0.0], ["6 ]", 0.0], ["31", 0.0], ["30 , 31 ,", 0.0], ["30 , 31", 0.0], ["30 ,", 0.0], ["30", 0.0], ["3 ] [", 0.0], ["3 ] == board", 0.0], ["4 :", 0.0], ["4 ==", 0.0], ["4 ]", 0.0], ["4 ] =", 0.0], ["6 :", 0.0], ["6 ) : #INDENT#", 0.0], ["6 ) :", 0.0], ["6 )", 0.0], ["6 #NEWLINE#", 0.0], ["6", 0.0], ["5 :", 0.0], ["5 , 10 +", 0.0], ["5 , 10", 0.0], ["5 ,", 0.0], ["5 ) )", 0.0], ["5 )", 0.0], ["5 #NEWLINE#", 0.0], ["5", 0.0], ["4 ] = true", 0.0], [": #INDENT# cnt", 0.0], [": #INDENT# cnt +=", 0.0], [": #INDENT# colors", 0.0], [": #INDENT# if n", 0.0], [": #INDENT# j =", 0.0], [": #INDENT# j", 0.0], [": #INDENT# if y", 0.0], [": #INDENT# if x", 0.0], [": #INDENT# if u", 0.0], [": #INDENT# if s", 0.0], [": #INDENT# if not", 0.0], [": #INDENT# if mon", 0.0], [": #INDENT# continue", 0.0], [": #INDENT# if lr", 0.0], [": #INDENT# if l", 0.0], [": #INDENT# if k", 0.0], [": #INDENT# if i", 0.0], [": #INDENT# if fence", 0.0], [": #INDENT# if b", 0.0], [": #INDENT# if a", 0.0], [": #INDENT# k", 0.0], [": #INDENT# k =", 0.0], [": #INDENT# l", 0.0], [": #INDENT# l ,", 0.0], [": #INDENT# mon", 0.0], [": #INDENT# middle =", 0.0], [": #INDENT# middle", 0.0], [": #INDENT# main (", 0.0], [": #INDENT# main", 0.0], [": #INDENT# m =", 0.0], [": #INDENT# m", 0.0], [": #INDENT# li =", 0.0], [": #INDENT# li", 0.0], [": #INDENT# left =", 0.0], [": #INDENT# left", 0.0], [": #INDENT# layers [", 0.0], [": #INDENT# layers", 0.0], [": #INDENT# l =", 0.0], [": #INDENT# l .", 0.0], [": #INDENT# if (", 0.0], [": #INDENT# i =", 0.0], [": #INDENT# i +=", 0.0], [": #INDENT# e", 0.0], [": #INDENT# dp", 0.0], [": #INDENT# diff =", 0.0], [": #INDENT# diff", 0.0], [": #INDENT# d [", 0.0], [": #INDENT# d =", 0.0], [": #INDENT# d", 0.0], [": #INDENT# cur [", 0.0], [": #INDENT# cur +=", 0.0], [": #INDENT# cur", 0.0], [": #INDENT# ct =", 0.0], [": #INDENT# ct", 0.0], [": #INDENT# count +=", 0.0], [": #INDENT# count", 0.0], [": #INDENT# cost", 0.0], [": #INDENT# continue #NEWLINE#", 0.0], [": #INDENT# dp [", 0.0], [": #INDENT# f", 0.0], [": #INDENT# i", 0.0], [": #INDENT# f =", 0.0], [": #INDENT# have [", 0.0], [": #INDENT# have", 0.0], [": #INDENT# graph [", 0.0], [": #INDENT# graph", 0.0], [": #INDENT# g =", 0.0], [": #INDENT# g", 0.0], [": #INDENT# for y", 0.0], [": #INDENT# for x", 0.0], [": #INDENT# for k", 0.0], [": #INDENT# for j", 0.0], [": #INDENT# for i", 0.0], [": #INDENT# for c", 0.0], [": #INDENT# for", 0.0], [": #INDENT# factor [", 0.0], [": #INDENT# factor", 0.0], ["* k + i", 0.0], ["* i )", 0.0], ["* k ) )", 0.0], ["#NEWLINE# elif seq", 0.0], ["#NEWLINE# f", 0.0], ["#NEWLINE# exit ( )", 0.0], ["#NEWLINE# exit (", 0.0], ["#NEWLINE# exit", 0.0], ["#NEWLINE# else : #INDENT#", 0.0], ["#NEWLINE# else :", 0.0], ["#NEWLINE# else", 0.0], ["#NEWLINE# elif", 0.0], ["#NEWLINE# dists [ k", 0.0], ["#NEWLINE# e =", 0.0], ["#NEWLINE# e", 0.0], ["#NEWLINE# dy =", 0.0], ["#NEWLINE# dy", 0.0], ["#NEWLINE# dx =", 0.0], ["#NEWLINE# dx", 0.0], ["#NEWLINE# done", 0.0], ["#NEWLINE# f =", 0.0], ["#NEWLINE# fence", 0.0], ["#NEWLINE# find", 0.0], ["#NEWLINE# find the", 0.0], ["#NEWLINE# for k in", 0.0], ["#NEWLINE# for k", 0.0], ["#NEWLINE# for j in", 0.0], ["#NEWLINE# for j", 0.0], ["#NEWLINE# for i in", 0.0], ["#NEWLINE# for i", 0.0], ["#NEWLINE# for d in", 0.0], ["#NEWLINE# for d", 0.0], ["#NEWLINE# for c in", 0.0], ["#NEWLINE# for c", 0.0], ["#NEWLINE# for a in", 0.0], ["#NEWLINE# for a", 0.0], ["#NEWLINE# for _ in", 0.0], ["#NEWLINE# for _", 0.0], ["#NEWLINE# find the maximum", 0.0], ["#NEWLINE# div", 0.0], ["#NEWLINE# dists [", 0.0], ["#NEWLINE# for l ,", 0.0], ["#NEWLINE# col . add", 0.0], ["#NEWLINE# count = 0", 0.0], ["#NEWLINE# count =", 0.0], ["#NEWLINE# count", 0.0], ["#NEWLINE# convert", 0.0], ["#NEWLINE# continue #NEWLINE# #DEDENT#", 0.0], ["#NEWLINE# continue #NEWLINE#", 0.0], ["#NEWLINE# continue", 0.0], ["#NEWLINE# col .", 0.0], ["#NEWLINE# dists", 0.0], ["#NEWLINE# col", 0.0], ["#NEWLINE# cnt = 0", 0.0], ["#NEWLINE# cnt =", 0.0], ["#NEWLINE# cnt", 0.0], ["#NEWLINE# check if the", 0.0], ["#NEWLINE# check if", 0.0], ["#NEWLINE# check", 0.0], ["#NEWLINE# count the", 0.0], ["#NEWLINE# count the number", 0.0], ["#NEWLINE# create", 0.0], ["#NEWLINE# create a", 0.0], ["#NEWLINE# def solve (", 0.0], ["#NEWLINE# def solve", 0.0], ["#NEWLINE# def gcd (", 0.0], ["#NEWLINE# def gcd", 0.0], ["#NEWLINE# def", 0.0], ["#NEWLINE# days", 0.0], ["#NEWLINE# d = [", 0.0], ["#NEWLINE# d =", 0.0], ["#NEWLINE# d ,", 0.0], ["#NEWLINE# d", 0.0], ["#NEWLINE# curx", 0.0], ["#NEWLINE# cur = 0", 0.0], ["#NEWLINE# cur =", 0.0], ["#NEWLINE# cur", 0.0], ["#NEWLINE# create a dictionary", 0.0], ["#NEWLINE# for l", 0.0], ["#NEWLINE# for r", 0.0], ["#NEWLINE# l = list", 0.0], ["#NEWLINE# if the", 0.0], ["#NEWLINE# import math #NEWLINE#", 0.0], ["#NEWLINE# import math", 0.0], ["#NEWLINE# import", 0.0], ["#NEWLINE# if x in", 0.0], ["#NEWLINE# if x ==", 0.0], ["#NEWLINE# if x", 0.0], ["#NEWLINE# if w", 0.0], ["#NEWLINE# if sum (", 0.0], ["#NEWLINE# if n", 0.0], ["#NEWLINE# if sum", 0.0], ["#NEWLINE# if s [", 0.0], ["#NEWLINE# if s", 0.0], ["#NEWLINE# if p", 0.0], ["#NEWLINE# if not", 0.0], ["#NEWLINE# if n ==", 0.0], ["#NEWLINE# if n <", 0.0], ["#NEWLINE# import sys", 0.0], ["#NEWLINE# import sys #NEWLINE#", 0.0], ["#NEWLINE# input", 0.0], ["#NEWLINE# input =", 0.0], ["#NEWLINE# l , r", 0.0], ["#NEWLINE# l ,", 0.0], ["#NEWLINE# l", 0.0], ["#NEWLINE# k = int", 0.0], ["#NEWLINE# k = 0", 0.0], ["#NEWLINE# k =", 0.0], ["#NEWLINE# k -=", 0.0], ["#NEWLINE# k += 1", 0.0], ["#NEWLINE# k +=", 0.0], ["#NEWLINE# k", 0.0], ["#NEWLINE# j =", 0.0], ["#NEWLINE# j += 1", 0.0], ["#NEWLINE# j +=", 0.0], ["#NEWLINE# j", 0.0], ["#NEWLINE# input = sys", 0.0], ["#NEWLINE# if n %", 0.0], ["#NEWLINE# if m", 0.0], ["#NEWLINE# for r in", 0.0], ["#NEWLINE# from", 0.0], ["#NEWLINE# grid = [", 0.0], ["#NEWLINE# grid =", 0.0], ["#NEWLINE# grid", 0.0], ["#NEWLINE# graph [", 0.0], ["#NEWLINE# graph", 0.0], ["#NEWLINE# g =", 0.0], ["#NEWLINE# g", 0.0], ["#NEWLINE# for y in", 0.0], ["#NEWLINE# if len (", 0.0], ["#NEWLINE# for y", 0.0], ["#NEWLINE# for x in", 0.0], ["#NEWLINE# for x", 0.0], ["#NEWLINE# for v in", 0.0], ["#NEWLINE# for v", 0.0], ["#NEWLINE# for u in", 0.0], ["#NEWLINE# for u", 0.0], ["#NEWLINE# h", 0.0], ["#NEWLINE# h =", 0.0], ["#NEWLINE# heapq", 0.0], ["#NEWLINE# heapq .", 0.0], ["#NEWLINE# if len", 0.0], ["#NEWLINE# if k", 0.0], ["#NEWLINE# if c [", 0.0], ["#NEWLINE# if c", 0.0], ["#NEWLINE# if b", 0.0], ["#NEWLINE# if ans", 0.0], ["#NEWLINE# if a [", 0.0], ["#NEWLINE# if a >=", 0.0], ["#NEWLINE# if a", 0.0], ["#NEWLINE# if ( x", 0.0], ["#NEWLINE# if (", 0.0], ["#NEWLINE# if", 0.0], ["#NEWLINE# i = 0", 0.0], ["#NEWLINE# i =", 0.0], ["#NEWLINE# i", 0.0], ["#NEWLINE# ch", 0.0], ["#NEWLINE# calculate the total", 0.0], ["#NEWLINE# calculate the number", 0.0], ["#NEWLINE# #DEDENT# return", 0.0], ["#NEWLINE# #DEDENT# st", 0.0], ["#NEWLINE# #DEDENT# s1 =", 0.0], ["#NEWLINE# #DEDENT# s1", 0.0], ["#NEWLINE# #DEDENT# s", 0.0], ["#NEWLINE# #DEDENT# return s", 0.0], ["#NEWLINE# #DEDENT# return ans", 0.0], ["#NEWLINE# #DEDENT# return a", 0.0], ["#NEWLINE# #DEDENT# res", 0.0], ["#NEWLINE# #DEDENT# n =", 0.0], ["#NEWLINE# #DEDENT# print the", 0.0], ["#NEWLINE# #DEDENT# print", 0.0], ["#NEWLINE# #DEDENT# pos +=", 0.0], ["#NEWLINE# #DEDENT# pos", 0.0], ["#NEWLINE# #DEDENT# otherwise ,", 0.0], ["#NEWLINE# #DEDENT# otherwise", 0.0], ["#NEWLINE# #DEDENT# now =", 0.0], ["#NEWLINE# #DEDENT# while", 0.0], ["#NEWLINE# #DEDENT# x", 0.0], ["#NEWLINE# #DEDENT# x =", 0.0], ["#NEWLINE# #INDENT#", 0.0], ["#NEWLINE# a . append", 0.0], ["#NEWLINE# a .", 0.0], ["#NEWLINE# a , b", 0.0], ["#NEWLINE# a ,", 0.0], ["#NEWLINE# a", 0.0], ["#NEWLINE# ;", 0.0], ["#NEWLINE# #INDENT# print (", 0.0], ["#NEWLINE# #INDENT# print", 0.0], ["#NEWLINE# #INDENT# k =", 0.0], ["#NEWLINE# #INDENT# k", 0.0], ["#NEWLINE# #INDENT# if s", 0.0], ["#NEWLINE# #INDENT# if", 0.0], ["#NEWLINE# #INDENT# for", 0.0], ["#NEWLINE# #INDENT# a =", 0.0], ["#NEWLINE# #INDENT# a", 0.0], ["#NEWLINE# #DEDENT# now", 0.0], ["#NEWLINE# #DEDENT# n ,", 0.0], ["#NEWLINE# calculate the minimum", 0.0], ["#NEWLINE# #DEDENT# elif s", 0.0], ["#NEWLINE# #DEDENT# for", 0.0], ["#NEWLINE# #DEDENT# find the", 0.0], ["#NEWLINE# #DEDENT# find", 0.0], ["#NEWLINE# #DEDENT# else :", 0.0], ["#NEWLINE# #DEDENT# else", 0.0], ["#NEWLINE# #DEDENT# elif x", 0.0], ["#NEWLINE# #DEDENT# elif seq", 0.0], ["#NEWLINE# #DEDENT# elif i", 0.0], ["#NEWLINE# #DEDENT# n", 0.0], ["#NEWLINE# #DEDENT# elif b", 0.0], ["#NEWLINE# #DEDENT# elif (", 0.0], ["#NEWLINE# #DEDENT# elif", 0.0], ["#NEWLINE# #DEDENT# def main", 0.0], ["#NEWLINE# #DEDENT# def __starting_point", 0.0], ["#NEWLINE# #DEDENT# def", 0.0], ["#NEWLINE# #DEDENT# d =", 0.0], ["#NEWLINE# #DEDENT# for _", 0.0], ["#NEWLINE# #DEDENT# for i", 0.0], ["#NEWLINE# #DEDENT# if (", 0.0], ["#NEWLINE# #DEDENT# if a", 0.0], ["#NEWLINE# #DEDENT# main (", 0.0], ["#NEWLINE# #DEDENT# main", 0.0], ["#NEWLINE# #DEDENT# lmax =", 0.0], ["#NEWLINE# #DEDENT# lmax", 0.0], ["#NEWLINE# #DEDENT# l [", 0.0], ["#NEWLINE# #DEDENT# l", 0.0], ["#NEWLINE# #DEDENT# k =", 0.0], ["#NEWLINE# #DEDENT# k", 0.0], ["#NEWLINE# #DEDENT# if s", 0.0], ["#NEWLINE# #DEDENT# if not", 0.0], ["#NEWLINE# #DEDENT# if n", 0.0], ["#NEWLINE# #DEDENT# if maxi", 0.0], ["#NEWLINE# #DEDENT# if len", 0.0], ["#NEWLINE# #DEDENT# if i", 0.0], ["#NEWLINE# #DEDENT# if b", 0.0], ["#NEWLINE# a . sort", 0.0], ["#NEWLINE# a =", 0.0], ["#NEWLINE# a = [", 0.0], ["#NEWLINE# bc", 0.0], ["#NEWLINE# break #NEWLINE# #DEDENT#", 0.0], ["#NEWLINE# break #NEWLINE#", 0.0], ["#NEWLINE# break", 0.0], ["#NEWLINE# bl = list", 0.0], ["#NEWLINE# bl =", 0.0], ["#NEWLINE# bl", 0.0], ["#NEWLINE# bid", 0.0], ["#NEWLINE# base", 0.0], ["#NEWLINE# a = int", 0.0], ["#NEWLINE# b1 =", 0.0], ["#NEWLINE# b1", 0.0], ["#NEWLINE# b = min", 0.0], ["#NEWLINE# b = list", 0.0], ["#NEWLINE# b = int", 0.0], ["#NEWLINE# b = input", 0.0], ["#NEWLINE# b = b", 0.0], ["#NEWLINE# c", 0.0], ["#NEWLINE# c +=", 0.0], ["#NEWLINE# c += 1", 0.0], ["#NEWLINE# c ,", 0.0], ["#NEWLINE# calculate the maximum", 0.0], ["#NEWLINE# calculate the distance", 0.0], ["#NEWLINE# calculate the", 0.0], ["#NEWLINE# calculate", 0.0], ["#NEWLINE# c1 =", 0.0], ["#NEWLINE# c1 , c2", 0.0], ["#NEWLINE# c1 ,", 0.0], ["#NEWLINE# c1", 0.0], ["#NEWLINE# c = np", 0.0], ["#NEWLINE# c = list", 0.0], ["#NEWLINE# c = [", 0.0], ["#NEWLINE# c = 0", 0.0], ["#NEWLINE# c =", 0.0], ["#NEWLINE# c .", 0.0], ["#NEWLINE# c , d", 0.0], ["#NEWLINE# b = [", 0.0], ["#NEWLINE# b = 0", 0.0], ["#NEWLINE# b =", 0.0], ["#NEWLINE# ans = max", 0.0], ["#NEWLINE# ans = 1", 0.0], ["#NEWLINE# ans = 0", 0.0], ["#NEWLINE# ans = -1", 0.0], ["#NEWLINE# ans =", 0.0], ["#NEWLINE# ans . append", 0.0], ["#NEWLINE# ans .", 0.0], ["#NEWLINE# ans += 1", 0.0], ["#NEWLINE# ans +=", 0.0], ["#NEWLINE# ans", 0.0], ["#NEWLINE# al", 0.0], ["#NEWLINE# a2 , b2", 0.0], ["#NEWLINE# a2 ,", 0.0], ["#NEWLINE# a2", 0.0], ["#NEWLINE# a1", 0.0], ["#NEWLINE# a [", 0.0], ["#NEWLINE# ans = [", 0.0], ["#NEWLINE# ans = n", 0.0], ["#NEWLINE# b . sort", 0.0], ["#NEWLINE# answer", 0.0], ["#NEWLINE# b .", 0.0], ["#NEWLINE# b", 0.0], ["#NEWLINE# avt [ i", 0.0], ["#NEWLINE# avt [", 0.0], ["#NEWLINE# avt", 0.0], ["#NEWLINE# arr = [", 0.0], ["#NEWLINE# arr =", 0.0], ["#NEWLINE# arr", 0.0], ["#NEWLINE# area = 0", 0.0], ["#NEWLINE# area =", 0.0], ["#NEWLINE# area", 0.0], ["#NEWLINE# ar = [", 0.0], ["#NEWLINE# ar =", 0.0], ["#NEWLINE# ar", 0.0], ["#NEWLINE# answer =", 0.0], ["#NEWLINE# l =", 0.0], ["#NEWLINE# l = sorted", 0.0], ["#NEWLINE# #DEDENT# d", 0.0], ["% x == 0", 0.0], ["' ' ) )", 0.0], ["' ' ) #NEWLINE#", 0.0], ["' ' )", 0.0], ["' '", 0.0], ["'", 0.0], ["&", 0.0], ["%=", 0.0], ["% x ==", 0.0], ["% k == 0", 0.0], ["% x", 0.0], ["% p #NEWLINE# #DEDENT#", 0.0], ["% p #NEWLINE#", 0.0], ["% p", 0.0], ["% mod #NEWLINE# #DEDENT#", 0.0], ["% mod #NEWLINE#", 0.0], ["% mod", 0.0], ["' ' ) ) )", 0.0], ["' ' ) ]", 0.0], ["''", 0.0], ["'' #NEWLINE#", 0.0], ["'-' )", 0.0], ["'-'", 0.0], ["'+' #NEWLINE# #DEDENT# #DEDENT#", 0.0], ["'+' #NEWLINE# #DEDENT#", 0.0], ["'+' #NEWLINE#", 0.0], ["'+'", 0.0], ["'*'", 0.0], ["'' . join (", 0.0], ["'' . join", 0.0], ["'' .", 0.0], ["'' ,", 0.0], ["'' ) #NEWLINE# #DEDENT#", 0.0], ["'' ) #NEWLINE#", 0.0], ["'' )", 0.0], ["'' #NEWLINE# for", 0.0], ["% m", 0.0], ["% k ==", 0.0], ["'-' : #INDENT#", 0.0], ["% 2 != 0", 0.0], ["% 4", 0.0], ["% 3 == 0", 0.0], ["% 3 ==", 0.0], ["% 3", 0.0], ["% 2 == 0", 0.0], ["% 2 ==", 0.0], ["% 2 )", 0.0], ["% 2 !=", 0.0], ["% k #NEWLINE#", 0.0], ["% 2", 0.0], ["% ( m *", 0.0], ["% ( m", 0.0], ["% ( 10 **", 0.0], ["% ( 10", 0.0], ["% (", 0.0], ["%", 0.0], ["% 4 ==", 0.0], ["% 4 ]", 0.0], ["% 4 ] =", 0.0], ["% 6", 0.0], ["% k != 0", 0.0], ["% k !=", 0.0], ["% k", 0.0], ["% i == 0", 0.0], ["% i ==", 0.0], ["% i", 0.0], ["% d == 0", 0.0], ["% d ==", 0.0], ["% d", 0.0], ["% b == 0", 0.0], ["% b ==", 0.0], ["% b ) #NEWLINE#", 0.0], ["% b )", 0.0], ["% b", 0.0], ["% 6 ]", 0.0], ["'-' :", 0.0], ["'->'", 0.0], ["#NEWLINE# l [", 0.0], ["'polycarp'", 0.0], ["'s", 0.0], ["'right' ) - 1", 0.0], ["'right' ) -", 0.0], ["'right' )", 0.0], ["'right'", 0.0], ["'polycarp' ) #NEWLINE#", 0.0], ["'polycarp' )", 0.0], ["'o'", 0.0], ["'g' , 't' ]", 0.0], ["'no' ) #NEWLINE# #DEDENT#", 0.0], ["'no' ) #NEWLINE#", 0.0], ["'no' )", 0.0], ["'no'", 0.0], ["'inf' ) #NEWLINE# for", 0.0], ["'inf' ) #NEWLINE#", 0.0], ["'inf' )", 0.0], ["'s apartment", 0.0], ["'s apartment #NEWLINE#", 0.0], ["'s row", 0.0], ["'s row #NEWLINE#", 0.0], ["'x' , '.'", 0.0], ["'x' ,", 0.0], ["'x'", 0.0], ["'w' ] ) #NEWLINE#", 0.0], ["'w' ] )", 0.0], ["'w' ]", 0.0], ["'w'", 0.0], ["'vasiliy' ) #NEWLINE#", 0.0], ["'vasiliy' )", 0.0], ["'vasiliy'", 0.0], ["'t' ] [", 0.0], ["'t' ]", 0.0], ["'t' ) #NEWLINE#", 0.0], ["'t' )", 0.0], ["'t'", 0.0], ["'inf'", 0.0], ["'g' , 't'", 0.0], ["'->' .", 0.0], ["'.' : #INDENT# mon", 0.0], ["'0' #NEWLINE#", 0.0], ["'0'", 0.0], ["'.xx' in", 0.0], ["'.xx'", 0.0], ["'.' ] , [", 0.0], ["'.' ] ,", 0.0], ["'.' ]", 0.0], ["'.' : #INDENT#", 0.0], ["'g' ,", 0.0], ["'.' :", 0.0], ["'.' , '.' ]", 0.0], ["'.' , '.'", 0.0], ["'.' ,", 0.0], ["'.'", 0.0], ["'->' . join (", 0.0], ["'->' . join", 0.0], ["'0' )", 0.0], ["'0' ) #NEWLINE#", 0.0], ["'1'", 0.0], ["'8'", 0.0], ["'g' )", 0.0], ["'g'", 0.0], ["'d'", 0.0], ["'c' , 'g' ,", 0.0], ["'c' , 'g'", 0.0], ["'c' ,", 0.0], ["'c' )", 0.0], ["'c'", 0.0], ["'b'", 0.0], ["'a' , 'c' ,", 0.0], ["'a' , 'c'", 0.0], ["'a' ,", 0.0], ["'a' )", 0.0], ["'a'", 0.0], ["'?'", 0.0], ["#NEWLINE# z =", 0.0], ["#NEWLINE# z", 0.0], ["#NEWLINE# y = 0", 0.0], ["#NEWLINE# print ( m", 0.0], ["#NEWLINE# print the", 0.0], ["#NEWLINE# print ( y", 0.0], ["#NEWLINE# print ( x", 0.0], ["#NEWLINE# print ( t", 0.0], ["#NEWLINE# print ( r", 0.0], ["#NEWLINE# print ( n", 0.0], ["#NEWLINE# print ( min", 0.0], ["#NEWLINE# print ( b", 0.0], ["#NEWLINE# posttochange", 0.0], ["#NEWLINE# print ( ans", 0.0], ["#NEWLINE# print ( a", 0.0], ["#NEWLINE# print ( ``", 0.0], ["#NEWLINE# print ( *", 0.0], ["#NEWLINE# print ( \"yes\"", 0.0], ["#NEWLINE# print (", 0.0], ["#NEWLINE# print", 0.0], ["#NEWLINE# print the maximum", 0.0], ["#NEWLINE# print the minimum", 0.0], ["#NEWLINE# print the number", 0.0], ["#NEWLINE# print the result", 0.0], ["#NEWLINE# remwood", 0.0], ["#NEWLINE# read input #NEWLINE#", 0.0], ["#NEWLINE# read input", 0.0], ["#NEWLINE# read", 0.0], ["#NEWLINE# rborder =", 0.0], ["#NEWLINE# rborder", 0.0], ["#NEWLINE# ratings", 0.0], ["#NEWLINE# r =", 0.0], ["#NEWLINE# r .", 0.0], ["#NEWLINE# r", 0.0], ["#NEWLINE# q_append ( (", 0.0], ["#NEWLINE# q_append (", 0.0], ["#NEWLINE# q_append", 0.0], ["#NEWLINE# q", 0.0], ["#NEWLINE# print the total", 0.0], ["#NEWLINE# pretochange", 0.0], ["#NEWLINE# pos =", 0.0], ["#NEWLINE# y =", 0.0], ["#NEWLINE# mana", 0.0], ["#NEWLINE# n += 1", 0.0], ["#NEWLINE# n +=", 0.0], ["#NEWLINE# n", 0.0], ["#NEWLINE# moves =", 0.0], ["#NEWLINE# moves", 0.0], ["#NEWLINE# min_diff =", 0.0], ["#NEWLINE# min_diff", 0.0], ["#NEWLINE# m =", 0.0], ["#NEWLINE# pos", 0.0], ["#NEWLINE# m ,", 0.0], ["#NEWLINE# m", 0.0], ["#NEWLINE# low =", 0.0], ["#NEWLINE# low", 0.0], ["#NEWLINE# line", 0.0], ["#NEWLINE# left =", 0.0], ["#NEWLINE# left", 0.0], ["#NEWLINE# n ,", 0.0], ["#NEWLINE# n , k", 0.0], ["#NEWLINE# n , m", 0.0], ["#NEWLINE# n =", 0.0], ["#NEWLINE# p =", 0.0], ["#NEWLINE# p ,", 0.0], ["#NEWLINE# p", 0.0], ["#NEWLINE# operations =", 0.0], ["#NEWLINE# operations", 0.0], ["#NEWLINE# number of", 0.0], ["#NEWLINE# number", 0.0], ["#NEWLINE# num =", 0.0], ["#NEWLINE# num", 0.0], ["#NEWLINE# nops", 0.0], ["#NEWLINE# new", 0.0], ["#NEWLINE# n = len", 0.0], ["#NEWLINE# n = int", 0.0], ["#NEWLINE# n = 1", 0.0], ["#NEWLINE# n = 0", 0.0], ["#NEWLINE# remwood =", 0.0], ["#NEWLINE# res", 0.0], ["#NEWLINE# res =", 0.0], ["#NEWLINE# tmp = tmp", 0.0], ["#NEWLINE# waiting_time", 0.0], ["#NEWLINE# w", 0.0], ["#NEWLINE# v =", 0.0], ["#NEWLINE# v", 0.0], ["#NEWLINE# up =", 0.0], ["#NEWLINE# up", 0.0], ["#NEWLINE# total_cost", 0.0], ["#NEWLINE# tmp =", 0.0], ["#NEWLINE# ret", 0.0], ["#NEWLINE# tmp", 0.0], ["#NEWLINE# t3 -= 1", 0.0], ["#NEWLINE# t3 -=", 0.0], ["#NEWLINE# t3", 0.0], ["#NEWLINE# t2 -= 1", 0.0], ["#NEWLINE# t2 -=", 0.0], ["#NEWLINE# t2", 0.0], ["#NEWLINE# while", 0.0], ["#NEWLINE# while a", 0.0], ["#NEWLINE# while i", 0.0], ["#NEWLINE# while i <", 0.0], ["#NEWLINE# y", 0.0], ["#NEWLINE# x1", 0.0], ["#NEWLINE# x = int", 0.0], ["#NEWLINE# x = 0", 0.0], ["#NEWLINE# x =", 0.0], ["#NEWLINE# x , y", 0.0], ["#NEWLINE# x ,", 0.0], ["#NEWLINE# x", 0.0], ["#NEWLINE# while x", 0.0], ["#NEWLINE# while true :", 0.0], ["#NEWLINE# while true", 0.0], ["#NEWLINE# while not", 0.0], ["#NEWLINE# while n %", 0.0], ["#NEWLINE# while n", 0.0], ["#NEWLINE# while k", 0.0], ["#NEWLINE# t = int", 0.0], ["#NEWLINE# t = 1", 0.0], ["#NEWLINE# t =", 0.0], ["#NEWLINE# self", 0.0], ["#NEWLINE# s2", 0.0], ["#NEWLINE# s1 =", 0.0], ["#NEWLINE# s1 +=", 0.0], ["#NEWLINE# s1", 0.0], ["#NEWLINE# s = sum", 0.0], ["#NEWLINE# s = input", 0.0], ["#NEWLINE# s =", 0.0], ["#NEWLINE# s", 0.0], ["#NEWLINE# right =", 0.0], ["#NEWLINE# right", 0.0], ["#NEWLINE# return (", 0.0], ["#NEWLINE# return #NEWLINE# #DEDENT#", 0.0], ["#NEWLINE# return #NEWLINE#", 0.0], ["#NEWLINE# return", 0.0], ["#NEWLINE# ret =", 0.0], ["#NEWLINE# s2 =", 0.0], ["#NEWLINE# self .", 0.0], ["#NEWLINE# t", 0.0], ["#NEWLINE# seq", 0.0], ["#NEWLINE# sum =", 0.0], ["#NEWLINE# sum", 0.0], ["#NEWLINE# subtract", 0.0], ["#NEWLINE# start =", 0.0], ["#NEWLINE# start", 0.0], ["#NEWLINE# st =", 0.0], ["#NEWLINE# st", 0.0], ["#NEWLINE# solve3 (", 0.0], ["#NEWLINE# solve3", 0.0], ["#NEWLINE# sol_22", 0.0], ["#NEWLINE# sol_2 =", 0.0], ["#NEWLINE# sol_2", 0.0], ["#NEWLINE# sol_11", 0.0], ["#NEWLINE# sol_1 =", 0.0], ["#NEWLINE# sol_1", 0.0], ["#NEWLINE# #DEDENT# d +=", 0.0], ["#NEWLINE# #DEDENT# cur", 0.0], ["'x.x' in", 0.0], ["#DEDENT# get the", 0.0], ["#DEDENT# if (", 0.0], ["#DEDENT# if", 0.0], ["#DEDENT# i += 1", 0.0], ["#DEDENT# i +=", 0.0], ["#DEDENT# i", 0.0], ["#DEDENT# graph [", 0.0], ["#DEDENT# graph", 0.0], ["#DEDENT# get", 0.0], ["#DEDENT# find", 0.0], ["#DEDENT# for j in", 0.0], ["#DEDENT# for j", 0.0], ["#DEDENT# for i in", 0.0], ["#DEDENT# for i", 0.0], ["#DEDENT# for _ in", 0.0], ["#DEDENT# for _", 0.0], ["#DEDENT# for", 0.0], ["#DEDENT# if ( re", 0.0], ["#DEDENT# if a", 0.0], ["#DEDENT# if a ==", 0.0], ["#DEDENT# if a [", 0.0], ["#DEDENT# if s", 0.0], ["#DEDENT# if pode ==", 0.0], ["#DEDENT# if pode", 0.0], ["#DEDENT# if not ok", 0.0], ["#DEDENT# if not", 0.0], ["#DEDENT# if n >", 0.0], ["#DEDENT# if n %", 0.0], ["#DEDENT# if n", 0.0], ["#DEDENT# if maxi -", 0.0], ["#DEDENT# if maxi", 0.0], ["#DEDENT# if len (", 0.0], ["#DEDENT# if len", 0.0], ["#DEDENT# if l", 0.0], ["#DEDENT# if i", 0.0], ["#DEDENT# if b", 0.0], ["#DEDENT# find the", 0.0], ["#DEDENT# else :", 0.0], ["#DEDENT# if the", 0.0], ["#DEDENT# check", 0.0], ["#DEDENT# compression =", 0.0], ["#DEDENT# compression", 0.0], ["#DEDENT# colors [ u", 0.0], ["#DEDENT# colors [", 0.0], ["#DEDENT# colors", 0.0], ["#DEDENT# check if the", 0.0], ["#DEDENT# check if", 0.0], ["#DEDENT# calculate the", 0.0], ["#DEDENT# else", 0.0], ["#DEDENT# calculate", 0.0], ["#DEDENT# c", 0.0], ["#DEDENT# ans = 0", 0.0], ["#DEDENT# ans =", 0.0], ["#DEDENT# ans +=", 0.0], ["#DEDENT# ans", 0.0], ["#DEDENT# a1", 0.0], ["#DEDENT# cur", 0.0], ["#DEDENT# d", 0.0], ["#DEDENT# def", 0.0], ["#DEDENT# def __starting_point", 0.0], ["#DEDENT# elif x", 0.0], ["#DEDENT# elif seq ==", 0.0], ["#DEDENT# elif seq", 0.0], ["#DEDENT# elif s", 0.0], ["#DEDENT# elif n", 0.0], ["#DEDENT# elif i .", 0.0], ["#DEDENT# elif i", 0.0], ["#DEDENT# elif b", 0.0], ["#DEDENT# elif (", 0.0], ["#DEDENT# elif", 0.0], ["#DEDENT# def solve (", 0.0], ["#DEDENT# def solve", 0.0], ["#DEDENT# def main (", 0.0], ["#DEDENT# def main", 0.0], ["#DEDENT# def __starting_point (", 0.0], ["#DEDENT# if s [", 0.0], ["#DEDENT# k", 0.0], ["#INDENT# ans +=", 0.0], ["#DEDENT# return ans", 0.0], ["#DEDENT# return true", 0.0], ["#DEDENT# return s #NEWLINE#", 0.0], ["#DEDENT# return s", 0.0], ["#DEDENT# return ret", 0.0], ["#DEDENT# return false #NEWLINE#", 0.0], ["#DEDENT# return false", 0.0], ["#DEDENT# return ans #NEWLINE#", 0.0], ["#DEDENT# return a #NEWLINE#", 0.0], ["#DEDENT# print the result", 0.0], ["#DEDENT# return a", 0.0], ["#DEDENT# return #NEWLINE#", 0.0], ["#DEDENT# return", 0.0], ["#DEDENT# res =", 0.0], ["#DEDENT# res", 0.0], ["#DEDENT# remwood -=", 0.0], ["#DEDENT# remwood", 0.0], ["#DEDENT# return true #NEWLINE#", 0.0], ["#DEDENT# st", 0.0], ["#DEDENT# tmp", 0.0], ["#DEDENT# while", 0.0], ["#INDENT# a [ i", 0.0], ["#INDENT# a [", 0.0], ["#INDENT# a = list", 0.0], ["#INDENT# a = a", 0.0], ["#INDENT# a =", 0.0], ["#INDENT# a . append", 0.0], ["#INDENT# a .", 0.0], ["#INDENT# a , b", 0.0], ["#INDENT# a ,", 0.0], ["#INDENT# a +=", 0.0], ["#INDENT# a", 0.0], ["#INDENT# #DEDENT#", 0.0], ["#INDENT#", 0.0], ["#DEDENT# x =", 0.0], ["#DEDENT# x", 0.0], ["#DEDENT# r", 0.0], ["#DEDENT# print the number", 0.0], ["#DEDENT# k =", 0.0], ["#DEDENT# n , k", 0.0], ["#DEDENT# np =", 0.0], ["#DEDENT# np", 0.0], ["#DEDENT# now = now", 0.0], ["#DEDENT# now =", 0.0], ["#DEDENT# now", 0.0], ["#DEDENT# n = int", 0.0], ["#DEDENT# n =", 0.0], ["#DEDENT# n ,", 0.0], ["#DEDENT# print the minimum", 0.0], ["#DEDENT# n", 0.0], ["#DEDENT# main ( )", 0.0], ["#DEDENT# main (", 0.0], ["#DEDENT# main", 0.0], ["#DEDENT# l [ 0", 0.0], ["#DEDENT# l [", 0.0], ["#DEDENT# l", 0.0], ["#DEDENT# otherwise", 0.0], ["#DEDENT# otherwise ,", 0.0], ["#DEDENT# pos", 0.0], ["#DEDENT# print", 0.0], ["#DEDENT# print the maximum", 0.0], ["#DEDENT# print the", 0.0], ["#DEDENT# print ( x", 0.0], ["#DEDENT# print ( sum", 0.0], ["#DEDENT# print ( res", 0.0], ["#DEDENT# print ( len", 0.0], ["#DEDENT# print ( int", 0.0], ["#DEDENT# print ( count", 0.0], ["#DEDENT# print ( ans", 0.0], ["#DEDENT# print ( a", 0.0], ["#DEDENT# print ( *", 0.0], ["#DEDENT# print ( 'no'", 0.0], ["#DEDENT# print ( \"yes\"", 0.0], ["#DEDENT# print ( \"no\"", 0.0], ["#DEDENT# print (", 0.0], ["#DEDENT# a =", 0.0], ["#DEDENT# a . sort", 0.0], ["#DEDENT# a .", 0.0], ["\"bitlgm\" ) #NEWLINE#", 0.0], ["\"inf\"", 0.0], ["\"g\"", 0.0], ["\"d\" : #INDENT#", 0.0], ["\"d\" :", 0.0], ["\"d\"", 0.0], ["\"bottom\"", 0.0], ["\"bitlgm\" ) #NEWLINE# #DEDENT#", 0.0], ["\"bitlgm\" )", 0.0], ["\"===\" )", 0.0], ["\"bitlgm\"", 0.0], ["\"bitaryo\" ) #NEWLINE# #DEDENT#", 0.0], ["\"bitaryo\" ) #NEWLINE#", 0.0], ["\"bitaryo\" )", 0.0], ["\"bitaryo\"", 0.0], ["\">\"", 0.0], ["\"===\" ) #NEWLINE# #DEDENT#", 0.0], ["\"inf\" )", 0.0], ["\"l\"", 0.0], ["\"l\" :", 0.0], ["\"l\" : #INDENT#", 0.0], ["\"north\" : #INDENT#", 0.0], ["\"north\" :", 0.0], ["\"north\"", 0.0], ["\"no\" ) #NEWLINE# return", 0.0], ["\"no\" ) #NEWLINE# #DEDENT#", 0.0], ["\"no\" ) #NEWLINE#", 0.0], ["\"no\" #NEWLINE#", 0.0], ["\"no\"", 0.0], ["\"name\" ]", 0.0], ["\"name\"", 0.0], ["\"move\" , x ,", 0.0], ["\"move\" , x", 0.0], ["\"move\" ,", 0.0], ["\"move\"", 0.0], ["\"left\"", 0.0], ["\"===\" ) #NEWLINE#", 0.0], ["\"===\"", 0.0], ["#DEDENT# a , b", 0.0], ["!= 0 and", 0.0], ["\" \" )", 0.0], ["\" \"", 0.0], ["!= n : #INDENT#", 0.0], ["!= n :", 0.0], ["!= n", 0.0], ["!= k", 0.0], ["!= b", 0.0], ["!= 0 : #INDENT#", 0.0], ["\"1\" )", 0.0], ["!= 0 :", 0.0], ["!= 0", 0.0], ["!= -1", 0.0], ["!=", 0.0], ["!", 0.0], [" #INDENT# #DEDENT#", 0.0], [" #INDENT#", 0.0], ["\" \" ) #NEWLINE#", 0.0], ["\" \" ) ]", 0.0], ["\" \" ) ] #NEWLINE#", 0.0], ["\" \" +", 0.0], ["\"1\"", 0.0], ["\"0\"", 0.0], ["\"-1\" ) #NEWLINE#", 0.0], ["\"-1\" )", 0.0], ["\"-1\"", 0.0], ["\"*\"", 0.0], ["\")\" )", 0.0], ["\")\"", 0.0], ["\"(\"", 0.0], ["\"\" . join (", 0.0], ["\"\" . join", 0.0], ["\"\" .", 0.0], ["\"\" )", 0.0], ["\"\" #NEWLINE#", 0.0], ["\"\"", 0.0], ["\"r\"", 0.0], ["\"r\" :", 0.0], ["\"r\" : #INDENT#", 0.0], ["#DEDENT# #DEDENT# #DEDENT# if", 0.0], ["#DEDENT# #DEDENT# def", 0.0], ["#DEDENT# #DEDENT# colors", 0.0], ["#DEDENT# #DEDENT# check", 0.0], ["#DEDENT# #DEDENT# ans =", 0.0], ["#DEDENT# #DEDENT# ans", 0.0], ["#DEDENT# #DEDENT# #DEDENT# return", 0.0], ["#DEDENT# #DEDENT# #DEDENT# print", 0.0], ["#DEDENT# #DEDENT# #DEDENT# for", 0.0], ["\"r\" : #INDENT# cur", 0.0], ["#DEDENT# #DEDENT# #DEDENT# #DEDENT#", 0.0], ["#DEDENT# #DEDENT# #DEDENT#", 0.0], ["#DEDENT# #DEDENT#", 0.0], ["\"yes\" if", 0.0], ["\"yes\" ) #NEWLINE# return", 0.0], ["\"yes\" ) #NEWLINE# print", 0.0], ["\"yes\" ) #NEWLINE# break", 0.0], ["#DEDENT# #DEDENT# elif", 0.0], ["#DEDENT# #DEDENT# else", 0.0], ["#DEDENT# #DEDENT# else :", 0.0], ["#DEDENT# #DEDENT# for", 0.0], ["#DEDENT# a ,", 0.0], ["#DEDENT# a", 0.0], ["#DEDENT# __starting_point ( )", 0.0], ["#DEDENT# __starting_point (", 0.0], ["#DEDENT# __starting_point", 0.0], ["#DEDENT# #DEDENT# x", 0.0], ["#DEDENT# #DEDENT# return true", 0.0], ["#DEDENT# #DEDENT# return", 0.0], ["#DEDENT# #DEDENT# print the", 0.0], ["#DEDENT# #DEDENT# print (", 0.0], ["#DEDENT# #DEDENT# print", 0.0], ["#DEDENT# #DEDENT# if not", 0.0], ["#DEDENT# #DEDENT# if n", 0.0], ["#DEDENT# #DEDENT# if", 0.0], ["#DEDENT# #DEDENT# for i", 0.0], ["\"yes\" ) #NEWLINE# #DEDENT#", 0.0], ["\"yes\" ) #NEWLINE#", 0.0], ["\"yes\" )", 0.0], ["\"typ\" ]", 0.0], ["\"top\" :", 0.0], ["\"top\"", 0.0], ["\"too weak\" #NEWLINE# #DEDENT# if", 0.0], ["\"too weak\" #NEWLINE# #DEDENT#", 0.0], ["\"too weak\" #NEWLINE#", 0.0], ["\"too weak\"", 0.0], ["\"south\" : #INDENT#", 0.0], ["\"south\" :", 0.0], ["\"south\"", 0.0], ["\"right\" :", 0.0], ["\"right\"", 0.0], ["\"rated\" ) #NEWLINE# #DEDENT#", 0.0], ["\"rated\" ) #NEWLINE#", 0.0], ["\"rated\" )", 0.0], ["\"rated\"", 0.0], ["\"typ\"", 0.0], ["\"u\"", 0.0], ["\"yes\" #NEWLINE#", 0.0], ["\"u\" :", 0.0], ["\"yes\"", 0.0], ["\"y\" ] ==", 0.0], ["\"y\" ]", 0.0], ["\"y\" :", 0.0], ["\"y\"", 0.0], ["\"x\" ] ==", 0.0], ["\"x\" ]", 0.0], ["\"x\" :", 0.0], ["\"x\"", 0.0], ["\"unrated\" ) #NEWLINE# #DEDENT#", 0.0], ["\"unrated\" ) #NEWLINE#", 0.0], ["\"unrated\" )", 0.0], ["\"unrated\"", 0.0], ["\"u\" : #INDENT# cur", 0.0], ["\"u\" : #INDENT#", 0.0], ["#INDENT# ans", 0.0], ["#INDENT# ans =", 0.0], ["#NEWLINE# #DEDENT# compression =", 0.0], ["#INDENT# q", 0.0], ["#INDENT# ret", 0.0], ["#INDENT# res =", 0.0], ["#INDENT# res +=", 0.0], ["#INDENT# res", 0.0], ["#INDENT# requirements", 0.0], ["#INDENT# r =", 0.0], ["#INDENT# r", 0.0], ["#INDENT# print ( x", 0.0], ["#INDENT# print ( -1", 0.0], ["#INDENT# print ( n", 0.0], ["#INDENT# print ( min", 0.0], ["#INDENT# print ( i", 0.0], ["#INDENT# print ( combine", 0.0], ["#INDENT# print ( a", 0.0], ["#INDENT# print ( 2", 0.0], ["#INDENT# print ( 1", 0.0], ["#INDENT# ret [", 0.0], ["#INDENT# return", 0.0], ["#INDENT# return \"too weak\"", 0.0], ["#INDENT# return \"too weak\" #NEWLINE#", 0.0], ["#INDENT# return true", 0.0], ["#INDENT# return none #NEWLINE#", 0.0], ["#INDENT# return none", 0.0], ["#INDENT# return list (", 0.0], ["#INDENT# return list", 0.0], ["#INDENT# return int (", 0.0], ["#INDENT# return int", 0.0], ["#INDENT# return false #NEWLINE#", 0.0], ["#INDENT# return false", 0.0], ["#INDENT# return a #NEWLINE#", 0.0], ["#INDENT# return a", 0.0], ["#INDENT# return ( p", 0.0], ["#INDENT# return (", 0.0], ["#INDENT# return #NEWLINE# #DEDENT#", 0.0], ["#INDENT# return #NEWLINE#", 0.0], ["#INDENT# print ( 0", 0.0], ["#INDENT# print ( *", 0.0], ["#INDENT# right", 0.0], ["#INDENT# p =", 0.0], ["#INDENT# pf", 0.0], ["#INDENT# path . append", 0.0], ["#INDENT# path .", 0.0], ["#INDENT# path", 0.0], ["#INDENT# pass #NEWLINE# #DEDENT#", 0.0], ["#INDENT# pass #NEWLINE#", 0.0], ["#INDENT# pass", 0.0], ["#INDENT# p", 0.0], ["#INDENT# print ( (", 0.0], ["#INDENT# operations", 0.0], ["#INDENT# ones", 0.0], ["#INDENT# now", 0.0], ["#INDENT# n = int", 0.0], ["#INDENT# n =", 0.0], ["#INDENT# n //=", 0.0], ["#INDENT# n , x", 0.0], ["#INDENT# pf .", 0.0], ["#INDENT# pf . append", 0.0], ["#INDENT# pode", 0.0], ["#INDENT# podn", 0.0], ["#INDENT# print ( 'yes'", 0.0], ["#INDENT# print ( 'vasiliy'", 0.0], ["#INDENT# print ( 'polycarp'", 0.0], ["#INDENT# print ( 'no'", 0.0], ["#INDENT# print ( \"yes\"", 0.0], ["#INDENT# print ( \"no\"", 0.0], ["#INDENT# print ( \"bitlgm\"", 0.0], ["#INDENT# print ( \"bitaryo\"", 0.0], ["#INDENT# print ( \"===\"", 0.0], ["#INDENT# print ( \"-1\"", 0.0], ["#INDENT# print (", 0.0], ["#INDENT# print", 0.0], ["#INDENT# postfree . add", 0.0], ["#INDENT# postfree .", 0.0], ["#INDENT# postfree", 0.0], ["#INDENT# return true #NEWLINE#", 0.0], ["#INDENT# right =", 0.0], ["#INDENT# ans = max", 0.0], ["#INDENT# y =", 0.0], ["#NEWLINE# #DEDENT# #DEDENT# if", 0.0], ["#NEWLINE# #DEDENT# #DEDENT# for", 0.0], ["#NEWLINE# #DEDENT# #DEDENT# else", 0.0], ["#NEWLINE# #DEDENT# #DEDENT# def", 0.0], ["#NEWLINE# #DEDENT# #DEDENT# check", 0.0], ["#NEWLINE# #DEDENT# #DEDENT# ans", 0.0], ["#NEWLINE# #DEDENT# #DEDENT# #DEDENT#", 0.0], ["#INDENT# y -= 1", 0.0], ["#INDENT# x = int", 0.0], ["#INDENT# y -=", 0.0], ["#INDENT# y += 1", 0.0], ["#INDENT# y +=", 0.0], ["#INDENT# y", 0.0], ["#INDENT# x [ i", 0.0], ["#INDENT# x [", 0.0], ["#INDENT# x = pretochange", 0.0], ["#NEWLINE# #DEDENT# #DEDENT# print", 0.0], ["#NEWLINE# #DEDENT# #DEDENT# return", 0.0], ["#NEWLINE# #DEDENT# __starting_point", 0.0], ["#NEWLINE# #DEDENT# __starting_point (", 0.0], ["#NEWLINE# #DEDENT# compression", 0.0], ["#NEWLINE# #DEDENT# check if", 0.0], ["#NEWLINE# #DEDENT# check", 0.0], ["#NEWLINE# #DEDENT# calculate the", 0.0], ["#NEWLINE# #DEDENT# calculate", 0.0], ["#NEWLINE# #DEDENT# c =", 0.0], ["#NEWLINE# #DEDENT# c", 0.0], ["#NEWLINE# #DEDENT# b_dict", 0.0], ["#NEWLINE# #DEDENT# ans [", 0.0], ["#NEWLINE# #DEDENT# ans =", 0.0], ["#NEWLINE# #DEDENT# ans +=", 0.0], ["#NEWLINE# #DEDENT# ans", 0.0], ["#NEWLINE# #DEDENT# a1", 0.0], ["#NEWLINE# #DEDENT# a =", 0.0], ["#NEWLINE# #DEDENT# a", 0.0], ["#INDENT# x = posttochange", 0.0], ["#INDENT# x =", 0.0], ["#INDENT# s", 0.0], ["#INDENT# sum_", 0.0], ["#INDENT# u , v", 0.0], ["#INDENT# u ,", 0.0], ["#INDENT# u", 0.0], ["#INDENT# twos", 0.0], ["#INDENT# time", 0.0], ["#INDENT# t =", 0.0], ["#INDENT# t", 0.0], ["#INDENT# sum =", 0.0], ["#INDENT# x -= 1", 0.0], ["#INDENT# sum", 0.0], ["#INDENT# sl", 0.0], ["#INDENT# s2", 0.0], ["#INDENT# s1 +=", 0.0], ["#INDENT# s1", 0.0], ["#INDENT# s =", 0.0], ["#INDENT# s +=", 0.0], ["#INDENT# v", 0.0], ["#INDENT# v =", 0.0], ["#INDENT# visit", 0.0], ["#INDENT# visit [", 0.0], ["#INDENT# x -=", 0.0], ["#INDENT# x , y", 0.0], ["#INDENT# x ,", 0.0], ["#INDENT# x += 1", 0.0], ["#INDENT# x +=", 0.0], ["#INDENT# x", 0.0], ["#INDENT# wr , wb", 0.0], ["#INDENT# wr ,", 0.0], ["#INDENT# wr", 0.0], ["#INDENT# while n", 0.0], ["#INDENT# while b !=", 0.0], ["#INDENT# while b", 0.0], ["#INDENT# while", 0.0], ["#INDENT# visit [ x1", 0.0], ["#INDENT# visit [ x", 0.0], ["#INDENT# n , m", 0.0], ["#INDENT# n , k", 0.0], ["#INDENT# n ,", 0.0], ["#INDENT# for i in", 0.0], ["#INDENT# for y", 0.0], ["#INDENT# for x in", 0.0], ["#INDENT# for x", 0.0], ["#INDENT# for k in", 0.0], ["#INDENT# for k", 0.0], ["#INDENT# for j in", 0.0], ["#INDENT# for j", 0.0], ["#INDENT# for i", 0.0], ["#INDENT# e", 0.0], ["#INDENT# for c in", 0.0], ["#INDENT# for c", 0.0], ["#INDENT# for", 0.0], ["#INDENT# factor [", 0.0], ["#INDENT# factor", 0.0], ["#INDENT# f = true", 0.0], ["#INDENT# f =", 0.0], ["#INDENT# for y in", 0.0], ["#INDENT# g", 0.0], ["#INDENT# g =", 0.0], ["#INDENT# graph", 0.0], ["#INDENT# if a ==", 0.0], ["#INDENT# if a", 0.0], ["#INDENT# if ( x", 0.0], ["#INDENT# if ( s", 0.0], ["#INDENT# if ( i", 0.0], ["#INDENT# if ( ar", 0.0], ["#INDENT# if ( a", 0.0], ["#INDENT# if (", 0.0], ["#INDENT# i =", 0.0], ["#INDENT# i +=", 0.0], ["#INDENT# i", 0.0], ["#INDENT# have [ j", 0.0], ["#INDENT# have [", 0.0], ["#INDENT# have", 0.0], ["#INDENT# graph [", 0.0], ["#INDENT# f", 0.0], ["#INDENT# dp [", 0.0], ["#INDENT# n", 0.0], ["#INDENT# break #NEWLINE# #DEDENT#", 0.0], ["#INDENT# continue", 0.0], ["#INDENT# colors", 0.0], ["#INDENT# cnt += 1", 0.0], ["#INDENT# cnt +=", 0.0], ["#INDENT# cnt", 0.0], ["#INDENT# c =", 0.0], ["#INDENT# c", 0.0], ["#INDENT# break #NEWLINE#", 0.0], ["#INDENT# dp", 0.0], ["#INDENT# break", 0.0], ["#INDENT# b =", 0.0], ["#INDENT# b", 0.0], ["#INDENT# avt [ (", 0.0], ["#INDENT# avt [", 0.0], ["#INDENT# avt", 0.0], ["#INDENT# area", 0.0], ["#INDENT# continue #NEWLINE#", 0.0], ["#INDENT# continue #NEWLINE# #DEDENT#", 0.0], ["#INDENT# cost", 0.0], ["#INDENT# count", 0.0], ["#INDENT# diff =", 0.0], ["#INDENT# diff", 0.0], ["#INDENT# d [ i", 0.0], ["#INDENT# d [", 0.0], ["#INDENT# d =", 0.0], ["#INDENT# d", 0.0], ["#INDENT# cur [ 1", 0.0], ["#INDENT# cur [ 0", 0.0], ["#INDENT# cur [", 0.0], ["#INDENT# cur +=", 0.0], ["#INDENT# cur", 0.0], ["#INDENT# ct =", 0.0], ["#INDENT# ct", 0.0], ["#INDENT# count += 1", 0.0], ["#INDENT# count +=", 0.0], ["#INDENT# if a [", 0.0], ["#INDENT# if abs", 0.0], ["#INDENT# if abs (", 0.0], ["#INDENT# l . append", 0.0], ["#INDENT# li", 0.0], ["#INDENT# left =", 0.0], ["#INDENT# left", 0.0], ["#INDENT# layers [ l", 0.0], ["#INDENT# layers [", 0.0], ["#INDENT# layers", 0.0], ["#INDENT# l =", 0.0], ["#INDENT# l .", 0.0], ["#INDENT# if ans", 0.0], ["#INDENT# l ,", 0.0], ["#INDENT# l", 0.0], ["#INDENT# k =", 0.0], ["#INDENT# k", 0.0], ["#INDENT# j =", 0.0], ["#INDENT# j", 0.0], ["#INDENT# if y", 0.0], ["#INDENT# li =", 0.0], ["#INDENT# line", 0.0], ["#INDENT# lr", 0.0], ["#INDENT# lr [", 0.0], ["#INDENT# mon [", 0.0], ["#INDENT# mon", 0.0], ["#INDENT# middle = (", 0.0], ["#INDENT# middle =", 0.0], ["#INDENT# middle", 0.0], ["#INDENT# message", 0.0], ["#INDENT# main ( )", 0.0], ["#INDENT# main (", 0.0], ["#INDENT# main", 0.0], ["#INDENT# ma = max", 0.0], ["#INDENT# ma =", 0.0], ["#INDENT# ma", 0.0], ["#INDENT# m =", 0.0], ["#INDENT# m", 0.0], ["#INDENT# lr [ i", 0.0], ["#INDENT# if x", 0.0], ["#INDENT# if u", 0.0], ["#INDENT# if s [", 0.0], ["#INDENT# if grid [", 0.0], ["#INDENT# if fence [", 0.0], ["#INDENT# if fence", 0.0], ["#INDENT# if dfs_bool (", 0.0], ["#INDENT# if dfs_bool", 0.0], ["#INDENT# if colors [", 0.0], ["#INDENT# if colors", 0.0], ["#INDENT# if c", 0.0], ["#INDENT# if board [", 0.0], ["#INDENT# if board", 0.0], ["#INDENT# if b ==", 0.0], ["#INDENT# if b <", 0.0], ["#INDENT# if b", 0.0], ["#INDENT# if arr [", 0.0], ["#INDENT# if arr", 0.0], ["#INDENT# if ans [", 0.0], ["#INDENT# if grid", 0.0], ["#INDENT# if h1", 0.0], ["#INDENT# if s", 0.0], ["#INDENT# if h1 +", 0.0], ["#INDENT# if not", 0.0], ["#INDENT# if n %", 0.0], ["#INDENT# if n", 0.0], ["#INDENT# if mon [", 0.0], ["#INDENT# if mon", 0.0], ["#INDENT# if lr [", 0.0], ["#INDENT# if lr", 0.0], ["#INDENT# if l [", 0.0], ["#INDENT# if l", 0.0], ["#INDENT# if k", 0.0], ["#INDENT# if i not", 0.0], ["#INDENT# if i [", 0.0], ["#INDENT# if i >", 0.0], ["#INDENT# if i !=", 0.0], ["#INDENT# if i", 0.0], ["'x.x'", 0.0], ["'xx.'", 0.0], ["* k ) #NEWLINE#", 0.0], [") * (", 0.0], [") * a", 0.0], [") * 9", 0.0], [") * 5 ,", 0.0], [") * 5", 0.0], [") * 2", 0.0], [") * ( n", 0.0], [") * ( i", 0.0], [") *", 0.0], [") ) [ :", 0.0], [") ) print (", 0.0], [") ) print", 0.0], [") ) or false", 0.0], [") ) or", 0.0], [") ) for _", 0.0], [") ) for", 0.0], [") ) ] =", 0.0], [") * abs", 0.0], [") * abs (", 0.0], [") * b", 0.0], [") * f", 0.0], [") * y .", 0.0], [") * y", 0.0], [") * x .", 0.0], [") * x", 0.0], [") * pow (", 0.0], [") * pow", 0.0], [") * n", 0.0], [") * m #NEWLINE#", 0.0], [") * m", 0.0], [") * k //", 0.0], [") * k )", 0.0], [") * k", 0.0], [") * inv", 0.0], [") * i", 0.0], [") * f (", 0.0], [") ) ]", 0.0], [") ) [", 0.0], [") * z .", 0.0], [") ) %", 0.0], [") ) ) ==", 0.0], [") ) ) :", 0.0], [") ) ) +", 0.0], [") ) ) )", 0.0], [") ) ) #NEWLINE#", 0.0], [") ) )", 0.0], [") ) % k", 0.0], [") ) #NEWLINE# y", 0.0], [") ) >", 0.0], [") ) #NEWLINE# x_y", 0.0], [") ) #NEWLINE# x", 0.0], [") ) #NEWLINE# vectors", 0.0], [") ) #NEWLINE# v", 0.0], [") ) #NEWLINE# t", 0.0], [") ) #NEWLINE# sum", 0.0], [") ) #NEWLINE# s", 0.0], [") ) ) [", 0.0], [") ) ) for", 0.0], [") ) *", 0.0], [") ) * 2", 0.0], [") ) == none", 0.0], [") ) ==", 0.0], [") ) : #INDENT#", 0.0], [") ) :", 0.0], [") ) // k", 0.0], [") ) //", 0.0], [") ) /", 0.0], [") ) - 1", 0.0], [") ) -", 0.0], [") ) , int", 0.0], [") ) ,", 0.0], [") ) + str", 0.0], [") ) + list", 0.0], [") ) + 1", 0.0], [") ) +", 0.0], [") * z", 0.0], [") **", 0.0], [") .split ( )", 0.0], [") - 1 #NEWLINE#", 0.0], [") - max (", 0.0], [") - max", 0.0], [") - len (", 0.0], [") - len", 0.0], [") - 1 ]", 0.0], [") - 1 ,", 0.0], [") - 1 )", 0.0], [") - 1", 0.0], [") , g", 0.0], [") - (", 0.0], [") -", 0.0], [") , s .", 0.0], [") , s", 0.0], [") , int (", 0.0], [") , int", 0.0], [") , i", 0.0], [") - s", 0.0], [") - s .", 0.0], [") - sum", 0.0], [") - sum (", 0.0], [") .split", 0.0], [") . strip (", 0.0], [") . strip", 0.0], [") . splitlines (", 0.0], [") . splitlines", 0.0], [") . split (", 0.0], [") . split", 0.0], [") . rstrip (", 0.0], [") . rstrip", 0.0], [") . replace (", 0.0], [") . replace", 0.0], [") . prec =", 0.0], [") . prec", 0.0], [") . lower (", 0.0], [") . lower", 0.0], [") , g (", 0.0], [") , abs (", 0.0], [") ** 0.5", 0.0], [") ** z", 0.0], [") + 1", 0.0], [") + '' .", 0.0], [") + ''", 0.0], [") + \"/\" +", 0.0], [") + \"/\"", 0.0], [") +", 0.0], [") ** z ,", 0.0], [") ** y ,", 0.0], [") , abs", 0.0], [") ** y", 0.0], [") ** x", 0.0], [") ** 2 +", 0.0], [") ** 2 *", 0.0], [") ** 2 )", 0.0], [") ** 2", 0.0], [") ** 0.5 )", 0.0], [") + 1 #NEWLINE#", 0.0], [") + 1 )", 0.0], [") + 1 ,", 0.0], [") + 1 ]", 0.0], [") , a", 0.0], [") , (", 0.0], [") ,", 0.0], [") + str (", 0.0], [") + str", 0.0], [") + s1 .", 0.0], [") + s1", 0.0], [") + min (", 0.0], [") + min", 0.0], [") + list (", 0.0], [") + list", 0.0], [") + guy [", 0.0], [") + guy", 0.0], [") + abs (", 0.0], [") + abs", 0.0], [") ) #NEWLINE# return", 0.0], [") ) #NEWLINE# read", 0.0], [") ) #NEWLINE# ratings", 0.0], [") #NEWLINE# pretochange", 0.0], [") #NEWLINE# quit", 0.0], [") #NEWLINE# q", 0.0], [") #NEWLINE# problems", 0.0], [") #NEWLINE# print the", 0.0], [") #NEWLINE# print (", 0.0], [") #NEWLINE# print", 0.0], [") #NEWLINE# pretochange .", 0.0], [") #NEWLINE# posttochange .", 0.0], [") #NEWLINE# nums =", 0.0], [") #NEWLINE# posttochange", 0.0], [") #NEWLINE# pos =", 0.0], [") #NEWLINE# pos", 0.0], [") #NEWLINE# pick up", 0.0], [") #NEWLINE# pick", 0.0], [") #NEWLINE# p =", 0.0], [") #NEWLINE# p .", 0.0], [") #NEWLINE# quit (", 0.0], [") #NEWLINE# r", 0.0], [") #NEWLINE# r .", 0.0], [") #NEWLINE# r =", 0.0], [") #NEWLINE# s2 =", 0.0], [") #NEWLINE# s2", 0.0], [") #NEWLINE# s =", 0.0], [") #NEWLINE# s", 0.0], [") #NEWLINE# right =", 0.0], [") #NEWLINE# right", 0.0], [") #NEWLINE# return (", 0.0], [") #NEWLINE# return #NEWLINE#", 0.0], [") #NEWLINE# return", 0.0], [") #NEWLINE# res =", 0.0], [") #NEWLINE# res", 0.0], [") #NEWLINE# read the", 0.0], [") #NEWLINE# read", 0.0], [") #NEWLINE# ratings =", 0.0], [") #NEWLINE# ratings", 0.0], [") #NEWLINE# p", 0.0], [") #NEWLINE# nums", 0.0], [") ) #NEWLINE# problems", 0.0], [") #NEWLINE# h", 0.0], [") #NEWLINE# if len", 0.0], [") #NEWLINE# if k", 0.0], [") #NEWLINE# if b", 0.0], [") #NEWLINE# if ans", 0.0], [") #NEWLINE# if a", 0.0], [") #NEWLINE# if (", 0.0], [") #NEWLINE# h =", 0.0], [") #NEWLINE# graph [", 0.0], [") #NEWLINE# nops", 0.0], [") #NEWLINE# graph", 0.0], [") #NEWLINE# g =", 0.0], [") #NEWLINE# g", 0.0], [") #NEWLINE# for k", 0.0], [") #NEWLINE# for j", 0.0], [") #NEWLINE# for i", 0.0], [") #NEWLINE# for _", 0.0], [") #NEWLINE# if n", 0.0], [") #NEWLINE# if not", 0.0], [") #NEWLINE# if s", 0.0], [") #NEWLINE# if sum", 0.0], [") #NEWLINE# new =", 0.0], [") #NEWLINE# new", 0.0], [") #NEWLINE# n =", 0.0], [") #NEWLINE# n ,", 0.0], [") #NEWLINE# n", 0.0], [") #NEWLINE# m =", 0.0], [") #NEWLINE# m", 0.0], [") #NEWLINE# l =", 0.0], [") #NEWLINE# l ,", 0.0], [") #NEWLINE# l", 0.0], [") #NEWLINE# k =", 0.0], [") #NEWLINE# k", 0.0], [") #NEWLINE# if x", 0.0], [") #NEWLINE# if w", 0.0], [") #NEWLINE# if the", 0.0], [") #NEWLINE# sasha_distances", 0.0], [") #NEWLINE# solve3", 0.0], [") #NEWLINE# solve3 (", 0.0], [") ) #NEWLINE# b", 0.0], [") ) #NEWLINE# convert", 0.0], [") ) #NEWLINE# col", 0.0], [") ) #NEWLINE# cnt", 0.0], [") ) #NEWLINE# check", 0.0], [") ) #NEWLINE# calculate", 0.0], [") ) #NEWLINE# c", 0.0], [") ) #NEWLINE# break", 0.0], [") ) #NEWLINE# ar", 0.0], [") #NEWLINE# st", 0.0], [") ) #NEWLINE# answer", 0.0], [") ) #NEWLINE# a3", 0.0], [") ) #NEWLINE# a2", 0.0], [") ) #NEWLINE# #DEDENT#", 0.0], [") ) #NEWLINE#", 0.0], [") )  #INDENT#", 0.0], [") ) ", 0.0], [") ) #NEWLINE# create", 0.0], [") ) #NEWLINE# d", 0.0], [") ) #NEWLINE# def", 0.0], [") ) #NEWLINE# dists", 0.0], [") ) #NEWLINE# print", 0.0], [") ) #NEWLINE# p", 0.0], [") ) #NEWLINE# nums", 0.0], [") ) #NEWLINE# n", 0.0], [") ) #NEWLINE# l", 0.0], [") ) #NEWLINE# kefa_distances", 0.0], [") ) #NEWLINE# k", 0.0], [") ) #NEWLINE# if", 0.0], [") ) #NEWLINE# h", 0.0], [") ) #NEWLINE# grid", 0.0], [") ) #NEWLINE# graph", 0.0], [") ) #NEWLINE# for", 0.0], [") ) #NEWLINE# find", 0.0], [") ) #NEWLINE# e", 0.0], [") ) #NEWLINE# divisors", 0.0], [") )", 0.0], [") & set (", 0.0], [") & set", 0.0], [") #NEWLINE# y", 0.0], [") #NEWLINE# x =", 0.0], [") #NEWLINE# x ,", 0.0], [") #NEWLINE# x", 0.0], [") #NEWLINE# while i", 0.0], [") #NEWLINE# while", 0.0], [") #NEWLINE# vectors", 0.0], [") #NEWLINE# v =", 0.0], [") #NEWLINE# v", 0.0], [") #NEWLINE# tmp =", 0.0], [") #NEWLINE# tmp", 0.0], [") #NEWLINE# t =", 0.0], [") #NEWLINE# t", 0.0], [") #NEWLINE# sum =", 0.0], [") #NEWLINE# sum", 0.0], [") #NEWLINE# st =", 0.0], [") #NEWLINE# x_y", 0.0], [") #NEWLINE# y =", 0.0], [") &", 0.0], [") #NEWLINE# zerop", 0.0], [") % p #NEWLINE#", 0.0], [") % p", 0.0], [") % mod #NEWLINE#", 0.0], [") % mod", 0.0], [") % m", 0.0], [") % k !=", 0.0], [") % k", 0.0], [") % 6 ]", 0.0], [") % 6", 0.0], [") % 4 ]", 0.0], [") % 4", 0.0], [") % 2 !=", 0.0], [") % 2", 0.0], [") %", 0.0], [") #NEWLINE# zerop =", 0.0], [") .split (", 0.0], [") /", 0.0], [") #NEWLINE# find the", 0.0], ["* ( i -", 0.0], ["* ( len", 0.0], ["* ( l +", 0.0], ["* ( l", 0.0], ["* ( k +", 0.0], ["* ( k", 0.0], ["* ( j +", 0.0], ["* ( j", 0.0], ["* ( i +", 0.0], ["* #NEWLINE#", 0.0], ["* ( i", 0.0], ["* ( a -", 0.0], ["* ( a", 0.0], ["* ( 2 -", 0.0], ["* ( 2", 0.0], ["* (", 0.0], ["* #NEWLINE# getcontext (", 0.0], ["* ( len (", 0.0], ["* ( m", 0.0], ["* ( n", 0.0], ["* ( n )", 0.0], ["* 2 +", 0.0], ["* 2 #NEWLINE# if", 0.0], ["* 2 #NEWLINE#", 0.0], ["* 2", 0.0], ["* 10", 0.0], ["* - coding :", 0.0], ["* - coding", 0.0], ["* - #NEWLINE# import", 0.0], ["* - #NEWLINE#", 0.0], ["* -", 0.0], ["* *", 0.0], ["* ( x", 0.0], ["* ( n -", 0.0], ["* ( n +", 0.0], ["* ( n **", 0.0], ["* #NEWLINE# getcontext", 0.0], [") } #NEWLINE#", 0.0], ["* 3", 0.0], [") for j", 0.0], [") if", 0.0], [") for x in", 0.0], [") for x", 0.0], [") for s in", 0.0], [") for s", 0.0], [") for k in", 0.0], [") for k", 0.0], [") for i in", 0.0], [") }", 0.0], [") for i", 0.0], [") for entry in", 0.0], [") for entry", 0.0], [") for digit in", 0.0], [") for digit", 0.0], [") for char in", 0.0], [") for char", 0.0], [") if i", 0.0], [") if i %", 0.0], [") if int", 0.0], [") if int (", 0.0], [") print the number", 0.0], [") print the", 0.0], [") print (", 0.0], [") print", 0.0], [") or false )", 0.0], [") or false", 0.0], [") or check (", 0.0], [") or check", 0.0], [") or (", 0.0], [") or", 0.0], [") not in dists", 0.0], [") not in", 0.0], [") not", 0.0], [") if mon [", 0.0], [") if mon", 0.0], ["* 2 ==", 0.0], ["* 3 #NEWLINE#", 0.0], [") / (", 0.0], ["* d1", 0.0], ["* hr", 0.0], ["* hb", 0.0], ["* g", 0.0], ["* f (", 0.0], ["* f", 0.0], ["* d2", 0.0], ["* d1 ,", 0.0], ["* d <=", 0.0], ["* c #NEWLINE#", 0.0], ["* d #NEWLINE#", 0.0], ["* d", 0.0], ["* cnt", 0.0], ["* c2", 0.0], ["* c1 ,", 0.0], ["* c1", 0.0], ["* c //", 0.0], ["* i", 0.0], ["* i %", 0.0], ["* i % p", 0.0], ["[ maxj", 0.0], ["* k ) !=", 0.0], ["* k )", 0.0], ["* k #NEWLINE# print", 0.0], ["* k #NEWLINE#", 0.0], ["* k", 0.0], ["* j * k", 0.0], ["* j *", 0.0], ["* j", 0.0], ["* inv ) %", 0.0], ["* inv )", 0.0], ["* inv", 0.0], ["* int (", 0.0], ["* int", 0.0], ["* i *", 0.0], ["* i ) #NEWLINE#", 0.0], ["* c #NEWLINE# #DEDENT#", 0.0], ["* c", 0.0], ["* 3 )", 0.0], ["* 60 + mm", 0.0], ["* a )", 0.0], ["* a #NEWLINE# #DEDENT#", 0.0], ["* a #NEWLINE#", 0.0], ["* a", 0.0], ["* [", 0.0], ["* 9 #NEWLINE#", 0.0], ["* 9", 0.0], ["* 60 +", 0.0], ["* b2 +", 0.0], ["* 60", 0.0], ["* 5 , 10", 0.0], ["* 5 ,", 0.0], ["* 5", 0.0], ["* 4 #NEWLINE#", 0.0], ["* 4", 0.0], ["* 3 ) #NEWLINE#", 0.0], ["* a +", 0.0], ["* a + b", 0.0], ["* a + t", 0.0], ["* abs", 0.0], ["* b2", 0.0], ["* b1 -", 0.0], ["* b1", 0.0], ["* b : #INDENT#", 0.0], ["* b :", 0.0], ["* b // gcd", 0.0], ["* b //", 0.0], ["* b + c", 0.0], ["* b +", 0.0], ["* b ) //", 0.0], ["* b )", 0.0], ["* b #NEWLINE# #DEDENT#", 0.0], ["* b #NEWLINE#", 0.0], ["* b", 0.0], ["* abs (", 0.0], [") for _ in", 0.0], [") for _", 0.0], [") for", 0.0], [") : #INDENT# name", 0.0], [") : #INDENT# result", 0.0], [") : #INDENT# res", 0.0], [") : #INDENT# r", 0.0], [") : #INDENT# print", 0.0], [") : #INDENT# path", 0.0], [") : #INDENT# p", 0.0], [") : #INDENT# new", 0.0], [") : #INDENT# n", 0.0], [") : #INDENT# grid", 0.0], [") : #INDENT# movements", 0.0], [") : #INDENT# max_length", 0.0], [") : #INDENT# main", 0.0], [") : #INDENT# l", 0.0], [") : #INDENT# k", 0.0], [") : #INDENT# if", 0.0], [") : #INDENT# i", 0.0], [") : #INDENT# return", 0.0], [") : #INDENT# s", 0.0], [") : #INDENT# sl", 0.0], [") : #INDENT# sum", 0.0], [") : cos =", 0.0], [") : cos", 0.0], [") : check if", 0.0], [") : check", 0.0], [") : calculate the", 0.0], [") : calculate", 0.0], [") : #NEWLINE#", 0.0], [") : #INDENT# y", 0.0], [") : #INDENT# x", 0.0], [") : #INDENT# while", 0.0], [") : #INDENT# v", 0.0], [") : #INDENT# u", 0.0], [") : #INDENT# total", 0.0], [") : #INDENT# t", 0.0], [") : #INDENT# sum_", 0.0], [") : #INDENT# have", 0.0], [") : #INDENT# graph", 0.0], [") else 0 )", 0.0], [") // 2 )", 0.0], [") // k #NEWLINE#", 0.0], [") // k", 0.0], [") // 7", 0.0], [") // 2 :", 0.0], [") // 2 -", 0.0], [") // 2 +", 0.0], [") // 2 *", 0.0], [") // 2 #NEWLINE#", 0.0], [") : #INDENT# gap", 0.0], [") // 2", 0.0], [") // ( 2", 0.0], [") // (", 0.0], [") //", 0.0], [") / 2 )", 0.0], [") / 2 #NEWLINE#", 0.0], [") / 2", 0.0], [") // m", 0.0], [") // n", 0.0], [") // n #NEWLINE#", 0.0], [") // n ,", 0.0], [") : #INDENT# g", 0.0], [") : #INDENT# for", 0.0], [") : #INDENT# dp", 0.0], [") : #INDENT# diff", 0.0], [") : #INDENT# cost", 0.0], [") : #INDENT# colors", 0.0], [") : #INDENT# c", 0.0], [") : #INDENT# break", 0.0], [") : #INDENT# b", 0.0], [") : #INDENT# area", 0.0], [") : #INDENT# ans", 0.0], [") : #INDENT# al", 0.0], [") : #INDENT# a1", 0.0], [") : #INDENT# a", 0.0], [") : #INDENT#", 0.0], [") : if", 0.0], [") : if the", 0.0], [") <", 0.0], [") ] ) #NEWLINE#", 0.0], [") ] :", 0.0], [") ] . remove", 0.0], [") ] . append", 0.0], [") ] .", 0.0], [") ] + [", 0.0], [") ] +", 0.0], [") ] ) )", 0.0], [") ] )", 0.0], [") < k", 0.0], [") ] #NEWLINE# s", 0.0], [") ] #NEWLINE# if", 0.0], [") ] #NEWLINE# for", 0.0], [") ] #NEWLINE# edges", 0.0], [") ] #NEWLINE# check", 0.0], [") ] #NEWLINE# c1", 0.0], [") ] #NEWLINE# b", 0.0], [") ] : #INDENT#", 0.0], [") ] =", 0.0], [") ] = 0", 0.0], [") ] = 1000", 0.0], [") else 0", 0.0], [") else \"no\" )", 0.0], [") else \"no\"", 0.0], [") else", 0.0], [") and s .", 0.0], [") and s", 0.0], [") and all (", 0.0], [") and all", 0.0], [") and ( bool", 0.0], [") and (", 0.0], [") and", 0.0], [") ] for line", 0.0], [") ] for _", 0.0], [") ] for", 0.0], [") ] = [", 0.0], [") ] #NEWLINE# a", 0.0], [") ] #NEWLINE#", 0.0], [") [ : :", 0.0], [") == x", 0.0], [") == s", 0.0], [") == none :", 0.0], [") == none", 0.0], [") == abs (", 0.0], [") == abs", 0.0], [") == 3", 0.0], [") == 11 :", 0.0], [") == 11", 0.0], [") == 1 :", 0.0], [") == 1", 0.0], [") == 0 :", 0.0], [") == 0", 0.0], [") ==", 0.0], [") <=", 0.0], [") < k :", 0.0], [") == s .", 0.0], [") == x and", 0.0], [") [ :", 0.0], [") >", 0.0], [") [ 1 ]", 0.0], [") [ 1", 0.0], [") [ 0 ]", 0.0], [") [ 0", 0.0], [") [ -1 ]", 0.0], [") [ -1", 0.0], [") [", 0.0], [") >=", 0.0], [") > x or", 0.0], [") > x", 0.0], [") > n", 0.0], [") > len (", 0.0], [") > len", 0.0], [") > 0 :", 0.0], [") > 0", 0.0], [") #NEWLINE# for", 0.0], [") #NEWLINE# find", 0.0], ["'xx.' in", 0.0], ["( al [", 0.0], ["( ans ) )", 0.0], ["( ans ) #NEWLINE#", 0.0], ["( ans )", 0.0], ["( ans % (", 0.0], ["( ans %", 0.0], ["( ans", 0.0], ["( al [ ptr", 0.0], ["( al )", 0.0], ["( a [ 0", 0.0], ["( al", 0.0], ["( abs ( x", 0.0], ["( abs (", 0.0], ["( abs", 0.0], ["( a1 , b1", 0.0], ["( a1 ,", 0.0], ["( a1", 0.0], ["( ans ,", 0.0], ["( ans , i", 0.0], ["( answer", 0.0], ["( any", 0.0], ["( b -", 0.0], ["( b , a", 0.0], ["( b ,", 0.0], ["( b +", 0.0], ["( b ) )", 0.0], ["( b ) #NEWLINE#", 0.0], ["( b )", 0.0], ["( b", 0.0], ["( arr )", 0.0], ["( arr", 0.0], ["( area )", 0.0], ["( area", 0.0], ["( ar", 0.0], ["( any ( char", 0.0], ["( any (", 0.0], ["( a [ i", 0.0], ["( a [", 0.0], ["( b [ i", 0.0], ["( [", 0.0], ["( [ str", 0.0], ["( [ int (", 0.0], ["( [ int", 0.0], ["( [ 1 for", 0.0], ["( [ 1", 0.0], ["( [ 'a' ,", 0.0], ["( [ 'a'", 0.0], ["( 60", 0.0], ["( a //", 0.0], ["( 4 ) :", 0.0], ["( 4 )", 0.0], ["( 4", 0.0], ["( 3 ,", 0.0], ["( 3 ) :", 0.0], ["( 3 ) #NEWLINE#", 0.0], ["( 3 )", 0.0], ["( [ str (", 0.0], ["( ``", 0.0], ["( a", 0.0], ["( a %", 0.0], ["( a - b", 0.0], ["( a -", 0.0], ["( a , x", 0.0], ["( a , index", 0.0], ["( a , b", 0.0], ["( a ,", 0.0], ["( a + b", 0.0], ["( a +", 0.0], ["( a *", 0.0], ["( a ) :", 0.0], ["( a ) //", 0.0], ["( a ) -", 0.0], ["( a ) )", 0.0], ["( a ) #NEWLINE#", 0.0], ["( a )", 0.0], ["( b [", 0.0], ["( best", 0.0], ["( int , input", 0.0], ["( f [", 0.0], ["( hh *", 0.0], ["( hh", 0.0], ["( h )", 0.0], ["( h", 0.0], ["( g )", 0.0], ["( g", 0.0], ["( final", 0.0], ["( f", 0.0], ["( dp", 0.0], ["( ete -", 0.0], ["( ete", 0.0], ["( e + 1", 0.0], ["( e +", 0.0], ["( e )", 0.0], ["( e", 0.0], ["( dp ) #NEWLINE#", 0.0], ["( hh * 60", 0.0], ["( i", 0.0], ["( i )", 0.0], ["( i ) #NEWLINE#", 0.0], ["( int ( input", 0.0], ["( int (", 0.0], ["( int", 0.0], ["( input ( )", 0.0], ["( input (", 0.0], ["( input", 0.0], ["( i - j", 0.0], ["( i - 1", 0.0], ["( i -", 0.0], ["( i , n", 0.0], ["( i , j", 0.0], ["( i ,", 0.0], ["( i + 1", 0.0], ["( i +", 0.0], ["( i ) for", 0.0], ["( dp )", 0.0], ["( distance_willman", 0.0], ["( best [", 0.0], ["( c ,", 0.0], ["( char .", 0.0], ["( char", 0.0], ["( ca [ i", 0.0], ["( ca [", 0.0], ["( ca", 0.0], ["( c //", 0.0], ["( c -", 0.0], ["( c ) :", 0.0], ["( digit )", 0.0], ["( c ) #NEWLINE#", 0.0], ["( c )", 0.0], ["( c", 0.0], ["( bool ( any", 0.0], ["( bool (", 0.0], ["( bool", 0.0], ["( best [ 0", 0.0], ["( cnt", 0.0], ["( combine", 0.0], ["( combine (", 0.0], ["( combine ( al", 0.0], ["( digit", 0.0], ["( decimal", 0.0], ["( d [", 0.0], ["( d -", 0.0], ["( d ,", 0.0], ["( d )", 0.0], ["( d", 0.0], ["( cur", 0.0], ["( course", 0.0], ["( count ) #NEWLINE#", 0.0], ["( count )", 0.0], ["( count", 0.0], ["( cost", 0.0], ["( compression )", 0.0], ["( compression", 0.0], ["( 3", 0.0], ["( 2 ,", 0.0], ["( 2 **", 0.0], ["( '0'", 0.0], ["( 'g'", 0.0], ["( 'c' )", 0.0], ["( 'c'", 0.0], ["( 'a' )", 0.0], ["( 'a'", 0.0], ["( '0' ) #NEWLINE#", 0.0], ["( '0' )", 0.0], ["( '->' . join", 0.0], ["( \"yes\" if", 0.0], ["( '->' .", 0.0], ["( '->'", 0.0], ["( '-' )", 0.0], ["( '-'", 0.0], ["( ' ' ) ]", 0.0], ["( ' ' ) )", 0.0], ["( ' ' )", 0.0], ["( 'g' )", 0.0], ["( 'inf'", 0.0], ["( 'inf' )", 0.0], ["( 'inf' ) #NEWLINE#", 0.0], ["( 'yes' ) #NEWLINE#", 0.0], ["( 'yes' )", 0.0], ["( 'yes'", 0.0], ["( 'vasiliy' ) #NEWLINE#", 0.0], ["( 'vasiliy' )", 0.0], ["( 'vasiliy'", 0.0], ["( 't' ) #NEWLINE#", 0.0], ["( 't' )", 0.0], ["( 't'", 0.0], ["( 'polycarp' ) #NEWLINE#", 0.0], ["( 'polycarp' )", 0.0], ["( 'polycarp'", 0.0], ["( 'no' ) #NEWLINE#", 0.0], ["( 'no' )", 0.0], ["( 'no'", 0.0], ["( ' '", 0.0], ["( \"yes\" ) #NEWLINE#", 0.0], ["( 2 *", 0.0], ["( \" \" ) ]", 0.0], ["( \"-1\"", 0.0], ["( \")\" )", 0.0], ["( \")\"", 0.0], ["( \"(\"", 0.0], ["( \"\" . join", 0.0], ["( \"\" .", 0.0], ["( \"\"", 0.0], ["( \" \" ) #NEWLINE#", 0.0], ["( \"yes\" )", 0.0], ["( \" \" )", 0.0], ["( \" \"", 0.0], ["'yes' ) #NEWLINE# print", 0.0], ["'yes' ) #NEWLINE# #DEDENT#", 0.0], ["'yes' ) #NEWLINE#", 0.0], ["'yes' )", 0.0], ["'yes'", 0.0], ["( \"-1\" )", 0.0], ["( \"-1\" ) #NEWLINE#", 0.0], ["( \"===\"", 0.0], ["( \"===\" )", 0.0], ["( \"no\" ) #NEWLINE#", 0.0], ["( \"no\" )", 0.0], ["( \"no\"", 0.0], ["( \"move\" , x", 0.0], ["( \"move\" ,", 0.0], ["( \"move\"", 0.0], ["( \"inf\" )", 0.0], ["( \"inf\"", 0.0], ["( \"bitlgm\" ) #NEWLINE#", 0.0], ["( \"bitlgm\" )", 0.0], ["( \"bitlgm\"", 0.0], ["( \"bitaryo\" ) #NEWLINE#", 0.0], ["( \"bitaryo\" )", 0.0], ["( \"bitaryo\"", 0.0], ["( \"===\" ) #NEWLINE#", 0.0], ["( (", 0.0], ["( ( \"move\"", 0.0], ["( ( \"move\" ,", 0.0], ["( ) for char", 0.0], ["( 0 ) #NEWLINE#", 0.0], ["( 0 )", 0.0], ["( 0", 0.0], ["( -1 ) #NEWLINE#", 0.0], ["( -1 )", 0.0], ["( -1", 0.0], ["( *", 0.0], ["( ) for", 0.0], ["( ( a", 0.0], ["( ) ] for", 0.0], ["( ) ] #NEWLINE#", 0.0], ["( ) ]", 0.0], ["( ) [ 1", 0.0], ["( ) [", 0.0], ["( ) ==", 0.0], ["( ) : #INDENT#", 0.0], ["( 0 ,", 0.0], ["( 0 if", 0.0], ["( 1", 0.0], ["( 1 )", 0.0], ["( 2 ) #NEWLINE#", 0.0], ["( 2 )", 0.0], ["( 2", 0.0], ["( 10 ** 9", 0.0], ["( 10 **", 0.0], ["( 10", 0.0], ["( 1 <<", 0.0], ["( 1 , t", 0.0], ["( 1 , n", 0.0], ["( 1 , len", 0.0], ["( 1 , int", 0.0], ["( 1 , a", 0.0], ["( 1 , (", 0.0], ["( 1 ,", 0.0], ["( 1 ) #NEWLINE#", 0.0], ["( ) :", 0.0], ["( ) . strip", 0.0], ["( ) . splitlines", 0.0], ["( ) #NEWLINE# d", 0.0], ["( ) #NEWLINE# check", 0.0], ["( ) #NEWLINE# calculate", 0.0], ["( ) #NEWLINE# c", 0.0], ["( ) #NEWLINE# b", 0.0], ["( ) #NEWLINE# ans", 0.0], ["( ) #NEWLINE# a", 0.0], ["( ) #NEWLINE# #DEDENT#", 0.0], ["( ) #NEWLINE#", 0.0], ["( ( x ,", 0.0], ["( ( x", 0.0], ["( ( n -", 0.0], ["( ( n", 0.0], ["( ( k", 0.0], ["( ( i ,", 0.0], ["( ( i", 0.0], ["( ) #NEWLINE# create", 0.0], ["( ) #NEWLINE# def", 0.0], ["( ) . lower", 0.0], ["( ) #NEWLINE# find", 0.0], ["( ) ,", 0.0], ["( ) ) for", 0.0], ["( ) ) :", 0.0], ["( ) ) ,", 0.0], ["( ) ) )", 0.0], ["( ) )", 0.0], ["( ) #NEWLINE# x", 0.0], ["( ) #NEWLINE# tmp", 0.0], ["( ) #NEWLINE# s", 0.0], ["( ) #NEWLINE# print", 0.0], ["( ) #NEWLINE# n", 0.0], ["( ) #NEWLINE# k", 0.0], ["( ) #NEWLINE# if", 0.0], ["( ) #NEWLINE# g", 0.0], ["( ) #NEWLINE# for", 0.0], ["( int ( x", 0.0], ["( int , sys", 0.0], [") #NEWLINE# f =", 0.0], ["( v ) #NEWLINE#", 0.0], ["( x ) )", 0.0], ["( x ) #NEWLINE#", 0.0], ["( x )", 0.0], ["( x", 0.0], ["( vectors [", 0.0], ["( vectors", 0.0], ["( v ,", 0.0], ["( v )", 0.0], ["( time", 0.0], ["( v", 0.0], ["( upp", 0.0], ["( u , graph", 0.0], ["( u ,", 0.0], ["( u", 0.0], ["( tmp [", 0.0], ["( tmp )", 0.0], ["( x ) :", 0.0], ["( x ) for", 0.0], ["( x *", 0.0], ["( x **", 0.0], ["( y **", 0.0], ["( y ) #NEWLINE#", 0.0], ["( y )", 0.0], ["( y", 0.0], ["( x1 ,", 0.0], ["( x1", 0.0], ["( x [ 0", 0.0], ["( x [", 0.0], ["( x - 1", 0.0], ["( x -", 0.0], ["( x , y", 0.0], ["( x ,", 0.0], ["( x + y", 0.0], ["( x +", 0.0], ["( x ** y", 0.0], ["( tmp", 0.0], ["( t ) :", 0.0], ["( y -", 0.0], ["( s [ 0", 0.0], ["( set ( a", 0.0], ["( set (", 0.0], ["( set", 0.0], ["( s1 ) #NEWLINE#", 0.0], ["( s1 )", 0.0], ["( s1", 0.0], ["( s [ i", 0.0], ["( s [", 0.0], ["( t ) #NEWLINE#", 0.0], ["( s .", 0.0], ["( s ,", 0.0], ["( s ) ==", 0.0], ["( s ) :", 0.0], ["( s ) -", 0.0], ["( s ) )", 0.0], ["( s ) #NEWLINE#", 0.0], ["( sol_1", 0.0], ["( sol_2", 0.0], ["( sorted", 0.0], ["( sorted (", 0.0], ["( t )", 0.0], ["( t", 0.0], ["( sum", 0.0], ["( sufflen ) #NEWLINE#", 0.0], ["( sufflen )", 0.0], ["( sufflen", 0.0], ["( str ( x", 0.0], ["( str ( int", 0.0], ["( str (", 0.0], ["( str", 0.0], ["( stones", 0.0], ["( st )", 0.0], ["( st", 0.0], ["( split (", 0.0], ["( split", 0.0], ["( y ,", 0.0], ["( y_b", 0.0], ["( j", 0.0], [") #NEWLINE# calculate", 0.0], [") #NEWLINE# col .", 0.0], [") #NEWLINE# col", 0.0], [") #NEWLINE# cnt =", 0.0], [") #NEWLINE# cnt", 0.0], [") #NEWLINE# check if", 0.0], [") #NEWLINE# check", 0.0], [") #NEWLINE# calculate the", 0.0], [") #NEWLINE# c =", 0.0], [") #NEWLINE# answer", 0.0], [") #NEWLINE# c ,", 0.0], [") #NEWLINE# c", 0.0], [") #NEWLINE# break #NEWLINE#", 0.0], [") #NEWLINE# break", 0.0], [") #NEWLINE# b =", 0.0], [") #NEWLINE# b", 0.0], [") #NEWLINE# arr =", 0.0], [") #NEWLINE# convert", 0.0], [") #NEWLINE# count", 0.0], [") #NEWLINE# count the", 0.0], [") #NEWLINE# create", 0.0], [") #NEWLINE# f", 0.0], [") #NEWLINE# exit (", 0.0], [") #NEWLINE# exit", 0.0], [") #NEWLINE# e =", 0.0], [") #NEWLINE# e", 0.0], [") #NEWLINE# done", 0.0], [") #NEWLINE# dists [", 0.0], [") #NEWLINE# dists", 0.0], [") #NEWLINE# def gcd", 0.0], [") #NEWLINE# def", 0.0], [") #NEWLINE# d =", 0.0], [") #NEWLINE# d", 0.0], [") #NEWLINE# cur =", 0.0], [") #NEWLINE# cur", 0.0], [") #NEWLINE# create a", 0.0], [") #NEWLINE# arr", 0.0], [") #NEWLINE# ans =", 0.0], ["( y_b -", 0.0], [") != 0", 0.0], [") #NEWLINE# #DEDENT# ans", 0.0], [") #NEWLINE# #DEDENT# a", 0.0], [") #NEWLINE# #DEDENT# __starting_point", 0.0], [") #NEWLINE# #DEDENT# #DEDENT#", 0.0], [") #NEWLINE# #DEDENT#", 0.0], [") #NEWLINE#", 0.0], [") != 0 :", 0.0], [") !=", 0.0], [") #NEWLINE# ans .", 0.0], [") !", 0.0], [")  #INDENT# #DEDENT#", 0.0], [")  #INDENT#", 0.0], [") ", 0.0], [")", 0.0], ["( z **", 0.0], ["( z", 0.0], [") #NEWLINE# #DEDENT# calculate", 0.0], [") #NEWLINE# #DEDENT# d", 0.0], [") #NEWLINE# #DEDENT# def", 0.0], [") #NEWLINE# #DEDENT# elif", 0.0], [") #NEWLINE# a2 ,", 0.0], [") #NEWLINE# a2", 0.0], [") #NEWLINE# a =", 0.0], [") #NEWLINE# a .", 0.0], [") #NEWLINE# a ,", 0.0], [") #NEWLINE# a", 0.0], [") #NEWLINE# ;", 0.0], [") #NEWLINE# #INDENT#", 0.0], [") #NEWLINE# #DEDENT# return", 0.0], [") #NEWLINE# #DEDENT# print", 0.0], [") #NEWLINE# #DEDENT# n", 0.0], [") #NEWLINE# #DEDENT# main", 0.0], [") #NEWLINE# #DEDENT# if", 0.0], [") #NEWLINE# #DEDENT# for", 0.0], [") #NEWLINE# #DEDENT# else", 0.0], ["( s )", 0.0], ["( s", 0.0], ["( row", 0.0], ["( m ) #NEWLINE#", 0.0], ["( m - 1", 0.0], ["( m -", 0.0], ["( m ,", 0.0], ["( m * k", 0.0], ["( m *", 0.0], ["( m ) ]", 0.0], ["( m ) :", 0.0], ["( m )", 0.0], ["( line", 0.0], ["( m", 0.0], ["( low", 0.0], ["( lo", 0.0], ["( list ( map", 0.0], ["( list ( input", 0.0], ["( list (", 0.0], ["( list", 0.0], ["( m1", 0.0], ["( m1 ,", 0.0], ["( m1 , m2", 0.0], ["( ma", 0.0], ["( mini +", 0.0], ["( mini", 0.0], ["( min ( l", 0.0], ["( min ( abs", 0.0], ["( min (", 0.0], ["( min", 0.0], ["( max (", 0.0], ["( max", 0.0], ["( math .", 0.0], ["( math", 0.0], ["( map ( int", 0.0], ["( map (", 0.0], ["( map", 0.0], ["( maincost", 0.0], ["( ma ,", 0.0], ["( line [", 0.0], ["( lenx ) ]", 0.0], ["( right", 0.0], ["( k ,", 0.0], ["( l ) -", 0.0], ["( l ) )", 0.0], ["( l )", 0.0], ["( l", 0.0], ["( k - i", 0.0], ["( k - 1", 0.0], ["( k -", 0.0], ["( k + 1", 0.0], ["( lenx )", 0.0], ["( k +", 0.0], ["( k ) #NEWLINE#", 0.0], ["( k )", 0.0], ["( k", 0.0], ["( j + 2", 0.0], ["( j + 1", 0.0], ["( j +", 0.0], ["( l +", 0.0], ["( l + 1", 0.0], ["( l ,", 0.0], ["( l , r", 0.0], ["( lenx", 0.0], ["( len ( s", 0.0], ["( len ( pf", 0.0], ["( len ( a", 0.0], ["( len (", 0.0], ["( len", 0.0], ["( left + right", 0.0], ["( left +", 0.0], ["( left", 0.0], ["( l_1 ,", 0.0], ["( l_1", 0.0], ["( l [ 0", 0.0], ["( l [", 0.0], ["( l -", 0.0], ["( l , reverse", 0.0], ["( mini + 1", 0.0], ["( minj", 0.0], ["( minj +", 0.0], ["( p [", 0.0], ["( pref", 0.0], ["( possible", 0.0], ["( pos -", 0.0], ["( pos", 0.0], ["( pf ) )", 0.0], ["( pf )", 0.0], ["( pf", 0.0], ["( p ,", 0.0], ["( minj + 1", 0.0], ["( p", 0.0], ["( operations ) #NEWLINE#", 0.0], ["( operations )", 0.0], ["( operations", 0.0], ["( nums", 0.0], ["( number", 0.0], ["( num_str [", 0.0], ["( q", 0.0], ["( q )", 0.0], ["( r", 0.0], ["( r )", 0.0], ["( reversed (", 0.0], ["( reversed", 0.0], ["( res", 0.0], ["( re . search", 0.0], ["( re .", 0.0], ["( re", 0.0], ["( ratings", 0.0], ["( range (", 0.0], ["( range", 0.0], ["( r -", 0.0], ["( r ,", 0.0], ["( r + s", 0.0], ["( r +", 0.0], ["( r ) :", 0.0], ["( r ) #NEWLINE#", 0.0], ["( num_str", 0.0], ["( num )", 0.0], ["( num", 0.0], ["( n + 1", 0.0], ["( n ** 2", 0.0], ["( n ** 0.5", 0.0], ["( n **", 0.0], ["( n *", 0.0], ["( n ) ]", 0.0], ["( n ) :", 0.0], ["( n ) )", 0.0], ["( n ) #NEWLINE#", 0.0], ["( n )", 0.0], ["( n %", 0.0], ["( n", 0.0], ["( moves )", 0.0], ["( moves", 0.0], ["( mm ,", 0.0], ["( mm", 0.0], ["( n +", 0.0], ["( n ,", 0.0], ["( np .", 0.0], ["( n , a", 0.0], ["( np", 0.0], ["( nm [", 0.0], ["( nm", 0.0], ["( n // 2", 0.0], ["( n //", 0.0], ["( n /", 0.0], ["( n - x", 0.0], ["( n - i", 0.0], ["( n - 2", 0.0], ["( n - 1", 0.0], ["( n -", 0.0], ["( n , p", 0.0], ["( n , m", 0.0], ["( n , k", 0.0], ["( n , graph", 0.0], ["[ maxi ] [", 0.0], ["[ n ]", 0.0], ["[ maxj ]", 0.0], ["ones [ i ]", 0.0], ["or '.xx'", 0.0], ["or", 0.0], ["operations =", 0.0], ["operations ) #NEWLINE#", 0.0], ["operations )", 0.0], ["operations", 0.0], ["op", 0.0], ["ones [ i -", 0.0], ["ok ( )", 0.0], ["ones [ i", 0.0], ["ones [", 0.0], ["ones", 0.0], ["one", 0.0], ["on the", 0.0], ["on each", 0.0], ["on", 0.0], ["or '.xx' in", 0.0], ["or 'x.x'", 0.0], ["or 'x.x' in", 0.0], ["or 'xx.'", 0.0], ["or s .", 0.0], ["or s", 0.0], ["or pixels [", 0.0], ["or pixels", 0.0], ["or n", 0.0], ["or false )", 0.0], ["or false", 0.0], ["or check ( a1", 0.0], ["or check (", 0.0], ["or check", 0.0], ["or b", 0.0], ["or a ==", 0.0], ["or a", 0.0], ["or (", 0.0], ["or 'xx.' in", 0.0], ["ok ( ) :", 0.0], ["ok (", 0.0], ["or x", 0.0], ["of letters", 0.0], ["of questions a", 0.0], ["of questions", 0.0], ["of moves #NEWLINE#", 0.0], ["of moves", 0.0], ["of minutes", 0.0], ["of letters to remove", 0.0], ["of letters to", 0.0], ["of each", 0.0], ["ok", 0.0], ["of days", 0.0], ["of bourles", 0.0], ["of", 0.0], ["odd_sum_max", 0.0], ["odd_sum", 0.0], ["occ", 0.0], ["numwood", 0.0], ["of questions a particular", 0.0], ["of rows", 0.0], ["of spheres", 0.0], ["of steps", 0.0], ["of years", 0.0], ["of wood", 0.0], ["of trailing zeros #NEWLINE#", 0.0], ["of trailing zeros", 0.0], ["of trailing", 0.0], ["of the year", 0.0], ["of the vote #NEWLINE#", 0.0], ["of the vote", 0.0], ["of the string is", 0.0], ["of the longest non-palindrome", 0.0], ["of the longest", 0.0], ["of the", 0.0], ["of terms", 0.0], ["of steps to the", 0.0], ["of steps to", 0.0], ["or s . count", 0.0], ["or y", 0.0], ["nums", 0.0], ["pesh", 0.0], ["pixels", 0.0], ["phi", 0.0], ["pf [", 0.0], ["pf ) ) :", 0.0], ["pf ) )", 0.0], ["pf )", 0.0], ["pf", 0.0], ["paths", 0.0], ["p in", 0.0], ["path . append (", 0.0], ["path . append", 0.0], ["path .", 0.0], ["path", 0.0], ["pass #NEWLINE# #DEDENT#", 0.0], ["pass #NEWLINE#", 0.0], ["pass", 0.0], ["pixels [", 0.0], ["pixels [ y", 0.0], ["pixels [ y ]", 0.0], ["pode", 0.0], ["pos - a )", 0.0], ["pos - a", 0.0], ["pos -", 0.0], ["pos , l ,", 0.0], ["pos , l", 0.0], ["pos ,", 0.0], ["pos += 1 #NEWLINE#", 0.0], ["pos )", 0.0], ["pos", 0.0], ["pop ( ) #NEWLINE#", 0.0], ["pop ( )", 0.0], ["pop (", 0.0], ["pop", 0.0], ["podn", 0.0], ["pode ==", 0.0], ["pairs", 0.0], ["p ]", 0.0], ["or y ==", 0.0], ["over", 0.0], ["p *", 0.0], ["p ) #NEWLINE#", 0.0], ["p )", 0.0], ["p #NEWLINE# #DEDENT#", 0.0], ["p #NEWLINE#", 0.0], ["p", 0.0], ["over the", 0.0], ["outcome =", 0.0], ["p [ i ]", 0.0], ["outcome", 0.0], ["otherwise ,", 0.0], ["otherwise", 0.0], ["order #NEWLINE#", 0.0], ["order", 0.0], ["ord (", 0.0], ["ord", 0.0], ["p **", 0.0], ["p ,", 0.0], ["p , c", 0.0], ["p , q", 0.0], ["p [ i", 0.0], ["p [ 0", 0.0], ["p [", 0.0], ["p == 0 :", 0.0], ["p == 0", 0.0], ["p ==", 0.0], ["p = map (", 0.0], ["p = map", 0.0], ["p = 1 #NEWLINE#", 0.0], ["p = 1", 0.0], ["p =", 0.0], ["p : #INDENT#", 0.0], ["p :", 0.0], ["p .", 0.0], ["p , q =", 0.0], ["nums [", 0.0], ["numpy as np #NEWLINE#", 0.0], ["pos - l )", 0.0], ["not in dists", 0.0], ["not liney [", 0.0], ["not liney", 0.0], ["not linex [", 0.0], ["not linex", 0.0], ["not in graph .", 0.0], ["not in graph", 0.0], ["not in dists [", 0.0], ["not in a :", 0.0], ["not", 0.0], ["not in a", 0.0], ["not in", 0.0], ["not found : #INDENT#", 0.0], ["not found :", 0.0], ["not found", 0.0], ["not close enough to", 0.0], ["not close enough", 0.0], ["not liney [ x", 0.0], ["not ok", 0.0], ["not ok (", 0.0], ["not ok ( )", 0.0], ["now =", 0.0], ["now +=", 0.0], ["now * (", 0.0], ["now *", 0.0], ["now #NEWLINE#", 0.0], ["now", 0.0], ["not visit [ x1", 0.0], ["not visit [ x", 0.0], ["not visit [", 0.0], ["not visit", 0.0], ["not u in mask", 0.0], ["not u in", 0.0], ["not u", 0.0], ["not prime (", 0.0], ["not prime", 0.0], ["not close", 0.0], ["nops , ns", 0.0], ["now = now *", 0.0], ["next lucky year", 0.0], ["nm [ 0 ]", 0.0], ["nm [ 0", 0.0], ["nm [", 0.0], ["nm", 0.0], ["next_lucky_year", 0.0], ["next lucky year is", 0.0], ["next lucky year #NEWLINE#", 0.0], ["next lucky", 0.0], ["nops ,", 0.0], ["next", 0.0], ["new2", 0.0], ["new1", 0.0], ["new0", 0.0], ["new = '' #NEWLINE#", 0.0], ["new = ''", 0.0], ["new =", 0.0], ["nmainl", 0.0], ["nmainl #NEWLINE#", 0.0], ["no", 0.0], ["node", 0.0], ["nops += 1 #NEWLINE#", 0.0], ["nops += 1", 0.0], ["nops +=", 0.0], ["nops", 0.0], ["none : #INDENT# return", 0.0], ["none : #INDENT#", 0.0], ["none :", 0.0], ["none #NEWLINE# #DEDENT# #DEDENT#", 0.0], ["none #NEWLINE# #DEDENT#", 0.0], ["none #NEWLINE#", 0.0], ["none", 0.0], ["non-palindrome substring #NEWLINE#", 0.0], ["non-palindrome substring", 0.0], ["non-palindrome", 0.0], ["nodes", 0.0], ["now = now", 0.0], ["now = x", 0.0], ["numpy as np", 0.0], ["num_rows_served", 0.0], ["number #NEWLINE#", 0.0], ["number", 0.0], ["num_zeros", 0.0], ["num_year_bin", 0.0], ["num_str [", 0.0], ["num_str", 0.0], ["num_sparrows", 0.0], ["num_reds", 0.0], ["num_blues", 0.0], ["num_painted", 0.0], ["num_non_zero_digits = sum (", 0.0], ["num_non_zero_digits = sum", 0.0], ["num_non_zero_digits =", 0.0], ["num_non_zero_digits", 0.0], ["num_fights", 0.0], ["num_divisibles", 0.0], ["number )", 0.0], ["number of", 0.0], ["number of bourles", 0.0], ["number of days", 0.0], ["numpy as", 0.0], ["numpy", 0.0], ["numdigits", 0.0], ["numbers #NEWLINE#", 0.0], ["numbers", 0.0], ["number of terms", 0.0], ["number of steps to", 0.0], ["number of steps", 0.0], ["number of spheres", 0.0], ["number of rows", 0.0], ["number of moves #NEWLINE#", 0.0], ["number of moves", 0.0], ["number of minutes", 0.0], ["number of letters to", 0.0], ["number of letters", 0.0], ["num_days", 0.0], ["num_bars", 0.0], ["now = x #NEWLINE#", 0.0], ["np . argmin (", 0.0], ["np . searchsorted", 0.0], ["np . dot (", 0.0], ["np . dot", 0.0], ["np . concatenate (", 0.0], ["np . concatenate", 0.0], ["np . array (", 0.0], ["np . array", 0.0], ["np . argmin", 0.0], ["num_2015", 0.0], ["np . arange (", 0.0], ["np . arange", 0.0], ["np .", 0.0], ["np ,", 0.0], ["np #NEWLINE# n", 0.0], ["np #NEWLINE#", 0.0], ["np", 0.0], ["np . searchsorted (", 0.0], ["np . unique", 0.0], ["np . unique (", 0.0], ["np =", 0.0], ["num_ dresses_remaining", 0.0], ["num_ dresses", 0.0], ["num_", 0.0], ["num2words2", 0.0], ["num2words1 [", 0.0], ["num2words1", 0.0], ["num = str (", 0.0], ["num = str", 0.0], ["num =", 0.0], ["num ) #NEWLINE#", 0.0], ["num )", 0.0], ["num", 0.0], ["ns =", 0.0], ["ns", 0.0], ["nremlen", 0.0], ["pos - l", 0.0], ["pos - r", 0.0], ["new += '0'", 0.0], ["print the result", 0.0], ["ptr +", 0.0], ["ptr ) #NEWLINE#", 0.0], ["ptr )", 0.0], ["ptr", 0.0], ["problems", 0.0], ["print the total", 0.0], ["print the result #NEWLINE#", 0.0], ["print the number of", 0.0], ["print ( y", 0.0], ["print the number", 0.0], ["print the minimum number", 0.0], ["print the minimum", 0.0], ["print the maximum number", 0.0], ["print the maximum", 0.0], ["print the answer #NEWLINE#", 0.0], ["print the answer", 0.0], ["ptr + 1", 0.0], ["ptr + 1 :", 0.0], ["ptr ]", 0.0], ["put", 0.0], ["q_append (", 0.0], ["q_append", 0.0], ["q [ -1 ]", 0.0], ["q [ -1", 0.0], ["q [", 0.0], ["q =", 0.0], ["q .", 0.0], ["q , l", 0.0], ["q ,", 0.0], ["q +", 0.0], ["q *", 0.0], ["q ) : #INDENT#", 0.0], ["q ) :", 0.0], ["q )", 0.0], ["q", 0.0], ["print the", 0.0], ["print ( x ,", 0.0], ["queue", 0.0], ["print ( int", 0.0], ["print ( m )", 0.0], ["print ( m", 0.0], ["print ( len (", 0.0], ["print ( len", 0.0], ["print ( k )", 0.0], ["print ( k", 0.0], ["print ( int (", 0.0], ["print ( i ,", 0.0], ["print ( x )", 0.0], ["print ( i )", 0.0], ["print ( i", 0.0], ["print ( dp )", 0.0], ["print ( dp", 0.0], ["print ( count )", 0.0], ["print ( count", 0.0], ["print ( combine (", 0.0], ["print ( max", 0.0], ["print ( max (", 0.0], ["print ( min", 0.0], ["print ( min (", 0.0], ["print ( x", 0.0], ["print ( t", 0.0], ["print ( sum", 0.0], ["print ( sufflen )", 0.0], ["print ( sufflen", 0.0], ["print ( s1 )", 0.0], ["print ( s1", 0.0], ["print ( s", 0.0], ["print ( res", 0.0], ["print ( r )", 0.0], ["print ( r", 0.0], ["print ( operations )", 0.0], ["print ( operations", 0.0], ["print ( n )", 0.0], ["print ( n", 0.0], ["q_append ( (", 0.0], ["queue .", 0.0], ["print ( c ,", 0.0], ["random .", 0.0], ["range ( 1 ,", 0.0], ["range ( 1", 0.0], ["range ( 0 ,", 0.0], ["range ( 0", 0.0], ["range (", 0.0], ["random . randint (", 0.0], ["random . randint", 0.0], ["random #NEWLINE#", 0.0], ["r ] [", 0.0], ["random", 0.0], ["randint (", 0.0], ["randint", 0.0], ["r_close", 0.0], ["r in range (", 0.0], ["r in range", 0.0], ["r in", 0.0], ["range ( 2", 0.0], ["range ( 2 ,", 0.0], ["range ( 3", 0.0], ["range ( 3 )", 0.0], ["range ( len", 0.0], ["range ( l ,", 0.0], ["range ( l", 0.0], ["range ( k", 0.0], ["range ( i ,", 0.0], ["range ( i", 0.0], ["range ( e", 0.0], ["range ( c )", 0.0], ["range ( c", 0.0], ["range ( b", 0.0], ["range ( a ,", 0.0], ["range ( a", 0.0], ["range ( 60", 0.0], ["range ( 4 )", 0.0], ["range ( 4", 0.0], ["r ] [ c", 0.0], ["r ]", 0.0], ["r", 0.0], ["r ) :", 0.0], ["r +=", 0.0], ["r + s +", 0.0], ["r + s", 0.0], ["r + 1 )", 0.0], ["r + 1", 0.0], ["r +", 0.0], ["r ) : #INDENT#", 0.0], ["r ) +", 0.0], ["r [", 0.0], ["r ) ) #NEWLINE#", 0.0], ["r ) )", 0.0], ["r ) #NEWLINE#", 0.0], ["r )", 0.0], ["r ( )", 0.0], ["r (", 0.0], ["r #NEWLINE#", 0.0], ["r ,", 0.0], ["r , p", 0.0], ["r , s", 0.0], ["r , s ,", 0.0], ["r ==", 0.0], ["r = min (", 0.0], ["r = min", 0.0], ["r = map (", 0.0], ["r = map", 0.0], ["r = list (", 0.0], ["r = list", 0.0], ["r = lambda :", 0.0], ["r = lambda", 0.0], ["r =", 0.0], ["r : #INDENT#", 0.0], ["r :", 0.0], ["r .", 0.0], ["r -", 0.0], ["r , x", 0.0], ["print ( combine", 0.0], ["print ( c", 0.0], ["pos - r )", 0.0], ["pow_mod (", 0.0], ["pre", 0.0], ["poww ( mm ,", 0.0], ["poww ( mm", 0.0], ["poww (", 0.0], ["poww", 0.0], ["pow_mod ( a ,", 0.0], ["pow_mod ( a", 0.0], ["pow_mod", 0.0], ["postwrong .", 0.0], ["pow ( 3 ,", 0.0], ["pow ( 3", 0.0], ["pow ( 2 ,", 0.0], ["pow ( 2", 0.0], ["pow (", 0.0], ["pow", 0.0], ["posver =", 0.0], ["preans", 0.0], ["prec", 0.0], ["prec =", 0.0], ["pref", 0.0], ["preflens [", 0.0], ["preflens", 0.0], ["preflen ]", 0.0], ["preflen ) #NEWLINE# print", 0.0], ["preflen ) #NEWLINE#", 0.0], ["preflen )", 0.0], ["preflen", 0.0], ["prefixids ( a ,", 0.0], ["prefixids ( a", 0.0], ["prefixids (", 0.0], ["prefixids", 0.0], ["prefix", 0.0], ["pref .", 0.0], ["pref ,", 0.0], ["pref )", 0.0], ["posver", 0.0], ["postwrong", 0.0], ["preflens [ preflen ]", 0.0], ["posgor =", 0.0], ["possible ,", 0.0], ["possible ) #NEWLINE#", 0.0], ["possible )", 0.0], ["possible", 0.0], ["positions #NEWLINE#", 0.0], ["positions", 0.0], ["position", 0.0], ["posgor", 0.0], ["posttochange . pop (", 0.0], ["pos ] #NEWLINE# #DEDENT#", 0.0], ["pos ] #NEWLINE#", 0.0], ["pos ]", 0.0], ["pos =", 0.0], ["pos : #INDENT# if", 0.0], ["pos : #INDENT#", 0.0], ["pos :", 0.0], ["possible , [", 0.0], ["possible , [ u", 0.0], ["possible [", 0.0], ["possible [ 0", 0.0], ["posttochange . pop", 0.0], ["posttochange .", 0.0], ["posttochange", 0.0], ["postmissing", 0.0], ["postfree . add (", 0.0], ["postfree . add", 0.0], ["postfree .", 0.0], ["postfree", 0.0], ["postans : #INDENT# postfree", 0.0], ["postans : #INDENT#", 0.0], ["postans :", 0.0], ["postans", 0.0], ["post", 0.0], ["possible weight", 0.0], ["possible [ 0 ]", 0.0], ["preflens [ preflen", 0.0], ["prefmin", 0.0], ["print ( b )", 0.0], ["print ( 'vasiliy'", 0.0], ["print ( *", 0.0], ["print ( ) #NEWLINE#", 0.0], ["print ( )", 0.0], ["print ( (", 0.0], ["print ( 'yes' )", 0.0], ["print ( 'yes'", 0.0], ["print ( 'vasiliy' )", 0.0], ["print ( 'polycarp' )", 0.0], ["print ( '-'", 0.0], ["print ( 'polycarp'", 0.0], ["print ( 'no' )", 0.0], ["print ( 'no'", 0.0], ["print ( '=' )", 0.0], ["print ( '='", 0.0], ["print ( '<' )", 0.0], ["print ( '<'", 0.0], ["print ( -1", 0.0], ["print ( -1 )", 0.0], ["print ( 0", 0.0], ["print ( 0 )", 0.0], ["print ( b", 0.0], ["print ( answer", 0.0], ["print ( ans )", 0.0], ["print ( ans %", 0.0], ["print ( ans", 0.0], ["print ( a ,", 0.0], ["print ( a )", 0.0], ["print ( a", 0.0], ["print ( ``", 0.0], ["print ( 3 )", 0.0], ["print ( 3", 0.0], ["print ( 2 )", 0.0], ["print ( 2", 0.0], ["print ( 1 )", 0.0], ["print ( 1", 0.0], ["print ( '-' )", 0.0], ["print ( ' ' .", 0.0], ["prefmin [", 0.0], ["pretochange .", 0.0], ["prime ( n", 0.0], ["prime (", 0.0], ["prime", 0.0], ["prewrong", 0.0], ["previous", 0.0], ["prever", 0.0], ["prev", 0.0], ["pretochange", 0.0], ["print ( ' '", 0.0], ["premissing", 0.0], ["pregor", 0.0], ["prefsubsid", 0.0], ["prefree .", 0.0], ["prefree", 0.0], ["prefmin [ i ]", 0.0], ["prefmin [ i", 0.0], ["print", 0.0], ["print (", 0.0], ["print ( \"\"", 0.0], ["print ( \"\" .", 0.0], ["print ( \"yes\" if", 0.0], ["print ( \"yes\" )", 0.0], ["print ( \"yes\"", 0.0], ["print ( \"unrated\" )", 0.0], ["print ( \"unrated\"", 0.0], ["print ( \"no\" )", 0.0], ["print ( \"no\"", 0.0], ["print ( \"bitlgm\" )", 0.0], ["print ( \"bitlgm\"", 0.0], ["print ( \"bitaryo\" )", 0.0], ["print ( \"bitaryo\"", 0.0], ["print ( \"===\" )", 0.0], ["print ( \"===\"", 0.0], ["print ( \"-1\" )", 0.0], ["print ( \"-1\"", 0.0], ["new += '0' #NEWLINE#", 0.0], ["new +=", 0.0], ["range ( lenx", 0.0], ["longest non-palindrome substring #NEWLINE#", 0.0], ["lower ( ) ==", 0.0], ["lower ( ) #NEWLINE#", 0.0], ["lower ( )", 0.0], ["lower (", 0.0], ["lower", 0.0], ["low =", 0.0], ["low", 0.0], ["longest non-palindrome substring", 0.0], ["ln ( )", 0.0], ["longest non-palindrome", 0.0], ["longest", 0.0], ["locs [ i", 0.0], ["locs [", 0.0], ["locs", 0.0], ["lo =", 0.0], ["lo", 0.0], ["lp", 0.0], ["lr", 0.0], ["lr [", 0.0], ["lr [ i", 0.0], ["m ) ]", 0.0], ["m ) : #INDENT#", 0.0], ["m ) :", 0.0], ["m ) #NEWLINE# print", 0.0], ["m ) #NEWLINE#", 0.0], ["m )", 0.0], ["m #NEWLINE# while", 0.0], ["m #NEWLINE# #DEDENT#", 0.0], ["m #NEWLINE#", 0.0], ["m", 0.0], ["lucky year", 0.0], ["lucky", 0.0], ["lt", 0.0], ["lst", 0.0], ["lr [ i ]", 0.0], ["ln ( ) ,", 0.0], ["ln (", 0.0], ["m *", 0.0], ["level_coeff", 0.0], ["line =", 0.0], ["line . split (", 0.0], ["line . split", 0.0], ["line .", 0.0], ["line", 0.0], ["li =", 0.0], ["li", 0.0], ["level", 0.0], ["ln", 0.0], ["letters to remove", 0.0], ["letters to", 0.0], ["letters", 0.0], ["letter", 0.0], ["leny for _ in", 0.0], ["leny for _", 0.0], ["leny for", 0.0], ["line [", 0.0], ["linedata", 0.0], ["linex", 0.0], ["linex [", 0.0], ["lmax", 0.0], ["list ( split (", 0.0], ["list ( split", 0.0], ["list ( range (", 0.0], ["list ( range", 0.0], ["list ( map (", 0.0], ["list ( map", 0.0], ["list ( input (", 0.0], ["list ( input", 0.0], ["list (", 0.0], ["list", 0.0], ["liney [ x ]", 0.0], ["liney [ x", 0.0], ["liney [", 0.0], ["liney", 0.0], ["m ) ] #NEWLINE#", 0.0], ["m * k", 0.0], ["lenx ) ] #NEWLINE#", 0.0], ["made", 0.0], ["main ( ) #NEWLINE#", 0.0], ["main ( )", 0.0], ["main (", 0.0], ["main", 0.0], ["made_statements", 0.0], ["made their statement", 0.0], ["made their", 0.0], ["ma = max (", 0.0], ["m1 ,", 0.0], ["ma = max", 0.0], ["ma =", 0.0], ["ma ,", 0.0], ["ma", 0.0], ["m2 )", 0.0], ["m2", 0.0], ["m1 , m2 )", 0.0], ["main ( ) :", 0.0], ["maincost", 0.0], ["mainlen", 0.0], ["mana", 0.0], ["mask .", 0.0], ["mask , colors )", 0.0], ["mask , colors", 0.0], ["mask , c ,", 0.0], ["mask , c", 0.0], ["mask ,", 0.0], ["mask ) : #INDENT#", 0.0], ["mask ) :", 0.0], ["mask ) #NEWLINE#", 0.0], ["mask )", 0.0], ["mask", 0.0], ["map ( int ,", 0.0], ["map ( int", 0.0], ["map (", 0.0], ["map", 0.0], ["m1 , m2", 0.0], ["m1 *", 0.0], ["m * k )", 0.0], ["m , k )", 0.0], ["m - 1", 0.0], ["m -", 0.0], ["m , x ,", 0.0], ["m , x", 0.0], ["m , r", 0.0], ["m , k =", 0.0], ["m , k ,", 0.0], ["m , k", 0.0], ["m1", 0.0], ["m , d =", 0.0], ["m , d", 0.0], ["m ,", 0.0], ["m + 1 )", 0.0], ["m + 1 #NEWLINE#", 0.0], ["m + 1", 0.0], ["m +", 0.0], ["m - 1 )", 0.0], ["m - r", 0.0], ["m - r +", 0.0], ["m //", 0.0], ["m for _ in", 0.0], ["m for _", 0.0], ["m for", 0.0], ["m ]", 0.0], ["m >=", 0.0], ["m = map (", 0.0], ["m = map", 0.0], ["m = list (", 0.0], ["m = list", 0.0], ["m = int (", 0.0], ["m = int", 0.0], ["m =", 0.0], ["m : #INDENT# print", 0.0], ["m : #INDENT#", 0.0], ["m :", 0.0], ["leny", 0.0], ["lenx ) ]", 0.0], ["math", 0.0], ["l + 1", 0.0], ["l , r ,", 0.0], ["l , r +", 0.0], ["l , r )", 0.0], ["l , r", 0.0], ["l ,", 0.0], ["l + 1 ]", 0.0], ["l + 1 )", 0.0], ["l +", 0.0], ["l #NEWLINE# ans", 0.0], ["l ) : #INDENT#", 0.0], ["l ) :", 0.0], ["l ) -", 0.0], ["l ) ) #NEWLINE#", 0.0], ["l ) )", 0.0], ["l ) #NEWLINE#", 0.0], ["l )", 0.0], ["l , r =", 0.0], ["l , r ]", 0.0], ["l , r in", 0.0], ["l , reverse", 0.0], ["l = map (", 0.0], ["l = map", 0.0], ["l = list (", 0.0], ["l = list", 0.0], ["l = [", 0.0], ["l =", 0.0], ["l : #INDENT#", 0.0], ["l :", 0.0], ["l . append (", 0.0], ["l . append", 0.0], ["l .", 0.0], ["l -", 0.0], ["l , s ,", 0.0], ["l , s", 0.0], ["l , reverse =", 0.0], ["l #NEWLINE# ans =", 0.0], ["l #NEWLINE#", 0.0], ["l = sorted (", 0.0], ["katie_ribbon", 0.0], ["key = sum )", 0.0], ["key = sum", 0.0], ["key = lambda x", 0.0], ["key = lambda", 0.0], ["key =", 0.0], ["key", 0.0], ["kefa_distances", 0.0], ["katie_beauty >", 0.0], ["l", 0.0], ["katie_beauty : winner =", 0.0], ["katie_beauty : winner", 0.0], ["katie_beauty :", 0.0], ["katie_beauty", 0.0], ["k_s", 0.0], ["k_min =", 0.0], ["k_min", 0.0], ["keys", 0.0], ["keys (", 0.0], ["keys ( )", 0.0], ["keys ( ) )", 0.0], ["kvass", 0.0], ["kuro_ribbon", 0.0], ["kuro_beauty and", 0.0], ["kuro_beauty >", 0.0], ["kuro_beauty", 0.0], ["koutsu_check", 0.0], ["koutsu or shuntsu", 0.0], ["koutsu or", 0.0], ["koutsu", 0.0], ["km_driven", 0.0], ["kilometers", 0.0], ["ki ,", 0.0], ["ki #NEWLINE#", 0.0], ["ki", 0.0], ["keys ( ) :", 0.0], ["l = sorted", 0.0], ["l ==", 0.0], ["lenx )", 0.0], ["len ( a", 0.0], ["len ( b )", 0.0], ["len ( b", 0.0], ["len ( arr )", 0.0], ["len ( arr", 0.0], ["len ( al )", 0.0], ["len ( al", 0.0], ["len ( a )", 0.0], ["len ( [ 1", 0.0], ["left", 0.0], ["len ( [", 0.0], ["len (", 0.0], ["len", 0.0], ["left = middle", 0.0], ["left =", 0.0], ["left + right )", 0.0], ["left + right", 0.0], ["len ( i", 0.0], ["len ( i )", 0.0], ["len ( pf", 0.0], ["len ( pf )", 0.0], ["lenx", 0.0], ["length of the longest", 0.0], ["length of the", 0.0], ["length of", 0.0], ["length", 0.0], ["len ( x )", 0.0], ["len ( x", 0.0], ["len ( str (", 0.0], ["len ( str", 0.0], ["len ( st )", 0.0], ["len ( st", 0.0], ["len ( set (", 0.0], ["len ( set", 0.0], ["len ( s )", 0.0], ["len ( s", 0.0], ["left +", 0.0], ["leafs", 0.0], ["l [", 0.0], ["l ] ) #NEWLINE#", 0.0], ["l_1 ,", 0.0], ["l_1", 0.0], ["l in range (", 0.0], ["l in range", 0.0], ["l in", 0.0], ["l and", 0.0], ["l ] =", 0.0], ["l ] )", 0.0], ["lcm_value", 0.0], ["l ]", 0.0], ["l [ j ]", 0.0], ["l [ j", 0.0], ["l [ i ]", 0.0], ["l [ i", 0.0], ["l [ 0 ]", 0.0], ["l [ 0", 0.0], ["l_close", 0.0], ["lambda", 0.0], ["lambda :", 0.0], ["lambda : list", 0.0], ["lcm ( a", 0.0], ["lcm (", 0.0], ["lcm", 0.0], ["lborder", 0.0], ["layers [ l +", 0.0], ["layers [ l", 0.0], ["layers [", 0.0], ["layers", 0.0], ["lastp", 0.0], ["lastc", 0.0], ["last", 0.0], ["lambda x : (", 0.0], ["lambda x :", 0.0], ["lambda x", 0.0], ["lambda : list (", 0.0], ["mass", 0.0], ["math #NEWLINE#", 0.0], ["new +", 0.0], ["n += 1", 0.0], ["n , graph", 0.0], ["n , b =", 0.0], ["n , b", 0.0], ["n , a ,", 0.0], ["n , a", 0.0], ["n ,", 0.0], ["n += 1 #NEWLINE#", 0.0], ["n +=", 0.0], ["n * (", 0.0], ["n + m", 0.0], ["n + 1 )", 0.0], ["n + 1", 0.0], ["n +", 0.0], ["n ** 2", 0.0], ["n ** 0.5 )", 0.0], ["n ** 0.5", 0.0], ["n , graph ,", 0.0], ["n , k", 0.0], ["n , k ,", 0.0], ["n , k =", 0.0], ["n - 1 )", 0.0], ["n - 1 #NEWLINE#", 0.0], ["n - 1", 0.0], ["n , x =", 0.0], ["n , x ,", 0.0], ["n , x", 0.0], ["n , t =", 0.0], ["n , t", 0.0], ["n , s =", 0.0], ["n , s", 0.0], ["n , p", 0.0], ["n , m =", 0.0], ["n , m ,", 0.0], ["n , m )", 0.0], ["n , m", 0.0], ["n **", 0.0], ["n *", 0.0], ["n - 1 -", 0.0], ["moves )", 0.0], ["n #NEWLINE# #DEDENT# if", 0.0], ["n #NEWLINE# #DEDENT#", 0.0], ["n #NEWLINE#", 0.0], ["multiples", 0.0], ["mult (", 0.0], ["mult", 0.0], ["moves =", 0.0], ["moves #NEWLINE#", 0.0], ["n ) ] #NEWLINE#", 0.0], ["moves", 0.0], ["movements for", 0.0], ["movements", 0.0], ["move", 0.0], ["mon [ mini ]", 0.0], ["mon [ mini", 0.0], ["mon [ maxi ]", 0.0], ["n #NEWLINE# for", 0.0], ["n #NEWLINE# for i", 0.0], ["n #NEWLINE# print", 0.0], ["n #NEWLINE# print the", 0.0], ["n ) ]", 0.0], ["n ) : #INDENT#", 0.0], ["n ) :", 0.0], ["n ) ) #NEWLINE#", 0.0], ["n ) )", 0.0], ["n ) #NEWLINE#", 0.0], ["n )", 0.0], ["n % i ==", 0.0], ["n % i", 0.0], ["n % 4 ==", 0.0], ["n % 4", 0.0], ["n % 2 ==", 0.0], ["n % 2", 0.0], ["n %", 0.0], ["n #NEWLINE# while", 0.0], ["n - 1 ,", 0.0], ["n - 1 :", 0.0], ["mon [ i ]", 0.0], ["n3 +", 0.0], ["n_presents", 0.0], ["n_copybooks", 0.0], ["n6 < n", 0.0], ["n6 <", 0.0], ["n6", 0.0], ["n3 + n6 <", 0.0], ["n3 + n6", 0.0], ["n3", 0.0], ["n == 1 :", 0.0], ["n2", 0.0], ["n or", 0.0], ["n and", 0.0], ["n ] ) #NEWLINE#", 0.0], ["n ] )", 0.0], ["n ]", 0.0], ["n [ i", 0.0], ["name", 0.0], ["name )", 0.0], ["name ) #NEWLINE#", 0.0], ["name ) #NEWLINE# #DEDENT#", 0.0], ["new", 0.0], ["needed for each", 0.0], ["needed for", 0.0], ["needed . append (", 0.0], ["needed . append", 0.0], ["needed .", 0.0], ["needed #NEWLINE#", 0.0], ["needed", 0.0], ["need =", 0.0], ["need", 0.0], ["natasha 's apartment #NEWLINE#", 0.0], ["natasha 's apartment", 0.0], ["natasha 's", 0.0], ["natasha", 0.0], ["name ,", 0.0], ["n [", 0.0], ["n == 1", 0.0], ["n - 1 ]", 0.0], ["n - r +", 0.0], ["n // 4", 0.0], ["n // 2 )", 0.0], ["n // 2", 0.0], ["n //", 0.0], ["n / b", 0.0], ["n /", 0.0], ["n - x", 0.0], ["n - r", 0.0], ["n ==", 0.0], ["n - k", 0.0], ["n - i )", 0.0], ["n - i", 0.0], ["n - 2 ,", 0.0], ["n - 2 *", 0.0], ["n - 2 )", 0.0], ["n - 2", 0.0], ["n // b", 0.0], ["n // lcm", 0.0], ["n //=", 0.0], ["n :", 0.0], ["n = n", 0.0], ["n = len (", 0.0], ["n = len", 0.0], ["n = int (", 0.0], ["n = int", 0.0], ["n = 1 #NEWLINE#", 0.0], ["n = 1", 0.0], ["n = 0 #NEWLINE#", 0.0], ["n = 0", 0.0], ["n =", 0.0], ["n <=", 0.0], ["n <", 0.0], ["n : #INDENT# print", 0.0], ["n : #INDENT# break", 0.0], ["n : #INDENT#", 0.0], ["mon [ maxi", 0.0], ["mon [ i", 0.0], ["math #NEWLINE# def", 0.0], ["maxi ] [ j", 0.0], ["maximum number of", 0.0], ["maximum number", 0.0], ["maximum length of the", 0.0], ["maximum length of", 0.0], ["maximum length", 0.0], ["maximum distance", 0.0], ["maximum", 0.0], ["maxi ] [", 0.0], ["maxdiv", 0.0], ["maxi ]", 0.0], ["maxi - mini", 0.0], ["maxi -", 0.0], ["maxi + 1", 0.0], ["maxi +", 0.0], ["maxi )", 0.0], ["maxi", 0.0], ["maximum possible", 0.0], ["maxj", 0.0], ["maxj )", 0.0], ["maxj ) if", 0.0], ["middle", 0.0], ["mid #NEWLINE#", 0.0], ["mid", 0.0], ["mi =", 0.0], ["mi", 0.0], ["message #NEWLINE#", 0.0], ["message", 0.0], ["memo", 0.0], ["maxx", 0.0], ["maxj ]", 0.0], ["maxj - minj +", 0.0], ["maxj - minj", 0.0], ["maxj -", 0.0], ["maxj +", 0.0], ["maxj ) if mon", 0.0], ["maxdiv =", 0.0], ["max_weight", 0.0], ["middle #NEWLINE# #DEDENT#", 0.0], ["math . inf", 0.0], ["max ( 0 ,", 0.0], ["max ( 0", 0.0], ["max (", 0.0], ["max", 0.0], ["math import", 0.0], ["math . sqrt (", 0.0], ["math . sqrt", 0.0], ["math . floor (", 0.0], ["max_terms", 0.0], ["math . floor", 0.0], ["math . ceil (", 0.0], ["math . ceil", 0.0], ["math .", 0.0], ["math #NEWLINE# n ,", 0.0], ["math #NEWLINE# n", 0.0], ["math #NEWLINE# import", 0.0], ["max ( 1", 0.0], ["max ( 1 ,", 0.0], ["max ( ans", 0.0], ["max ( ans ,", 0.0], ["max_sum", 0.0], ["max_score", 0.0], ["max_num =", 0.0], ["max_num", 0.0], ["max_messiness", 0.0], ["max_length", 0.0], ["max_kvass", 0.0], ["max_divisor", 0.0], ["max_distance", 0.0], ["max_bourles", 0.0], ["max ( x", 0.0], ["max ( r )", 0.0], ["max ( r", 0.0], ["max ( ma ,", 0.0], ["max ( ma", 0.0], ["middle #NEWLINE#", 0.0], ["middle #NEWLINE# #DEDENT# #DEDENT#", 0.0], ["mon [", 0.0], ["minimum number of minutes", 0.0], ["minj ]", 0.0], ["minj + 1 ,", 0.0], ["minj + 1", 0.0], ["minj +", 0.0], ["minj", 0.0], ["minimum time", 0.0], ["minimum number of moves", 0.0], ["minimum number of", 0.0], ["mini", 0.0], ["minimum number", 0.0], ["minimum", 0.0], ["mini ] [ j", 0.0], ["mini ] [", 0.0], ["mini ]", 0.0], ["mini + 1 ,", 0.0], ["mini + 1", 0.0], ["minn", 0.0], ["minutes", 0.0], ["mm", 0.0], ["mm )", 0.0], ["mon", 0.0], ["mod =", 0.0], ["mod - 2 ,", 0.0], ["mod - 2", 0.0], ["mod -", 0.0], ["mod ) % mod", 0.0], ["mod ) %", 0.0], ["mod )", 0.0], ["mod #NEWLINE# #DEDENT# #DEDENT#", 0.0], ["mod #NEWLINE# #DEDENT#", 0.0], ["mod #NEWLINE#", 0.0], ["mod", 0.0], ["mn", 0.0], ["mm =", 0.0], ["mm ,", 0.0], ["mini +", 0.0], ["mincutlen =", 0.0], ["middle =", 0.0], ["min ( abs (", 0.0], ["min ( k ,", 0.0], ["min ( k", 0.0], ["min ( best [", 0.0], ["min ( best", 0.0], ["min ( b", 0.0], ["min ( ans ,", 0.0], ["min ( ans", 0.0], ["min ( abs", 0.0], ["mincutlen", 0.0], ["min ( a [", 0.0], ["min ( a ,", 0.0], ["min ( a", 0.0], ["min ( (", 0.0], ["min (", 0.0], ["middle = ( left", 0.0], ["middle = (", 0.0], ["min ( l", 0.0], ["min ( l )", 0.0], ["min ( l [", 0.0], ["min ( r", 0.0], ["minblows", 0.0], ["min_spheres", 0.0], ["min_side", 0.0], ["min_questions", 0.0], ["min_off", 0.0], ["min_grapes [", 0.0], ["min_grapes", 0.0], ["min_exchanges", 0.0], ["min_distance =", 0.0], ["min_distance", 0.0], ["min_diff =", 0.0], ["min_diff", 0.0], ["min_cost =", 0.0], ["min_cost", 0.0], ["min ( r ,", 0.0], ["range ( len (", 0.0], ["range ( lenx )", 0.0], ["[ mini", 0.0], ["tolist (", 0.0], ["total number", 0.0], ["total cost", 0.0], ["total =", 0.0], ["total", 0.0], ["tot", 0.0], ["tolist ( ) #NEWLINE#", 0.0], ["tolist ( )", 0.0], ["tolist", 0.0], ["to", 0.0], ["to the first", 0.0], ["to the", 0.0], ["to store the", 0.0], ["to store", 0.0], ["to remove", 0.0], ["to find the", 0.0], ["to find", 0.0], ["total number of", 0.0], ["total_cost", 0.0], ["total_grains", 0.0], ["tr", 0.0], ["true :", 0.0], ["true ) #NEWLINE# #DEDENT#", 0.0], ["true ) #NEWLINE#", 0.0], ["true )", 0.0], ["true #NEWLINE# q_append (", 0.0], ["true #NEWLINE# q_append", 0.0], ["true #NEWLINE# for", 0.0], ["true #NEWLINE# avt [", 0.0], ["true #NEWLINE# avt", 0.0], ["true #NEWLINE# #DEDENT# n", 0.0], ["true #NEWLINE# #DEDENT# if", 0.0], ["true #NEWLINE# #DEDENT# #DEDENT#", 0.0], ["true #NEWLINE# #DEDENT#", 0.0], ["true #NEWLINE#", 0.0], ["true", 0.0], ["to a", 0.0], ["tmp [", 0.0], ["tup", 0.0], ["there", 0.0], ["tiles", 0.0], ["ticket", 0.0], ["this", 0.0], ["they", 0.0], ["there is a", 0.0], ["there is", 0.0], ["there are", 0.0], ["then", 0.0], ["tmp = tmp .", 0.0], ["their statements #NEWLINE#", 0.0], ["their statements", 0.0], ["their statement", 0.0], ["their", 0.0], ["the year", 0.0], ["the winner #NEWLINE#", 0.0], ["the winner", 0.0], ["tiles #NEWLINE#", 0.0], ["tiles )", 0.0], ["time", 0.0], ["time #NEWLINE#", 0.0], ["tmp = tmp", 0.0], ["tmp = input (", 0.0], ["tmp = input", 0.0], ["tmp =", 0.0], ["tmp . split (", 0.0], ["tmp . split", 0.0], ["tmp .", 0.0], ["tmp )", 0.0], ["tmp", 0.0], ["tm", 0.0], ["tl", 0.0], ["time_to_solve_level", 0.0], ["time_str", 0.0], ["time [", 0.0], ["time =", 0.0], ["true : #INDENT#", 0.0], ["tup ]", 0.0], ["the vote", 0.0], ["v ]", 0.0], ["v1 [", 0.0], ["v1", 0.0], ["v in graph", 0.0], ["v in", 0.0], ["v ] ==", 0.0], ["v ] ) #NEWLINE#", 0.0], ["v ] )", 0.0], ["v [ i ]", 0.0], ["v ) #NEWLINE#", 0.0], ["v [ i", 0.0], ["v [", 0.0], ["v =", 0.0], ["v : #INDENT#", 0.0], ["v :", 0.0], ["v ,", 0.0], ["v ) )", 0.0], ["v2", 0.0], ["v2 [", 0.0], ["v_map", 0.0], ["v_total", 0.0], ["vectors [", 0.0], ["vectors", 0.0], ["vasya 's row #NEWLINE#", 0.0], ["vasya 's row", 0.0], ["vasya 's", 0.0], ["vasya", 0.0], ["values", 0.0], ["value", 0.0], ["valid", 0.0], ["val :", 0.0], ["val ( a ,", 0.0], ["val ( a", 0.0], ["val (", 0.0], ["val", 0.0], ["v_y", 0.0], ["v ) #NEWLINE# #DEDENT#", 0.0], ["v )", 0.0], ["tup ] )", 0.0], ["type", 0.0], ["u ]", 0.0], ["u , v =", 0.0], ["u , v", 0.0], ["u , graph ,", 0.0], ["u , graph", 0.0], ["u ,", 0.0], ["u", 0.0], ["twos [ i", 0.0], ["v #NEWLINE#", 0.0], ["twos [", 0.0], ["twos", 0.0], ["twop", 0.0], ["turns", 0.0], ["tup ] , best", 0.0], ["tup ] ,", 0.0], ["tup ] ) #NEWLINE#", 0.0], ["u ] .", 0.0], ["u ] =", 0.0], ["u in", 0.0], ["u in graph", 0.0], ["v", 0.0], ["utf-8 - * -", 0.0], ["utf-8 - *", 0.0], ["utf-8 -", 0.0], ["utf-8", 0.0], ["used [", 0.0], ["used", 0.0], ["upp", 0.0], ["up =", 0.0], ["up", 0.0], ["until the", 0.0], ["until", 0.0], ["unlucky_years (", 0.0], ["unlucky_years", 0.0], ["unique", 0.0], ["the wall", 0.0], ["the total number of", 0.0], ["vectors [ 0 ]", 0.0], ["sys #NEWLINE# input", 0.0], ["t )", 0.0], ["t #NEWLINE#", 0.0], ["t", 0.0], ["sys . stdin .", 0.0], ["sys . stdin", 0.0], ["sys .", 0.0], ["sys #NEWLINE# input =", 0.0], ["sys #NEWLINE# def", 0.0], ["sum_", 0.0], ["sys #NEWLINE#", 0.0], ["sys", 0.0], ["swapy", 0.0], ["swapx", 0.0], ["swap", 0.0], ["sum_ [ i ]", 0.0], ["sum_ [ i", 0.0], ["t ) #NEWLINE#", 0.0], ["t ) )", 0.0], ["t ) :", 0.0], ["t ) : #INDENT#", 0.0], ["t ==", 0.0], ["t = map (", 0.0], ["t = map", 0.0], ["t = int (", 0.0], ["t = int", 0.0], ["t = 1", 0.0], ["t = 0 #NEWLINE#", 0.0], ["t = 0", 0.0], ["t =", 0.0], ["t : #INDENT#", 0.0], ["t :", 0.0], ["t .", 0.0], ["t ,", 0.0], ["t +=", 0.0], ["t +", 0.0], ["sum_ [", 0.0], ["sum ==", 0.0], ["t2", 0.0], ["subtract", 0.0], ["sufflens", 0.0], ["sufflen ]", 0.0], ["sufflen ) #NEWLINE#", 0.0], ["sufflen )", 0.0], ["sufflen #NEWLINE#", 0.0], ["sufflen", 0.0], ["subtract the", 0.0], ["substring #NEWLINE#", 0.0], ["sum = 0 #NEWLINE#", 0.0], ["substring", 0.0], ["strip ( ) .", 0.0], ["strip ( )", 0.0], ["strip (", 0.0], ["strip", 0.0], ["string is", 0.0], ["string can", 0.0], ["sufflens [", 0.0], ["sufflens [ i", 0.0], ["sufflens [ i ]", 0.0], ["sufflens [ sufflen", 0.0], ["sum = 0", 0.0], ["sum =", 0.0], ["sum +=", 0.0], ["sum ) #NEWLINE#", 0.0], ["sum )", 0.0], ["sum ( x", 0.0], ["sum ( r", 0.0], ["sum ( l )", 0.0], ["sum ( l", 0.0], ["sum ( a [", 0.0], ["sum ( a )", 0.0], ["sum ( a", 0.0], ["sum (", 0.0], ["sum", 0.0], ["sufflens [ sufflen ]", 0.0], ["t [", 0.0], ["t2 -=", 0.0], ["the total number", 0.0], ["the message #NEWLINE#", 0.0], ["the next lucky year", 0.0], ["the next lucky", 0.0], ["the next", 0.0], ["the minimum time", 0.0], ["the minimum number of", 0.0], ["the minimum number", 0.0], ["the minimum", 0.0], ["the message", 0.0], ["the longest non-palindrome", 0.0], ["the maximum possible", 0.0], ["the maximum number of", 0.0], ["the maximum number", 0.0], ["the maximum length of", 0.0], ["the maximum length", 0.0], ["the maximum distance", 0.0], ["the maximum", 0.0], ["the number", 0.0], ["the number of", 0.0], ["the number of days", 0.0], ["the number of letters", 0.0], ["the total cost", 0.0], ["the total", 0.0], ["the time", 0.0], ["the string is", 0.0], ["the string", 0.0], ["the same", 0.0], ["the result #NEWLINE# print", 0.0], ["the result #NEWLINE# if", 0.0], ["the result #NEWLINE#", 0.0], ["the result", 0.0], ["the required", 0.0], ["the remaining", 0.0], ["the number of terms", 0.0], ["the number of steps", 0.0], ["the number of moves", 0.0], ["the longest non-palindrome substring", 0.0], ["the longest", 0.0], ["t2 -= 1", 0.0], ["tans", 0.0], ["that can be", 0.0], ["that can", 0.0], ["that", 0.0], ["than", 0.0], ["terms", 0.0], ["temp )", 0.0], ["temp", 0.0], ["takes", 0.0], ["the letter", 0.0], ["t3 and", 0.0], ["t3 -= 1 #NEWLINE#", 0.0], ["t3 -= 1", 0.0], ["t3 -=", 0.0], ["t3", 0.0], ["t2 and", 0.0], ["t2 -= 1 #NEWLINE#", 0.0], ["the answer", 0.0], ["the answer #NEWLINE#", 0.0], ["the area", 0.0], ["the ball", 0.0], ["the length of the", 0.0], ["the length of", 0.0], ["the length", 0.0], ["the input", 0.0], ["the first k elements", 0.0], ["the first k", 0.0], ["the first", 0.0], ["the expected number of", 0.0], ["the expected number", 0.0], ["the expected", 0.0], ["the employee", 0.0], ["the distance", 0.0], ["the beauty", 0.0], ["the barn", 0.0], ["the ball will", 0.0], ["vectors [ 0", 0.0], ["vectors [ 1", 0.0], ["string", 0.0], ["y , z =", 0.0], ["y . ln", 0.0], ["y .", 0.0], ["y -= 1 #NEWLINE#", 0.0], ["y -= 1", 0.0], ["y -=", 0.0], ["y - 1", 0.0], ["y -", 0.0], ["y , z", 0.0], ["y + 1", 0.0], ["y , x", 0.0], ["y , vx ,", 0.0], ["y , vx", 0.0], ["y , l", 0.0], ["y ,", 0.0], ["y += 1 #NEWLINE#", 0.0], ["y += 1", 0.0], ["y . ln (", 0.0], ["y :", 0.0], ["y : #INDENT#", 0.0], ["y =", 0.0], ["y ] = true", 0.0], ["y ] =", 0.0], ["y ] : #INDENT#", 0.0], ["y ] :", 0.0], ["y ] #NEWLINE#", 0.0], ["y ]", 0.0], ["y [", 0.0], ["y == 0", 0.0], ["y ==", 0.0], ["y = map (", 0.0], ["y = map", 0.0], ["y = list (", 0.0], ["y = list", 0.0], ["y = 0 #NEWLINE#", 0.0], ["y = 0", 0.0], ["y +=", 0.0], ["y +", 0.0], ["y ] [ x", 0.0], ["x2 ,", 0.0], ["x_y [", 0.0], ["x_y", 0.0], ["x_dist", 0.0], ["x_b -", 0.0], ["x_b", 0.0], ["x2 , y2 =", 0.0], ["x2 , y2", 0.0], ["x2", 0.0], ["y ** z", 0.0], ["x1 ] [ y", 0.0], ["x1 ] [", 0.0], ["x1 ]", 0.0], ["x1 , x2", 0.0], ["x1 ,", 0.0], ["x1", 0.0], ["x or s .", 0.0], ["xhit", 0.0], ["xp", 0.0], ["xv", 0.0], ["xx", 0.0], ["y ** x", 0.0], ["y **", 0.0], ["y ) : #INDENT#", 0.0], ["y ) :", 0.0], ["y ) *", 0.0], ["y ) ) #NEWLINE#", 0.0], ["y ) )", 0.0], ["y ) %", 0.0], ["y ) #NEWLINE# if", 0.0], ["y ) #NEWLINE# #DEDENT#", 0.0], ["y ) #NEWLINE#", 0.0], ["y )", 0.0], ["y #NEWLINE# #DEDENT#", 0.0], ["y #NEWLINE#", 0.0], ["y", 0.0], ["y ] [", 0.0], ["y ] and", 0.0], ["x or", 0.0], ["z = map (", 0.0], ["zip (", 0.0], ["zip", 0.0], ["zeros", 0.0], ["zerop", 0.0], ["zeroes [ i", 0.0], ["zeroes [", 0.0], ["zeroes", 0.0], ["z = map", 0.0], ["z ** x", 0.0], ["z =", 0.0], ["z : #INDENT#", 0.0], ["z :", 0.0], ["z . ln (", 0.0], ["z . ln", 0.0], ["z .", 0.0], ["z ,", 0.0], ["zs", 0.0], ["{", 0.0], ["{ }", 0.0], ["{ } #NEWLINE#", 0.0], ["} , {", 0.0], ["} ,", 0.0], ["} #NEWLINE# for i", 0.0], ["} #NEWLINE# for", 0.0], ["} #NEWLINE# #DEDENT#", 0.0], ["} #NEWLINE#", 0.0], ["}", 0.0], ["|= dfs ( a", 0.0], ["|= dfs (", 0.0], ["|= dfs", 0.0], ["|=", 0.0], ["{ } ]", 0.0], ["{ } , {", 0.0], ["{ } ,", 0.0], ["{ } #NEWLINE# for", 0.0], ["z ** y", 0.0], ["z **", 0.0], ["y ] and not", 0.0], ["y1 =", 0.0], ["y_max", 0.0], ["y_dist", 0.0], ["y_b -", 0.0], ["y_b", 0.0], ["y2 =", 0.0], ["y2", 0.0], ["y1 ]", 0.0], ["y1 -", 0.0], ["z ) *", 0.0], ["y1 , y2", 0.0], ["y1 ,", 0.0], ["y1 )", 0.0], ["y1", 0.0], ["y in range (", 0.0], ["y in range", 0.0], ["y in", 0.0], ["y_w", 0.0], ["year", 0.0], ["year #NEWLINE#", 0.0], ["year_str", 0.0], ["z )", 0.0], ["z #NEWLINE#", 0.0], ["z", 0.0], ["yy", 0.0], ["yw - y1 -", 0.0], ["yw - y1", 0.0], ["yw -", 0.0], ["yw", 0.0], ["yv", 0.0], ["yst", 0.0], ["yp : #INDENT#", 0.0], ["yp :", 0.0], ["yp", 0.0], ["yhit", 0.0], ["years", 0.0], ["x or s", 0.0], ["x in seq ]", 0.0], ["vectors [ 1 ]", 0.0], ["winner =", 0.0], ["wr ,", 0.0], ["wr", 0.0], ["wpr", 0.0], ["wpc", 0.0], ["works", 0.0], ["with the", 0.0], ["with", 0.0], ["winner #NEWLINE#", 0.0], ["while t2 and", 0.0], ["winner", 0.0], ["will", 0.0], ["while x", 0.0], ["while true : #INDENT#", 0.0], ["while true :", 0.0], ["while true", 0.0], ["while t3 and", 0.0], ["wr , wb", 0.0], ["wr , wb =", 0.0], ["x", 0.0], ["x !=", 0.0], ["x *", 0.0], ["x ) for x", 0.0], ["x ) for", 0.0], ["x ) : #INDENT#", 0.0], ["x ) :", 0.0], ["x ) *", 0.0], ["x ) ) ==", 0.0], ["x ) ) #NEWLINE#", 0.0], ["x ) )", 0.0], ["x ) #NEWLINE# #DEDENT#", 0.0], ["x ) #NEWLINE#", 0.0], ["x )", 0.0], ["x %", 0.0], ["x #NEWLINE# #DEDENT#", 0.0], ["x #NEWLINE#", 0.0], ["while t3", 0.0], ["while t2", 0.0], ["x **", 0.0], ["vote", 0.0], ["w #NEWLINE# #DEDENT#", 0.0], ["w #NEWLINE#", 0.0], ["w", 0.0], ["vy", 0.0], ["vx , vy", 0.0], ["vx ,", 0.0], ["vx", 0.0], ["vmin", 0.0], ["while not", 0.0], ["visit [ x1 ]", 0.0], ["visit [ x1", 0.0], ["visit [ x ]", 0.0], ["visit [ x", 0.0], ["visit [", 0.0], ["visit", 0.0], ["ver", 0.0], ["w )", 0.0], ["w *", 0.0], ["w ,", 0.0], ["w , b", 0.0], ["while n %", 0.0], ["while n", 0.0], ["while k", 0.0], ["while i <", 0.0], ["while i", 0.0], ["while b", 0.0], ["while a :", 0.0], ["while a", 0.0], ["while", 0.0], ["wb =", 0.0], ["wb", 0.0], ["wall", 0.0], ["waiting_time", 0.0], ["w =", 0.0], ["w , b =", 0.0], ["x * x", 0.0], ["x ** y", 0.0], ["x in seq", 0.0], ["x == 0", 0.0], ["x [ 0 ]", 0.0], ["x [ 0", 0.0], ["x [", 0.0], ["x >=", 0.0], ["x >", 0.0], ["x == 0 or", 0.0], ["x == 0 :", 0.0], ["x ==", 0.0], ["x =", 0.0], ["x = x", 0.0], ["x = n", 0.0], ["x = map (", 0.0], ["x = map", 0.0], ["x = int (", 0.0], ["x = int", 0.0], ["x = 0 #NEWLINE#", 0.0], ["x [ 1", 0.0], ["x [ 1 ]", 0.0], ["x [ i", 0.0], ["x ]", 0.0], ["x in range (", 0.0], ["x in range", 0.0], ["x in postans :", 0.0], ["x in postans", 0.0], ["x in input (", 0.0], ["x in input", 0.0], ["x in", 0.0], ["x for x in", 0.0], ["x for x", 0.0], ["x for", 0.0], ["x and", 0.0], ["x ] [ y1", 0.0], ["x ] [ y", 0.0], ["x ] [", 0.0], ["x ] ==", 0.0], ["x = 0", 0.0], ["x <=", 0.0], ["x ** z", 0.0], ["x ,", 0.0], ["x , y1", 0.0], ["x , y =", 0.0], ["x , y ,", 0.0], ["x , y )", 0.0], ["x , y", 0.0], ["x , pos", 0.0], ["x , b", 0.0], ["x += 1 #NEWLINE#", 0.0], ["x <", 0.0], ["x += 1", 0.0], ["x +=", 0.0], ["x + y )", 0.0], ["x + y", 0.0], ["x + 1 )", 0.0], ["x + 1", 0.0], ["x +", 0.0], ["x -", 0.0], ["x - 1", 0.0], ["x - 1 )", 0.0], ["x - 2", 0.0], ["x : ( x", 0.0], ["x : (", 0.0], ["x : #INDENT# print", 0.0], ["x : #INDENT#", 0.0], ["x :", 0.0], ["x //", 0.0], ["x /", 0.0], ["x . ln (", 0.0], ["x . ln", 0.0], ["x .", 0.0], ["x -= 1 #NEWLINE#", 0.0], ["x -= 1", 0.0], ["x -=", 0.0], ["x - s .", 0.0], ["x - s", 0.0], ["string #NEWLINE#", 0.0], ["str ( x )", 0.0], ["range ( m", 0.0], ["row )", 0.0], ["rp", 0.0], ["rows served before vasya", 0.0], ["rows served before", 0.0], ["rows served", 0.0], ["rows", 0.0], ["row in", 0.0], ["row ,", 0.0], ["row #NEWLINE#", 0.0], ["right = n #NEWLINE#", 0.0], ["row", 0.0], ["round is", 0.0], ["round", 0.0], ["rock_prob", 0.0], ["rmon", 0.0], ["rmin =", 0.0], ["rmin", 0.0], ["rp ]", 0.0], ["rr", 0.0], ["rstrip", 0.0], ["rstrip (", 0.0], ["s ) ) #NEWLINE#", 0.0], ["s ) )", 0.0], ["s ) #NEWLINE# if", 0.0], ["s ) #NEWLINE# #DEDENT#", 0.0], ["s ) #NEWLINE#", 0.0], ["s )", 0.0], ["s %", 0.0], ["s #NEWLINE# #DEDENT# #DEDENT#", 0.0], ["s #NEWLINE# #DEDENT#", 0.0], ["s #NEWLINE#", 0.0], ["s !=", 0.0], ["s", 0.0], ["rubles", 0.0], ["rstrip ( ) #NEWLINE#", 0.0], ["rstrip ( )", 0.0], ["right_players", 0.0], ["right = n", 0.0], ["s ) ) or", 0.0], ["return true", 0.0], ["reversed", 0.0], ["reverse = true )", 0.0], ["reverse = true", 0.0], ["reverse =", 0.0], ["reverse", 0.0], ["return true #NEWLINE# #DEDENT#", 0.0], ["return true #NEWLINE#", 0.0], ["return the", 0.0], ["right = middle #NEWLINE#", 0.0], ["return sorted (", 0.0], ["return sorted", 0.0], ["return s #NEWLINE# #DEDENT#", 0.0], ["return s #NEWLINE#", 0.0], ["return s", 0.0], ["return ret", 0.0], ["return res #NEWLINE# #DEDENT#", 0.0], ["reversed (", 0.0], ["reversed ( map", 0.0], ["reversed ( map (", 0.0], ["right", 0.0], ["right = middle", 0.0], ["right =", 0.0], ["right : #INDENT# middle", 0.0], ["right : #INDENT#", 0.0], ["right :", 0.0], ["right - left", 0.0], ["right -", 0.0], ["right ,", 0.0], ["right ) // 2", 0.0], ["right ) //", 0.0], ["right ) #NEWLINE#", 0.0], ["right )", 0.0], ["right ( m ,", 0.0], ["right ( m", 0.0], ["right (", 0.0], ["s ) ) :", 0.0], ["s ) -", 0.0], ["return res", 0.0], ["s = input (", 0.0], ["s = max", 0.0], ["s = map (", 0.0], ["s = map", 0.0], ["s = list (", 0.0], ["s = list", 0.0], ["s = int (", 0.0], ["s = int", 0.0], ["s = [", 0.0], ["s :", 0.0], ["s = 1 #NEWLINE#", 0.0], ["s = 1", 0.0], ["s = '{:b}' .", 0.0], ["s = '{:b}'", 0.0], ["s =", 0.0], ["s : #INDENT# print", 0.0], ["s : #INDENT# if", 0.0], ["s = max (", 0.0], ["s = sum", 0.0], ["s = sum (", 0.0], ["s ==", 0.0], ["s [ i", 0.0], ["s [ : i", 0.0], ["s [ :", 0.0], ["s [ 1 ]", 0.0], ["s [ 1", 0.0], ["s [ 0 ]", 0.0], ["s [ 0", 0.0], ["s [ -1 ]", 0.0], ["s [ -1", 0.0], ["s [", 0.0], ["s > 0", 0.0], ["s >", 0.0], ["s == 1", 0.0], ["s == 0 :", 0.0], ["s == 0", 0.0], ["s : #INDENT#", 0.0], ["s /", 0.0], ["s ) - 1", 0.0], ["s *", 0.0], ["s += 1", 0.0], ["s +=", 0.0], ["s + p )", 0.0], ["s + p", 0.0], ["s + l", 0.0], ["s +", 0.0], ["s * s", 0.0], ["s ) for s", 0.0], ["s . lower (", 0.0], ["s ) for", 0.0], ["s ) else", 0.0], ["s ) >=", 0.0], ["s ) ==", 0.0], ["s ) : #INDENT#", 0.0], ["s ) :", 0.0], ["s ) //", 0.0], ["s += 1 #NEWLINE#", 0.0], ["s ,", 0.0], ["s , k", 0.0], ["s , k )", 0.0], ["s . lower", 0.0], ["s . index (", 0.0], ["s . index", 0.0], ["s . find (", 0.0], ["s . find", 0.0], ["s . count (", 0.0], ["s . count", 0.0], ["s .", 0.0], ["s - 1 #NEWLINE#", 0.0], ["s - 1", 0.0], ["s -", 0.0], ["s , r ,", 0.0], ["s , r", 0.0], ["s , p =", 0.0], ["s , p", 0.0], ["return res #NEWLINE#", 0.0], ["return none #NEWLINE# #DEDENT#", 0.0], ["s [ i :", 0.0], ["remaining_problems", 0.0], ["remwood", 0.0], ["remove_letters", 0.0], ["remove (", 0.0], ["remove", 0.0], ["remcost", 0.0], ["remb", 0.0], ["remaining_time", 0.0], ["remaining", 0.0], ["readline #NEWLINE#", 0.0], ["remainders", 0.0], ["remainder", 0.0], ["remain", 0.0], ["rem", 0.0], ["readline ( ) .", 0.0], ["readline ( )", 0.0], ["readline (", 0.0], ["remwood -=", 0.0], ["remwood =", 0.0], ["repeat", 0.0], ["repeat_letters", 0.0], ["res = 0 #NEWLINE#", 0.0], ["res = 0", 0.0], ["res = ( res", 0.0], ["res = (", 0.0], ["res =", 0.0], ["res ,", 0.0], ["res +=", 0.0], ["res #NEWLINE#", 0.0], ["res", 0.0], ["requirements .", 0.0], ["requirements", 0.0], ["required", 0.0], ["reqs", 0.0], ["replace (", 0.0], ["replace", 0.0], ["readline #NEWLINE# n", 0.0], ["readline", 0.0], ["rest -", 0.0], ["range ( n )", 0.0], ["range ( t", 0.0], ["range ( r )", 0.0], ["range ( r", 0.0], ["range ( q )", 0.0], ["range ( q", 0.0], ["range ( n //", 0.0], ["range ( n -", 0.0], ["range ( n", 0.0], ["read input #NEWLINE#", 0.0], ["range ( minj +", 0.0], ["range ( minj", 0.0], ["range ( mini +", 0.0], ["range ( mini", 0.0], ["range ( min (", 0.0], ["range ( min", 0.0], ["range ( m )", 0.0], ["range ( t )", 0.0], ["range ( x", 0.0], ["rated", 0.0], ["rated =", 0.0], ["read input", 0.0], ["read ( ) .", 0.0], ["read ( )", 0.0], ["read (", 0.0], ["read", 0.0], ["reach", 0.0], ["re . search (", 0.0], ["re . search", 0.0], ["re .", 0.0], ["re #NEWLINE#", 0.0], ["re", 0.0], ["rborder =", 0.0], ["rborder", 0.0], ["ratings )", 0.0], ["ratings", 0.0], ["rest", 0.0], ["rest - y", 0.0], ["return none #NEWLINE#", 0.0], ["return 0 #NEWLINE#", 0.0], ["return ans", 0.0], ["return a [", 0.0], ["return a #NEWLINE# #DEDENT#", 0.0], ["return a #NEWLINE#", 0.0], ["return a", 0.0], ["return [", 0.0], ["return 0 #NEWLINE# #DEDENT#", 0.0], ["return 0", 0.0], ["return #NEWLINE# #DEDENT# if", 0.0], ["return ( p ,", 0.0], ["return ( p", 0.0], ["return ( n", 0.0], ["return ( c ,", 0.0], ["return ( c", 0.0], ["return (", 0.0], ["return #NEWLINE# #DEDENT# used", 0.0], ["return ans #NEWLINE#", 0.0], ["return ans #NEWLINE# #DEDENT#", 0.0], ["return false", 0.0], ["return false #NEWLINE#", 0.0], ["return none", 0.0], ["return n", 0.0], ["return min (", 0.0], ["return min", 0.0], ["return list ( map", 0.0], ["return list (", 0.0], ["return list", 0.0], ["return int (", 0.0], ["return int", 0.0], ["return impossible #NEWLINE#", 0.0], ["return impossible", 0.0], ["return gcd ( b", 0.0], ["return gcd (", 0.0], ["return gcd", 0.0], ["return false #NEWLINE# #DEDENT#", 0.0], ["return #NEWLINE# #DEDENT# print", 0.0], ["return #NEWLINE# #DEDENT# else", 0.0], ["rest - y )", 0.0], ["result )", 0.0], ["results #NEWLINE# print (", 0.0], ["results #NEWLINE# print", 0.0], ["results #NEWLINE#", 0.0], ["results", 0.0], ["result = [", 0.0], ["result =", 0.0], ["result ) #NEWLINE#", 0.0], ["result #NEWLINE# print (", 0.0], ["return #NEWLINE# #DEDENT# elif", 0.0], ["result #NEWLINE# print", 0.0], ["result #NEWLINE# if", 0.0], ["result #NEWLINE#", 0.0], ["result", 0.0], ["rest = n -", 0.0], ["rest = n", 0.0], ["rest =", 0.0], ["ret", 0.0], ["ret #NEWLINE#", 0.0], ["ret .", 0.0], ["ret . append", 0.0], ["return #NEWLINE# #DEDENT# #DEDENT#", 0.0], ["return #NEWLINE# #DEDENT#", 0.0], ["return #NEWLINE#", 0.0], ["return \"too weak\" #NEWLINE# #DEDENT#", 0.0], ["return \"too weak\" #NEWLINE#", 0.0], ["return \"too weak\"", 0.0], ["return \"impossible\" #NEWLINE# #DEDENT#", 0.0], ["return \"impossible\" #NEWLINE#", 0.0], ["return \"impossible\"", 0.0], ["ret_prev", 0.0], ["ret [", 0.0], ["ret = [ ]", 0.0], ["ret = [", 0.0], ["ret =", 0.0], ["ret . append (", 0.0], ["s [ i +", 0.0], ["s [ i ]", 0.0], ["str ( x", 0.0], ["sofa", 0.0], ["sol_1 [", 0.0], ["sol_1 =", 0.0], ["sol_1", 0.0], ["sofa_dict [ i ]", 0.0], ["sofa_dict [ i", 0.0], ["sofa_dict [", 0.0], ["sofa_dict", 0.0], ["snowflakes #NEWLINE#", 0.0], ["sl =", 0.0], ["snowflakes", 0.0], ["smallest", 0.0], ["slips", 0.0], ["sleep #NEWLINE#", 0.0], ["sleep", 0.0], ["sl in", 0.0], ["sl = \"\" #NEWLINE#", 0.0], ["sol_1 [ i", 0.0], ["sol_1 [ i ]", 0.0], ["sol_11", 0.0], ["sol_2", 0.0], ["sort (", 0.0], ["sort", 0.0], ["solve3 (", 0.0], ["solve3", 0.0], ["solve ( n ,", 0.0], ["solve ( n", 0.0], ["solve ( ) :", 0.0], ["solve ( )", 0.0], ["solve (", 0.0], ["solve", 0.0], ["sol_22", 0.0], ["sol_2 [ j ]", 0.0], ["sol_2 [ j", 0.0], ["sol_2 [", 0.0], ["sol_2 =", 0.0], ["sl = \"\"", 0.0], ["sl", 0.0], ["sort ( ) #NEWLINE#", 0.0], ["sergei_questions", 0.0], ["served before vasya 's", 0.0], ["served before vasya", 0.0], ["served before", 0.0], ["served", 0.0], ["serve passengers in", 0.0], ["serve passengers", 0.0], ["serve", 0.0], ["seq ] ) )", 0.0], ["size #NEWLINE#", 0.0], ["seq ] )", 0.0], ["seq ]", 0.0], ["seq [ x -", 0.0], ["seq [ x", 0.0], ["seq [ last", 0.0], ["seq [ i", 0.0], ["seq [", 0.0], ["set", 0.0], ["set (", 0.0], ["set ( )", 0.0], ["set ( ) #NEWLINE#", 0.0], ["size", 0.0], ["shuntsu_check", 0.0], ["shuntsu", 0.0], ["shiro_ribbon", 0.0], ["shiro_beauty >", 0.0], ["shiro_beauty", 0.0], ["set ( x", 0.0], ["set ( s )", 0.0], ["set ( s", 0.0], ["set ( map (", 0.0], ["set ( map", 0.0], ["set ( a )", 0.0], ["set ( a", 0.0], ["set ( [ 0", 0.0], ["set ( [", 0.0], ["sort ( )", 0.0], ["sorted", 0.0], ["seq == [ 0", 0.0], ["stdin", 0.0], ["stdout", 0.0], ["stdin . readline (", 0.0], ["stdin . readline #NEWLINE#", 0.0], ["stdin . readline", 0.0], ["stdin . read (", 0.0], ["stdin . read", 0.0], ["stdin .", 0.0], ["statements #NEWLINE#", 0.0], ["stars", 0.0], ["statements", 0.0], ["statement_order [", 0.0], ["statement_order", 0.0], ["statement", 0.0], ["start ] ==", 0.0], ["start ]", 0.0], ["start =", 0.0], ["steps", 0.0], ["steps to", 0.0], ["steps to the", 0.0], ["stones", 0.0], ["str ( n )", 0.0], ["str ( n", 0.0], ["str ( m )", 0.0], ["str ( m", 0.0], ["str ( int (", 0.0], ["str ( int", 0.0], ["str ( i", 0.0], ["str ( h )", 0.0], ["str ( h", 0.0], ["str ( a", 0.0], ["str (", 0.0], ["str", 0.0], ["store the", 0.0], ["store", 0.0], ["stones [", 0.0], ["start", 0.0], ["standing", 0.0], ["sorted (", 0.0], ["sorted ( set (", 0.0], ["split ( ' '", 0.0], ["split ( \" \" )", 0.0], ["split ( \" \"", 0.0], ["split (", 0.0], ["split", 0.0], ["spheres", 0.0], ["sparrows", 0.0], ["sorted ( set", 0.0], ["st = set (", 0.0], ["sorted ( ratings", 0.0], ["sorted ( list (", 0.0], ["sorted ( list", 0.0], ["sorted ( l ,", 0.0], ["sorted ( l", 0.0], ["sorted ( al [", 0.0], ["sorted ( al", 0.0], ["split ( ' ' )", 0.0], ["split ( )", 0.0], ["split ( ) #NEWLINE#", 0.0], ["split ( ) )", 0.0], ["st = set", 0.0], ["st =", 0.0], ["st . add (", 0.0], ["st . add", 0.0], ["st .", 0.0], ["st )", 0.0], ["st", 0.0], ["sqrt (", 0.0], ["sqrt", 0.0], ["sq", 0.0], ["splitlines ( )", 0.0], ["splitlines (", 0.0], ["splitlines", 0.0], ["split ( ) ]", 0.0], ["split ( ) [", 0.0], ["seq == [ 1", 0.0], ["seq == [", 0.0], ["s [ n", 0.0], ["s2 #NEWLINE# while", 0.0], ["s2 [ 0", 0.0], ["s2 [", 0.0], ["s2 =", 0.0], ["s2 , s3 =", 0.0], ["s2 , s3", 0.0], ["s2 ,", 0.0], ["s2 #NEWLINE# while t2", 0.0], ["s2 #NEWLINE#", 0.0], ["s12", 0.0], ["s2", 0.0], ["s14 : #INDENT# f", 0.0], ["s14 : #INDENT#", 0.0], ["s14 :", 0.0], ["s14", 0.0], ["s13 or", 0.0], ["s13", 0.0], ["s2 [ 0 ]", 0.0], ["s2 [ 1", 0.0], ["s2 [ 1 ]", 0.0], ["s2 [ 2", 0.0], ["s3 [ 1 ]", 0.0], ["s3 [ 1", 0.0], ["s3 [ 0 ]", 0.0], ["s3 [ 0", 0.0], ["s3 [", 0.0], ["s3 =", 0.0], ["s3 +", 0.0], ["s3 #NEWLINE# while t3", 0.0], ["s3 #NEWLINE# while", 0.0], ["s3 #NEWLINE#", 0.0], ["s3", 0.0], ["s2 or", 0.0], ["s2 [ 3 ]", 0.0], ["s2 [ 3", 0.0], ["s2 [ 2 ]", 0.0], ["s12 or", 0.0], ["s11 or", 0.0], ["s3 [ 2 ]", 0.0], ["s in input (", 0.0], ["s1 += a", 0.0], ["s1 +=", 0.0], ["s1 ) #NEWLINE#", 0.0], ["s1 )", 0.0], ["s1", 0.0], ["s in range (", 0.0], ["s in range", 0.0], ["s in input", 0.0], ["s11", 0.0], ["s in", 0.0], ["s ] ) #NEWLINE#", 0.0], ["s ] )", 0.0], ["s ]", 0.0], ["s [ start ]", 0.0], ["s [ start", 0.0], ["s [ n -", 0.0], ["s1 += a #NEWLINE#", 0.0], ["s1 .", 0.0], ["s1 . count", 0.0], ["s1 . count (", 0.0], ["s10 or", 0.0], ["s10", 0.0], ["s1 or", 0.0], ["s1 [ 3 ]", 0.0], ["s1 [ 3", 0.0], ["s1 [ 2 ]", 0.0], ["s1 [ 2", 0.0], ["s1 [ 1 ]", 0.0], ["s1 [ 1", 0.0], ["s1 [ 0 ]", 0.0], ["s1 [ 0", 0.0], ["s1 [", 0.0], ["s1 = '' #NEWLINE#", 0.0], ["s1 = ''", 0.0], ["s1 =", 0.0], ["s3 [ 2", 0.0], ["s3 [ 3", 0.0], ["seq ==", 0.0], ["searchsorted ( x ,", 0.0], ["sec ( x ,", 0.0], ["sec ( x", 0.0], ["sec (", 0.0], ["sec", 0.0], ["seat", 0.0], ["searchsorted ( y ,", 0.0], ["searchsorted ( y", 0.0], ["searchsorted ( x", 0.0], ["search ( '[a-z]'", 0.0], ["searchsorted (", 0.0], ["searchsorted", 0.0], ["search_from ]", 0.0], ["search_from = s [", 0.0], ["search_from = s", 0.0], ["search_from =", 0.0], ["search_from", 0.0], ["sec =", 0.0], ["sec [", 0.0], ["sec [ i", 0.0], ["sec [ i ]", 0.0], ["seq", 0.0], ["sep='\\t ' ) #NEWLINE#", 0.0], ["sep='\\t ' )", 0.0], ["sep='\\t '", 0.0], ["sep='\\t", 0.0], ["sep =", 0.0], ["sep", 0.0], ["semi", 0.0], ["self .", 0.0], ["self", 0.0], ["selection", 0.0], ["seconds", 0.0], ["second", 0.0], ["sec [ j ]", 0.0], ["sec [ j", 0.0], ["search ( '[a-z]' ,", 0.0], ["search (", 0.0], ["s3 [ 3 ]", 0.0], ["s4 [ 2 ]", 0.0], ["s6 or", 0.0], ["s6", 0.0], ["s5 or", 0.0], ["s5", 0.0], ["s4 or", 0.0], ["s4 [ 3 ]", 0.0], ["s4 [ 3", 0.0], ["s4 [ 2", 0.0], ["search", 0.0], ["s4 [ 1 ]", 0.0], ["s4 [ 1", 0.0], ["s4 [ 0 ]", 0.0], ["s4 [ 0", 0.0], ["s4 [", 0.0], ["s4", 0.0], ["s3 or", 0.0], ["s7", 0.0], ["s7 or", 0.0], ["s8", 0.0], ["s8 or", 0.0], ["score_2 +=", 0.0], ["score_2", 0.0], ["score_1", 0.0], ["score #NEWLINE# if", 0.0], ["score #NEWLINE#", 0.0], ["score", 0.0], ["scissors_prob", 0.0], ["sasha_distances", 0.0], ["same", 0.0], ["s_sum", 0.0], ["s_seat", 0.0], ["s_r", 0.0], ["s_o", 0.0], ["s9 or", 0.0], ["s9", 0.0], ["k3", 0.0], ["k2_cards )", 0.0], ["k2_cards", 0.0], ["area = 0 #NEWLINE#", 0.0], ["arr [ i ]", 0.0], ["arr [ i", 0.0], ["arr [", 0.0], ["arr = [", 0.0], ["arr =", 0.0], ["arr )", 0.0], ["arr", 0.0], ["area = 0", 0.0], ["ar =", 0.0], ["area =", 0.0], ["area +=", 0.0], ["area )", 0.0], ["area", 0.0], ["are", 0.0], ["ar [ i ]", 0.0], ["ar [ i", 0.0], ["array", 0.0], ["as", 0.0], ["as np", 0.0], ["as np #NEWLINE#", 0.0], ["ay", 0.0], ["ax", 0.0], ["avt [ i ]", 0.0], ["avt [ i", 0.0], ["avt [ ( i", 0.0], ["avt [ (", 0.0], ["avt [", 0.0], ["avt", 0.0], ["available", 0.0], ["avail", 0.0], ["atan", 0.0], ["at", 0.0], ["asum", 0.0], ["assigned", 0.0], ["asked", 0.0], ["ar [", 0.0], ["ar", 0.0], ["b #NEWLINE#", 0.0], ["ans = n", 0.0], ["any (", 0.0], ["any", 0.0], ["answer =", 0.0], ["answer #NEWLINE#", 0.0], ["answer", 0.0], ["answ", 0.0], ["ans [", 0.0], ["ans = min (", 0.0], ["append ( n", 0.0], ["ans = min", 0.0], ["ans = max (", 0.0], ["ans = max", 0.0], ["ans = [", 0.0], ["ans = 1 #NEWLINE#", 0.0], ["ans = 1", 0.0], ["ans = 0 #NEWLINE#", 0.0], ["any ( char", 0.0], ["any ( char .", 0.0], ["apartment", 0.0], ["apartment #NEWLINE#", 0.0], ["append ( list (", 0.0], ["append ( list", 0.0], ["append ( l", 0.0], ["append ( k )", 0.0], ["append ( k", 0.0], ["append ( int (", 0.0], ["append ( int", 0.0], ["append ( i )", 0.0], ["append ( i", 0.0], ["append ( a", 0.0], ["append ( [", 0.0], ["append ( ( \"move\"", 0.0], ["append ( (", 0.0], ["append (", 0.0], ["append", 0.0], ["b !=", 0.0], ["b #NEWLINE# #DEDENT#", 0.0], ["ans = -1 #NEWLINE#", 0.0], ["b = b ,", 0.0], ["b = map", 0.0], ["b = list (", 0.0], ["b = list", 0.0], ["b = int (", 0.0], ["b = int", 0.0], ["b = input (", 0.0], ["b = input", 0.0], ["b = b", 0.0], ["b // gcd (", 0.0], ["b = [", 0.0], ["b =", 0.0], ["b <", 0.0], ["b : #INDENT# print", 0.0], ["b : #INDENT# if", 0.0], ["b : #INDENT# ans", 0.0], ["b : #INDENT#", 0.0], ["b = map (", 0.0], ["b ==", 0.0], ["b == 0", 0.0], ["b == 0 :", 0.0], ["b1 , a2 ,", 0.0], ["b1 , a2", 0.0], ["b1 ,", 0.0], ["b1 )", 0.0], ["b1", 0.0], ["b in range (", 0.0], ["b in range", 0.0], ["b in", 0.0], ["b [ i ]", 0.0], ["b [ i", 0.0], ["b [ 0 ]", 0.0], ["b [ 0", 0.0], ["b [", 0.0], ["b >=", 0.0], ["b >", 0.0], ["b :", 0.0], ["b // gcd", 0.0], ["b #NEWLINE# #DEDENT# #DEDENT#", 0.0], ["b ) %", 0.0], ["b ) ==", 0.0], ["b ) : #INDENT#", 0.0], ["b ) :", 0.0], ["b ) //", 0.0], ["b ) +", 0.0], ["b ) ) #NEWLINE#", 0.0], ["b ) )", 0.0], ["b ) #NEWLINE# #DEDENT#", 0.0], ["b // 2", 0.0], ["b ) #NEWLINE#", 0.0], ["b )", 0.0], ["b % ( m", 0.0], ["b % (", 0.0], ["b %", 0.0], ["b #NEWLINE# #DEDENT# return", 0.0], ["b #NEWLINE# #DEDENT# elif", 0.0], ["b *", 0.0], ["b +", 0.0], ["b + 1", 0.0], ["b + 1 )", 0.0], ["b //", 0.0], ["b .", 0.0], ["b - c", 0.0], ["b -", 0.0], ["b , s )", 0.0], ["b , s", 0.0], ["b , c =", 0.0], ["b , c ,", 0.0], ["b , c )", 0.0], ["b , c", 0.0], ["b , a %", 0.0], ["b , a", 0.0], ["b ,", 0.0], ["b + k", 0.0], ["b + c", 0.0], ["ans = 0", 0.0], ["ans = -1", 0.0], ["b1 = map", 0.0], ["already made", 0.0], ["an accordion", 0.0], ["an", 0.0], ["amount of rubles", 0.0], ["amount of", 0.0], ["amount", 0.0], ["already made their statement", 0.0], ["already made their", 0.0], ["already", 0.0], ["al [ ptr +", 0.0], ["alpha", 0.0], ["allnums", 0.0], ["all stones from the", 0.0], ["all stones from", 0.0], ["all stones", 0.0], ["all =", 0.0], ["all (", 0.0], ["an employee", 0.0], ["an employee from", 0.0], ["an employee from the", 0.0], ["and", 0.0], ["and b %", 0.0], ["and b #NEWLINE#", 0.0], ["and b !=", 0.0], ["and b", 0.0], ["and ans", 0.0], ["and all (", 0.0], ["and all", 0.0], ["and a [ i", 0.0], ["and a [", 0.0], ["and a %", 0.0], ["and a", 0.0], ["and ( x", 0.0], ["and ( bool (", 0.0], ["and ( bool", 0.0], ["and (", 0.0], ["all", 0.0], ["al [ ptr", 0.0], ["and c %", 0.0], ["age #NEWLINE#", 0.0], ["ain", 0.0], ["aiming #NEWLINE#", 0.0], ["aiming", 0.0], ["aid += 1 #NEWLINE#", 0.0], ["aid += 1", 0.0], ["aid +=", 0.0], ["aid", 0.0], ["age", 0.0], ["al [ : ptr", 0.0], ["after", 0.0], ["add the", 0.0], ["add ( x )", 0.0], ["add ( x", 0.0], ["add ( temp )", 0.0], ["add ( temp", 0.0], ["add ( name )", 0.0], ["ain (", 0.0], ["ain ( )", 0.0], ["al", 0.0], ["al )", 0.0], ["al [ :", 0.0], ["al [", 0.0], ["al = sorted (", 0.0], ["al = sorted", 0.0], ["al =", 0.0], ["al . pop (", 0.0], ["al . pop", 0.0], ["al . append (", 0.0], ["al . append", 0.0], ["al .", 0.0], ["al , bl ,", 0.0], ["al , bl", 0.0], ["al ,", 0.0], ["al ) ) #NEWLINE#", 0.0], ["al ) )", 0.0], ["and c", 0.0], ["and d", 0.0], ["ans = (", 0.0], ["ans", 0.0], ["ans ) #NEWLINE#", 0.0], ["ans )", 0.0], ["ans % ( 10", 0.0], ["ans % (", 0.0], ["ans %", 0.0], ["ans #NEWLINE# #DEDENT#", 0.0], ["ans #NEWLINE#", 0.0], ["ang (", 0.0], ["and the", 0.0], ["ang", 0.0], ["and yv", 0.0], ["and y", 0.0], ["and x <=", 0.0], ["and x", 0.0], ["and v", 0.0], ["and used [", 0.0], ["ans ) #NEWLINE# #DEDENT#", 0.0], ["ans ) )", 0.0], ["ans ) ) #NEWLINE#", 0.0], ["ans *", 0.0], ["ans =", 0.0], ["ans : #INDENT# print", 0.0], ["ans : #INDENT#", 0.0], ["ans :", 0.0], ["ans . append (", 0.0], ["ans . append", 0.0], ["ans .", 0.0], ["ans , i", 0.0], ["ans ,", 0.0], ["ans += n", 0.0], ["ans += 1 #NEWLINE#", 0.0], ["ans += 1", 0.0], ["ans += (", 0.0], ["ans +=", 0.0], ["ans * m", 0.0], ["and used", 0.0], ["and t > 0", 0.0], ["and d %", 0.0], ["and j", 0.0], ["and maximum elements", 0.0], ["and maximum", 0.0], ["and lr [", 0.0], ["and lr", 0.0], ["and len (", 0.0], ["and len", 0.0], ["and l", 0.0], ["and i", 0.0], ["and t >", 0.0], ["and h_map [ i", 0.0], ["and h_map [", 0.0], ["and h_map", 0.0], ["and gcd (", 0.0], ["and gcd", 0.0], ["and d [ 0", 0.0], ["and d [", 0.0], ["and not", 0.0], ["and not visit", 0.0], ["and not visit [", 0.0], ["and preflens", 0.0], ["and t", 0.0], ["and sum_ [ i", 0.0], ["and sum_ [", 0.0], ["and sum_", 0.0], ["and sum", 0.0], ["and sofa_dict [ i", 0.0], ["and sofa_dict [", 0.0], ["and sofa_dict", 0.0], ["and s [ -1", 0.0], ["and s [", 0.0], ["and s .", 0.0], ["and s", 0.0], ["and repeat", 0.0], ["and preflens [ preflen", 0.0], ["and preflens [", 0.0], ["b1 =", 0.0], ["b1 = map (", 0.0], ["add ( i )", 0.0], ["cnt += 1", 0.0], ["cnt [ i ]", 0.0], ["cnt [ i", 0.0], ["cnt [", 0.0], ["cnt = 0 #NEWLINE#", 0.0], ["cnt = 0", 0.0], ["cnt =", 0.0], ["cnt += 1 #NEWLINE#", 0.0], ["cnt +=", 0.0], ["check if the", 0.0], ["cnt ) #NEWLINE#", 0.0], ["cnt )", 0.0], ["cnt", 0.0], ["close", 0.0], ["chopped_even", 0.0], ["chk_r", 0.0], ["chk1", 0.0], ["cnt [ j", 0.0], ["cnt [ j ]", 0.0], ["cnt_d", 0.0], ["cnt_l", 0.0], ["collections", 0.0], ["col . add (", 0.0], ["col . add", 0.0], ["col .", 0.0], ["col", 0.0], ["coding : utf-8 -", 0.0], ["coding : utf-8", 0.0], ["coding :", 0.0], ["coding", 0.0], ["co_dict", 0.0], ["co2", 0.0], ["co1", 0.0], ["cntr", 0.0], ["cntl", 0.0], ["cnt_r", 0.0], ["check if there", 0.0], ["check if", 0.0], ["collections #NEWLINE# import", 0.0], ["calculate the minimum number", 0.0], ["candy", 0.0], ["can be", 0.0], ["can", 0.0], ["calculate the total number", 0.0], ["calculate the total", 0.0], ["calculate the number of", 0.0], ["calculate the number", 0.0], ["calculate the minimum", 0.0], ["check ( a1 ,", 0.0], ["calculate the maximum number", 0.0], ["calculate the maximum", 0.0], ["calculate the distance", 0.0], ["calculate the", 0.0], ["calculate", 0.0], ["ca [ i ]", 0.0], ["ca [ i", 0.0], ["candy_canes", 0.0], ["caught", 0.0], ["cb", 0.0], ["cd2", 0.0], ["check ( a1", 0.0], ["check (", 0.0], ["check", 0.0], ["char in s )", 0.0], ["char in s", 0.0], ["char in", 0.0], ["char .", 0.0], ["char", 0.0], ["ch [", 0.0], ["ch", 0.0], ["ceil (", 0.0], ["ceil", 0.0], ["cd3 -", 0.0], ["cd3 )", 0.0], ["cd3", 0.0], ["collections #NEWLINE#", 0.0], ["collections import", 0.0], ["ca", 0.0], ["cost of", 0.0], ["count ( 'a' )", 0.0], ["count ( 'a'", 0.0], ["count ( \")\" )", 0.0], ["count ( \")\"", 0.0], ["count (", 0.0], ["count", 0.0], ["costs", 0.0], ["cost [", 0.0], ["copy", 0.0], ["cost =", 0.0], ["cost #NEWLINE#", 0.0], ["cost", 0.0], ["cos_angles", 0.0], ["cos", 0.0], ["copybooks", 0.0], ["copy ( )", 0.0], ["count ( 'c'", 0.0], ["count ( 'c' )", 0.0], ["count ( 'g'", 0.0], ["count ( 'g' )", 0.0], ["count the number of", 0.0], ["count the number", 0.0], ["count the", 0.0], ["count = 0 #NEWLINE#", 0.0], ["count = 0", 0.0], ["count =", 0.0], ["count += 1 #NEWLINE#", 0.0], ["count += 1", 0.0], ["count +=", 0.0], ["count ) #NEWLINE#", 0.0], ["count )", 0.0], ["count ( s [", 0.0], ["count ( s", 0.0], ["count ( 't' )", 0.0], ["count ( 't'", 0.0], ["copy (", 0.0], ["convert", 0.0], ["collections import counter", 0.0], ["colors = [", 0.0], ["columns", 0.0], ["column", 0.0], ["colors [ v ]", 0.0], ["colors [ v", 0.0], ["colors [ u ]", 0.0], ["colors [ u", 0.0], ["colors [", 0.0], ["colors =", 0.0], ["continue #NEWLINE# #DEDENT#", 0.0], ["colors ) : #INDENT#", 0.0], ["colors ) :", 0.0], ["colors ) #NEWLINE#", 0.0], ["colors )", 0.0], ["colors (", 0.0], ["colors", 0.0], ["collections import counter #NEWLINE#", 0.0], ["columns #NEWLINE#", 0.0], ["combine", 0.0], ["combine (", 0.0], ["combine ( al", 0.0], ["continue #NEWLINE#", 0.0], ["continue", 0.0], ["constant_block", 0.0], ["constant", 0.0], ["consecutive", 0.0], ["condition =", 0.0], ["condition", 0.0], ["compression [ j ]", 0.0], ["compression [ j +", 0.0], ["compression [ j", 0.0], ["compression [ i", 0.0], ["compression [", 0.0], ["compression )", 0.0], ["compression", 0.0], ["comp", 0.0], ["ca [", 0.0], ["c_i", 0.0], ["b2", 0.0], ["bl", 0.0], ["board [ 0 ]", 0.0], ["board [ 0", 0.0], ["board [", 0.0], ["board", 0.0], ["blow", 0.0], ["block #NEWLINE#", 0.0], ["block", 0.0], ["binsearch (", 0.0], ["best_even", 0.0], ["binsearch", 0.0], ["bin (", 0.0], ["bin", 0.0], ["big", 0.0], ["bid", 0.0], ["between the", 0.0], ["between", 0.0], ["board [ 1", 0.0], ["board [ 1 ]", 0.0], ["board [ 2", 0.0], ["board [ 2 ]", 0.0], ["bool ( any (", 0.0], ["bool ( any", 0.0], ["bool (", 0.0], ["bool", 0.0], ["bomb_pos", 0.0], ["boi [ 1 ]", 0.0], ["boi [ 1", 0.0], ["boi [ 0 ]", 0.0], ["boi [ 0", 0.0], ["boi [", 0.0], ["boi", 0.0], ["board [ r ]", 0.0], ["board [ r", 0.0], ["board [ 3 ]", 0.0], ["board [ 3", 0.0], ["best_odd", 0.0], ["best [ 2 ]", 0.0], ["bound", 0.0], ["b3 ,", 0.0], ["b_dict [", 0.0], ["b_dict", 0.0], ["b_2", 0.0], ["b_1 , q ,", 0.0], ["b_1 , q", 0.0], ["b_1 ,", 0.0], ["b_1", 0.0], ["b3 )", 0.0], ["best [ 2", 0.0], ["b3", 0.0], ["b2 = map (", 0.0], ["b2 = map", 0.0], ["b2 =", 0.0], ["b2 ,", 0.0], ["b2 +", 0.0], ["b2 )", 0.0], ["b_dict [ i", 0.0], ["b_dict [ i ]", 0.0], ["ball", 0.0], ["ball will", 0.0], ["best [ 1 ]", 0.0], ["best [ 1", 0.0], ["best [ 0 ]", 0.0], ["best [ 0", 0.0], ["best [", 0.0], ["best", 0.0], ["below_ten", 0.0], ["begin", 0.0], ["beauty", 0.0], ["be", 0.0], ["bc", 0.0], ["bb", 0.0], ["base", 0.0], ["bars", 0.0], ["barn", 0.0], ["bottles", 0.0], ["bound [", 0.0], ["c3", 0.0], ["c = 0 #NEWLINE#", 0.0], ["c [", 0.0], ["c ==", 0.0], ["c = map (", 0.0], ["c = map", 0.0], ["c = list (", 0.0], ["c = list", 0.0], ["c = [", 0.0], ["c = 0", 0.0], ["c -", 0.0], ["c =", 0.0], ["c : #INDENT# print", 0.0], ["c : #INDENT#", 0.0], ["c :", 0.0], ["c //", 0.0], ["c . keys (", 0.0], ["c . keys", 0.0], ["c [ 0", 0.0], ["c [ 0 ]", 0.0], ["c [ i", 0.0], ["c [ i ]", 0.0], ["c2 =", 0.0], ["c2 ,", 0.0], ["c2", 0.0], ["c1 =", 0.0], ["c1 , c2", 0.0], ["c1 ,", 0.0], ["c1", 0.0], ["c in range (", 0.0], ["c in range", 0.0], ["c in", 0.0], ["c ] == board", 0.0], ["c ] ==", 0.0], ["c ]", 0.0], ["c [ u ]", 0.0], ["c [ u", 0.0], ["c .", 0.0], ["c , d =", 0.0], ["bourles", 0.0], ["break #NEWLINE# #DEDENT# l", 0.0], ["c #NEWLINE# #DEDENT#", 0.0], ["c #NEWLINE#", 0.0], ["c", 0.0], ["by the", 0.0], ["by", 0.0], ["bx", 0.0], ["bs", 0.0], ["break #NEWLINE# #DEDENT# if", 0.0], ["c , d", 0.0], ["break #NEWLINE# #DEDENT# ans", 0.0], ["break #NEWLINE# #DEDENT# #DEDENT#", 0.0], ["break #NEWLINE# #DEDENT#", 0.0], ["break #NEWLINE#", 0.0], ["break", 0.0], ["br =", 0.0], ["br", 0.0], ["c #NEWLINE# #DEDENT# #DEDENT#", 0.0], ["c #NEWLINE# if", 0.0], ["c %", 0.0], ["c )", 0.0], ["c , colors )", 0.0], ["c , colors", 0.0], ["c ,", 0.0], ["c += 1 #NEWLINE#", 0.0], ["c += 1", 0.0], ["c +=", 0.0], ["c + 1 )", 0.0], ["c + 1", 0.0], ["c +", 0.0], ["c *", 0.0], ["c ) : #INDENT#", 0.0], ["c ) :", 0.0], ["c ) ,", 0.0], ["c ) #NEWLINE# #DEDENT#", 0.0], ["c ) #NEWLINE#", 0.0], ["add ( name", 0.0], ["add ( i", 0.0], ["k2 =", 0.0], ["] , 2", 0.0], ["] , best", 0.0], ["] , a [", 0.0], ["] , a", 0.0], ["] , [ ]", 0.0], ["] , [ (", 0.0], ["] , [", 0.0], ["] , 2 )", 0.0], ["] ,", 0.0], ["] + s3", 0.0], ["] += cnt [", 0.0], ["] += cnt", 0.0], ["] += 1 #NEWLINE#", 0.0], ["] += 1", 0.0], ["] +=", 0.0], ["] + s4 [", 0.0], ["] + s4", 0.0], ["] , best [", 0.0], ["] , boi", 0.0], ["] , boi [", 0.0], ["] , guy", 0.0], ["] - compression", 0.0], ["] - a [", 0.0], ["] - a", 0.0], ["] - 1 #NEWLINE#", 0.0], ["] - 1", 0.0], ["] - ( 0", 0.0], ["] - (", 0.0], ["] -", 0.0], ["] , x [", 0.0], ["] , x", 0.0], ["] , vectors [", 0.0], ["] , vectors", 0.0], ["] , locs [", 0.0], ["] , locs", 0.0], ["] , guy [", 0.0], ["] + s3 [", 0.0], ["] + s2 [", 0.0], ["] - sofa_dict", 0.0], ["] ) [", 0.0], ["] * k", 0.0], ["] * ( n", 0.0], ["] * (", 0.0], ["] *", 0.0], ["] ) ] =", 0.0], ["] ) ]", 0.0], ["] ) [ :", 0.0], ["] ) : #INDENT#", 0.0], ["] + s2", 0.0], ["] ) :", 0.0], ["] ) /", 0.0], ["] ) - 1", 0.0], ["] ) -", 0.0], ["] ) + abs", 0.0], ["] ) + 1", 0.0], ["] ) + ''", 0.0], ["] * k #NEWLINE#", 0.0], ["] * leny", 0.0], ["] * leny for", 0.0], ["] * m", 0.0], ["] + s [", 0.0], ["] + s", 0.0], ["] + dists [", 0.0], ["] + dists", 0.0], ["] + b", 0.0], ["] + 1 >=", 0.0], ["] + 1 )", 0.0], ["] + 1 #NEWLINE#", 0.0], ["] + 1", 0.0], ["] +", 0.0], ["] * v2 [", 0.0], ["] * v2", 0.0], ["] * n #NEWLINE#", 0.0], ["] * n", 0.0], ["] * m for", 0.0], ["] - compression [", 0.0], ["] - sofa_dict [", 0.0], ["] ) *", 0.0], ["] == \"d\" :", 0.0], ["] == '-'", 0.0], ["] == \"u\" :", 0.0], ["] == \"u\"", 0.0], ["] == \"r\" :", 0.0], ["] == \"r\"", 0.0], ["] == \"l\" :", 0.0], ["] == \"l\"", 0.0], ["] == \"d\"", 0.0], ["] = [ ]", 0.0], ["] ==", 0.0], ["] = true #NEWLINE#", 0.0], ["] = true", 0.0], ["] = k", 0.0], ["] = b [", 0.0], ["] = b", 0.0], ["] = a #NEWLINE#", 0.0], ["] == '-' :", 0.0], ["] == '.'", 0.0], ["] == '.' :", 0.0], ["] == 'w'", 0.0], ["] >=", 0.0], ["] >", 0.0], ["] == s [", 0.0], ["] == s", 0.0], ["] == board [", 0.0], ["] == board", 0.0], ["] == ar [", 0.0], ["] == ar", 0.0], ["] == a [", 0.0], ["] == a", 0.0], ["] == 1 :", 0.0], ["] == 1", 0.0], ["] == 0 :", 0.0], ["] == 0", 0.0], ["] == 'w' ]", 0.0], ["] = a", 0.0], ["] = [", 0.0], ["] -=", 0.0], ["] . remove (", 0.0], ["] : #INDENT# layers", 0.0], ["] : #INDENT# if", 0.0], ["] : #INDENT# dp", 0.0], ["] : #INDENT# avt", 0.0], ["] : #INDENT# ans", 0.0], ["] : #INDENT#", 0.0], ["] :", 0.0], ["] . remove", 0.0], ["] = 1000 *", 0.0], ["] . append (", 0.0], ["] . append", 0.0], ["] .", 0.0], ["] -= min (", 0.0], ["] -= min", 0.0], ["] -= 1 #NEWLINE#", 0.0], ["] -= 1", 0.0], ["] : #INDENT# print", 0.0], ["] : #INDENT# return", 0.0], ["] : #INDENT# visit", 0.0], ["] <", 0.0], ["] = 1000", 0.0], ["] = 1 if", 0.0], ["] = 1 #NEWLINE#", 0.0], ["] = 1", 0.0], ["] = 0 #NEWLINE#", 0.0], ["] = 0", 0.0], ["] = (", 0.0], ["] = '+' #NEWLINE#", 0.0], ["] = '+'", 0.0], ["] =", 0.0], ["] <= compression [", 0.0], ["] <= compression", 0.0], ["] <= 0 :", 0.0], ["] <= 0", 0.0], ["] <=", 0.0], ["] ) +", 0.0], ["] ) ) #NEWLINE#", 0.0], ["] [ (", 0.0], ["[ x", 0.0], ["[ x ] #NEWLINE#", 0.0], ["[ x ]", 0.0], ["[ x - 2", 0.0], ["[ x - 1", 0.0], ["[ x -", 0.0], ["[ x + 1", 0.0], ["[ x +", 0.0], ["[ v ] ==", 0.0], ["[ u ] ,", 0.0], ["[ v ] =", 0.0], ["[ v ] :", 0.0], ["[ v ] )", 0.0], ["[ v ]", 0.0], ["[ v", 0.0], ["[ u ] =", 0.0], ["[ u ] :", 0.0], ["[ x ] *", 0.0], ["[ x ] +", 0.0], ["[ x ] =", 0.0], ["[ x ] ==", 0.0], ["[ y ] [", 0.0], ["[ y ] =", 0.0], ["[ y ] :", 0.0], ["[ y ] #NEWLINE#", 0.0], ["[ y ]", 0.0], ["[ y + 1", 0.0], ["[ y +", 0.0], ["[ y", 0.0], ["[ x2 - 1", 0.0], ["[ x2 -", 0.0], ["[ x2", 0.0], ["[ x1 ] [", 0.0], ["[ x1 ]", 0.0], ["[ x1", 0.0], ["[ x ] [", 0.0], ["[ u ] .", 0.0], ["[ u ]", 0.0], ["[ y1", 0.0], ["[ p", 0.0], ["[ ptr +", 0.0], ["[ ptr", 0.0], ["[ preflen ]", 0.0], ["[ preflen", 0.0], ["[ pos ]", 0.0], ["[ pos", 0.0], ["[ p ]", 0.0], ["} , { }", 0.0], ["[ u +", 0.0], ["[ n - 1", 0.0], ["[ n -", 0.0], ["[ n", 0.0], ["[ minj ]", 0.0], ["[ minj", 0.0], ["[ mini ] [", 0.0], ["[ mini ]", 0.0], ["[ ptr + 1", 0.0], ["[ r", 0.0], ["[ r ]", 0.0], ["[ r ] [", 0.0], ["[ u", 0.0], ["[ tup ] ,", 0.0], ["[ tup ] )", 0.0], ["[ tup ]", 0.0], ["[ tup", 0.0], ["[ sufflen ]", 0.0], ["[ sufflen", 0.0], ["[ str ( x", 0.0], ["[ str (", 0.0], ["[ str", 0.0], ["[ start ] ==", 0.0], ["[ start ]", 0.0], ["[ start", 0.0], ["[ s ]", 0.0], ["[ s", 0.0], ["[ y ] and", 0.0], ["[ y1 ]", 0.0], ["] ) )", 0.0], ["] #NEWLINE# for p", 0.0], ["] #NEWLINE# if the", 0.0], ["] #NEWLINE# if (", 0.0], ["] #NEWLINE# if", 0.0], ["] #NEWLINE# i =", 0.0], ["] #NEWLINE# i", 0.0], ["] #NEWLINE# for y", 0.0], ["] #NEWLINE# for x", 0.0], ["] #NEWLINE# for l", 0.0], ["] #NEWLINE# check if", 0.0], ["] #NEWLINE# for k", 0.0], ["] #NEWLINE# for j", 0.0], ["] #NEWLINE# for i", 0.0], ["] #NEWLINE# for _", 0.0], ["] #NEWLINE# for", 0.0], ["] #NEWLINE# f", 0.0], ["] #NEWLINE# edges", 0.0], ["] #NEWLINE# k", 0.0], ["] #NEWLINE# k =", 0.0], ["] #NEWLINE# print", 0.0], ["] #NEWLINE# print (", 0.0], ["] ) %", 0.0], ["] ) #NEWLINE# print", 0.0], ["] ) #NEWLINE# m", 0.0], ["] ) #NEWLINE# if", 0.0], ["] ) #NEWLINE# for", 0.0], ["] ) #NEWLINE# cnt", 0.0], ["] ) #NEWLINE# #DEDENT#", 0.0], ["] ) #NEWLINE#", 0.0], ["] )", 0.0], ["] % 2", 0.0], ["] %", 0.0], ["] #NEWLINE# while", 0.0], ["] #NEWLINE# s =", 0.0], ["] #NEWLINE# s", 0.0], ["] #NEWLINE# r", 0.0], ["] #NEWLINE# def", 0.0], ["] #NEWLINE# check", 0.0], ["[ y1 ] :", 0.0], ["\\\n [", 0.0], ["] != s2 [", 0.0], ["] != s2", 0.0], ["] != ch", 0.0], ["] !=", 0.0], ["]", 0.0], ["\\\n [ ( x", 0.0], ["\\\n [ (", 0.0], ["\\\n", 0.0], ["] #NEWLINE# c1 ,", 0.0], ["[ { } ,", 0.0], ["[ { }", 0.0], ["[ {", 0.0], ["[ z ] )", 0.0], ["[ z ]", 0.0], ["[ z", 0.0], ["[ y1 ] =", 0.0], ["] #NEWLINE# #DEDENT#", 0.0], ["] #NEWLINE# #DEDENT# #DEDENT#", 0.0], ["] #NEWLINE# #DEDENT# elif", 0.0], ["] #NEWLINE# #DEDENT# else", 0.0], ["] #NEWLINE# c1", 0.0], ["] #NEWLINE# c =", 0.0], ["] #NEWLINE# c", 0.0], ["] #NEWLINE# bl =", 0.0], ["] #NEWLINE# bl", 0.0], ["] #NEWLINE# b =", 0.0], ["] #NEWLINE# b", 0.0], ["] #NEWLINE# ans +=", 0.0], ["] #NEWLINE# ans", 0.0], ["] #NEWLINE# a =", 0.0], ["] #NEWLINE# a", 0.0], ["] #NEWLINE# #DEDENT# return", 0.0], ["] #NEWLINE# #DEDENT# print", 0.0], ["] #NEWLINE# #DEDENT# pos", 0.0], ["] #NEWLINE# #DEDENT# if", 0.0], ["] [", 0.0], ["] [ ( i", 0.0], ["add ( a [", 0.0], ["a/b - 1", 0.0], ["a1 , b1", 0.0], ["a1 ,", 0.0], ["a1 * b1 -", 0.0], ["a1 * b1", 0.0], ["a1 *", 0.0], ["a1", 0.0], ["a/b - 1 =", 0.0], ["a/b -", 0.0], ["a particular pupil is", 0.0], ["a/b +", 0.0], ["a/b #NEWLINE# #INDENT# a", 0.0], ["a/b #NEWLINE# #INDENT#", 0.0], ["a/b #NEWLINE#", 0.0], ["a/b", 0.0], ["a string #NEWLINE#", 0.0], ["a string", 0.0], ["a1 , b1 ,", 0.0], ["a1 , b1 =", 0.0], ["a1 .", 0.0], ["a1 . append", 0.0], ["a3 ,", 0.0], ["a3 )", 0.0], ["a3", 0.0], ["a2 , b2 =", 0.0], ["a2 , b2 ,", 0.0], ["a2 , b2", 0.0], ["a2 ,", 0.0], ["a2 +", 0.0], ["a2 * b2 +", 0.0], ["a2 * b2", 0.0], ["a2 *", 0.0], ["a2", 0.0], ["a1 and", 0.0], ["a1 =", 0.0], ["a1 . append (", 0.0], ["a path", 0.0], ["a particular pupil", 0.0], ["a3 , b3 )", 0.0], ["a [ imin", 0.0], ["a [ r ]", 0.0], ["a [ r", 0.0], ["a [ pos ]", 0.0], ["a [ pos", 0.0], ["a [ n", 0.0], ["a [ j ]", 0.0], ["a [ j", 0.0], ["a [ i ]", 0.0], ["a particular", 0.0], ["a [ i -", 0.0], ["a [ i +", 0.0], ["a [ i", 0.0], ["a [ : ]", 0.0], ["a [ : :", 0.0], ["a [ :", 0.0], ["a [ 0 ]", 0.0], ["a ]", 0.0], ["a and", 0.0], ["a and b", 0.0], ["a and b #NEWLINE#", 0.0], ["a or", 0.0], ["a message of length", 0.0], ["a message of", 0.0], ["a message", 0.0], ["a list", 0.0], ["a in range (", 0.0], ["a in range", 0.0], ["a in a ]", 0.0], ["a in a", 0.0], ["a in", 0.0], ["a if", 0.0], ["a given", 0.0], ["a dictionary to store", 0.0], ["a dictionary to", 0.0], ["a dictionary", 0.0], ["a3 , b3", 0.0], ["a3 , b3 =", 0.0], ["a [ -1 ]", 0.0], ["abs ( l -", 0.0], ["abs ( tans", 0.0], ["abs ( start [", 0.0], ["abs ( start", 0.0], ["abs ( stars [", 0.0], ["abs ( stars", 0.0], ["abs ( pos -", 0.0], ["abs ( pos", 0.0], ["abs ( l", 0.0], ["abs ( b -", 0.0], ["abs ( k -", 0.0], ["abs ( k", 0.0], ["abs ( i -", 0.0], ["abs ( i", 0.0], ["abs ( ete -", 0.0], ["abs ( ete", 0.0], ["abs ( det )", 0.0], ["abs ( tans )", 0.0], ["abs ( x", 0.0], ["abs ( x -", 0.0], ["abs ( y", 0.0], ["add ( a", 0.0], ["add ( ( i", 0.0], ["add ( (", 0.0], ["add (", 0.0], ["add", 0.0], ["acyclic =", 0.0], ["acyclic", 0.0], ["accordion #NEWLINE#", 0.0], ["accordion", 0.0], ["acc", 0.0], ["abscissa of the point", 0.0], ["abscissa of the", 0.0], ["abscissa of", 0.0], ["abscissa", 0.0], ["abs ( y -", 0.0], ["abs ( det", 0.0], ["abs ( b", 0.0], ["a3 <=", 0.0], ["a_dict [", 0.0], ["a_i + 1", 0.0], ["a_i +", 0.0], ["a_i )", 0.0], ["a_i", 0.0], ["a_digits", 0.0], ["a_dict [ i ]", 0.0], ["a_dict [ i", 0.0], ["a_dict", 0.0], ["abs ( a_dict [", 0.0], ["a_copy [", 0.0], ["a_copy", 0.0], ["a_2_l", 0.0], ["a_2", 0.0], ["a_1_k", 0.0], ["a_1", 0.0], ["a3 <= a1", 0.0], ["a_j", 0.0], ["a_set", 0.0], ["a_sorted", 0.0], ["aa", 0.0], ["abs ( a_dict", 0.0], ["abs ( a [", 0.0], ["abs ( a -", 0.0], ["abs ( a", 0.0], ["abs (", 0.0], ["abs", 0.0], ["ab3 - s3", 0.0], ["ab3 -", 0.0], ["ab3 , cd3", 0.0], ["ab3 ,", 0.0], ["ab3", 0.0], ["ab2 +", 0.0], ["ab2", 0.0], ["ab", 0.0], ["aa =", 0.0], ["a [ 0", 0.0], ["a [ -1", 0.0], ["] [ 0", 0.0], ["_ in range", 0.0], ["``", 0.0], ["__starting_point ( ) :", 0.0], ["__starting_point ( ) #NEWLINE#", 0.0], ["__starting_point ( )", 0.0], ["__starting_point (", 0.0], ["__starting_point", 0.0], ["_ in range (", 0.0], ["_ in", 0.0], ["] and not", 0.0], ["_", 0.0], ["^=", 0.0], ["] for i in", 0.0], ["] for i", 0.0], ["] for _ in", 0.0], ["] for _", 0.0], ["] for", 0.0], ["a !=", 0.0], ["a #NEWLINE#", 0.0], ["a #NEWLINE# #DEDENT#", 0.0], ["a #NEWLINE# #DEDENT# #DEDENT#", 0.0], ["a ) )", 0.0], ["a ) #NEWLINE# print", 0.0], ["a ) #NEWLINE# if", 0.0], ["a ) #NEWLINE# #DEDENT#", 0.0], ["a ) #NEWLINE#", 0.0], ["a )", 0.0], ["a % b )", 0.0], ["a % b", 0.0], ["a % 2", 0.0], ["a % ( m", 0.0], ["a % (", 0.0], ["a %", 0.0], ["a #NEWLINE# k", 0.0], ["a #NEWLINE# if", 0.0], ["a #NEWLINE# #DEDENT# else", 0.0], ["] and not visit", 0.0], ["] and lr [", 0.0], ["a ) ) :", 0.0], ["] [ c ]", 0.0], ["] [ k", 0.0], ["] [ j ]", 0.0], ["] [ j", 0.0], ["] [ i ]", 0.0], ["] [ i", 0.0], ["] [ guy [", 0.0], ["] [ guy", 0.0], ["] [ c", 0.0], ["] and lr", 0.0], ["] [ 3 ]", 0.0], ["] [ 3", 0.0], ["] [ 2 ]", 0.0], ["] [ 2", 0.0], ["] [ 1 ]", 0.0], ["] [ 1", 0.0], ["] [ 0 ]", 0.0], ["] [ k ]", 0.0], ["] [ maxj", 0.0], ["] [ maxj ]", 0.0], ["] [ minj", 0.0], ["] and", 0.0], ["] ] [ (", 0.0], ["] ] [", 0.0], ["] ] )", 0.0], ["] ] #NEWLINE#", 0.0], ["] ]", 0.0], ["] [ y1 ]", 0.0], ["] [ y1", 0.0], ["] [ y ]", 0.0], ["] [ y", 0.0], ["] [ x ]", 0.0], ["] [ x", 0.0], ["] [ tup ]", 0.0], ["] [ tup", 0.0], ["] [ minj ]", 0.0], ["a ) ) )", 0.0], ["a ) +", 0.0], ["a >=", 0.0], ["a = [ [", 0.0], ["a = int", 0.0], ["a = input (", 0.0], ["a = input", 0.0], ["a = a +", 0.0], ["a = a", 0.0], ["a = [ int", 0.0], ["a = [ ]", 0.0], ["a = [", 0.0], ["a // 6", 0.0], ["a = 1", 0.0], ["a =", 0.0], ["a <=", 0.0], ["a <", 0.0], ["a : #INDENT#", 0.0], ["a :", 0.0], ["a // x", 0.0], ["a = int (", 0.0], ["a = list (", 0.0], ["a = map", 0.0], ["a = map (", 0.0], ["a > b :", 0.0], ["a > b", 0.0], ["a >", 0.0], ["a == b :", 0.0], ["a == b", 0.0], ["a == 0", 0.0], ["a ==", 0.0], ["a = x", 0.0], ["a = np .", 0.0], ["a = np", 0.0], ["a = n", 0.0], ["a = min (", 0.0], ["a = min", 0.0], ["a = max (", 0.0], ["a = max", 0.0], ["a // 6 #NEWLINE#", 0.0], ["a // 2 #NEWLINE#", 0.0], ["a ) -", 0.0], ["a + 1", 0.0], ["a +=", 0.0], ["a + t", 0.0], ["a + b *", 0.0], ["a + b )", 0.0], ["a + b #NEWLINE#", 0.0], ["a + b", 0.0], ["a + 1 )", 0.0], ["a +", 0.0], ["a // 2", 0.0], ["a * b", 0.0], ["a *", 0.0], ["a ) : #INDENT#", 0.0], ["a ) :", 0.0], ["a ) // 2", 0.0], ["a ) //", 0.0], ["a ) - 1", 0.0], ["a ,", 0.0], ["a , b", 0.0], ["a , b )", 0.0], ["a , b ,", 0.0], ["a //", 0.0], ["a . sort (", 0.0], ["a . sort", 0.0], ["a . count (", 0.0], ["a . count", 0.0], ["a . append (", 0.0], ["a . append", 0.0], ["a .", 0.0], ["a - b )", 0.0], ["a - b", 0.0], ["a -", 0.0], ["a , x ,", 0.0], ["a , x", 0.0], ["a , index", 0.0], ["a , b =", 0.0], ["counter", 0.0], ["counter #NEWLINE#", 0.0], ["counter (", 0.0], ["if n % 4", 0.0], ["if p [", 0.0], ["if p", 0.0], ["if not", 0.0], ["if n == 1", 0.0], ["if n ==", 0.0], ["if n <", 0.0], ["if n % i", 0.0], ["if n % 2", 0.0], ["if m", 0.0], ["if n %", 0.0], ["if n", 0.0], ["if mon [ i", 0.0], ["if mon [", 0.0], ["if mon", 0.0], ["if maxj", 0.0], ["if maxi -", 0.0], ["if q", 0.0], ["if remwood", 0.0], ["if s", 0.0], ["if s [", 0.0], ["if there", 0.0], ["if the number of", 0.0], ["if the number", 0.0], ["if the employee", 0.0], ["if the ball", 0.0], ["if the", 0.0], ["if sum ( a", 0.0], ["if sum (", 0.0], ["if sum", 0.0], ["if solve (", 0.0], ["if solve", 0.0], ["if selection", 0.0], ["if s1", 0.0], ["if s [ start", 0.0], ["if s [ i", 0.0], ["if maxi", 0.0], ["if lr [ i", 0.0], ["if u", 0.0], ["if i not", 0.0], ["if is_prime ( n", 0.0], ["if is_prime (", 0.0], ["if is_prime", 0.0], ["if int ( digit", 0.0], ["if int (", 0.0], ["if int", 0.0], ["if i not in", 0.0], ["if i else", 0.0], ["if lr [", 0.0], ["if i [ 0", 0.0], ["if i [", 0.0], ["if i > 0", 0.0], ["if i >", 0.0], ["if i ==", 0.0], ["if i <", 0.0], ["if i - j", 0.0], ["if it", 0.0], ["if it 's", 0.0], ["if it 's available", 0.0], ["if j", 0.0], ["if lr", 0.0], ["if len ( s", 0.0], ["if len (", 0.0], ["if len", 0.0], ["if l [ 0", 0.0], ["if l [", 0.0], ["if l", 0.0], ["if k > 0", 0.0], ["if k >", 0.0], ["if k == 1", 0.0], ["if k ==", 0.0], ["if k % i", 0.0], ["if k %", 0.0], ["if k", 0.0], ["if j ==", 0.0], ["if there is", 0.0], ["if v", 0.0], ["if i * i", 0.0], ["in graph [", 0.0], ["in postans", 0.0], ["in l : #INDENT#", 0.0], ["in l :", 0.0], ["in l", 0.0], ["in input ( )", 0.0], ["in input (", 0.0], ["in input", 0.0], ["in graph . keys", 0.0], ["in a : #INDENT#", 0.0], ["in graph .", 0.0], ["in graph", 0.0], ["in enumerate (", 0.0], ["in enumerate", 0.0], ["in each", 0.0], ["in c", 0.0], ["in ans", 0.0], ["in postans :", 0.0], ["in postans : #INDENT#", 0.0], ["in range", 0.0], ["in range (", 0.0], ["in range ( l", 0.0], ["in range ( k", 0.0], ["in range ( i", 0.0], ["in range ( gap", 0.0], ["in range ( e", 0.0], ["in range ( d", 0.0], ["in range ( c", 0.0], ["in range ( a", 0.0], ["in range ( 60", 0.0], ["in range ( 6", 0.0], ["in range ( 4", 0.0], ["in range ( 3", 0.0], ["in range ( 2", 0.0], ["in range ( 1", 0.0], ["in range ( 0", 0.0], ["in a if", 0.0], ["in a :", 0.0], ["if w", 0.0], ["if y", 0.0], ["import counter", 0.0], ["import collections #NEWLINE# import", 0.0], ["import collections #NEWLINE#", 0.0], ["import collections", 0.0], ["import * #NEWLINE#", 0.0], ["import *", 0.0], ["imin", 0.0], ["if xv", 0.0], ["in a", 0.0], ["if x2", 0.0], ["if x in postans", 0.0], ["if x in", 0.0], ["if x >", 0.0], ["if x == 0", 0.0], ["if x ==", 0.0], ["if x", 0.0], ["import counter #NEWLINE#", 0.0], ["import math", 0.0], ["import math #NEWLINE#", 0.0], ["import math #NEWLINE# def", 0.0], ["in", 0.0], ["impossible", 0.0], ["import sys #NEWLINE# input", 0.0], ["import sys #NEWLINE# def", 0.0], ["import sys #NEWLINE#", 0.0], ["import sys", 0.0], ["import re #NEWLINE#", 0.0], ["import re", 0.0], ["import random #NEWLINE#", 0.0], ["import random", 0.0], ["import numpy as np", 0.0], ["import numpy as", 0.0], ["import numpy", 0.0], ["import math #NEWLINE# n", 0.0], ["import math #NEWLINE# import", 0.0], ["if i -", 0.0], ["if i *", 0.0], ["in range ( lenx", 0.0], ["i in s", 0.0], ["if (", 0.0], ["if", 0.0], ["i not in", 0.0], ["i not", 0.0], ["i in tmp :", 0.0], ["i in tmp", 0.0], ["i in s :", 0.0], ["i in range (", 0.0], ["i for", 0.0], ["i in range", 0.0], ["i in input (", 0.0], ["i in input", 0.0], ["i in a", 0.0], ["i in", 0.0], ["i for i in", 0.0], ["i for i ,", 0.0], ["if ( a", 0.0], ["if ( a %", 0.0], ["if ( a [", 0.0], ["if ( abs", 0.0], ["if ( x <=", 0.0], ["if ( x -", 0.0], ["if ( x", 0.0], ["if ( s", 0.0], ["if ( re .", 0.0], ["if ( re", 0.0], ["if ( k +", 0.0], ["if ( k", 0.0], ["if ( i ,", 0.0], ["if ( i", 0.0], ["if ( c", 0.0], ["if ( b", 0.0], ["if ( ar [", 0.0], ["if ( ar", 0.0], ["if ( abs (", 0.0], ["i for i", 0.0], ["i else", 0.0], ["if 0 <=", 0.0], ["i ] == \"l\"", 0.0], ["i ] == s", 0.0], ["i ] == n", 0.0], ["i ] == a", 0.0], ["i ] == 1", 0.0], ["i ] == 0", 0.0], ["i ] == \"u\"", 0.0], ["i ] == \"r\"", 0.0], ["i ] == \"d\"", 0.0], ["i ] for i", 0.0], ["i ] ==", 0.0], ["i ] = true", 0.0], ["i ] = ki", 0.0], ["i ] = k", 0.0], ["i ] = c", 0.0], ["i ] = a", 0.0], ["i ] = 0", 0.0], ["i ] >", 0.0], ["i ] > 0", 0.0], ["i ] > a", 0.0], ["i ] > p", 0.0], ["i ] for", 0.0], ["i ] and", 0.0], ["i ] ]", 0.0], ["i ] [ minj", 0.0], ["i ] [ maxj", 0.0], ["i ] [ j", 0.0], ["i ] [ 2", 0.0], ["i ] [ 1", 0.0], ["i ] [ 0", 0.0], ["i ] [ \"y\"", 0.0], ["i ] [ \"x\"", 0.0], ["i ] [ \"name\"", 0.0], ["i ] [", 0.0], ["i ] >= half", 0.0], ["i ] >=", 0.0], ["if 0", 0.0], ["if a", 0.0], ["if i %", 0.0], ["if curcutlen <", 0.0], ["if det ==", 0.0], ["if det", 0.0], ["if deb : #INDENT#", 0.0], ["if deb :", 0.0], ["if deb", 0.0], ["if d", 0.0], ["if curcutlen < mincutlen", 0.0], ["if curcutlen", 0.0], ["if c ==", 0.0], ["if cur", 0.0], ["if colors [ v", 0.0], ["if colors [", 0.0], ["if colors", 0.0], ["if cnt ==", 0.0], ["if cnt", 0.0], ["if c [ 0", 0.0], ["if det == 0", 0.0], ["if dfs_bool", 0.0], ["if dfs_bool (", 0.0], ["if distance", 0.0], ["if i != 0", 0.0], ["if i !=", 0.0], ["if i", 0.0], ["if h_diff", 0.0], ["if h1 + 8", 0.0], ["if h1 +", 0.0], ["if h1", 0.0], ["if grid [ r", 0.0], ["if grid [", 0.0], ["if grid", 0.0], ["if g", 0.0], ["if fence [ i", 0.0], ["if fence [ 0", 0.0], ["if fence [", 0.0], ["if fence", 0.0], ["if c [", 0.0], ["if c", 0.0], ["if a !=", 0.0], ["if a >=", 0.0], ["if all (", 0.0], ["if all", 0.0], ["if abs (", 0.0], ["if abs", 0.0], ["if a [ j", 0.0], ["if a [ i", 0.0], ["if a [", 0.0], ["if a > b", 0.0], ["if board [ 0", 0.0], ["if a >", 0.0], ["if a == b", 0.0], ["if a ==", 0.0], ["if a <=", 0.0], ["if a <", 0.0], ["if a //", 0.0], ["if a %", 0.0], ["if ans", 0.0], ["if ans [", 0.0], ["if ans is", 0.0], ["if ans is none", 0.0], ["if board [", 0.0], ["if board", 0.0], ["if b [ 0", 0.0], ["if b [", 0.0], ["if b >", 0.0], ["if b == 0", 0.0], ["if b ==", 0.0], ["if b <", 0.0], ["if b %", 0.0], ["if b", 0.0], ["if arr [ i", 0.0], ["if arr [", 0.0], ["if arr", 0.0], ["if area ==", 0.0], ["if area", 0.0], ["in range ( len", 0.0], ["in range ( m", 0.0], ["course", 0.0], ["k #NEWLINE#", 0.0], ["k )", 0.0], ["k % i ==", 0.0], ["k % i", 0.0], ["k %", 0.0], ["k #NEWLINE# if", 0.0], ["k #NEWLINE# #DEDENT# #DEDENT#", 0.0], ["k #NEWLINE# #DEDENT#", 0.0], ["k != 0 :", 0.0], ["join", 0.0], ["k != 0", 0.0], ["k !=", 0.0], ["k", 0.0], ["jump", 0.0], ["join ( [ str", 0.0], ["join ( [ 'a'", 0.0], ["join ( [", 0.0], ["k ) #NEWLINE#", 0.0], ["k ) #NEWLINE# #DEDENT#", 0.0], ["k ) #NEWLINE# if", 0.0], ["k ) #NEWLINE# print", 0.0], ["k , a ,", 0.0], ["k , a", 0.0], ["k ,", 0.0], ["k += 1 #NEWLINE#", 0.0], ["k += 1", 0.0], ["k +=", 0.0], ["k + 1 )", 0.0], ["k + 1", 0.0], ["k +", 0.0], ["k *", 0.0], ["k ) : #INDENT#", 0.0], ["k ) :", 0.0], ["k ) ,", 0.0], ["k ) ) %", 0.0], ["k ) )", 0.0], ["join (", 0.0], ["j in range (", 0.0], ["k , m", 0.0], ["j += 1 #NEWLINE#", 0.0], ["j = 0", 0.0], ["j =", 0.0], ["j , k", 0.0], ["j , guy", 0.0], ["j , boi [", 0.0], ["j , boi", 0.0], ["j ,", 0.0], ["j += 1", 0.0], ["j in range", 0.0], ["j +=", 0.0], ["j + 2 )", 0.0], ["j + 2", 0.0], ["j + 1 ]", 0.0], ["j + 1 )", 0.0], ["j + 1", 0.0], ["j +", 0.0], ["j = 0 #NEWLINE#", 0.0], ["j ]", 0.0], ["j ] #NEWLINE#", 0.0], ["j ] #NEWLINE# #DEDENT#", 0.0], ["j in", 0.0], ["j ] and", 0.0], ["j ] [ i", 0.0], ["j ] [ 1", 0.0], ["j ] [ 0", 0.0], ["j ] [", 0.0], ["j ] == 'w'", 0.0], ["j ] ==", 0.0], ["j ] =", 0.0], ["j ] : #INDENT#", 0.0], ["j ] :", 0.0], ["j ] -", 0.0], ["j ] +=", 0.0], ["j ] ) #NEWLINE#", 0.0], ["j ] )", 0.0], ["k , l", 0.0], ["k , m =", 0.0], ["j * k", 0.0], ["k [", 0.0], ["k ] [", 0.0], ["k ] ==", 0.0], ["k ] ) #NEWLINE#", 0.0], ["k ] )", 0.0], ["k ]", 0.0], ["k [ i ]", 0.0], ["k [ i", 0.0], ["k >=", 0.0], ["k = min (", 0.0], ["k > 0 :", 0.0], ["k > 0", 0.0], ["k >", 0.0], ["k == 1 :", 0.0], ["k == 1", 0.0], ["k == 0 and", 0.0], ["k == 0", 0.0], ["k ] [ guy", 0.0], ["k ] [ j", 0.0], ["k ] [ m", 0.0], ["k and", 0.0], ["k2 + k3", 0.0], ["k2 +", 0.0], ["k2", 0.0], ["k1_cards )", 0.0], ["k1_cards", 0.0], ["k1", 0.0], ["k-th", 0.0], ["k-1", 0.0], ["k in range (", 0.0], ["k in range", 0.0], ["k in", 0.0], ["k elements in their", 0.0], ["k elements in", 0.0], ["k elements", 0.0], ["k and not", 0.0], ["k ==", 0.0], ["k = min", 0.0], ["k , s", 0.0], ["k - i )", 0.0], ["k : #INDENT# return", 0.0], ["k : #INDENT# print", 0.0], ["k : #INDENT#", 0.0], ["k :", 0.0], ["k //", 0.0], ["k -=", 0.0], ["k - i +", 0.0], ["k - i", 0.0], ["k = map (", 0.0], ["k - 1 ]", 0.0], ["k - 1 :", 0.0], ["k - 1 ,", 0.0], ["k - 1 )", 0.0], ["k - 1 #NEWLINE#", 0.0], ["k - 1", 0.0], ["k -", 0.0], ["k : ]", 0.0], ["k <", 0.0], ["k < d", 0.0], ["k < d :", 0.0], ["k = map", 0.0], ["k = m +", 0.0], ["k = m", 0.0], ["k = list (", 0.0], ["k = list", 0.0], ["k = int (", 0.0], ["k = int", 0.0], ["k = al .", 0.0], ["k = al", 0.0], ["k = [ int", 0.0], ["k = [", 0.0], ["k = 1 #NEWLINE#", 0.0], ["k = 1", 0.0], ["k = 0 #NEWLINE#", 0.0], ["k = 0", 0.0], ["j * k #NEWLINE#", 0.0], ["j *", 0.0], ["in range ( min", 0.0], ["in st : #INDENT#", 0.0], ["in their original", 0.0], ["in their", 0.0], ["in the interval [", 0.0], ["in the interval", 0.0], ["in the", 0.0], ["in str (", 0.0], ["in str", 0.0], ["in st :", 0.0], ["in s7 or", 0.0], ["in st", 0.0], ["in seq ] )", 0.0], ["in seq ]", 0.0], ["in seq", 0.0], ["in s9 or", 0.0], ["in s9", 0.0], ["in s8 or", 0.0], ["in tmp", 0.0], ["in tmp :", 0.0], ["in tmp : #INDENT#", 0.0], ["in x", 0.0], ["input", 0.0], ["inf ]", 0.0], ["inf", 0.0], ["index (", 0.0], ["index", 0.0], ["increasing_block", 0.0], ["in_stack =", 0.0], ["in_stack", 0.0], ["in zip (", 0.0], ["in zip", 0.0], ["in year_str . split", 0.0], ["in year_str .", 0.0], ["in year_str", 0.0], ["in x : #INDENT#", 0.0], ["in x :", 0.0], ["in s8", 0.0], ["in s7", 0.0], ["input (", 0.0], ["in s", 0.0], ["in s10", 0.0], ["in s1 or", 0.0], ["in s1", 0.0], ["in s : #INDENT#", 0.0], ["in s :", 0.0], ["in s ) )", 0.0], ["in s )", 0.0], ["in ratings", 0.0], ["in s6 or", 0.0], ["in range ( x", 0.0], ["in range ( t", 0.0], ["in range ( r", 0.0], ["in range ( q", 0.0], ["in range ( n", 0.0], ["in range ( minj", 0.0], ["in range ( mini", 0.0], ["in s10 or", 0.0], ["in s11", 0.0], ["in s11 or", 0.0], ["in s12", 0.0], ["in s6", 0.0], ["in s5 or", 0.0], ["in s5", 0.0], ["in s4 or", 0.0], ["in s4", 0.0], ["in s3 or", 0.0], ["in s3", 0.0], ["in s2 or", 0.0], ["in s2", 0.0], ["in s14 : #INDENT#", 0.0], ["in s14 :", 0.0], ["in s14", 0.0], ["in s13 or", 0.0], ["in s13", 0.0], ["in s12 or", 0.0], ["input #NEWLINE#", 0.0], ["input ( )", 0.0], ["j ) for", 0.0], ["is_prime ( n", 0.0], ["items (", 0.0], ["items", 0.0], ["it takes", 0.0], ["it 's", 0.0], ["it", 0.0], ["is_same", 0.0], ["is_prime ( n )", 0.0], ["is_prime (", 0.0], ["into", 0.0], ["is_prime", 0.0], ["is_possible", 0.0], ["is not", 0.0], ["is a", 0.0], ["is", 0.0], ["inversions", 0.0], ["inv )", 0.0], ["items ( )", 0.0], ["iterate", 0.0], ["iterate over", 0.0], ["itertools", 0.0], ["j ) ] =", 0.0], ["j ) ] .", 0.0], ["j ) ]", 0.0], ["j ) - 1", 0.0], ["j ) -", 0.0], ["j ) ) #NEWLINE#", 0.0], ["j ) )", 0.0], ["j ) #NEWLINE# #DEDENT#", 0.0], ["j ) #NEWLINE#", 0.0], ["j )", 0.0], ["j #NEWLINE#", 0.0], ["j", 0.0], ["itertools #NEWLINE# import sys", 0.0], ["itertools #NEWLINE# import", 0.0], ["itertools #NEWLINE#", 0.0], ["inv", 0.0], ["integers", 0.0], ["input ( ) #NEWLINE#", 0.0], ["int ( a )", 0.0], ["int ( line", 0.0], ["int ( input (", 0.0], ["int ( input", 0.0], ["int ( i )", 0.0], ["int ( i", 0.0], ["int ( digit )", 0.0], ["int ( digit", 0.0], ["int ( a", 0.0], ["integer", 0.0], ["int ( ( n", 0.0], ["int ( (", 0.0], ["int", 0.0], ["input = sys .", 0.0], ["input = sys", 0.0], ["input =", 0.0], ["input ( ) )", 0.0], ["int ( line [", 0.0], ["int ( n", 0.0], ["int ( n )", 0.0], ["int ( n **", 0.0], ["int , sys .", 0.0], ["int , sys", 0.0], ["int , input (", 0.0], ["int , input", 0.0], ["int ,", 0.0], ["int ( x )", 0.0], ["int ( x", 0.0], ["int ( s [", 0.0], ["int ( s )", 0.0], ["int ( s", 0.0], ["int ( num_str [", 0.0], ["int ( num_str", 0.0], ["int ( nm [", 0.0], ["int ( nm", 0.0], ["int ( n /", 0.0], ["i ] = (", 0.0], ["i ] =", 0.0], ["i ] <= k", 0.0], ["elif seq == [", 0.0], ["else 0", 0.0], ["else \"no\" ) #NEWLINE#", 0.0], ["else \"no\" )", 0.0], ["else \"no\"", 0.0], ["elif x", 0.0], ["elif seq [ x", 0.0], ["elif seq [", 0.0], ["elif seq ==", 0.0], ["elif", 0.0], ["elif seq", 0.0], ["elif s", 0.0], ["elif n", 0.0], ["elif i . lower", 0.0], ["elif i .", 0.0], ["elif i", 0.0], ["elif b", 0.0], ["else 0 #NEWLINE#", 0.0], ["else 0 )", 0.0], ["else 0 ) #NEWLINE#", 0.0], ["else 2", 0.0], ["else : print", 0.0], ["else : calculate the", 0.0], ["else : calculate", 0.0], ["else : #INDENT# x", 0.0], ["else : #INDENT# t", 0.0], ["else : #INDENT# return", 0.0], ["else : #INDENT# print", 0.0], ["else : #INDENT# m", 0.0], ["else : #INDENT# k", 0.0], ["else : #INDENT# if", 0.0], ["else : #INDENT# for", 0.0], ["else : #INDENT# break", 0.0], ["else : #INDENT# ans", 0.0], ["else : #INDENT#", 0.0], ["else :", 0.0], ["elif (", 0.0], ["elements in", 0.0], ["employee", 0.0], ["dp [ i -", 0.0], ["dy", 0.0], ["dx [", 0.0], ["dx =", 0.0], ["dx", 0.0], ["dv", 0.0], ["dresses", 0.0], ["draw", 0.0], ["dp [ i", 0.0], ["elements", 0.0], ["dp [", 0.0], ["dp =", 0.0], ["dp ) #NEWLINE#", 0.0], ["dp )", 0.0], ["dp", 0.0], ["down =", 0.0], ["down", 0.0], ["dy =", 0.0], ["dy [", 0.0], ["e", 0.0], ["e )", 0.0], ["edges", 0.0], ["each", 0.0], ["e1", 0.0], ["e [ 0 ]", 0.0], ["e [ 0", 0.0], ["e [", 0.0], ["e =", 0.0], ["e , f", 0.0], ["e ,", 0.0], ["e + 1 )", 0.0], ["e + 1", 0.0], ["e +", 0.0], ["e *", 0.0], ["e ) #NEWLINE# #DEDENT#", 0.0], ["e ) #NEWLINE#", 0.0], ["else : print (", 0.0], ["employee has", 0.0], ["dot ( vectors", 0.0], ["factor", 0.0], ["false #NEWLINE# #DEDENT# #DEDENT#", 0.0], ["false #NEWLINE# #DEDENT#", 0.0], ["false #NEWLINE#", 0.0], ["false", 0.0], ["factors", 0.0], ["factorial", 0.0], ["factor [", 0.0], ["faction #NEWLINE#", 0.0], ["f = true #NEWLINE#", 0.0], ["faction", 0.0], ["fact_n", 0.0], ["f ]", 0.0], ["f [ i ]", 0.0], ["f [ i", 0.0], ["f [ 0 ]", 0.0], ["f [ 0", 0.0], ["false #NEWLINE# #DEDENT# def", 0.0], ["false #NEWLINE# for", 0.0], ["false #NEWLINE# for i", 0.0], ["false #NEWLINE# if", 0.0], ["find (", 0.0], ["find", 0.0], ["final =", 0.0], ["final", 0.0], ["file", 0.0], ["fence [ i ]", 0.0], ["fence [ i", 0.0], ["fence [ 0 ]", 0.0], ["fence [ 0", 0.0], ["fence [", 0.0], ["fence", 0.0], ["false ] * leny", 0.0], ["false ] *", 0.0], ["false ]", 0.0], ["false )", 0.0], ["f [", 0.0], ["f = true", 0.0], ["employees", 0.0], ["enumerate", 0.0], ["every", 0.0], ["etn", 0.0], ["ete -", 0.0], ["ete", 0.0], ["erase_count", 0.0], ["equal", 0.0], ["enumerate (", 0.0], ["entry", 0.0], ["f = map (", 0.0], ["enough", 0.0], ["end = '' )", 0.0], ["end = ''", 0.0], ["end =", 0.0], ["end", 0.0], ["empty #NEWLINE#", 0.0], ["empty", 0.0], ["every day", 0.0], ["every day #NEWLINE#", 0.0], ["exgcd", 0.0], ["exgcd (", 0.0], ["f = map", 0.0], ["f =", 0.0], ["f ,", 0.0], ["f )", 0.0], ["f (", 0.0], ["f", 0.0], ["extra", 0.0], ["exponent", 0.0], ["expected number of", 0.0], ["expected number", 0.0], ["expected", 0.0], ["exit ( ) #NEWLINE#", 0.0], ["exit ( )", 0.0], ["exit (", 0.0], ["exit", 0.0], ["dot ( vectors [", 0.0], ["dot (", 0.0], ["i ] <=", 0.0], ["d , e", 0.0], ["d =", 0.0], ["d : #INDENT#", 0.0], ["d :", 0.0], ["d //", 0.0], ["d .", 0.0], ["d -", 0.0], ["d , e ,", 0.0], ["d ,", 0.0], ["d ) #NEWLINE# #DEDENT#", 0.0], ["d += 1 #NEWLINE#", 0.0], ["d += 1", 0.0], ["d +=", 0.0], ["d + 1", 0.0], ["d +", 0.0], ["d * d", 0.0], ["d * a", 0.0], ["d = 1", 0.0], ["d = 1 #NEWLINE#", 0.0], ["d = 2", 0.0], ["d = 2 #NEWLINE#", 0.0], ["d1", 0.0], ["d in", 0.0], ["d [ i ]", 0.0], ["d [ i", 0.0], ["d [ 0 ]", 0.0], ["d [ 0", 0.0], ["d [", 0.0], ["d == 0 :", 0.0], ["d == 0", 0.0], ["d ==", 0.0], ["d = map (", 0.0], ["d = map", 0.0], ["d = list (", 0.0], ["d = list", 0.0], ["d = [", 0.0], ["d *", 0.0], ["d ) #NEWLINE#", 0.0], ["d_j", 0.0], ["ct", 0.0], ["cur <=", 0.0], ["cur +=", 0.0], ["cur", 0.0], ["cubes", 0.0], ["ct = 0 #NEWLINE#", 0.0], ["ct = 0", 0.0], ["ct =", 0.0], ["create a dictionary to", 0.0], ["d )", 0.0], ["create a dictionary", 0.0], ["create a", 0.0], ["create", 0.0], ["courses_passed", 0.0], ["courses [", 0.0], ["courses", 0.0], ["course .", 0.0], ["cur =", 0.0], ["cur = 0", 0.0], ["cur = 0 #NEWLINE#", 0.0], ["cur [", 0.0], ["d %", 0.0], ["d #NEWLINE# #DEDENT#", 0.0], ["d #NEWLINE#", 0.0], ["d", 0.0], ["curx", 0.0], ["currv", 0.0], ["curr", 0.0], ["curcutlen", 0.0], ["cur_pos", 0.0], ["cur2", 0.0], ["cur1", 0.0], ["cur [ 1 ]", 0.0], ["cur [ 1", 0.0], ["cur [ 0 ]", 0.0], ["cur [ 0", 0.0], ["d2", 0.0], ["day", 0.0], ["dot", 0.0], ["distance", 0.0], ["dists", 0.0], ["distinct_strings", 0.0], ["distance_willman", 0.0], ["distance_bolt", 0.0], ["distance between the", 0.0], ["distance between", 0.0], ["distance #NEWLINE#", 0.0], ["discard ( x )", 0.0], ["digit )", 0.0], ["discard ( x", 0.0], ["discard (", 0.0], ["discard", 0.0], ["direction", 0.0], ["dir", 0.0], ["digs [", 0.0], ["digs", 0.0], ["dists [", 0.0], ["dists [ 0", 0.0], ["dists [ 0 ]", 0.0], ["dists [ 1", 0.0], ["done", 0.0], ["do_dfs_bool ( n ,", 0.0], ["do_dfs_bool ( n", 0.0], ["do_dfs_bool (", 0.0], ["do_dfs_bool", 0.0], ["divs", 0.0], ["divisors", 0.0], ["divisor", 0.0], ["div =", 0.0], ["div", 0.0], ["dists [ k ]", 0.0], ["dists [ k", 0.0], ["dists [ 2 ]", 0.0], ["dists [ 2", 0.0], ["dists [ 1 ]", 0.0], ["digits", 0.0], ["digit", 0.0], ["day #NEWLINE#", 0.0], ["def __starting_point ( )", 0.0], ["def solve", 0.0], ["def main ( )", 0.0], ["def main (", 0.0], ["def main", 0.0], ["def gcd ( a", 0.0], ["def gcd (", 0.0], ["def gcd", 0.0], ["def __starting_point (", 0.0], ["diff =", 0.0], ["def __starting_point", 0.0], ["def", 0.0], ["decreasing_block", 0.0], ["decimal (", 0.0], ["decimal", 0.0], ["deb", 0.0], ["days", 0.0], ["def solve (", 0.0], ["def solve ( )", 0.0], ["def solve ( n", 0.0], ["delta", 0.0], ["diff", 0.0], ["dictionary to store the", 0.0], ["dictionary to store", 0.0], ["dictionary to", 0.0], ["dictionary", 0.0], ["dfs_bool (", 0.0], ["dfs_bool", 0.0], ["dfs ( a ,", 0.0], ["dfs ( a", 0.0], ["dfs (", 0.0], ["dfs", 0.0], ["det", 0.0], ["deny", 0.0], ["denied_remocrats", 0.0], ["denied_depublicans", 0.0], ["find the", 0.0], ["find the maximum", 0.0], ["find the number", 0.0], ["i ) )", 0.0], ["i ) ==", 0.0], ["i ) : #INDENT#", 0.0], ["i ) :", 0.0], ["i ) + 1", 0.0], ["i ) +", 0.0], ["i ) *", 0.0], ["i ) ) #NEWLINE#", 0.0], ["i ) #NEWLINE# if", 0.0], ["i #NEWLINE# #DEDENT# print", 0.0], ["i ) #NEWLINE# #DEDENT#", 0.0], ["i ) #NEWLINE#", 0.0], ["i )", 0.0], ["i % p )", 0.0], ["i % p", 0.0], ["i %", 0.0], ["i #NEWLINE# k +=", 0.0], ["i ) for", 0.0], ["i ) for i", 0.0], ["i *", 0.0], ["i * (", 0.0], ["i += 2", 0.0], ["i += 1 #NEWLINE#", 0.0], ["i += 1", 0.0], ["i +=", 0.0], ["i + 2", 0.0], ["i + 1 ]", 0.0], ["i + 1 :", 0.0], ["i + 1 ,", 0.0], ["i + 1 )", 0.0], ["i + 1 #NEWLINE#", 0.0], ["i + 1", 0.0], ["i +", 0.0], ["i * j *", 0.0], ["i * j", 0.0], ["i * i", 0.0], ["i #NEWLINE# k", 0.0], ["i #NEWLINE# #DEDENT# if", 0.0], ["i ,", 0.0], ["hash_s", 0.0], ["heapq", 0.0], ["hb ,", 0.0], ["hb", 0.0], ["have [ j ]", 0.0], ["have [ j", 0.0], ["have [", 0.0], ["have", 0.0], ["has", 0.0], ["i #NEWLINE# #DEDENT# ans", 0.0], ["half", 0.0], ["h_r", 0.0], ["h_map", 0.0], ["h_diff", 0.0], ["h_b", 0.0], ["h2", 0.0], ["h1", 0.0], ["heapq #NEWLINE#", 0.0], ["heapq .", 0.0], ["hh", 0.0], ["hh *", 0.0], ["i #NEWLINE# #DEDENT# #DEDENT#", 0.0], ["i #NEWLINE# #DEDENT#", 0.0], ["i #NEWLINE#", 0.0], ["i !=", 0.0], ["i", 0.0], ["hrd", 0.0], ["hr , hb", 0.0], ["hr ,", 0.0], ["hr", 0.0], ["hor", 0.0], ["high", 0.0], ["hi )", 0.0], ["hi", 0.0], ["hh * 60 +", 0.0], ["hh * 60", 0.0], ["i += 2 #NEWLINE#", 0.0], ["i , i", 0.0], ["find the number of", 0.0], ["i ] #NEWLINE# ans", 0.0], ["i ] ) +", 0.0], ["i ] ) %", 0.0], ["i ] ) #NEWLINE#", 0.0], ["i ] )", 0.0], ["i ] % k", 0.0], ["i ] %", 0.0], ["i ] #NEWLINE# if", 0.0], ["i ] #NEWLINE# #DEDENT#", 0.0], ["i > 0 and", 0.0], ["i ] #NEWLINE#", 0.0], ["i ] != ch", 0.0], ["i ] !=", 0.0], ["i ]", 0.0], ["i [ 0 ]", 0.0], ["i [ 0", 0.0], ["i [", 0.0], ["i ] ) :", 0.0], ["i ] ) for", 0.0], ["i ] *", 0.0], ["i ] +", 0.0], ["i ] <", 0.0], ["i ] : #INDENT#", 0.0], ["i ] :", 0.0], ["i ] - half", 0.0], ["i ] - b_dict", 0.0], ["i ] - a", 0.0], ["i ] -", 0.0], ["i ] , end", 0.0], ["i ] , cost", 0.0], ["i ] ,", 0.0], ["i ] += sum_", 0.0], ["i ] += 1", 0.0], ["i ] +=", 0.0], ["i ] + cb", 0.0], ["i ] + 1", 0.0], ["i >=", 0.0], ["i > 0", 0.0], ["i , i )", 0.0], ["i - 1 #NEWLINE#", 0.0], ["i . lower (", 0.0], ["i . lower", 0.0], ["i .", 0.0], ["i - j )", 0.0], ["i - j", 0.0], ["i - 1 ]", 0.0], ["i - 1 )", 0.0], ["i - 1", 0.0], ["i >", 0.0], ["i -", 0.0], ["i , n //", 0.0], ["i , n )", 0.0], ["i , n", 0.0], ["i , j ,", 0.0], ["i , j )", 0.0], ["i , j", 0.0], ["i :", 0.0], ["i : #INDENT#", 0.0], ["i : #INDENT# now", 0.0], ["i : ]", 0.0], ["i == 0 :", 0.0], ["i == 0", 0.0], ["i ==", 0.0], ["i = 2 #NEWLINE#", 0.0], ["i = 2", 0.0], ["i = 1 #NEWLINE#", 0.0], ["i = 1", 0.0], ["i = 0 #NEWLINE#", 0.0], ["i = 0", 0.0], ["i =", 0.0], ["i <=", 0.0], ["i < j", 0.0], ["i <", 0.0], ["i : i +", 0.0], ["i : i", 0.0], ["h =", 0.0], ["h )", 0.0], ["h", 0.0], ["for k", 0.0], ["for l in range", 0.0], ["for l in", 0.0], ["for l , r", 0.0], ["for l ,", 0.0], ["for l", 0.0], ["for k in range", 0.0], ["for k in", 0.0], ["for j in range", 0.0], ["for d in", 0.0], ["for j in", 0.0], ["for j", 0.0], ["for i in s", 0.0], ["for i in input", 0.0], ["for i in", 0.0], ["for i ,", 0.0], ["for i", 0.0], ["for p", 0.0], ["for p in", 0.0], ["for r", 0.0], ["for r in", 0.0], ["for y", 0.0], ["for x in seq", 0.0], ["for x in range", 0.0], ["for x in input", 0.0], ["for x in", 0.0], ["for x", 0.0], ["for v in graph", 0.0], ["for v in", 0.0], ["for v", 0.0], ["for u in graph", 0.0], ["for u in", 0.0], ["for u", 0.0], ["for s in", 0.0], ["for s", 0.0], ["for r in range", 0.0], ["for each", 0.0], ["for d", 0.0], ["guy [ 3 ]", 0.0], ["firsttime", 0.0], ["float ( 'inf' )", 0.0], ["float ( 'inf'", 0.0], ["float (", 0.0], ["float", 0.0], ["flag =", 0.0], ["flag", 0.0], ["fishes", 0.0], ["first k elements", 0.0], ["for char in s", 0.0], ["first k", 0.0], ["first", 0.0], ["finger_movements [", 0.0], ["finger_movements", 0.0], ["finger movements for", 0.0], ["finger movements", 0.0], ["finger", 0.0], ["floor", 0.0], ["floor (", 0.0], ["floor of", 0.0], ["for", 0.0], ["for char in", 0.0], ["for char", 0.0], ["for c in range", 0.0], ["for c in", 0.0], ["for c", 0.0], ["for b in range", 0.0], ["for b in", 0.0], ["for b", 0.0], ["for a in range", 0.0], ["for a in a", 0.0], ["for a in", 0.0], ["for a", 0.0], ["for _ in range", 0.0], ["for _ in", 0.0], ["for _", 0.0], ["for y in", 0.0], ["for y in range", 0.0], ["format", 0.0], ["graph . keys (", 0.0], ["graph [ v", 0.0], ["graph [ u ]", 0.0], ["graph [ u", 0.0], ["graph [ 0 ]", 0.0], ["graph [ 0", 0.0], ["graph [", 0.0], ["graph =", 0.0], ["graph . keys", 0.0], ["format (", 0.0], ["graph .", 0.0], ["graph , mask ,", 0.0], ["graph , mask )", 0.0], ["graph , mask", 0.0], ["graph ,", 0.0], ["graph", 0.0], ["grains", 0.0], ["graph [ v ]", 0.0], ["greater", 0.0], ["grid", 0.0], ["grid =", 0.0], ["guy [ 3", 0.0], ["guy [ 2 ]", 0.0], ["guy [ 2", 0.0], ["guy [ 1 ]", 0.0], ["guy [ 1", 0.0], ["guy [ 0 ]", 0.0], ["guy [ 0", 0.0], ["guy [", 0.0], ["guy", 0.0], ["gsd (", 0.0], ["gsd", 0.0], ["grid [ r ]", 0.0], ["grid [ r", 0.0], ["grid [", 0.0], ["grid = [", 0.0], ["golden_age_length", 0.0], ["goal", 0.0], ["given", 0.0], ["g ( 2 ,", 0.0], ["g (", 0.0], ["g #NEWLINE#", 0.0], ["g", 0.0], ["fully_solved", 0.0], ["from the", 0.0], ["from math import", 0.0], ["from math", 0.0], ["from collections import counter", 0.0], ["from collections import", 0.0], ["from collections", 0.0], ["from", 0.0], ["frame", 0.0], ["found", 0.0], ["format ( x )", 0.0], ["format ( x", 0.0], ["g ( 2", 0.0], ["g ( 3", 0.0], ["get the", 0.0], ["g ( 3 ,", 0.0], ["get", 0.0], ["gcd_lcm", 0.0], ["gcd ( b ,", 0.0], ["gcd ( b", 0.0], ["gcd ( a ,", 0.0], ["gcd ( a", 0.0], ["gcd (", 0.0], ["gcd", 0.0], ["gap", 0.0], ["g =", 0.0], ["g , t", 0.0], ["g ,", 0.0], ["g )", 0.0], ["g ( i ,", 0.0], ["g ( i", 0.0], ["", 0.0]]}