 Here is a Python3 solution using dynamic programming:
```python
n = int(input())
a = list(map(int, input().split()))

# dp[i][0] will store the maximum sum of odd subsequence ending at index i
# and with last element a[i] included
# dp[i][1] will store the maximum sum of odd subsequence ending at index i
# and with last element a[i] excluded
dp = [[0, 0] for _ in range(n)]

dp[0][0], dp[0][1] = a[0], 0
for i in range(1, n):
    dp[i][0] = max(dp[i-1][1] + a[i], a[i])
    dp[i][1] = max(dp[i-1][0], dp[i-1][1])

print(max(dp[-1][0], dp[-1][1]))
```
Explanation:

* We use two arrays `dp[i][0]` and `dp[i][1]` to store the maximum sum of odd subsequence ending at index `i` with and without including `a[i]` respectively.
* Initialization: `dp[0][0]` is set to `a[0]` and `dp[0][1]` is set to 0.
* For each element `a[i]`, we update `dp[i][0]` and `dp[i][1]` as follows:
	+ `dp[i][0] = max(dp[i-1][1] + a[i], a[i])`: Here, we consider two cases:
		- If we include `a[i]` in the subsequence, then the maximum sum of odd subsequence ending at `i` would be `a[i]` itself (if `a[i]` is odd) or `dp[i-1][1] + a[i]` (if `a[i]` is even and `dp[i-1][1]` is odd).
		- If we exclude `a[i]`, then `dp[i][0]` would be equal to `a[i]` itself (