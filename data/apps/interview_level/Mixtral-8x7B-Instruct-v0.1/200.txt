 Here is a Python3 solution for the problem:

```python
def caterpillar(h1, h2, a, b):
    # Calculate the net distance the caterpillar covers in a day
    distance = a * 14 + b * 2
    # Calculate the number of days needed for the caterpillar to reach the apple
    days = (h2 - h1 - 1) // distance
    # If the caterpillar cannot reach the apple, return -1
    if (h2 - h1 - 1) % distance != 0:
        return -1
    # Otherwise, return the number of days
    return days

# Read input
h1, h2 = map(int, input().split())
a, b = map(int, input().split())

# Print the result
print(caterpillar(h1, h2, a, b))
```

This solution first calculates the net distance the caterpillar covers in a day by multiplying the distance it covers during the 14 daylight hours by `a` and the distance it covers during the 2 nighttime hours by `b`. It then calculates the number of days needed for the caterpillar to reach the apple by dividing the difference between the heights of the apple and the caterpillar by the net distance the caterpillar covers in a day and rounding down. If the remainder of this division is not zero, the caterpillar cannot reach the apple, so the solution returns -1. Otherwise, it returns the number of days.