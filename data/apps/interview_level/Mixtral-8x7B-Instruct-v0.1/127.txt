 Here is a Python3 solution for the problem:

```python
n, f = map(int, input().split())
products\_sold = 0
days = []

for _ in range(n):
    k, l = map(int, input().split())
    days.append((k, l))

days.sort(key=lambda x: x[0] - x[1], reverse=True)

for i in range(f):
    k, l = days[i]
    products\_sold += k * 2

for i in range(f, n):
    k, l = days[i]
    if k < l:
        continue
    products\_sold += k

print(products\_sold)
```

The solution sorts the days based on the difference between the number of products and the number of clients, in descending order. This way, the days with the highest potential for selling more products are chosen first for the sell-out. Then, for each of the f days, the number of products is doubled and added to the total number of products sold. After that, for the remaining days, if the number of products is greater than or equal to the number of clients, the number of products is added to the total number of products sold. Finally, the total number of products sold is printed.