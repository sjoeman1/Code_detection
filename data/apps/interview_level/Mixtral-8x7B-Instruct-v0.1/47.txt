 Here is a Python3 solution for the problem:

```python
n, x = map(int, input().split())
a = list(map(int, input().split()))

current_max = max_so_far = sum(a)

for i in range(n):
    # We keep track of the maximum sum subarray ending at index i
    current_max = max(a[i], current_max + a[i])
    # We update the maximum sum of the whole array if needed
    max_so_far = max(max_so_far, current_max)

# If x is negative, we want to minimize the sum of the subarray
# by multiplying it by x. We can do this by checking if the
# maximum sum subarray is negative and if so, multiplying it by x.
if x < 0:
    max_so_far = max(max_so_far, sum(a) + x * max(0, current_max))

print(max_so_far)
```

The solution works by keeping track of the maximum sum subarray ending at each index. If `x` is negative, we want to minimize the sum of the subarray by multiplying it by `x`. We can do this by checking if the maximum sum subarray is negative and if so, multiplying it by `x`. If `x` is positive, we don't need to do anything since multiplying the subarray by `x` can only increase its sum.