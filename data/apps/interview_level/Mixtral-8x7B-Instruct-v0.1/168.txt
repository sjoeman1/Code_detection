 Here is one way to solve the problem using Python:

```python
n = int(input())
s = input()

# Initialize the result to 0, since this is the smallest possible number of stones
result = 0

# Loop through the string of operations
for operation in s:
    # If the operation is to take a stone, we need to have at least one stone
    # to be able to perform the operation, so we add one to the result
    if operation == '-':
        result += 1
    # If the operation is to add a stone, we don't need to add anything to the result
    # because the number of stones will simply increase by one

# However, if the result is still 0 after processing all the operations,
# this means that we have never taken any stones, so the number of stones
# must be at least 1. Therefore, we return 1 in this case.
if result == 0:
    result = 1

# Print the result
print(result)
```

This code first reads the number of operations and the string of operations from the input. It then initializes a variable `result` to 0, since this is the smallest possible number of stones. It then loops through the string of operations and updates the `result` variable accordingly.

If the operation is to take a stone, the `result` variable is incremented by 1. This is because we need to have at least one stone to be able to perform the operation. If the operation is to add a stone, the `result` variable is not changed. This is because the number of stones will simply increase by one.

Finally, the code checks if the `result` variable is still 0 after processing all the operations. If it is, this means that we have never taken any stones, so the number of stones must be at least 1. Therefore, the code returns 1 in this case.

Overall, this code should solve the problem as described in the input and output specifications.