 Here is a Python3 solution for the problem:

```python
import sys

def is\_stack\_sortable(p):
n = len(p)
a = [0] * n
s = []

for i in range(n):
a[i] = p[i]

while a and s:
while a:
top = a.pop(0)
s.append(top)

while s:
top = s.pop()
if a and a[0] > top:
print("Not stack sortable")
return False
b.append(top)
a.pop(0)

return b == sorted(b)

def restore\_permutation(n, k, p):
# Create a list of remaining elements
remaining = [x for x in range(1, n+1)]
for i in range(k):
remaining.remove(p[i])

# Sort the remaining elements in non-increasing order
remaining.sort(reverse=True)

# Check if the remaining elements are stack sortable
for i in range(2, len(remaining) + 1):
if not is\_stack\_sortable(remaining[:i] + [0] * (n - i) + p[:k]):
return -1

# Return the lexicographically maximal permutation
return remaining + p[:k]

if __name__ == "__main__":
n, k = map(int, input().strip().split())
p = list(map(int, input().strip().split()))

if k == n:
print(" ".join(map(str, p)))
sys.exit(0)

permutation = restore\_permutation(n, k, p)

if permutation == -1:
print(-1)
else:
print(" ".join(map(str, permutation)))
```

The solution consists of two main functions: `is_stack_sortable` and `restore_permutation`. The `is_stack_sortable` function checks if a given permutation is stack sortable by simulating the stack operations and checking if the resulting array `b` is sorted in non-descending order. The `