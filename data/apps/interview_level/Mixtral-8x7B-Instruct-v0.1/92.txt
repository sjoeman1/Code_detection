 Here is a Python3 solution for the problem:

```python
import sys
input = sys.stdin.readline

def get_divisors_count(n):
    count = 0
    i = 1
    while i * i <= n:
        if n % i == 0:
            count += 1
            if i != n // i:
                count += 1
        i += 1
    return count

def main():
    a, b, c = map(int, input().strip().split())
    mod = 1073741824
    result = 0
    for i in range(1, a+1):
        for j in range(1, b+1):
            for k in range(1, c+1):
                result = (result + get_divisors_count(i * j * k)) % mod
    print(result)

if __name__ == '__main__':
    main()
```

The `get_divisors_count` function calculates the number of divisors of a given positive integer `n`. It uses an optimized algorithm that iterates only up to the square root of `n` instead of `n` itself.

The `main` function reads the input values of `a`, `b`, and `c`, calculates the required sum using three nested loops and the `get_divisors_count` function, and prints the result modulo `2^30`.