 Here is a Python3 solution for the problem:

```python
import math

def find_pythagorean_triple(n):
    for m in range(1, int(math.sqrt(n*n + 1)) + 1):
        if (n*n + m*m) % (2*n*m) == 0:
            k = (n*n + m*m) // (2*n*m)
            return m, k
    return -1

n = int(input())
result = find_pythagorean_triple(n)
print(*result)
```

The function `find_pythagorean_triple` takes an integer `n` as input and returns a Pythagorean triple containing `n` as one of its elements. If no such triple exists, it returns `-1`. The function iterates through possible values of `m` until it finds a Pythagorean triple or exhausts all possibilities. The triple is then returned as a tuple `(m, k)`.

The input is taken from the user using the `input` function and converted to an integer using the `int` function. The result of the function is then printed using the `print` function with the `*` operator to unpack the tuple.