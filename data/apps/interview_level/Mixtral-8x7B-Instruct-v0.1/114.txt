 Here is a Python3 solution for the problem:

```python
n, m = map(int, input().split())
a = [list(map(int, input().split())) for _ in range(n)]

# Initialize matrix B as all zeros
b = [[0]*m for _ in range(n)]

# Initialize the number of operations as -1, indicating that it is currently impossible to make matrices A and B equal
k = -1

# Check if it is possible to make matrices A and B equal
for i in range(n):
    for j in range(m):
        if a[i][j] == 1 and b[i][j] == 0:
            # If the current element of matrix A is 1 and the corresponding element of matrix B is 0, then we need to perform operations to make them equal
            if i+1 < n and j+1 < m and a[i+1][j] == 1 and a[i][j+1] == 1 and a[i+1][j+1] == 1 and b[i+1][j] == 0 and b[i][j+1] == 0 and b[i+1][j+1] == 0:
                # If the 2x2 submatrix around the current element can be made equal to the submatrix of matrix A, then perform the operations
                b[i][j] = 1
                b[i][j+1] = 1
                b[i+1][j] = 1
                b[i+1][j+1] = 1
                k = n*m - sum(sum(b, []))
                break
            else:
                # If it is not possible to make the submatrix equal to the submatrix of matrix A, then it is impossible to make matrices A and B equal
                k = -1
                break
        elif a[i][j] == 0 and b[i][j] == 1:
            # If the current element of matrix A is 0 and the corresponding element of matrix B is 1, then it is impossible to make matrices A and B equal
            k = -1
            break
    if k