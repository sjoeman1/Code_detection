 Here is one way to solve the problem:

* If `m` is 0, then the tallest tower will be made by stacking `n` two-block pieces on top of each other, for a height of `2*n`.
* If `n` is 0, then the tallest tower will be made by stacking `m` three-block pieces on top of each other, for a height of `3*m`.
* Otherwise, we can start by building the tallest tower with two-block pieces, which will have a height of `2*n`. We can then try to add one three-block piece on top of this tower, which will increase its height to `2*n + 3`. If this height is not already a multiple of 3, then we can add enough two-block pieces to make it a multiple of 3. This will ensure that the tallest tower is made up of a complete number of three-block pieces, without any gaps.

Here is some Python code that implements this approach:

```
n, m = map(int, input().split())

if m == 0:
    print(2 * n)
elif n == 0:
    print(3 * m)
else:
    # Start by building the tallest tower with two-block pieces
    height = 2 * n

    # Try to add one three-block piece on top
    height += 3

    # If the height is not a multiple of 3, add enough two-block pieces to make it one
    if height % 3 != 0:
        height += 3 - height % 3

    print(height)
```

This code should work correctly for the given examples:

* For the input `1 3`, it will print `9`.
* For the input `3 2`, it will print `8`.
* For the input `5 0`, it will print `10`.