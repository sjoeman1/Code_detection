 Here is a Python3 solution for the problem:

```python
def min\_days\_to\_read\_book(c, v0, v1, a, l):
if v0 + (c - v0) // a > v1:
return -1

days = 1
current\_page = v0
while current\_page < c:
days += 1
if current\_page + a > c:
	a = c - current\_page
if current\_page + a > v1:
	a = v1 - current\_page
current\_page += a
current\_page -= l
if current\_page < 0:
	current\_page = 0
return days

# Test cases
print(min\_days\_to\_read\_book(5, 5, 10, 5, 4)) # 1
print(min\_days\_to\_read\_book(12, 4, 12, 4, 1)) # 3
print(min\_days\_to\_read\_book(15, 1, 100, 0, 0)) # 15
```

The function `min_days_to_read_book` takes in the length of the book `c`, initial reading speed `v0`, maximum reading speed `v1`, acceleration in reading speed `a`, and number of pages for rereading `l`. It returns the minimum number of days needed for Mister B to finish the book.

The function first checks if the total number of pages that can be read with acceleration exceeds `v1`. If it does, then it returns -1, indicating that it's impossible to finish the book.

The function then initializes the number of days to 1 and the current page to `v0`. It then enters a while loop that continues until the current page is greater than or equal to `c`. In each iteration of the loop, the function increments the number of days by 1. It then calculates the number of pages that can be read in the current day, with a maximum of `v1`. If the calculated number of pages to be read is greater than `c`, it sets it to `c - current_page`. The current page is then updated to be the sum of the current page