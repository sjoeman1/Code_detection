
Here's the Python 3 code to solve this problem:

```py
# Read input
n, m = map(int, input().split())
graph = [[] for _ in range(n+1)]
for _ in range(m):
    u, v = map(int, input().split())
    graph[u].append(v)

# DFS
def dfs(u, visited, parent):
    visited[u] = True
    for v in graph[u]:
        if not visited[v]:
            if dfs(v, visited, u):
                return True
        elif v != parent:
            return True
    return False

# Check if there is a cycle
visited = [False] * (n+1)
for i in range(1, n+1):
    if not visited[i]:
        if dfs(i, visited, -1):
            print("YES")
            break
else:
    print("NO")
```

This code reads the input, builds a graph from the edges, and then uses a depth-first search (DFS) to determine if there is a cycle in the graph. If there is a cycle, the graph is not acyclic, and the code prints "YES". Otherwise, it prints "NO".