

Here's the Python 3 code that solves the problem:

```
def same_finger_movements(n, num):
    keypad = [
        ['1', '2', '3'],
        ['4', '5', '6'],
        ['7', '8', '9'],
        ['*', '0', '#']
    ]
    finger_movements = []
    for i in range(1, n):
        current_digit = num[i]
        previous_digit = num[i-1]
        current_position = (-1, -1)
        previous_position = (-1, -1)
        for j in range(len(keypad)):
            for k in range(len(keypad[j])):
                if current_digit == keypad[j][k]:
                    current_position = (j, k)
                if previous_digit == keypad[j][k]:
                    previous_position = (j, k)
        if current_position == (-1, -1) or previous_position == (-1, -1):
            continue
        finger_movements.append((current_position[0] - previous_position[0], current_position[1] - previous_position[1]))
    for movement in finger_movements:
        if movement not in finger_movements[1:]:
            return 'NO'
    return 'YES'


if __name__ == '__main__':
    n = int(input())
    num = input()
    print(same_finger_movements(n, num))
```

In this code, we first create a list called `keypad` that represents the keyboard of the phone. We then create an empty list called `finger_movements` to store the movements of the finger.

We iterate through the numbers in the phone number, starting from the second digit. For each digit, we find its position in the `keypad` list. We then calculate the difference between the current digit's position and the previous digit's position. This difference represents the finger movement. We add this movement to the `finger_movements` list.

Next, we iterate through the `finger_movements`