```python
import numpy as np

n, k = map(int, input().split())

if k > n * n:
    print(-1)
else:
    a = np.zeros((n, n))
    a[np.arange(k), np.arange(k)] = 1

    print(a)
```

**Explanation:**

* The code reads the input for n and k, and checks if k is greater than n*n. If it is, it prints -1.
* Otherwise, it creates a 2D array `a` of size `n`x`n` with all zeroes.
* It then allocates `k` ones in the diagonal of the matrix.
* Finally, it prints the matrix.

**Time complexity:**

* The code reads input in constant time.
* It creates a matrix in constant time.
* It allocates ones in the diagonal in constant time.
* Therefore, the overall time complexity is O(1).

**Space complexity:**

* The code uses an array of size `n`x`n`, so the space complexity is O(n^2).