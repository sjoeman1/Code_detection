```python
n = int(input())
a = list(map(int, input().split()))

# Calculate the prefix sum of the array
ps = []
ps.append(a[0])
for i in range(1, n):
    ps.append(ps[i-1] + a[i])

# Find the maximum number of blocks
k = 0
blocks = []
for i in range(n-1):
    for j in range(i+1, n):
        if ps[j] - ps[i] == sum(a[i:j+1]):
            blocks.append((i+1, j))
            k += 1

# Print the number of blocks and the blocks
print(k)
for l, r in blocks:
    print(l, r)
```

**Explanation:**

- The program calculates the prefix sum of the array to find the sum of each block easily.
- It then iterates over the array and finds the maximum number of blocks that satisfy the given constraints.
- For each block, the program stores the left and right indices in the `blocks` list.
- Finally, the program prints the number of blocks and the blocks.

**Time complexity:**

- The program iterates over the array only once, so the time complexity is O(n).

**Space complexity:**

- The program uses a constant amount of space, regardless of the size of the input.