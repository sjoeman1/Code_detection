```python
N = int(input())
W = list(map(int, input().split()))

W_sum = sum(W)
T = int(input())

S_1 = sum(W[:T])
S_2 = W_sum - S_1

min_diff = abs(S_1 - S_2)

for i in range(T, len(W)):
    S_1 += W[i]
    S_2 -= W[i]
    min_diff = min(min_diff, abs(S_1 - S_2))

print(min_diff)
```

**Explanation:**

1. Read the number of weights (N) and the weights (W) and calculate the total weight (W_sum).
2. Read the value of T, the index after which the weights are divided.
3. Calculate the sum of the first T weights (S_1) and the sum of the remaining weights (S_2).
4. Find the minimum absolute difference between S_1 and S_2 (min_diff).
5. Iterate over the remaining weights from T to the end and update S_1 and S_2. If the current difference is smaller than the minimum difference, update min_diff.
6. Finally, print min_diff.

**Time Complexity:**

- The code iterates over the weights only once, so the time complexity is O(N).

**Space Complexity:**

- The code uses a constant amount of space regardless of the input size, so the space complexity is O(1).