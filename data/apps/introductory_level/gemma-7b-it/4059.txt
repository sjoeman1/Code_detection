```python
import math

N = int(input())

# Calculate the square root of N
sqrt_N = int(math.sqrt(N))

# Initialize the count of tuples
count = 0

# Iterate over the square root of N
for a in range(1, sqrt_N + 1):
    # Calculate the value of B and C
    b = int((N - a) / a)
    # Check if the tuple is valid
    if a * b + c == N and a > b and c > 0:
        # Increment the count
        count += 1

# Print the count of tuples
print(count)
```

**Explanation:**

- We calculate the square root of N and iterate over the range from 1 to the square root.
- For each value of a, we calculate the values of b and c using the formula A \times B + C = N.
- We check if the tuple (a, b, c) is valid, meaning that a > b, c > 0, and a \times b + c = N.
- If the tuple is valid, we increment the count.
- Finally, we print the count of tuples.

**Time Complexity:**

- The time complexity of this algorithm is O(sqrt(N)).
- We iterate over the range from 1 to the square root of N only once.

**Space Complexity:**

- The space complexity of this algorithm is O(1).
- We use a constant amount of space regardless of the size of the input.