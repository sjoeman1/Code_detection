```python
n = int(input())
a = list(map(int, input().split()))

a.sort()
lcm_min = float('inf')
i, j = -1, -1

for i in range(len(a)):
    for j in range(i + 1, len(a)):
        lcm = a[i] * a[j] // gcda(a[i], a[j])
        if lcm_min > lcm:
            lcm_min = lcm
            i, j = i, j

print(i, j)

def gcda(x, y):
    if y % x == 0:
        return x
    else:
        return gcda(y % x, x)
```

**Explanation:**

* The algorithm first sorts the array $a$ in ascending order.
* Then, it iterates over the array and finds the pair of indices $i, j$ that minimizes the value of $lcm(a_i, a_j)$.
* The LCM (Least Common Multiple) of two numbers is calculated by multiplying the two numbers and dividing by their GCD (Greatest Common Denominator).
* The GCD is found using the Euclidean algorithm.
* The algorithm calculates the LCM for each pair of indices and keeps track of the pair that minimizes the LCM.
* Finally, the pair of indices that minimizes the LCM is printed.

**Time Complexity:**

* The algorithm iterates over the array only once, so the time complexity is O(n).

**Space Complexity:**

* The algorithm uses a constant amount of space, regardless of the size of the input.