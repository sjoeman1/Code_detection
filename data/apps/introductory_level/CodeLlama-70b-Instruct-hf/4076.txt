
Here's the Python 3 code to solve the problem:

```py
def solve(problems):
    n = len(problems)
    max_length = 0
    current_length = 1
    current_max = problems[0]
    for i in range(1, n):
        if problems[i] > current_max and problems[i] <= current_max * 2:
            current_length += 1
            current_max = problems[i]
        else:
            max_length = max(max_length, current_length)
            current_length = 1
            current_max = problems[i]
    max_length = max(max_length, current_length)
    return max_length

if __name__ == "__main__":
    n = int(input())
    problems = list(map(int, input().split()))
    result = solve(problems)
    print(result)
```

This code reads the input, solves the problem, and prints the result. The `solve` function iterates through the difficulties of the problems and keeps track of the current longest valid contest and its length. If a problem is valid, it adds it to the current contest and updates the current maximum difficulty. If a problem is not valid, it resets the current contest and starts a new one. The maximum length of the longest valid contest is updated as the iterations proceed. Finally, the maximum length is returned as the result.