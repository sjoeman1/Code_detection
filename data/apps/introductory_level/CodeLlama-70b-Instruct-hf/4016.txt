

Here is the Python 3 code to solve the question:

```python
# Input the values of n and m
n, m = map(int, input().split())

# Create an empty list to store the number of steps required
steps = []

# Function to find the minimum number of steps required to transform n to m
def find_steps(num, target):
    # If num is equal to target, return 0
    if num == target:
        return 0
    # Check if num is divisible by 2
    if num % 2 == 0:
        steps.append(find_steps(num // 2, target) + 1)
    # Check if num is divisible by 3
    if num % 3 == 0:
        steps.append(find_steps(num // 3, target) + 1)
    # Return the minimum number of steps
    return min(steps)

# Call the function to find the minimum number of steps
steps = find_steps(n, m)

# If steps is less than 0, print -1
if steps < 0:
    print(-1)
# If steps is greater than or equal to 0, print the number of steps
else:
    print(steps)
```

This code reads two numbers `n` and `m` from the input, and then calls the `find_steps` function to find the minimum number of steps required to transform `n` to `m`. The `find_steps` function recursively checks if `n` is divisible by 2 or 3, and if so, it adds 1 to the number of steps and recursively calls itself. If `n` is equal to `m`, it returns 0. If `n` is not divisible by 2 or 3, it returns -1. Finally, it prints the minimum number of steps or -1 if it is not possible to transform `n` to `m`.