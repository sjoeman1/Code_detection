
 Here is the Python 3 code to solve the problem:

```
def min_removal(arr):
    n = len(arr)
    arr.sort()

    # powers of 2
    power = [1]
    for i in range(1, 30):
        power.append(power[-1] * 2)

    # find all possible pairs of numbers in the array that sum up to a power of 2
    dp = [[0] * n for _ in range(n)]
    for i in range(n):
        for j in range(i + 1, n):
            if arr[j] - arr[i] in power:
                dp[i][j] = 1

    # find the maximum number of pairs of numbers that can be chosen
    # such that no two pairs share a common element
    ans = 0
    for i in range(n):
        for j in range(i + 1, n):
            if dp[i][j] == 1:
                for k in range(i - 1, -1, -1):
                    if dp[k][i] == 1:
                        break
                else:
                    ans += 1
                    break
                for k in range(j + 1, n):
                    if dp[j][k] == 1:
                        break
                else:
                    ans += 1
                    break

    # return the minimum number of elements to be removed
    return n - ans


n = int(input())
arr = list(map(int, input().split()))
print(min_removal(arr))
```

The function `min_removal` takes the array as input and returns the minimum number of elements to be removed from the array to make it good.

In the `min_removal` function, we first sort the array in ascending order. We then create a list `power` containing all the powers of 2 up to $2^{30}$.

Next, we initialize a 2D array `dp` of size $n \times n$ where `dp[i][j]` represents whether the pair of numbers `arr[i