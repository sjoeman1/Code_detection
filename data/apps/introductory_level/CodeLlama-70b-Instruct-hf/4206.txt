

Here's the Python 3 code for solving the problem:

```py
def getMaxDivisibleBy3(s):
    n = len(s)
    dp = [[0, 0] for _ in range(n + 1)]

    for i in range(1, n + 1):
        dp[i][0] = dp[i - 1][0]
        dp[i][1] = dp[i - 1][1] + int(s[i - 1])

        if dp[i][1] >= 3:
            dp[i][1] %= 3

    ans = 0

    for i in range(1, n + 1):
        if dp[i][0] == dp[i][1]:
            ans += 1

    return ans


if __name__ == '__main__':
    s = input()
    print(getMaxDivisibleBy3(s))
```

This code first calculates the sum of digits from left to right and then counts the number of substrings that have a sum divisible by 3. The sum of digits is stored in the dp array. If the sum of digits is divisible by 3, then the substring is also divisible by 3.

The time complexity of the algorithm is O(n) where n is the length of the input number.