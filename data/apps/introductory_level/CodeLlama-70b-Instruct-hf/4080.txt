

Here's the Python3 code for the given problem:

```
def climb_stairs(N, M, a):
    dp = [0] * (N + 1)
    dp[0] = 1
    for i in range(1, N + 1):
        if i - 1 in a:
            dp[i] = dp[i - 2]
        elif i - 2 in a:
            dp[i] = dp[i - 1]
        else:
            dp[i] = (dp[i - 1] + dp[i - 2]) % 1000000007
    return dp[N]


def main():
    N, M = map(int, input().split())
    a = [int(input()) for _ in range(M)]
    print(climb_stairs(N, M, a))


if __name__ == '__main__':
    main()
```

This code defines a function `climb_stairs` that takes three arguments: `N`, the number of steps in the staircase, `M`, the number of broken steps, and `a`, the list of broken steps. It initializes an array `dp` with zeros, with size `N + 1`. Then, it iterates from `1` to `N + 1`, where for each step `i`:

* If `i - 1` is in the list of broken steps, `dp[i]` is set to `dp[i - 2]` (only one step is possible).
* If `i - 2` is in the list of broken steps, `dp[i]` is set to `dp[i - 1]` (only two steps are possible).
* Otherwise, `dp[i]` is set to the sum of `dp[i - 1]` (one step) and `dp[i - 2]` (two steps), modulo 1000000007.

In the `main` function, it reads the input `N` and `M` from standard input, and then reads `M` lines of input into a list `a`. Then, it