 Here is a Python3 solution for the problem:

```python
import sys
from collections import defaultdict

def get_median(arr, l, r):
    mid = (l + r) // 2
    arr[l:r+1] = sorted(arr[l:r+1])
    if (r - l + 1) % 2 == 0:
        return (arr[mid] + arr[mid - 1]) / 2
    else:
        return arr[mid]

def count_pairs(n, m, arr):
    count = 0
    freq = defaultdict(int)
    for i in range(n + 1):
        freq[arr[i - 1]] += 1

    for i in range(1, n + 1):
        # if the current element is greater than m, then we can't form any pair
        if arr[i - 1] > m:
            break

        # if the current element is equal to m, then we can form a pair with any
        # element on its right
        if arr[i - 1] == m:
            count += (n - i + 1) * freq[m]
            continue

        # if the current element is less than m, then we can form a pair if there
        # is an element on its right which is greater than or equal to m
        j = i
        while j <= n and arr[j - 1] < m:
            j += 1

        # if j is less than or equal to n, then there is an element on the right
        # of i which is greater than or equal to m, and we can form a pair
        if j <= n:
            count += (n - j + 1) * freq[m]

        # update the frequency of elements less than the current element
        i_freq = 0
        while i <= n and arr[i - 1] < arr[i - 2]:
            i_freq += freq[arr[i - 1]]
            freq[arr[i - 1]] = 0
            i += 1
        freq[arr[i -