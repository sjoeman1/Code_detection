 Here is a Python3 solution using prefix sum and segment tree data structure. The idea is to keep track of the minimum number of extra elements needed to make the sum non-zero for each subarray. We can do this efficiently using a segment tree.

```python
import sys
input = sys.stdin.readline

def update(tree, node, start, end, idx, val):
    if start == idx and end == idx:
        tree[node] = val
    else:
        mid = (start + end) // 2
        if idx <= mid:
            update(tree, 2*node, start, mid, idx, val)
        else:
            update(tree, 2*node+1, mid+1, end, idx, val)
        tree[node] = min(tree[2*node], tree[2*node+1])

def query(tree, node, start, end, l, r):
    if l > end or r < start:
        return 10**9
    if l <= start and end <= r:
        return tree[node]
    mid = (start + end) // 2
    return min(query(tree, 2*node, start, mid, l, r), query(tree, 2*node+1, mid+1, end, l, r))

n = int(input().strip())
arr = list(map(int, input().strip().split()))

# Initialize segment tree with all elements as 0
tree = [0]*(4*n)

# Initialize prefix sum array
prefix = [0]
for a in arr:
    prefix.append(prefix[-1] + a)

# Initialize result variable
res = 0

# Iterate over the prefix sum array
for i in range(1, n+1):
    # Calculate the required number of extra elements to make the sum non-zero
    #