 Here is a Python3 solution using dynamic programming:
```python
mod = 10**9 + 7
def solve():
    n = int(input())
    dp = [[0] * 10 for _ in range(n)]
    for j in range(10):
        dp[0][j] = 1 if j != 1 and j != 5 else 0
    for i in range(1, n):
        for j in range(10):
            if j == 0:
                dp[i][j] = dp[i-1][9]
            elif j == 9:
                dp[i][j] = dp[i-1][0]
            else:
                dp[i][j] = (dp[i-1][j-1] + dp[i-1][j+1]) % mod
    print(sum(dp[n-1]) % mod)
solve()
```
Explanation:

* `dp[i][j]` represents the number of sequences of length `i` ending with digit `j` and satisfying the conditions.
* Initialize `dp[0][j]` to 1 if `j` is not 1 or 5, otherwise 0. This is because the sequence must contain both 0 and 9, and 1 and 5 cannot be part of such a sequence.
* For each `i` from 1 to `n-1`, calculate `dp[i][j]` for all `j` from 0 to 9 based on the values of `dp[i-1][j-1]` and `dp[i-1][j+1]`. This is because a sequence of length `i` ending with digit `j` can be obtained by appending digit `j` to a sequence of length `i-1` ending with digit `j-1` or `j+1`.
* The final answer is the sum of all elements in `dp[n-1]`, taken modulo `10^9 + 7`.