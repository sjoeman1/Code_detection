 Here is a Python3 solution for the problem:

```python
import sys
input = sys.stdin.readline

def solve():
    n = int(input())
    a = list(map(int, input().split()))
    inc = [1] * n
    dec = [1] * n
    for i in range(1, n):
        if a[i] > a[i - 1]:
            inc[i] = inc[i - 1] + 1
    for i in range(n - 2, -1, -1):
        if a[i] < a[i + 1]:
            dec[i] = dec[i + 1] + 1
    ans = max(inc[i] + dec[i] - 1 for i in range(n))
    res = ['?'] * ans
    i = j = 0
    for k in range(ans):
        if i < n and (j == n or inc[i] > dec[j]):
            res[k] = 'L'
            i += 1
        else:
            res[k] = 'R'
            j += 1
    print(ans)
    print(''.join(res))

t = int(input())
for _ in range(t):
    solve()
```

The solution uses two arrays `inc` and `dec` to store the length of the increasing and decreasing subsequences ending at each position, respectively. Then, for each position, it checks whether the increasing subsequence ending at that position is longer than the decreasing subsequence starting at the next position. If it is, then it takes the leftmost element, otherwise it takes the rightmost element. It keeps track of the current position in the `inc` and `dec` arrays using `i` and `j` respectively, and updates the answer array `res` accordingly. Finally, it prints the length of the longest increasing sequence and the corresponding sequence of moves.