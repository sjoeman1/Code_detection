 Here is a Python3 solution for the problem:
```python
n = int(input())
s = input()

# Initialize result with '0'
result = ['0'] * n

# Check if the string can be colored and sorted
can_sort = True
for i in range(1, n):
    if s[i] < s[i-1]:
        # If the current character is smaller than the previous one,
        # then they must have different colors.
        if i > 1 and s[i] == s[i-2]:
            # However, if the current character is the same as the
            # character before the previous one, then it is impossible
            # to color and sort the string.
            can_sort = False
            break
    elif s[i] > s[i-1] and result[i-1] == result[i-2]:
        # If the current character is greater than the previous one
        # and they have the same color, then it is impossible
        # to color and sort the string.
        can_sort = False
        break
    if can_sort:
        # If it is possible to color and sort the string,
        # update the result accordingly.
        if s[i] < s[i-1]:
            result[i-1], result[i] = '1', '0'
        elif s[i] > s[i-1] and result[i-1] != '1':
            result[i] = '1'

# Print the result
print('YES' if can_sort else 'NO')
print(''.join(result))
```
The solution first initializes the result string with all '0's. Then, it checks if the string can be colored and sorted by iterating through the characters of the string. If the current character is smaller than the previous one, then they must have different colors. If the current character is the same as the character before the previous one, then it is impossible to color and sort the string. If the current character is greater than the previous one and they have the same color, then it is impossible to color and sort the string. If it is possible to color and sort the string, the solution updates the result accordingly. Finally, the solution prints the