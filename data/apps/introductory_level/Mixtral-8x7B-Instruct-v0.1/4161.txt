 To solve this problem, we can use the following approach:

1. First, we generate all triplets (a, b, c) such that 1 ≤ a, b, c ≤ K.
2. For each triplet, we compute the greatest common divisor (gcd) of its elements.
3. Finally, we sum up all the gcd values.

Here's the Python3 code to solve the problem:

```python
import sys
from math import gcd

def compute_sum_gcd():
    K = int(sys.stdin.readline())
    total_sum = 0

    # Generate all triplets (a, b, c) such that 1 ≤ a, b, c ≤ K
    for a in range(1, K+1):
        for b in range(1, K+1):
            for c in range(1, K+1):
                # Compute the gcd of the triplet and add it to the total sum
                total_sum += gcd(gcd(a, b), c)

    print(total_sum)

compute_sum_gcd()
```

For the given input `2`, the output of the program will be `9`.

The time complexity of the program is O(K^3) since we generate all triplets (a, b, c) such that 1 ≤ a, b, c ≤ K, and for each triplet, we compute the gcd of its elements.

The space complexity of the program is O(1) since we use a constant amount of memory to store the variables `K` and `total_sum`.