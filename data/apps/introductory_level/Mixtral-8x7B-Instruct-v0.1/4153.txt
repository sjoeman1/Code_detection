 Here is a Python3 solution for the problem:

```python
def solve():
    S = input()
    # Initialize the number of removed cubes to 0
    removed = 0
    # Initialize a variable to keep track of the current color
    curr_color = S[0]
    # Iterate through the string
    for i in range(1, len(S)):
        # If the current color is different from the next color, increment the number of removed cubes
        if curr_color != S[i]:
            removed += 1
        # Update the current color
        curr_color = S[i]
    # The maximum number of removed cubes is the total number of cubes minus the number of times the color changes
    print(len(S) - removed)

# Call the function
solve()
```

The function `solve` takes a string `S` as input, representing the colors of the cubes from bottom to top. It initializes a variable `removed` to 0, which will keep track of the number of removed cubes. It also initializes a variable `curr_color` to the color of the first cube. Then, it iterates through the string, and if the current color is different from the next color, it increments the number of removed cubes. Finally, it prints the maximum number of removed cubes, which is the total number of cubes minus the number of times the color changes.

For example, if the input is `0011`, the function will first set `curr_color` to `0`. It will then iterate through the string, and when it reaches the third character, it will see that the current color is different from the next color, so it will increment `removed` to `1`. Then, when it reaches the end of the string, it will print `4 - 1 = 3`, which is the maximum number of cubes that can be removed. However, note that this is not the correct answer, as the correct answer is `4`. The mistake in the function is that it does not account for the fact that removing a pair of adjacent red and blue cubes will also remove the cube that is on top of the blue cube.

To fix this mistake, we can modify the function as follows:

``