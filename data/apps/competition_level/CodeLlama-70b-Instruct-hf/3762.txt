
```python
#This code solves the given question using Python3.

#Importing necessary libraries
from math import log2, floor

#Defining the function to calculate the required number of perfect sets
def number_of_perfect_sets(k):
    #Initializing the answer variable
    answer = 0
    
    #Iterating over all possible set sizes
    for set_size in range(1, floor(log2(k)) + 1):
        #Checking if the current set size is a power of 2
        if set_size & (set_size - 1) == 0:
            #If the set size is a power of 2, we can create 2^(set_size - 1) perfect sets
            answer += (1 << (set_size - 1))
        #Otherwise, we can create 2^(set_size - 1) - 1 perfect sets
        else:
            answer += (1 << (set_size - 1)) - 1
    
    #Returning the answer modulo 1000000007 (10^9 + 7)
    return answer % 1000000007

#Taking the input for k
k = int(input())

#Printing the required number of perfect sets
print(number_of_perfect_sets(k))
```

This code first calculates the floor of the log base 2 of k to determine the maximum size of a perfect set that can be created. It then iterates over all possible set sizes from 1 to this maximum size.

For each set size, it checks if the set size is a power of 2. If it is, it calculates the number of perfect sets that can be created with that size using the formula 2^(set_size - 1). If the set size is not a power of 2, it calculates the number of perfect sets that can be created with that size using the formula 2^(set_size - 1) - 1.

Finally, it returns the sum of all these numbers modulo 1000000007 (10^9 + 7).