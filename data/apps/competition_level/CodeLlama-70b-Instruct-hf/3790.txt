

Here is the Python3 code for the given problem:

```
n, T = input().split()
n, T = int(n), int(T)
a = list(map(int, input().split()))

def find_longest_non_decreasing_subsequence(a):
    lis = [1] * len(a)
    for i in range(1, len(a)):
        for j in range(i):
            if a[i] >= a[j] and lis[i] < lis[j] + 1:
                lis[i] = lis[j] + 1
    return max(lis)

result = find_longest_non_decreasing_subsequence(a)
print(result * T + n)
```

This code takes input n and T on the first line and the array a on the second line. It then uses the `find_longest_non_decreasing_subsequence` function to find the length of the longest non-decreasing subsequence in the array. The function uses dynamic programming to find the longest increasing subsequence. It then multiplies the result by T and adds n to account for the cyclic repetition. Finally, it prints the result.