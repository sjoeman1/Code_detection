

 Here is a Python 3 code that solves the problem:
```py
import sys
from collections import defaultdict

# Find the parent of a vertex in a union find data structure.
def find_parent(parent, vertex):
    if parent[vertex] == vertex:
        return vertex
    parent[vertex] = find_parent(parent, parent[vertex])
    return parent[vertex]

# Perform a union operation to merge two connected components in a union find data structure.
def union(parent, rank, vertex_1, vertex_2):
    parent_1 = find_parent(parent, vertex_1)
    parent_2 = find_parent(parent, vertex_2)
    if parent_1 == parent_2:
        return
    if rank[parent_1] < rank[parent_2]:
        parent[parent_1] = parent_2
    elif rank[parent_1] > rank[parent_2]:
        parent[parent_2] = parent_1
    else:
        parent[parent_1] = parent_2
        rank[parent_2] += 1

# Read input from stdin.
N, M = map(int, input().split())
A = list(map(int, input().split()))
B = list(map(int, input().split()))
edges = []
for _ in range(M):
    U, V = map(int, input().split())
    edges.append((U, V))

# Initialize the union find data structure.
parent = [i for i in range(N + 1)]
rank = [0] * (N + 1)

# Build the union find data structure by adding edges.
for edge in edges:
    union(parent, rank, edge[0], edge[1])

# Find the connected components and calculate their scores.
components = defaultdict(list)
for i in range(1, N + 1):
    components[find_parent(parent, i)].append(i)

scores = []
for component in components.values():
    score = 0
    for vertex in component:
        score += B[vertex - 1]
    scores.append(abs