

Here is the Python 3 code to solve the question:

```
import sys

def mex(x, y):
    if x == 0 and y == 0:
        return 1
    elif x == 0 and y == 1:
        return 2
    elif x == 1 and y == 0:
        return 2
    elif x == 1 and y == 1:
        return 0
    elif x == 2 and y == 0:
        return 1
    elif x == 2 and y == 1:
        return 0

def solve(N, input_matrix):
    matrix = [[0 for _ in range(N)] for _ in range(N)]
    matrix[0] = input_matrix[0]
    for i in range(1, N):
        matrix[i][0] = input_matrix[i][0]

    for i in range(1, N):
        for j in range(1, N):
            matrix[i][j] = mex(matrix[i-1][j], matrix[i][j-1])

    count_0 = 0
    count_1 = 0
    count_2 = 0
    for row in matrix:
        for element in row:
            if element == 0:
                count_0 += 1
            elif element == 1:
                count_1 += 1
            elif element == 2:
                count_2 += 1

    return (count_0, count_1, count_2)

if __name__ == '__main__':
    N = int(input())
    input_matrix = []
    for _ in range(N):
        input_matrix.append([int(x) for x in input().split()])
    result = solve(N, input_matrix)
    print(*result)
```

This code defines a function `mex` that calculates the minimum excluded value. It then defines a function `solve` that reads the input matrix, calculates the values for the remaining entries, and counts the occurrences of 0, 1, and 2 in the matrix. Finally, it prints the count of 0,