

 Here is the Python3 code that solves the problem:

```python
def solve(n):
    total = 2**(n**2)
    # The number of binary relations over a set of size n is 2^(n^2)
    reflexive = 2**(n*(n-1))
    # The number of reflexive binary relations over a set of size n is 2^(n(n-1))
    return (total - reflexive) % (10**9 + 7)

n = int(input())
print(solve(n))
```

This code defines a function `solve(n)` that calculates the number of binary relations over a set of size `n` that are symmetric, transitive, but not reflexive. It first calculates the total number of binary relations over a set of size `n`, which is `2^(n^2)`. Then, it calculates the number of reflexive binary relations over a set of size `n`, which is `2^(n(n-1))`. Finally, it subtracts the number of reflexive binary relations from the total number of binary relations to get the number of non-reflexive binary relations. It then takes the remainder of this number divided by `10^9 + 7` and returns it.

The code then takes an input `n` and prints the result of the `solve(n)` function.

Note: This code assumes that the input `n` is an integer between 1 and 4000, as specified in the problem statement.