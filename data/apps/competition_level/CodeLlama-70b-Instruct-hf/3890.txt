

Here is the Python3 code that solves the question:

```python
#!/usr/bin/python3

def mod_exp(base, exponent, modulus):
    result = 1
    while exponent > 0:
        if exponent % 2 == 1:
            result = (result * base) % modulus
        exponent = exponent // 2
        base = (base * base) % modulus
    return result

def gcd(a, b):
    if b == 0:
        return a
    else:
        return gcd(b, a % b)

def mod_inverse(a, m):
    if gcd(a, m) != 1:
        return None
    else:
        return mod_exp(a, m - 2, m)

def count_ways(n, k):
    mod = 1000000007
    ans = 0
    for i in range(1, k + 1):
        ans += (mod_exp(i, n - 1, mod) - 1) * mod_inverse(i - 1, mod)
        ans %= mod
    return ans

if __name__ == "__main__":
    n, k = map(int, input().split())
    print(count_ways(n, k))
```



This code reads two integers `n` and `k` from standard input, representing the number of houses and the number `k` from the problem statement.

It then calls the `count_ways` function to count the number of ways to write the plaques so that the penguin can walk to house number 1 from any house indexed from 1 to k, inclusive, and cannot walk to house number 1 from any house indexed from k + 1 to n, inclusive.

The `count_ways` function uses modular exponentiation and modular inversion to calculate the number of ways. It iterates over each possible value of the plaque of house number 1 from 1 to k, inclusive, and calculates the number of ways to write the plaques such that the penguin can walk to house number 1 from the starting house with the given value