
Here is the Python 3 code for the problem:

```
from collections import defaultdict
import math

def pow_mod(x, y, p):
    res = 1
    while y > 0:
        if y & 1:
            res = (res * x) % p
        y = y >> 1
        x = (x * x) % p
    return res

def fact(n, p):
    res = 1
    for i in range(1, n + 1):
        res = (res * i) % p
    return res

def inv(x, p):
    return pow_mod(x, p - 2, p)

def nCr(n, r, p):
    if r > n - r:
        r = n - r
    if r == 0:
        return 1
    if r == 1:
        return n
    num = den = 1
    for i in range(r):
        num = (num * (n - i)) % p
        den = (den * (i + 1)) % p
    return (num * inv(den, p)) % p

def solve(n, m):
    if n == 0:
        return 1
    if n == 1:
        return 2
    if n == 2:
        return 4
    if n == 3:
        return 6
    if n == 4:
        return 3
    if n == 5:
        return 12
    if n == 6:
        return 48
    if n == 7:
        return 192
    if n == 8:
        return 768
    if n == 9:
        return 3072
    if n == 10:
        return 12288
    if n == 11:
        return 49152
    if n == 12:
        return 196608
    if n == 13:
        return 786432
    if n == 14:
        return 31