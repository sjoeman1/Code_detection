 Here is a Python3 code that solves the problem:

```python
def inv(a, m):
    b0 = 1
    b1 = 0
    x0 = 0
    x1 = 1
    while a != 1:
        q = a // m
        a, m = m, a % m
        b0, b1 = b1, b0 - q * b1
        x0, x1 = x1, x0 - q * x1
    if b1 < 0:
        b1 += m
    return b1

def poly_div(A, B):
    a = A
    b = B
    r = [0] * len(a)
    for i in range(len(a) - 1, -1, -1):
        r[i - len(b) + 1:i + 1] = [a[i] - r[i] // b[len(b) - 1] * b[i]]
    return r

def gcd(A, B):
    if not B:
        return A
    return gcd(B, poly_div(A, B))

def solve(n):
    if n % 2 == 0:
        return -1
    m = (n + 1) // 2
    a = [1] + [0] * m
    b = [1] + [0] * m + [-1]
    x = inv(b[m], 2) % 2
    b[m] = x
    for i in range(m - 1, 0, -1):
        b[i] = (x * b[i + 1] + 1) % 2
    return m, a, b

n = int(input())
m, a, b = solve(n)
if m == -1:
    print(-1)
else:
    print(m)
    print(*a)
    print(m - 1)
    print(*b)
```

The `inv` function computes the modular inverse of `a` modulo `m`. The `poly_div` function computes the