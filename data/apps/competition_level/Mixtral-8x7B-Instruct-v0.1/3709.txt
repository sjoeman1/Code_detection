 Here is a Python3 solution for the problem:

```python
def is_interesting_problemset_possible(n, k, known_problems):
    for i in range(1, (1 << n)):
        # Count the number of teams that know at least half of the selected problems
        team_count = sum(sum(p & i for p in row) >= (1 << (n - 1)) for row in known_problems)
        if team_count <= k // 2:
            return True
    return False

n, k = map(int, input().split())
known_problems = [list(map(int, input().split())) for _ in range(n)]

if is_interesting_problemset_possible(n, k, known_problems):
    print("YES")
else:
    print("NO")
```

This solution uses a brute force approach to iterate over all possible non-empty subsets of problems and checks if at most half of the teams know at least half of the selected problems. If such a subset is found, it returns `True`, otherwise it returns `False`. The function `is_interesting_problemset_possible` takes the number of problems `n`, the number of teams `k`, and a 2D list `known_problems` as input, where each row represents the known problems for a team.

The time complexity of this solution is `O(2^n * n * k)`, which may be slow for large inputs. A more efficient solution would be to use a dynamic programming approach to reduce the time complexity to `O(n * k * 2^n)`. However, the given input constraints are small enough that this brute force solution should work fine.