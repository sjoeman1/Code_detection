 Here is a Python3 solution for the problem:

```python
import sys
from collections import defaultdict

def read_data():
    n, m = map(int, sys.stdin.readline().split())
    edges = defaultdict(set)
    for _ in range(m):
        u, v = map(int, sys.stdin.readline().split())
        edges[u - 1].add(v - 1)
        edges[v - 1].add(u - 1)
    return n, edges

def solve(n, edges):
    if n == 1:
        return "Yes", "a"

    if n % 2 == 0:
        return "No"

    for i in range(n):
        if len(edges[i]) not in (1, n - 1):
            return "No"

    first_letters = set()
    for i in range(n):
        if len(edges[i]) == 1:
            first_letters.add(i)

    if len(first_letters) != 2:
        return "No"

    start, end = first_letters
    path = ['a'] * n
    path[start] = 'b'
    path[end] = 'c'

    for i in range(n - 1):
        if i != start and i != end and path[i] == path[i + 1]:
            return "No"

    for i in range(n - 1):
        if i in edges[i + 1]:
            continue

        if path[i] == 'a' and path[i + 1] == 'c':
            return "No"

        path[i], path[i + 1] = path[i + 1], path[i]

    return "Yes", ''.join(path)

def main():
    n, edges = read_data()
    ans, string = solve(n, edges)
    print(ans)
    if ans == "Yes":
        print(string)

if __name__ == "__main__":
    main()
