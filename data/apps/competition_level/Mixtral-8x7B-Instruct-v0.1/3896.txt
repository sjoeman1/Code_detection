 Here is a Python3 solution for the problem:

```python
def power(x, y, p):
    res = 1
    x = x % p
    while (y > 0):
        if (y & 1):
            res = (res * x) % p
        y = y >> 1
        x = (x * x) % p
    return res

def get_complexity(x):
    n = len(bin(int(x, 2))) - 2
    count = 0
    for i in range(2**n):
        diff = i ^ int(x, 2)
        temp = min(i, diff)
        count = (count + power(2, temp & (n - 1), 1000000007)) % 1000000007
    return count

if __name__ == '__main__':
    x = input()
    print(get_complexity(x))
```

The function `power` calculates `x^y % p` using modular exponentiation.

The function `get_complexity` calculates the complexity of the dance assignment. It first finds the length of the binary number `x` and initializes a counter variable `count` to 0. Then, it iterates over all possible values of `i` from 0 to 2^n - 1 and calculates the XOR of `i` and `x` to get `diff`. It then finds the minimum of `i` and `diff` and calculates `2^(temp & (n - 1)) % 1000000007` where `temp` is the minimum value found. The result is then added to the `count` variable and the final result is obtained by taking the modulo of the `count` variable with `1000000007`.

The main function reads the input `x` and calls the `get_complexity` function with `x` as the argument and prints the result.