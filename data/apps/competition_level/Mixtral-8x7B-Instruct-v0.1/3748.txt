 Here is a Python3 solution for the problem:

```python
H, W = map(int, input().split())

grids = []
for i in range(H):
    grids.append(input())

if H % 2 == 1:
    # If H is odd, it's impossible to make the grid symmetric
    print("NO")
else:
    # Check if the grid is already symmetric
    for i in range(H):
        for j in range(W):
            if grids[i][j] != grids[H-1-i][W-1-j]:
                # If there's a mismatch, try to make it symmetric by swapping columns
                for k in range(W):
                    if grids[i][k] == grids[H-1-i][W-1-k]:
                        # If the corresponding cells in the mirrored rows are the same,
                        # swap the columns to make the grid symmetric
                        grids[i][j], grids[i][k] = grids[i][k], grids[i][j]
                        grids[H-1-i][W-1-j], grids[H-1-i][W-1-k] = grids[H-1-i][W-1-k], grids[H-1-i][W-1-j]
                else:
                    # If there's no corresponding cell in the mirrored rows that matches,
                    # the grid can't be made symmetric
                    print("NO")
                    break
        else:
            # If all cells in the row have been checked and the grid is still symmetric,
            # continue checking the next row
            continue
        break
    else:
        # If all rows and columns have been checked and the grid is still symmetric,
        # it's possible to make the grid symmetric
        print("YES")
```

The solution first checks if H is odd, in which case it's impossible to make the grid symmetric. Then, it checks if the grid is already symmetric by comparing corresponding cells in the mirrored rows and columns. If there's a mismatch, it tries