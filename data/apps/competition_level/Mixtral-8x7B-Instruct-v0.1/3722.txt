 Here is a Python3 solution for the problem:

```python
mod = 10**9 + 7
N, ca, cb, ca_ba, cbb = map(str, input().split())
N = int(N)

# Initialize the table with the base case
dp = [[0, 0] for _ in range(N+1)]
dp[2] = [1, 1]

# Iterate over the string length
for i in range(2, N+1):
    # Calculate the new table entries
    dp[i][0] = (dp[i-1][0] + dp[i-2][1] if i >= 2 else 0) % mod
    dp[i][1] = (dp[i-1][1] + dp[i-2][0] if i >= 2 else 0) % mod

    # If the current character is A, update the table based on ca and ca_ba
    if i >= 3 and s[i-3] == 'A':
        dp[i][0] = (dp[i][0] + dp[i-3][1] * (ord(ca) - ord('A')) % mod) % mod
        dp[i][1] = (dp[i][1] + dp[i-3][0] * (ord(ca_ba) - ord('A')) % mod) % mod

    # If the current character is B, update the table based on cb and cbb
    if i >= 3 and s[i-3] == 'B':
        dp[i][0] = (dp[i][0] + dp[i-3][1] * (ord(cb) - ord('A')) % mod) % mod
        dp[i][1] = (dp[i][1] + dp[i-3][0] * (ord(cbb) - ord('A')) % mod) % mod

# The answer is the sum of the last row
print((dp[N][0] + dp[N][1]) % mod)
```

The idea is to use dynamic programming to keep track of the number of strings of each type (i.e. ending in A or B) for each