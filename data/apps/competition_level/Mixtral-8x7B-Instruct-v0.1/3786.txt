 Here is a Python3 solution for the problem:

```python
def count\_apples(n, p):
apples = [0]*n
for i in range(1, n):
apples[p[i]-1] += 1
apples[0] = 1
for i in range(1, n):
if apples[i] > 0 and apples[p[i]-1] > 0:
apples[p[i]-1] -= 1
return sum(apples)

n = int(input())
p = list(map(int, input().split()))
print(count\_apples(n, p))
```

The solution uses a simple dynamic programming approach. We initialize an array `apples` of size `n` to keep track of the number of apples at each inflorescence. The first inflorescence always has one apple, so we set `apples[0]` to 1. Then, we iterate through the remaining inflorescences and add the number of apples that roll down to each inflorescence. If there are two apples at an inflorescence, they will annihilate each other, so we subtract one from the number of apples at the inflorescence that the apple rolls down to.

Finally, we return the sum of the number of apples at all inflorescences, which is the number of apples that Arcady will be able to collect.