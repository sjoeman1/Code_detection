 Here is a Python3 solution for the problem:

```python
def find_cube_vertices(points):
    # Check if the points form a cube
    if len(points) != 8:
        return "NO"

    unique_points = set(points)
    if len(unique_points) != 8:
        return "NO"

    # Check if the points are corners of a cube
    for point in unique_points:
        if not all(abs(x - y) in (0, 1) for x, y in point):
            return "NO"

    # Check if there are multiple points at the same position
    if len(unique_points) < 8:
        return "NO"

    # Check if the points are connected by edges
    edges = [
        (points[0], points[1]),
        (points[1], points[2]),
        (points[2], points[3]),
        (points[0], points[4]),
        (points[4], points[5]),
        (points[5], points[6]),
        (points[6], points[7]),
        (points[4], points[0]),
        (points[5], points[4]),
        (points[6], points[5]),
        (points[7], points[6]),
    ]
    for edge in edges:
        if edge not in unique_points:
            return "NO"

    # If all checks pass, return the points in a consistent order
    points.sort()
    return "\n".join(" ".join(map(str, point)) for point in points) + "\nYES"


if __name__ == "__main__":
    points = []
    for _ in range(8):
        x, y, z = map(int, input().split())
        points.append((x, y, z))

    print(find_cube_vertices(points))
```

This solution first checks if the input points form a cube by checking if there are 8 unique points, if the points are corners of a cube, if there are multiple points at the same position, and if the points are connected by edges.