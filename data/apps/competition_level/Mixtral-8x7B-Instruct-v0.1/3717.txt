 Here is a Python3 solution for the problem:

```python
n = int(input().strip())
rectangles = []
for _ in range(n):
    x1, y1, x2, y2 = map(int, input().strip().split())
    rectangles.append(((x1, y1), (x2, y2)))

# sort the rectangles based on their bottom-left and top-right corners
rectangles.sort(key=lambda x: (x[0][0], x[0][1], x[1][0], x[1][1]))

# initialize the result point with the minimum x and y coordinates
result_x, result_y = rectangles[0][0][0], rectangles[0][0][1]

# keep track of the number of rectangles that contain the result point
rect_count = 1

# iterate through the sorted rectangles
for i in range(1, n):
    # get the current rectangle
    rect = rectangles[i]

    # if the bottom-left corner of the current rectangle is to the right or above the result point
    if rect[0][0] > result_x or rect[0][1] >= result_y:
        # if the top-right corner of the current rectangle is to the left or below the result point
        if rect[1][0] <= result_x or rect[1][1] < result_y:
            # the result point is not inside the current rectangle
            rect_count -= 1
            result_x, result_y = rect[0][0], rect[0][1]

    # if the top-right corner of the current rectangle is to the right or above the result point
    if rect[1][0] > result_x or rect[1][1] >= result_y:
        # the result point is inside the current rectangle
        rect_count += 1

# the result point should belong to at least (n-1) rectangles
assert rect_count >= n-1

print(result_x, result_y)
```

The solution first sorts the rectangles based on their bottom-left and top-right corners, and then iterates through the sorted rectangles.