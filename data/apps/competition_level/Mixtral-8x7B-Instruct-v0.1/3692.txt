 To solve this problem, we can use a mathematical approach based on the principle of inclusion and exclusion. The number of regions formed by circles on a plane can be calculated using the formula:

Number of regions = (n*(n-1))/2 + 1 - sum(k\_i)

where n is the number of circles and k\_i is the number of circles that intersect with circle i.

Here's the Python3 code to calculate the number of regions:

```python
import sys
from collections import defaultdict
from math import sqrt

input = sys.stdin.readline

def distance(x1, y1, x2, y2):
    return sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)

def solve():
    n = int(input())
    circles = []
    for _ in range(n):
        x, y, r = map(int, input().split())
        circles.append((x, y, r))

    # Calculate the pairwise distances between circles
    distances = [[distance(circles[i][0], circles[i][1], circles[j][0], circles[j][1]) for j in range(i + 1, n)] for i in range(n)]

    # Count the number of circles that intersect with each circle
    k = [0] * n
    for i in range(n):
        for j in range(i + 1, n):
            if abs(distances[i][j] - circles[i][2] - circles[j][2]) <= 1e-8:
                k[i] += 1
                k[j] += 1

    # Calculate the number of regions
    result = (n * (n - 1)) // 2 + 1
    for i in k:
        result -= i

    print(result)

if __name__ == "__main__":
    solve()
```

This code reads the number of circles and their centers and radii as input, calculates the pairwise distances between circles, and counts the number of circles that intersect with each circle. Finally, it calculates and prints the number