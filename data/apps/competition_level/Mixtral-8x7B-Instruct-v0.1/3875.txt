 Here is a Python3 solution for the problem:

```python
import sys
input = sys.stdin.buffer.readline

mod = 1000000007

def f(n, A):
    dp = [0] * (n + 1)
    for i in range(n):
        dp[i + 1] = max(dp[i + 1], dp[j] + 1 for j in range(i) if A[j] < A[i])
    return sum(dp) * (n - 1) % mod

N = int(input())
A = list(map(int, input().split()))
print(f(N, A) * pow(N, mod - 2, mod) % mod)
```

The function `f(n, A)` computes the sum of the lengths of the longest increasing subsequences for all sequences `X` that can be obtained by the given constraints. The sum is then multiplied by `(n-1)^(-1)` (modulo `mod`) to get the expected value.

The time complexity of the solution is `O(n^2)`.