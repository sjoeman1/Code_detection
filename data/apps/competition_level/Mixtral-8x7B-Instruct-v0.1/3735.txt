 Here is a Python3 solution that should work for the problem you described. The basic idea is to compute the sum of digits for each number from `n` down to `0`, keeping track of the largest sum of digits we've seen so far where the two numbers add up to `n`.

```python
def sum_of_digits(n):
    return sum(int(digit) for digit in str(n))

def largest_sum_of_digits(n):
    largest_sum, current_sum = 0, 0
    for a in range(n + 1):
        b = n - a
        current_sum = sum_of_digits(a) + sum_of_digits(b)
        largest_sum = max(largest_sum, current_sum)
    return largest_sum

# Test the function
print(largest_sum_of_digits(35))  # Output: 17
print(largest_sum_of_digits(10000000000))  # Output: 91
```

This solution should work for the given problem, but note that it has a time complexity of O(n^2), which could be slow for very large inputs (up to 10^12). If you need a more efficient solution, you could consider using dynamic programming to compute the sum of digits for each number in the range from `n` to `0` in a more efficient way.