 Here is a Python3 solution using dynamic programming to solve the problem:
```python
import sys
input = sys.stdin.readline

MOD = 998244353
N = int(input().strip())
d = list(map(int, input().strip().split()))

# Initialize dp array with all values set to 0
dp = [[0] * (sum(d) + 1) for _ in range(N + 1)]

# Base case: connecting two parts with no holes
dp[1][0] = 1

# Iterate over each part
for i in range(1, N):
    # Iterate over each possible number of holes filled
    for j in range(sum(d[:i]) + 1):
        # Iterate over each possible hole to add a component to
        for k in range(d[i]):
            # Calculate number of ways to fill the remaining holes
            #