 Here is a Python3 solution using dynamic programming to solve the problem:

```python
mod = 1000000007

def power(x, y):
    if y == 0:
        return 1
    res = 1
    while y > 0:
        if y % 2:
            res = (res * x) % mod
            y -= 1
        else:
            x = (x * x) % mod
            y //= 2
    return res

def subset_cost(n, k):
    dp = [0] * (n + 1)
    dp[0] = 1
    for i in range(1, n + 1):
        dp[i] = dp[i - 1]
        for j in range(i):
            dp[i] = (dp[i] + (power(j, k) * dp[i - j - 1]) % mod) % mod
    return dp[n]

N, k = map(int, input().split())
print(subset_cost(N, k))
```

The function `power` calculates `x^y` using modular exponentiation. The function `subset_cost` calculates the sum of costs for all non-empty subsets of people. It uses dynamic programming with an array `dp` where `dp[i]` is the sum of costs for all non-empty subsets of the first `i` people.

The time complexity of this solution is `O(n^2)` and the space complexity is `O(n)`.