 Here is one way to solve the problem using Python3. The idea is to keep track of the minimum and maximum car numbers that are currently out of place. In each step, we teleport the car with the minimum number greater than the current maximum or the maximum number less than the current minimum to the end of the train. This way, we reduce the range of out-of-place car numbers, and eventually sort the entire train.

```python
n = int(input())
p = list(map(int, input().split()))

min_num, max_num = 1, n
moves = 0

while min_num <= max_num:
    if p[0] != min_num:
        p.append(p.pop(0))
        moves += 1
    else:
        min_num += 1

    if len(p) > 1 and p[-1] != max_num:
        p.insert(0, p.pop())
        moves += 1
    else:
        max_num -= 1

print(moves)
```

This code works by repeatedly swapping the first and last elements of the list if they are out of place, until the minimum number in the list is equal to its expected position. Then, it moves on to the next larger number, and repeats the process until all numbers are in their expected positions. The total number of moves is then printed out.

Note that this code assumes that the input is well-formed and contains only distinct integers between 1 and n. If this is not the case, additional error checking may be necessary.