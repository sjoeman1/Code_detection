```python
import numpy as np

n = int(input())

circles = []
for _ in range(n):
    x, y, r = map(int, input().split())
    circles.append((x, y, r))

# Create a grid of points
x, y = np.meshgrid(np.linspace(-10, 10, 100), np.linspace(-10, 10, 100))

# Calculate the distance from each point to each center
distances = np.sqrt(np.sum((x - circles[0][0])**2 + (y - circles[0][1])**2) < circles[0][2]

# Count the number of regions
num_regions = np.sum(np.unique(distances).size) - 1

print(num_regions)
```

**Explanation:**

* The code reads the number of circles, the center coordinates, and the radius of each circle.
* It creates a 2D array of points and calculates the distance from each point to each center.
* The code finds the unique distances and counts the number of regions.
* Subtracting 1 from the number of unique distances accounts for the infinite region.
* Finally, the number of regions is printed.

**Time Complexity:**

* The code calculates the distance from each point to each center, so the time complexity is O(n) where n is the number of points.
* The code finds the unique distances, so the time complexity is O(n) where n is the number of unique distances.

**Space Complexity:**

* The code uses a 2D array of points, so the space complexity is O(n) where n is the number of points.