```python
import sys

n, m, q = map(int, sys.stdin.readline().split())

samples = []
for _ in range(q):
    r, c = map(int, sys.stdin.readline().split())
    samples.append((r, c))

# Create a map to store the elements that have already been sampled
sampled_elements = set(samples)

# Calculate the minimum number of elements to purchase
min_purchase = 0
for r in range(1, n + 1):
    for c in range(1, m + 1):
        if (r, c) not in sampled_elements:
            min_purchase += 1

print(min_purchase)
```

**Explanation:**

* The code reads the input data including the dimensions of the periodic table, the number of elements already sampled, and the coordinates of each sampled element.
* It creates a set `sampled_elements` to store the coordinates of the sampled elements.
* The code iterates over the rows and columns of the periodic table to find the elements that have not been sampled.
* The number of elements to be purchased is added to the minimum purchase count if they are not sampled.
* Finally, the minimum purchase count is printed.

**Time complexity:**

* The code iterates over the entire periodic table only once, so the time complexity is O(n*m).

**Space complexity:**

* The code uses a set to store the sampled elements, which has a space complexity of O(n*m).