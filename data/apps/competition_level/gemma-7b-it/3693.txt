```python
import numpy as np

# Read input data
line1 = np.array([int(x) for x in input().split()])
line2 = np.array([int(x) for x in input().split()])

# Create two squares
square1 = np.array([[line1[0], line1[1]], [line1[2], line1[3]], [[line1[4], line1[5]], [line1[6], line1[7]]])
square2 = np.array([[line2[0], line2[1]], [line2[2], line2[3]], [[line2[4], line2[5]], [line2[6], line2[7]]])

# Check if squares intersect
intersect = np.bool_(np.intersect1(square1, square2).size)

# Print output
print("Yes" if intersect else "No")
```

**Explanation:**

1. Read the input data and create two arrays `square1` and `square2` to represent the two squares.
2. Use the `np.intersect1()` function to find the intersection of the two squares.
3. If the intersection is non-empty, it means the squares intersect, and we print "Yes". Otherwise, print "No".

**Time Complexity:**

- The code reads two lines of input, so the time complexity is O(2).
- The `np.intersect1()` function has a time complexity of O(n) where n is the number of points in the intersection.

**Space Complexity:**

- The code uses a small amount of additional memory for the arrays `square1`, `square2`, and the intermediate array used by `np.intersect1()`. The space complexity is O(n) where n is the number of points in the two squares.